(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var RateLimiter = Package['rate-limit'].RateLimiter;
var WebApp = Package.webapp.WebApp;
var WebAppInternals = Package.webapp.WebAppInternals;
var main = Package.webapp.main;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var Accounts = Package['accounts-base'].Accounts;
var ECMAScript = Package.ecmascript.ECMAScript;
var Random = Package.random.Random;
var check = Package.check.check;
var Match = Package.check.Match;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;
var MongoInternals = Package.mongo.MongoInternals;
var Mongo = Package.mongo.Mongo;
var OAuth = Package.oauth.OAuth;
var Oauth = Package.oauth.Oauth;
var CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;
var meteorInstall = Package.modules.meteorInstall;
var Streamer = Package['rocketchat:streamer'].Streamer;
var Logger = Package['rocketchat:logger'].Logger;
var SystemLogger = Package['rocketchat:logger'].SystemLogger;
var LoggerManager = Package['rocketchat:logger'].LoggerManager;
var CustomOAuth = Package['rocketchat:custom-oauth'].CustomOAuth;
var FlowRouter = Package['kadira:flow-router'].FlowRouter;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var RocketChat, name, language, message, options, hidden, pinned, pinnedAt, snippeted, snippetedAt, importIds, inc, _id, roles, favorite, file, username, exceptions, active, latest, fields, result, query;

var require = meteorInstall({"node_modules":{"meteor":{"rocketchat:lib":{"lib":{"core.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/core.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let EventEmitter;
module.watch(require("wolfy87-eventemitter"), {
  default(v) {
    EventEmitter = v;
  }

}, 0);
RocketChat = new EventEmitter(); /*
                                 * Kick off the global namespace for RocketChat.
                                 * @namespace RocketChat
                                 */
RocketChat.models = {};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"RoomTypeConfig.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/RoomTypeConfig.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	RoomSettingsEnum: () => RoomSettingsEnum,
	UiTextContext: () => UiTextContext,
	RoomTypeRouteConfig: () => RoomTypeRouteConfig,
	RoomTypeConfig: () => RoomTypeConfig
});
const RoomSettingsEnum = {
	NAME: 'roomName',
	TOPIC: 'roomTopic',
	ANNOUNCEMENT: 'roomAnnouncement',
	DESCRIPTION: 'roomDescription',
	READ_ONLY: 'readOnly',
	REACT_WHEN_READ_ONLY: 'reactWhenReadOnly',
	ARCHIVE_OR_UNARCHIVE: 'archiveOrUnarchive',
	JOIN_CODE: 'joinCode'
};
const UiTextContext = {
	CLOSE_WARNING: 'closeWarning',
	HIDE_WARNING: 'hideWarning',
	LEAVE_WARNING: 'leaveWarning',
	NO_ROOMS_SUBSCRIBED: 'noRoomsSubscribed'
};

class RoomTypeRouteConfig {
	constructor({
		name,
		path
	}) {
		if (typeof name !== 'undefined' && (typeof name !== 'string' || name.length === 0)) {
			throw new Error('The name must be a string.');
		}

		if (typeof path !== 'undefined' && (typeof path !== 'string' || path.length === 0)) {
			throw new Error('The path must be a string.');
		}

		this._name = name;
		this._path = path;
	}

	get name() {
		return this._name;
	}

	get path() {
		return this._path;
	}

}

class RoomTypeConfig {
	constructor({
		identifier = Random.id(),
		order,
		icon,
		header,
		label,
		route
	}) {
		if (typeof identifier !== 'string' || identifier.length === 0) {
			throw new Error('The identifier must be a string.');
		}

		if (typeof order !== 'number') {
			throw new Error('The order must be a number.');
		}

		if (typeof icon !== 'undefined' && (typeof icon !== 'string' || icon.length === 0)) {
			throw new Error('The icon must be a string.');
		}

		if (typeof header !== 'undefined' && (typeof header !== 'string' || header.length === 0)) {
			throw new Error('The header must be a string.');
		}

		if (typeof label !== 'undefined' && (typeof label !== 'string' || label.length === 0)) {
			throw new Error('The label must be a string.');
		}

		if (typeof route !== 'undefined' && !(route instanceof RoomTypeRouteConfig)) {
			throw new Error('Room\'s route is not a valid route configuration. Must be an instance of "RoomTypeRouteConfig".');
		}

		this._identifier = identifier;
		this._order = order;
		this._icon = icon;
		this._header = header;
		this._label = label;
		this._route = route;
	} /**
    * The room type's internal identifier.
    */

	get identifier() {
		return this._identifier;
	} /**
    * The order of this room type for the display.
    */

	get order() {
		return this._order;
	} /**
    * Sets the order of this room type for the display.
    *
    * @param {number} order the number value for the order
    */

	set order(order) {
		if (typeof order !== 'number') {
			throw new Error('The order must be a number.');
		}

		this._order = order;
	} /**
    * The icon class, css, to use as the visual aid.
    */

	get icon() {
		return this._icon;
	} /**
    * The header name of this type.
    */

	get header() {
		return this._header;
	} /**
    * The i18n label for this room type.
    */

	get label() {
		return this._label;
	} /**
    * The route config for this room type.
    */

	get route() {
		return this._route;
	} /**
    * Gets the room's name to display in the UI.
    *
    * @param {object} room
    */

	getDisplayName(room) {
		return room.name;
	}

	allowRoomSettingChange() /* room, setting */{
		return true;
	}

	canBeCreated() {
		return Meteor.isServer ? RocketChat.authz.hasAtLeastOnePermission(Meteor.userId(), [`create-${this._identifier}`]) : RocketChat.authz.hasAtLeastOnePermission([`create-${this._identifier}`]);
	}

	canBeDeleted(room) {
		return Meteor.isServer ? RocketChat.authz.hasAtLeastOnePermission(Meteor.userId(), [`delete-${room.t}`], room._id) : RocketChat.authz.hasAtLeastOnePermission([`delete-${room.t}`], room._id);
	}

	supportMembersList() /* room */{
		return true;
	}

	isGroupChat() {
		return false;
	}

	canAddUser() /* userId, room */{
		return false;
	}

	userDetailShowAll() /* room */{
		return true;
	}

	userDetailShowAdmin() /* room */{
		return true;
	}

	preventRenaming() /* room */{
		return false;
	}

	includeInRoomSearch() {
		return false;
	}

	enableMembersListProfile() {
		return false;
	} /**
    * Returns a text which can be used in generic UIs.
    * @param context The role of the text in the UI-Element
    * @return {string} A text or a translation key - the consumers of this method will pass the
    * returned value to an internationalization library
    */

	getUiText() /* context */{
		return '';
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"roomTypes":{"channels.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/channels.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	ChannelsRoomType: () => ChannelsRoomType
});
let RoomTypeConfig;
module.watch(require("../RoomTypeConfig"), {
	RoomTypeConfig(v) {
		RoomTypeConfig = v;
	}

}, 0);

class ChannelsRoomType extends RoomTypeConfig {
	constructor() {
		super({
			identifier: 'channels',
			order: 30,
			label: 'Channels'
		});
	}

	condition() {
		const user = Meteor.user();
		const roomsListExhibitionMode = RocketChat.getUserPreference(user, 'roomsListExhibitionMode');
		const mergeChannels = RocketChat.getUserPreference(user, 'mergeChannels');
		return ['unread', 'category'].includes(roomsListExhibitionMode) && mergeChannels;
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"conversation.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/conversation.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	ConversationRoomType: () => ConversationRoomType
});
let RoomTypeConfig;
module.watch(require("../RoomTypeConfig"), {
	RoomTypeConfig(v) {
		RoomTypeConfig = v;
	}

}, 0);

class ConversationRoomType extends RoomTypeConfig {
	constructor() {
		super({
			identifier: 'activity',
			order: 30,
			label: 'Conversations'
		});
	}

	condition() {
		const user = Meteor.user();
		return RocketChat.getUserPreference(user, 'roomsListExhibitionMode') === 'activity';
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"direct.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/direct.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	DirectMessageRoomRoute: () => DirectMessageRoomRoute,
	DirectMessageRoomType: () => DirectMessageRoomType
});
let RoomTypeConfig, RoomTypeRouteConfig, RoomSettingsEnum, UiTextContext;
module.watch(require("../RoomTypeConfig"), {
	RoomTypeConfig(v) {
		RoomTypeConfig = v;
	},

	RoomTypeRouteConfig(v) {
		RoomTypeRouteConfig = v;
	},

	RoomSettingsEnum(v) {
		RoomSettingsEnum = v;
	},

	UiTextContext(v) {
		UiTextContext = v;
	}

}, 0);

class DirectMessageRoomRoute extends RoomTypeRouteConfig {
	constructor() {
		super({
			name: 'direct',
			path: '/direct/:username'
		});
	}

	action(params) {
		return openRoom('d', params.username);
	}

	link(sub) {
		return {
			username: sub.name
		};
	}

}

class DirectMessageRoomType extends RoomTypeConfig {
	constructor() {
		super({
			identifier: 'd',
			order: 50,
			label: 'Direct_Messages',
			route: new DirectMessageRoomRoute()
		});
	}

	findRoom(identifier) {
		const query = {
			t: 'd',
			name: identifier
		};
		const subscription = ChatSubscription.findOne(query);

		if (subscription && subscription.rid) {
			return ChatRoom.findOne(subscription.rid);
		}
	}

	roomName(roomData) {
		const subscription = ChatSubscription.findOne({
			rid: roomData._id
		}, {
			fields: {
				name: 1,
				fname: 1
			}
		});

		if (!subscription) {
			return '';
		}

		if (RocketChat.settings.get('UI_Use_Real_Name') && subscription.fname) {
			return subscription.fname;
		}

		return subscription.name;
	}

	secondaryRoomName(roomData) {
		if (RocketChat.settings.get('UI_Use_Real_Name')) {
			const subscription = ChatSubscription.findOne({
				rid: roomData._id
			}, {
				fields: {
					name: 1
				}
			});
			return subscription && subscription.name;
		}
	}

	condition() {
		const user = Meteor.user();
		const roomsListExhibitionMode = RocketChat.getUserPreference(user, 'roomsListExhibitionMode');
		return !roomsListExhibitionMode || ['unread', 'category'].includes(roomsListExhibitionMode) && RocketChat.authz.hasAtLeastOnePermission(['view-d-room', 'view-joined-room']);
	}

	getUserStatus(roomId) {
		const subscription = RocketChat.models.Subscriptions.findOne({
			rid: roomId
		});

		if (subscription == null) {
			return;
		}

		return Session.get(`user_${subscription.name}_status`);
	}

	getDisplayName(room) {
		return room.usernames.join(' x ');
	}

	allowRoomSettingChange(room, setting) {
		switch (setting) {
			case RoomSettingsEnum.NAME:
			case RoomSettingsEnum.DESCRIPTION:
			case RoomSettingsEnum.READ_ONLY:
			case RoomSettingsEnum.REACT_WHEN_READ_ONLY:
			case RoomSettingsEnum.ARCHIVE_OR_UNARCHIVE:
			case RoomSettingsEnum.JOIN_CODE:
				return false;

			default:
				return true;
		}
	}

	enableMembersListProfile() {
		return true;
	}

	getUiText(context) {
		switch (context) {
			case UiTextContext.HIDE_WARNING:
				return 'Hide_Private_Warning';

			case UiTextContext.LEAVE_WARNING:
				return 'Leave_Private_Warning';

			default:
				return '';
		}
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"favorite.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/favorite.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	FavoriteRoomType: () => FavoriteRoomType
});
let RoomTypeConfig;
module.watch(require("../RoomTypeConfig"), {
	RoomTypeConfig(v) {
		RoomTypeConfig = v;
	}

}, 0);

class FavoriteRoomType extends RoomTypeConfig {
	constructor() {
		super({
			identifier: 'f',
			order: 20,
			header: 'favorite',
			icon: 'star',
			label: 'Favorites'
		});
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/index.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	ChannelsRoomType: () => ChannelsRoomType,
	ConversationRoomType: () => ConversationRoomType,
	DirectMessageRoomType: () => DirectMessageRoomType,
	FavoriteRoomType: () => FavoriteRoomType,
	PrivateRoomType: () => PrivateRoomType,
	PublicRoomType: () => PublicRoomType,
	UnreadRoomType: () => UnreadRoomType
});
let ChannelsRoomType;
module.watch(require("./channels"), {
	ChannelsRoomType(v) {
		ChannelsRoomType = v;
	}

}, 0);
let ConversationRoomType;
module.watch(require("./conversation"), {
	ConversationRoomType(v) {
		ConversationRoomType = v;
	}

}, 1);
let DirectMessageRoomType;
module.watch(require("./direct"), {
	DirectMessageRoomType(v) {
		DirectMessageRoomType = v;
	}

}, 2);
let FavoriteRoomType;
module.watch(require("./favorite"), {
	FavoriteRoomType(v) {
		FavoriteRoomType = v;
	}

}, 3);
let PrivateRoomType;
module.watch(require("./private"), {
	PrivateRoomType(v) {
		PrivateRoomType = v;
	}

}, 4);
let PublicRoomType;
module.watch(require("./public"), {
	PublicRoomType(v) {
		PublicRoomType = v;
	}

}, 5);
let UnreadRoomType;
module.watch(require("./unread"), {
	UnreadRoomType(v) {
		UnreadRoomType = v;
	}

}, 6);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"private.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/private.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	PrivateRoomRoute: () => PrivateRoomRoute,
	PrivateRoomType: () => PrivateRoomType
});
let RoomSettingsEnum, RoomTypeConfig, RoomTypeRouteConfig, UiTextContext;
module.watch(require("../RoomTypeConfig"), {
	RoomSettingsEnum(v) {
		RoomSettingsEnum = v;
	},

	RoomTypeConfig(v) {
		RoomTypeConfig = v;
	},

	RoomTypeRouteConfig(v) {
		RoomTypeRouteConfig = v;
	},

	UiTextContext(v) {
		UiTextContext = v;
	}

}, 0);

class PrivateRoomRoute extends RoomTypeRouteConfig {
	constructor() {
		super({
			name: 'group',
			path: '/group/:name'
		});
	}

	action(params) {
		return openRoom('p', params.name);
	}

}

class PrivateRoomType extends RoomTypeConfig {
	constructor() {
		super({
			identifier: 'p',
			order: 40,
			icon: 'lock',
			label: 'Private_Groups',
			route: new PrivateRoomRoute()
		});
	}

	findRoom(identifier) {
		const query = {
			t: 'p',
			name: identifier
		};
		return ChatRoom.findOne(query);
	}

	roomName(roomData) {
		if (RocketChat.settings.get('UI_Allow_room_names_with_special_chars')) {
			return roomData.fname || roomData.name;
		}

		return roomData.name;
	}

	condition() {
		const user = Meteor.user();
		const roomsListExhibitionMode = RocketChat.getUserPreference(user, 'roomsListExhibitionMode');
		const mergeChannels = RocketChat.getUserPreference(user, 'mergeChannels');
		return !roomsListExhibitionMode || ['unread', 'category'].includes(roomsListExhibitionMode) && !mergeChannels && RocketChat.authz.hasAllPermission('view-p-room');
	}

	isGroupChat() {
		return true;
	}

	canAddUser(room) {
		return RocketChat.authz.hasAtLeastOnePermission(['add-user-to-any-p-room', 'add-user-to-joined-room'], room._id);
	}

	allowRoomSettingChange(room, setting) {
		switch (setting) {
			case RoomSettingsEnum.JOIN_CODE:
				return false;

			default:
				return true;
		}
	}

	enableMembersListProfile() {
		return true;
	}

	getUiText(context) {
		switch (context) {
			case UiTextContext.HIDE_WARNING:
				return 'Hide_Group_Warning';

			case UiTextContext.LEAVE_WARNING:
				return 'Leave_Group_Warning';

			default:
				return '';
		}
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"public.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/public.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	PublicRoomRoute: () => PublicRoomRoute,
	PublicRoomType: () => PublicRoomType
});
let RoomTypeConfig, RoomTypeRouteConfig, UiTextContext;
module.watch(require("../RoomTypeConfig"), {
	RoomTypeConfig(v) {
		RoomTypeConfig = v;
	},

	RoomTypeRouteConfig(v) {
		RoomTypeRouteConfig = v;
	},

	UiTextContext(v) {
		UiTextContext = v;
	}

}, 0);

class PublicRoomRoute extends RoomTypeRouteConfig {
	constructor() {
		super({
			name: 'channel',
			path: '/channel/:name'
		});
	}

	action(params) {
		return openRoom('c', params.name);
	}

}

class PublicRoomType extends RoomTypeConfig {
	constructor() {
		super({
			identifier: 'c',
			order: 30,
			icon: 'hashtag',
			label: 'Channels',
			route: new PublicRoomRoute()
		});
	}

	findRoom(identifier) {
		const query = {
			t: 'c',
			name: identifier
		};
		return ChatRoom.findOne(query);
	}

	roomName(roomData) {
		if (RocketChat.settings.get('UI_Allow_room_names_with_special_chars')) {
			return roomData.fname || roomData.name;
		}

		return roomData.name;
	}

	condition() {
		const user = Meteor.user();
		const roomsListExhibitionMode = RocketChat.getUserPreference(user, 'roomsListExhibitionMode');
		const mergeChannels = RocketChat.getUserPreference(user, 'mergeChannels');
		return !roomsListExhibitionMode || ['unread', 'category'].includes(roomsListExhibitionMode) && !mergeChannels && (RocketChat.authz.hasAtLeastOnePermission(['view-c-room', 'view-joined-room']) || RocketChat.settings.get('Accounts_AllowAnonymousRead') === true);
	}

	showJoinLink(roomId) {
		return !!ChatRoom.findOne({
			_id: roomId,
			t: 'c'
		});
	}

	includeInRoomSearch() {
		return true;
	}

	isGroupChat() {
		return true;
	}

	canAddUser(room) {
		return RocketChat.authz.hasAtLeastOnePermission(['add-user-to-any-c-room', 'add-user-to-joined-room'], room._id);
	}

	allowRoomSettingChange() {
		return true;
	}

	enableMembersListProfile() {
		return true;
	}

	getUiText(context) {
		switch (context) {
			case UiTextContext.HIDE_WARNING:
				return 'Hide_Room_Warning';

			case UiTextContext.LEAVE_WARNING:
				return 'Leave_Room_Warning';

			default:
				return '';
		}
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unread.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/unread.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	UnreadRoomType: () => UnreadRoomType
});
let RoomTypeConfig;
module.watch(require("../RoomTypeConfig"), {
	RoomTypeConfig(v) {
		RoomTypeConfig = v;
	}

}, 0);

class UnreadRoomType extends RoomTypeConfig {
	constructor() {
		super({
			identifier: 'unread',
			order: 10,
			label: 'Unread'
		});
		this.unread = true;
	}

	condition() {
		const user = Meteor.user();
		return RocketChat.getUserPreference(user, 'roomsListExhibitionMode') === 'unread';
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"getURL.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getURL.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);

RocketChat.getURL = (path, {
	cdn = true,
	full = false
} = {}) => {
	const cdnPrefix = s.rtrim(s.trim(RocketChat.settings.get('CDN_PREFIX') || ''), '/');
	const pathPrefix = s.rtrim(s.trim(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || ''), '/');
	let basePath;
	const finalPath = s.ltrim(s.trim(path), '/');

	if (cdn && cdnPrefix !== '') {
		basePath = cdnPrefix + pathPrefix;
	} else if (full || Meteor.isCordova) {
		return Meteor.absoluteUrl(finalPath);
	} else {
		basePath = pathPrefix;
	}

	return `${basePath}/${finalPath}`;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/settings.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
/*
* RocketChat.settings holds all packages settings
* @namespace RocketChat.settings
*/RocketChat.settings = {
	callbacks: {},
	regexCallbacks: {},
	ts: new Date(),

	get(_id, callback) {
		if (callback != null) {
			RocketChat.settings.onload(_id, callback);

			if (!Meteor.settings) {
				return;
			}

			if (_id === '*') {
				return Object.keys(Meteor.settings).forEach(key => {
					const value = Meteor.settings[key];
					callback(key, value);
				});
			}

			if (_.isRegExp(_id) && Meteor.settings) {
				return Object.keys(Meteor.settings).forEach(key => {
					if (!_id.test(key)) {
						return;
					}

					const value = Meteor.settings[key];
					callback(key, value);
				});
			}

			return Meteor.settings[_id] != null && callback(_id, Meteor.settings[_id]);
		} else {
			if (!Meteor.settings) {
				return;
			}

			if (_.isRegExp(_id)) {
				return Object.keys(Meteor.settings).reduce((items, key) => {
					const value = Meteor.settings[key];

					if (_id.test(key)) {
						items.push({
							key,
							value
						});
					}

					return items;
				}, []);
			}

			return Meteor.settings && Meteor.settings[_id];
		}
	},

	set(_id, value, callback) {
		return Meteor.call('saveSetting', _id, value, callback);
	},

	batchSet(settings, callback) {
		// async -> sync
		// http://daemon.co.za/2012/04/simple-async-with-only-underscore/
		const save = function (setting) {
			return function (callback) {
				return Meteor.call('saveSetting', setting._id, setting.value, setting.editor, callback);
			};
		};

		const actions = _.map(settings, setting => save(setting));

		return _(actions).reduceRight(_.wrap, (err, success) => callback(err, success))();
	},

	load(key, value, initialLoad) {
		['*', key].forEach(item => {
			if (RocketChat.settings.callbacks[item]) {
				RocketChat.settings.callbacks[item].forEach(callback => callback(key, value, initialLoad));
			}
		});
		Object.keys(RocketChat.settings.regexCallbacks).forEach(cbKey => {
			const cbValue = RocketChat.settings.regexCallbacks[cbKey];

			if (!cbValue.regex.test(key)) {
				return;
			}

			cbValue.callbacks.forEach(callback => callback(key, value, initialLoad));
		});
	},

	onload(key, callback) {
		// if key is '*'
		// 	for key, value in Meteor.settings
		// 		callback key, value, false
		// else if Meteor.settings?[_id]?
		// 	callback key, Meteor.settings[_id], false
		const keys = [].concat(key);
		keys.forEach(k => {
			if (_.isRegExp(k)) {
				RocketChat.settings.regexCallbacks[name = k.source] = RocketChat.settings.regexCallbacks[name = k.source] || {
					regex: k,
					callbacks: []
				};
				RocketChat.settings.regexCallbacks[k.source].callbacks.push(callback);
			} else {
				RocketChat.settings.callbacks[k] = RocketChat.settings.callbacks[k] || [];
				RocketChat.settings.callbacks[k].push(callback);
			}
		});
	}

};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"callbacks.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/callbacks.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
/*
* Callback hooks provide an easy way to add extra steps to common operations.
* @namespace RocketChat.callbacks
*/RocketChat.callbacks = {};

if (Meteor.isServer) {
	RocketChat.callbacks.showTime = true;
	RocketChat.callbacks.showTotalTime = true;
} else {
	RocketChat.callbacks.showTime = false;
	RocketChat.callbacks.showTotalTime = false;
} /*
  * Callback priorities
  */

RocketChat.callbacks.priority = {
	HIGH: -1000,
	MEDIUM: 0,
	LOW: 1000
}; /*
   * Add a callback function to a hook
   * @param {String} hook - The name of the hook
   * @param {Function} callback - The callback function
   */

RocketChat.callbacks.add = function (hook, callback, priority, id) {
	if (priority == null) {
		priority = RocketChat.callbacks.priority.MEDIUM;
	}

	if (!_.isNumber(priority)) {
		priority = RocketChat.callbacks.priority.MEDIUM;
	}

	callback.priority = priority;
	callback.id = id || Random.id();
	RocketChat.callbacks[hook] = RocketChat.callbacks[hook] || [];

	if (RocketChat.callbacks.showTime === true) {
		const err = new Error();
		callback.stack = err.stack;
	}

	if (RocketChat.callbacks[hook].find(cb => cb.id === callback.id)) {
		return;
	}

	RocketChat.callbacks[hook].push(callback);
}; /*
   * Remove a callback from a hook
   * @param {string} hook - The name of the hook
   * @param {string} id - The callback's id
   */

RocketChat.callbacks.remove = function (hookName, id) {
	RocketChat.callbacks[hookName] = _.reject(RocketChat.callbacks[hookName], callback => callback.id === id);
}; /*
   * Successively run all of a hook's callbacks on an item
   * @param {String} hook - The name of the hook
   * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks
   * @param {Object} [constant] - An optional constant that will be passed along to each callback
   * @returns {Object} Returns the item after it's been through all the callbacks for this hook
   */

RocketChat.callbacks.run = function (hook, item, constant) {
	const callbacks = RocketChat.callbacks[hook];

	if (callbacks && callbacks.length) {
		let totalTime = 0;

		const result = _.sortBy(callbacks, function (callback) {
			return callback.priority || RocketChat.callbacks.priority.MEDIUM;
		}).reduce(function (result, callback) {
			let time = 0;

			if (RocketChat.callbacks.showTime === true || RocketChat.callbacks.showTotalTime === true) {
				time = Date.now();
			}

			const callbackResult = callback(result, constant);

			if (RocketChat.callbacks.showTime === true || RocketChat.callbacks.showTotalTime === true) {
				const currentTime = Date.now() - time;
				totalTime += currentTime;

				if (RocketChat.callbacks.showTime === true) {
					if (Meteor.isServer) {
						RocketChat.statsTracker.timing('callbacks.time', currentTime, [`hook:${hook}`, `callback:${callback.id}`]);
					} else {
						let stack = callback.stack && typeof callback.stack.split === 'function' && callback.stack.split('\n');
						stack = stack && stack[2] && (stack[2].match(/\(.+\)/) || [])[0];
						console.log(String(currentTime), hook, callback.id, stack);
					}
				}
			}

			return typeof callbackResult === 'undefined' ? result : callbackResult;
		}, item);

		if (RocketChat.callbacks.showTotalTime === true) {
			if (Meteor.isServer) {
				RocketChat.statsTracker.timing('callbacks.totalTime', totalTime, [`hook:${hook}`]);
			} else {
				console.log(`${hook}:`, totalTime);
			}
		}

		return result;
	} else {
		return item;
	}
}; /*
   * Successively run all of a hook's callbacks on an item, in async mode (only works on server)
   * @param {String} hook - The name of the hook
   * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks
   * @param {Object} [constant] - An optional constant that will be passed along to each callback
   */

RocketChat.callbacks.runAsync = function (hook, item, constant) {
	const callbacks = RocketChat.callbacks[hook];

	if (Meteor.isServer && callbacks && callbacks.length) {
		Meteor.defer(function () {
			_.sortBy(callbacks, callback => callback.priority || RocketChat.callbacks.priority.MEDIUM).forEach(callback => callback(item, constant));
		});
	} else {
		return item;
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fileUploadRestrictions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/fileUploadRestrictions.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);

RocketChat.fileUploadMediaWhiteList = function () {
	const mediaTypeWhiteList = RocketChat.settings.get('FileUpload_MediaTypeWhiteList');

	if (!mediaTypeWhiteList || mediaTypeWhiteList === '*') {
		return;
	}

	return _.map(mediaTypeWhiteList.split(','), function (item) {
		return item.trim();
	});
};

RocketChat.fileUploadIsValidContentType = function (type) {
	const list = RocketChat.fileUploadMediaWhiteList();

	if (!list) {
		return true;
	}

	if (!type) {
		return false;
	}

	if (_.contains(list, type)) {
		return true;
	} else {
		const wildCardGlob = '/*';

		const wildcards = _.filter(list, function (item) {
			return item.indexOf(wildCardGlob) > 0;
		});

		if (_.contains(wildcards, type.replace(/(\/.*)$/, wildCardGlob))) {
			return true;
		}
	}

	return false;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getAvatarColor.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getAvatarColor.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const colors = ['#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5', '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFC107', '#FF9800', '#FF5722', '#795548', '#9E9E9E', '#607D8B'];

RocketChat.getAvatarColor = function (name) {
	return colors[name.length % colors.length];
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getValidRoomName.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getValidRoomName.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);

RocketChat.getValidRoomName = function getValidRoomName(displayName, rid = '') {
	let slugifiedName = displayName;

	if (RocketChat.settings.get('UI_Allow_room_names_with_special_chars')) {
		const room = RocketChat.models.Rooms.findOneByDisplayName(displayName);

		if (room && room._id !== rid) {
			if (room.archived) {
				throw new Meteor.Error('error-archived-duplicate-name', `There's an archived channel with name ${displayName}`, {
					function: 'RocketChat.getValidRoomName',
					channel_name: displayName
				});
			} else {
				throw new Meteor.Error('error-duplicate-channel-name', `A channel with name '${displayName}' exists`, {
					function: 'RocketChat.getValidRoomName',
					channel_name: displayName
				});
			}
		}

		slugifiedName = s.slugify(displayName);
	}

	let nameValidation;

	try {
		nameValidation = new RegExp(`^${RocketChat.settings.get('UTF8_Names_Validation')}$`);
	} catch (error) {
		nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');
	}

	if (!nameValidation.test(slugifiedName)) {
		throw new Meteor.Error('error-invalid-room-name', `${slugifiedName} is not a valid room name.`, {
			'function': 'RocketChat.getValidRoomName',
			channel_name: slugifiedName
		});
	}

	const room = RocketChat.models.Rooms.findOneByName(slugifiedName);

	if (room && room._id !== rid) {
		if (RocketChat.settings.get('UI_Allow_room_names_with_special_chars')) {
			let tmpName = slugifiedName;
			let next = 0;

			while (RocketChat.models.Rooms.findOneByNameAndNotId(tmpName, rid)) {
				tmpName = `${slugifiedName}-${++next}`;
			}

			slugifiedName = tmpName;
		} else if (room.archived) {
			throw new Meteor.Error('error-archived-duplicate-name', `There's an archived channel with name ${slugifiedName}`, {
				function: 'RocketChat.getValidRoomName',
				channel_name: slugifiedName
			});
		} else {
			throw new Meteor.Error('error-duplicate-channel-name', `A channel with name '${slugifiedName}' exists`, {
				function: 'RocketChat.getValidRoomName',
				channel_name: slugifiedName
			});
		}
	}

	return slugifiedName;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"placeholders.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/placeholders.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);
RocketChat.placeholders = {};

RocketChat.placeholders.replace = function (str, data) {
	if (!str) {
		return '';
	}

	str = str.replace(/\[Site_Name\]/g, RocketChat.settings.get('Site_Name') || '');
	str = str.replace(/\[Site_URL\]/g, RocketChat.settings.get('Site_Url') || '');

	if (data) {
		str = str.replace(/\[name\]/g, data.name || '');
		str = str.replace(/\[fname\]/g, s.strLeft(data.name, ' ') || '');
		str = str.replace(/\[lname\]/g, s.strRightBack(data.name, ' ') || '');
		str = str.replace(/\[email\]/g, data.email || '');
		str = str.replace(/\[password\]/g, data.password || '');
		str = str.replace(/\[User\]/g, data.user || '');
		str = str.replace(/\[Room\]/g, data.room || '');

		if (data.unsubscribe) {
			str = str.replace(/\[unsubscribe\]/g, data.unsubscribe);
		}
	}

	str = str.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + '<br>' + '$2');
	return str;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"promises.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/promises.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
/*
* Callback hooks provide an easy way to add extra steps to common operations.
* @namespace RocketChat.promises
*/RocketChat.promises = {}; /*
                            * Callback priorities
                            */
RocketChat.promises.priority = {
	HIGH: -1000,
	MEDIUM: 0,
	LOW: 1000
}; /*
   * Add a callback function to a hook
   * @param {String} hook - The name of the hook
   * @param {Function} callback - The callback function
   */

RocketChat.promises.add = function (hook, callback, p = RocketChat.promises.priority.MEDIUM, id) {
	const priority = !_.isNumber(p) ? RocketChat.promises.priority.MEDIUM : p;
	callback.priority = priority;
	callback.id = id || Random.id();
	RocketChat.promises[hook] = RocketChat.promises[hook] || [];

	if (RocketChat.promises[hook].find(cb => cb.id === callback.id)) {
		return;
	}

	RocketChat.promises[hook].push(callback);
}; /*
   * Remove a callback from a hook
   * @param {string} hook - The name of the hook
   * @param {string} id - The callback's id
   */

RocketChat.promises.remove = function (hookName, id) {
	RocketChat.promises[hookName] = _.reject(RocketChat.promises[hookName], callback => callback.id === id);
}; /*
   * Successively run all of a hook's callbacks on an item
   * @param {String} hook - The name of the hook
   * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks
   * @param {Object} [constant] - An optional constant that will be passed along to each callback
   * @returns {Object} Returns the item after it's been through all the callbacks for this hook
   */

RocketChat.promises.run = function (hook, item, constant) {
	let callbacks = RocketChat.promises[hook];

	if (callbacks == null || callbacks.length === 0) {
		return Promise.resolve(item);
	}

	callbacks = _.sortBy(callbacks, callback => callback.priority || RocketChat.promises.priority.MEDIUM);
	return callbacks.reduce(function (previousPromise, callback) {
		return new Promise(function (resolve, reject) {
			return previousPromise.then(result => callback(result, constant).then(resolve, reject));
		});
	}, Promise.resolve(item));
}; /*
   * Successively run all of a hook's callbacks on an item, in async mode (only works on server)
   * @param {String} hook - The name of the hook
   * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks
   * @param {Object} [constant] - An optional constant that will be passed along to each callback
   */

RocketChat.promises.runAsync = function (hook, item, constant) {
	const callbacks = RocketChat.promises[hook];

	if (!Meteor.isServer || callbacks == null || callbacks.length === 0) {
		return item;
	}

	Meteor.defer(() => {
		_.sortBy(callbacks, callback => callback.priority || RocketChat.promises.priority.MEDIUM).forEach(function (callback) {
			callback(item, constant);
		});
	});
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"RoomTypesCommon.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/RoomTypesCommon.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	RoomTypesCommon: () => RoomTypesCommon
});
let RoomTypeConfig;
module.watch(require("./RoomTypeConfig"), {
	RoomTypeConfig(v) {
		RoomTypeConfig = v;
	}

}, 0);

class RoomTypesCommon {
	constructor() {
		this.roomTypes = {};
		this.roomTypesOrder = [];
		this.mainOrder = 1;
	} /**
    * Adds a room type to the application.
    *
    * @param {RoomTypeConfig} roomConfig
    * @returns {void}
    */

	add(roomConfig) {
		if (!(roomConfig instanceof RoomTypeConfig)) {
			throw new Error('Invalid Room Configuration object, it must extend "RoomTypeConfig"');
		}

		if (this.roomTypes[roomConfig.identifier]) {
			return false;
		}

		if (!roomConfig.order) {
			roomConfig.order = this.mainOrder + 10;
			this.mainOrder += 10;
		}

		this.roomTypesOrder.push({
			identifier: roomConfig.identifier,
			order: roomConfig.order
		});
		this.roomTypes[roomConfig.identifier] = roomConfig;

		if (roomConfig.route && roomConfig.route.path && roomConfig.route.name && roomConfig.route.action) {
			const routeConfig = {
				name: roomConfig.route.name,
				action: roomConfig.route.action
			};

			if (Meteor.isClient) {
				routeConfig.triggersExit = [roomExit];
			}

			return FlowRouter.route(roomConfig.route.path, routeConfig);
		}
	}

	hasCustomLink(roomType) {
		return this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link != null;
	} /**
    * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))
    * @param {object} subData the user's subscription data
    */

	getRouteLink(roomType, subData) {
		if (!this.roomTypes[roomType]) {
			return false;
		}

		let routeData = {};

		if (this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link) {
			routeData = this.roomTypes[roomType].route.link(subData);
		} else if (subData && subData.name) {
			routeData = {
				name: subData.name
			};
		}

		return FlowRouter.path(this.roomTypes[roomType].route.name, routeData);
	}

	openRouteLink(roomType, subData, queryParams) {
		if (!this.roomTypes[roomType]) {
			return false;
		}

		let routeData = {};

		if (this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link) {
			routeData = this.roomTypes[roomType].route.link(subData);
		} else if (subData && subData.name) {
			routeData = {
				name: subData.name
			};
		}

		return FlowRouter.go(this.roomTypes[roomType].route.name, routeData, queryParams);
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"slashCommand.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/slashCommand.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.slashCommands = {
	commands: {}
};

RocketChat.slashCommands.add = function (command, callback, options = {}, result) {
	RocketChat.slashCommands.commands[command] = {
		command,
		callback,
		params: options.params,
		description: options.description,
		clientOnly: options.clientOnly || false,
		result
	};
};

RocketChat.slashCommands.run = function (command, params, item) {
	if (RocketChat.slashCommands.commands[command] && RocketChat.slashCommands.commands[command].callback) {
		return RocketChat.slashCommands.commands[command].callback(command, params, item);
	}
};

Meteor.methods({
	slashCommand(command) {
		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'slashCommand'
			});
		}

		return RocketChat.slashCommands.run(command.cmd, command.params, command.msg);
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Message.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/Message.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);
RocketChat.Message = {
	parse(msg, language) {
		const messageType = RocketChat.MessageTypes.getType(msg);

		if (messageType) {
			if (messageType.render) {
				return messageType.render(msg);
			} else if (messageType.template) {
				// Render message
				return;
			} else if (messageType.message) {
				if (!language && typeof localStorage !== 'undefined') {
					language = localStorage.getItem('userLanguage');
				}

				const data = typeof messageType.data === 'function' && messageType.data(msg) || {};
				return TAPi18n.__(messageType.message, data, language);
			}
		}

		if (msg.u && msg.u.username === RocketChat.settings.get('Chatops_Username')) {
			msg.html = msg.msg;
			return msg.html;
		}

		msg.html = msg.msg;

		if (s.trim(msg.html) !== '') {
			msg.html = s.escapeHTML(msg.html);
		}

		msg.html = msg.html.replace(/\n/gm, '<br/>');
		return msg.html;
	}

};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"messageBox.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/messageBox.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

RocketChat.messageBox = {};
RocketChat.messageBox.actions = new class {
	constructor() {
		this.actions = {};
	} /* Add a action to messagebox
   @param group
   @param label
   @param config
   icon: icon class
   action: action function
   condition: condition to display the action
   */

	add(group, label, config) {
		if (!group && !label && !config) {
			return;
		}

		if (!this.actions[group]) {
			this.actions[group] = [];
		}

		const actionExists = this.actions[group].find(action => {
			return action.label === label;
		});

		if (actionExists) {
			return;
		}

		this.actions[group].push((0, _extends3.default)({}, config, {
			label
		}));
	}

	get(group) {
		if (!group) {
			return Object.keys(this.actions).reduce((ret, key) => {
				const actions = this.actions[key].filter(action => !action.condition || action.condition());

				if (actions.length) {
					ret[key] = actions;
				}

				return ret;
			}, {});
		}

		return this.actions[group].filter(action => !action.condition || action.condition());
	}

	getById(id) {
		const messageActions = this.actions;
		let actions = [];
		Object.keys(messageActions).forEach(function (action) {
			actions = actions.concat(messageActions[action]);
		});
		return actions.filter(action => action.id === id);
	}

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MessageTypes.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/MessageTypes.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.MessageTypes = new class {
	constructor() {
		this.types = {};
	}

	registerType(options) {
		return this.types[options.id] = options;
	}

	getType(message) {
		return this.types[message && message.t];
	}

	isSystemMessage(message) {
		const type = this.types[message && message.t];
		return type && type.system;
	}

}();
Meteor.startup(function () {
	RocketChat.MessageTypes.registerType({
		id: 'r',
		system: true,
		message: 'Room_name_changed',

		data(message) {
			return {
				room_name: message.msg,
				user_by: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'au',
		system: true,
		message: 'User_added_by',

		data(message) {
			return {
				user_added: message.msg,
				user_by: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'ru',
		system: true,
		message: 'User_removed_by',

		data(message) {
			return {
				user_removed: message.msg,
				user_by: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'ul',
		system: true,
		message: 'User_left',

		data(message) {
			return {
				user_left: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'uj',
		system: true,
		message: 'User_joined_channel',

		data(message) {
			return {
				user: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'wm',
		system: true,
		message: 'Welcome',

		data(message) {
			return {
				user: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'rm',
		system: true,
		message: 'Message_removed',

		data(message) {
			return {
				user: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'rtc',

		render(message) {
			return RocketChat.callbacks.run('renderRtcMessage', message);
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'user-muted',
		system: true,
		message: 'User_muted_by',

		data(message) {
			return {
				user_muted: message.msg,
				user_by: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'user-unmuted',
		system: true,
		message: 'User_unmuted_by',

		data(message) {
			return {
				user_unmuted: message.msg,
				user_by: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'subscription-role-added',
		system: true,
		message: '__username__was_set__role__by__user_by_',

		data(message) {
			return {
				username: message.msg,
				role: message.role,
				user_by: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'subscription-role-removed',
		system: true,
		message: '__username__is_no_longer__role__defined_by__user_by_',

		data(message) {
			return {
				username: message.msg,
				role: message.role,
				user_by: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'room-archived',
		system: true,
		message: 'This_room_has_been_archived_by__username_',

		data(message) {
			return {
				username: message.u.username
			};
		}

	});
	RocketChat.MessageTypes.registerType({
		id: 'room-unarchived',
		system: true,
		message: 'This_room_has_been_unarchived_by__username_',

		data(message) {
			return {
				username: message.u.username
			};
		}

	});
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"templateVarHandler.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/templateVarHandler.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let logger;

if (Meteor.isServer) {
	logger = new Logger('TemplateVarHandler', {});
}

RocketChat.templateVarHandler = function (variable, object) {
	const templateRegex = /#{([\w\-]+)}/gi;
	let match = templateRegex.exec(variable);
	let tmpVariable = variable;

	if (match == null) {
		if (!object.hasOwnProperty(variable)) {
			logger && logger.debug(`user does not have attribute: ${variable}`);
			return;
		}

		return object[variable];
	} else {
		logger && logger.debug('template found. replacing values');

		while (match != null) {
			const tmplVar = match[0];
			const tmplAttrName = match[1];

			if (!object.hasOwnProperty(tmplAttrName)) {
				logger && logger.debug(`user does not have attribute: ${tmplAttrName}`);
				return;
			}

			const attrVal = object[tmplAttrName];
			logger && logger.debug(`replacing template var: ${tmplVar} with value: ${attrVal}`);
			tmpVariable = tmpVariable.replace(tmplVar, attrVal);
			match = templateRegex.exec(variable);
		}

		return tmpVariable;
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getUserPreference.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getUserPreference.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * Tries to retrieve the user preference falling back to a default system
 * value or to a default value if it is passed as argument
*/RocketChat.getUserPreference = function (user, key, defaultValue = undefined) {
	let preference;

	if (user && user.settings && user.settings.preferences && user.settings.preferences.hasOwnProperty(key)) {
		preference = user.settings.preferences[key];
	} else if (defaultValue === undefined) {
		preference = RocketChat.settings.get(`Accounts_Default_User_Preferences_${key}`);
	}

	return preference !== undefined ? preference : defaultValue;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"startup":{"settingsOnLoadSiteUrl.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/startup/settingsOnLoadSiteUrl.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals WebAppInternals */RocketChat.settings.get('Site_Url', function (key, value) {
	if (value == null || value.trim() === '') {
		return;
	}

	let host = value.replace(/\/$/, ''); // let prefix = '';

	const match = value.match(/([^\/]+\/{2}[^\/]+)(\/.+)/);

	if (match != null) {
		host = match[1]; // prefix = match[2].replace(/\/$/, '');
	}

	__meteor_runtime_config__.ROOT_URL = value;

	if (Meteor.absoluteUrl.defaultOptions && Meteor.absoluteUrl.defaultOptions.rootUrl) {
		Meteor.absoluteUrl.defaultOptions.rootUrl = value;
	}

	if (Meteor.isServer) {
		RocketChat.hostname = host.replace(/^https?:\/\//, '');
		process.env.MOBILE_ROOT_URL = host;
		process.env.MOBILE_DDP_URL = host;

		if (typeof WebAppInternals !== 'undefined' && WebAppInternals.generateBoilerplate) {
			return WebAppInternals.generateBoilerplate();
		}
	}
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"server":{"lib":{"debug.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/debug.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
const logger = new Logger('Meteor', {
	methods: {
		method: {
			type: 'debug'
		},
		publish: {
			type: 'debug'
		}
	}
});

const wrapMethods = function (name, originalHandler, methodsMap) {
	methodsMap[name] = function () {
		const args = name === 'ufsWrite' ? Array.prototype.slice.call(arguments, 1) : arguments;
		logger.method(name, '-> userId:', Meteor.userId(), ', arguments: ', args);
		return originalHandler.apply(this, arguments);
	};
};

const originalMeteorMethods = Meteor.methods;

Meteor.methods = function (methodMap) {
	_.each(methodMap, function (handler, name) {
		wrapMethods(name, handler, methodMap);
	});

	originalMeteorMethods(methodMap);
};

const originalMeteorPublish = Meteor.publish;

Meteor.publish = function (name, func) {
	return originalMeteorPublish(name, function () {
		logger.publish(name, '-> userId:', this.userId, ', arguments: ', arguments);
		return func.apply(this, arguments);
	});
};

WebApp.rawConnectHandlers.use(function (req, res, next) {
	res.setHeader('X-Instance-ID', InstanceStatus.id());
	return next();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"bugsnag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/bugsnag.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let bugsnag;
module.watch(require("bugsnag"), {
	default(v) {
		bugsnag = v;
	}

}, 0);
RocketChat.bugsnag = bugsnag;
RocketChat.settings.get('Bugsnag_api_key', (key, value) => {
	if (value) {
		bugsnag.register(value);
	}
});

const notify = function (message, stack) {
	if (typeof stack === 'string') {
		message += ` ${stack}`;
	}

	let options = {};

	if (RocketChat.Info) {
		options = {
			app: {
				version: RocketChat.Info.version,
				info: RocketChat.Info
			}
		};
	}

	const error = new Error(message);
	error.stack = stack;
	RocketChat.bugsnag.notify(error, options);
};

process.on('uncaughtException', Meteor.bindEnvironment(error => {
	notify(error.message, error.stack);
	throw error;
}));
const originalMeteorDebug = Meteor._debug;

Meteor._debug = function () {
	notify(...arguments);
	return originalMeteorDebug(...arguments);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"metrics.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/metrics.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const client = require('prom-client');

RocketChat.promclient = client;
RocketChat.metrics = {}; // one sample metrics only - a counter

RocketChat.metrics.messagesSent = new client.Counter('messages_sent', 'cumulated number of messages sent');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"RateLimiter.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/RateLimiter.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
RocketChat.RateLimiter = new class {
	limitFunction(fn, numRequests, timeInterval, matchers) {
		if (process.env.TEST_MODE === 'true') {
			return fn;
		}

		const rateLimiter = new RateLimiter();
		rateLimiter.addRule(matchers, numRequests, timeInterval);
		return function (...args) {
			const match = {};

			_.each(matchers, function (matcher, key) {
				return match[key] = args[key];
			});

			rateLimiter.increment(match);
			const rateLimitResult = rateLimiter.check(match);

			if (rateLimitResult.allowed) {
				return fn.apply(null, arguments);
			} else {
				throw new Meteor.Error('error-too-many-requests', `Error, too many requests. Please slow down. You must wait ${Math.ceil(rateLimitResult.timeToReset / 1000)} seconds before trying again.`, {
					timeToReset: rateLimitResult.timeToReset,
					seconds: Math.ceil(rateLimitResult.timeToReset / 1000)
				});
			}
		};
	}

	limitMethod(methodName, numRequests, timeInterval, matchers) {
		if (process.env.TEST_MODE === 'true') {
			return;
		}

		const match = {
			type: 'method',
			name: methodName
		};

		_.each(matchers, function (matcher, key) {
			return match[key] = matchers[key];
		});

		return DDPRateLimiter.addRule(match, numRequests, timeInterval);
	}

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"configLogger.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/configLogger.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals LoggerManager */RocketChat.settings.get('Log_Package', function (key, value) {
	return LoggerManager.showPackage = value;
});
RocketChat.settings.get('Log_File', function (key, value) {
	return LoggerManager.showFileAndLine = value;
});
RocketChat.settings.get('Log_Level', function (key, value) {
	if (value != null) {
		LoggerManager.logLevel = parseInt(value);
		Meteor.setTimeout(() => {
			return LoggerManager.enable(true);
		}, 200);
	}
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"PushNotification.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/PushNotification.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals Push */class PushNotification {
	getNotificationId(roomId) {
		const serverId = RocketChat.settings.get('uniqueID');
		return this.hash(`${serverId}|${roomId}`); // hash
	}

	hash(str) {
		let hash = 0;
		let i = str.length;

		while (i) {
			hash = (hash << 5) - hash + str.charCodeAt(--i);
			hash = hash & hash; // Convert to 32bit integer
		}

		return hash;
	}

	send({
		roomName,
		roomId,
		username,
		message,
		usersTo,
		payload,
		badge = 1,
		category
	}) {
		let title;

		if (roomName && roomName !== '') {
			title = `${roomName}`;
			message = `${username}: ${message}`;
		} else {
			title = `${username}`;
		}

		const icon = RocketChat.settings.get('Assets_favicon_192').url || RocketChat.settings.get('Assets_favicon_192').defaultUrl;
		const config = {
			from: 'push',
			badge,
			sound: 'default',
			title,
			text: message,
			payload,
			query: usersTo,
			notId: this.getNotificationId(roomId),
			gcm: {
				style: 'inbox',
				summaryText: '%n% new messages',
				image: RocketChat.getURL(icon, {
					full: true
				})
			}
		};

		if (category !== '') {
			config.apn = {
				category
			};
		}

		return Push.send(config);
	}

}

RocketChat.PushNotification = new PushNotification();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"defaultBlockedDomainsList.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/defaultBlockedDomainsList.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.emailDomainDefaultBlackList = ['0-mail.com', '0815.ru', '0815.su', '0clickemail.com', '0wnd.net', '0wnd.org', '10mail.org', '10minut.com.pl', '10minutemail.co.za', '10minutemail.com', '10minutemail.de', '123-m.com', '1chuan.com', '1fsdfdsfsdf.tk', '1pad.de', '1zhuan.com', '20email.eu', '20mail.eu', '20mail.it', '20minutemail.com', '21cn.com', '2fdgdfgdfgdf.tk', '2prong.com', '30minutemail.com', '33mail.com', '3d-painting.com', '3trtretgfrfe.tk', '4gfdsgfdgfd.tk', '4warding.com', '4warding.net', '4warding.org', '5ghgfhfghfgh.tk', '60minutemail.com', '675hosting.com', '675hosting.net', '675hosting.org', '6hjgjhgkilkj.tk', '6ip.us', '6paq.com', '6url.com', '75hosting.com', '75hosting.net', '75hosting.org', '7days-printing.com', '7tags.com', '99experts.com', '9ox.net', 'a-bc.net', 'a45.in', 'abcmail.email', 'abyssmail.com', 'acentri.com', 'advantimo.com', 'afrobacon.com', 'ag.us.to', 'agedmail.com', 'ahk.jp', 'ajaxapp.net', 'alivance.com', 'ama-trade.de', 'amail.com', 'amilegit.com', 'amiri.net', 'amiriindustries.com', 'anappthat.com', 'ano-mail.net', 'anonbox.net', 'anonmails.de', 'anonymail.dk', 'anonymbox.com', 'antichef.com', 'antichef.net', 'antireg.ru', 'antispam.de', 'antispammail.de', 'appixie.com', 'armyspy.com', 'artman-conception.com', 'aver.com', 'azmeil.tk', 'baxomale.ht.cx', 'beddly.com', 'beefmilk.com', 'bigprofessor.so', 'bigstring.com', 'binkmail.com', 'bio-muesli.net', 'blogmyway.org', 'bobmail.info', 'bofthew.com', 'bootybay.de', 'boun.cr', 'bouncr.com', 'boxformail.in', 'breakthru.com', 'brefmail.com', 'brennendesreich.de', 'broadbandninja.com', 'bsnow.net', 'bspamfree.org', 'bu.mintemail.com', 'buffemail.com', 'bugmenot.com', 'bumpymail.com', 'bund.us', 'bundes-li.ga', 'burnthespam.info', 'burstmail.info', 'buymoreplays.com', 'buyusedlibrarybooks.org', 'byom.de', 'c2.hu', 'cachedot.net', 'card.zp.ua', 'casualdx.com', 'cbair.com', 'cek.pm', 'cellurl.com', 'centermail.com', 'centermail.net', 'chammy.info', 'cheatmail.de', 'childsavetrust.org', 'chogmail.com', 'choicemail1.com', 'chong-mail.com', 'chong-mail.net', 'chong-mail.org', 'clixser.com', 'cmail.com', 'cmail.net', 'cmail.org', 'coldemail.info', 'consumerriot.com', 'cool.fr.nf', 'correo.blogos.net', 'cosmorph.com', 'courriel.fr.nf', 'courrieltemporaire.com', 'crapmail.org', 'crazymailing.com', 'cubiclink.com', 'curryworld.de', 'cust.in', 'cuvox.de', 'd3p.dk', 'dacoolest.com', 'daintly.com', 'dandikmail.com', 'dayrep.com', 'dbunker.com', 'dcemail.com', 'deadaddress.com', 'deadspam.com', 'deagot.com', 'dealja.com', 'delikkt.de', 'despam.it', 'despammed.com', 'devnullmail.com', 'dfgh.net', 'digitalsanctuary.com', 'dingbone.com', 'discard.email', 'discardmail.com', 'discardmail.de', 'disposableaddress.com', 'disposableemailaddresses.com', 'disposableemailaddresses.emailmiser.com', 'disposableinbox.com', 'dispose.it', 'disposeamail.com', 'disposemail.com', 'dispostable.com', 'dlemail.ru', 'dm.w3internet.co.uk', 'dm.w3internet.co.ukexample.com', 'dodgeit.com', 'dodgit.com', 'dodgit.org', 'doiea.com', 'domozmail.com', 'donemail.ru', 'dontreg.com', 'dontsendmespam.de', 'dotmsg.com', 'drdrb.com', 'drdrb.net', 'droplar.com', 'dropmail.me', 'dt.com', 'duam.net', 'dudmail.com', 'dump-email.info', 'dumpandjunk.com', 'dumpmail.de', 'dumpyemail.com', 'duskmail.com', 'e-mail.com', 'e-mail.org', 'e4ward.com', 'easytrashmail.com', 'einmalmail.de', 'einrot.com', 'einrot.de', 'eintagsmail.de', 'email60.com', 'emaildienst.de', 'emailgo.de', 'emailias.com', 'emailigo.de', 'emailinfive.com', 'emaillime.com', 'emailmiser.com', 'emailproxsy.com', 'emailsensei.com', 'emailtemporanea.com', 'emailtemporanea.net', 'emailtemporar.ro', 'emailtemporario.com.br', 'emailthe.net', 'emailtmp.com', 'emailto.de', 'emailwarden.com', 'emailx.at.hm', 'emailxfer.com', 'emeil.in', 'emeil.ir', 'emil.com', 'emz.net', 'enterto.com', 'ephemail.net', 'ero-tube.org', 'etranquil.com', 'etranquil.net', 'etranquil.org', 'evopo.com', 'explodemail.com', 'express.net.ua', 'eyepaste.com', 'fakeinbox.com', 'fakeinformation.com', 'fakemail.fr', 'fakemailz.com', 'fammix.com', 'fansworldwide.de', 'fantasymail.de', 'fastacura.com', 'fastchevy.com', 'fastchrysler.com', 'fastkawasaki.com', 'fastmazda.com', 'fastmitsubishi.com', 'fastnissan.com', 'fastsubaru.com', 'fastsuzuki.com', 'fasttoyota.com', 'fastyamaha.com', 'fatflap.com', 'fdfdsfds.com', 'fightallspam.com', 'figjs.com', 'fiifke.de', 'filzmail.com', 'fivemail.de', 'fixmail.tk', 'fizmail.com', 'fleckens.hu', 'flemail.ru', 'flyspam.com', 'footard.com', 'forgetmail.com', 'fr33mail.info', 'frapmail.com', 'freundin.ru', 'friendlymail.co.uk', 'front14.org', 'fuckingduh.com', 'fudgerub.com', 'fux0ringduh.com', 'fyii.de', 'garliclife.com', 'gehensiemirnichtaufdensack.de', 'gelitik.in', 'get1mail.com', 'get2mail.fr', 'getairmail.com', 'getmails.eu', 'getonemail.com', 'getonemail.net', 'ghosttexter.de', 'giantmail.de', 'girlsundertheinfluence.com', 'gishpuppy.com', 'gmial.com', 'goemailgo.com', 'gorillaswithdirtyarmpits.com', 'gotmail.com', 'gotmail.net', 'gotmail.org', 'gotti.otherinbox.com', 'gowikibooks.com', 'gowikicampus.com', 'gowikicars.com', 'gowikifilms.com', 'gowikigames.com', 'gowikimusic.com', 'gowikimusic.great-host.in', 'gowikinetwork.com', 'gowikitravel.com', 'gowikitv.com', 'grandmamail.com', 'grandmasmail.com', 'great-host.in', 'greensloth.com', 'grr.la', 'gsrv.co.uk', 'guerillamail.biz', 'guerillamail.com', 'guerillamail.net', 'guerillamail.org', 'guerrillamail.biz', 'guerrillamail.com', 'guerrillamail.de', 'guerrillamail.info', 'guerrillamail.net', 'guerrillamail.org', 'guerrillamailblock.com', 'gustr.com', 'h.mintemail.com', 'h8s.org', 'hacccc.com', 'haltospam.com', 'harakirimail.com', 'hartbot.de', 'hat-geld.de', 'hatespam.org', 'hellodream.mobi', 'herp.in', 'hidemail.de', 'hidzz.com', 'hmamail.com', 'hochsitze.com', 'hopemail.biz', 'hotpop.com', 'hulapla.de', 'iaoss.com', 'ieatspam.eu', 'ieatspam.info', 'ieh-mail.de', 'ihateyoualot.info', 'iheartspam.org', 'ikbenspamvrij.nl', 'imails.info', 'imgof.com', 'imstations.com', 'inbax.tk', 'inbox.si', 'inboxalias.com', 'inboxclean.com', 'inboxclean.org', 'inboxproxy.com', 'incognitomail.com', 'incognitomail.net', 'incognitomail.org', 'infocom.zp.ua', 'inoutmail.de', 'inoutmail.eu', 'inoutmail.info', 'inoutmail.net', 'insorg-mail.info', 'instant-mail.de', 'ip6.li', 'ipoo.org', 'irish2me.com', 'iwi.net', 'jamit.com.au', 'jetable.com', 'jetable.fr.nf', 'jetable.net', 'jetable.org', 'jnxjn.com', 'jourrapide.com', 'jsrsolutions.com', 'junk1e.com', 'kasmail.com', 'kaspop.com', 'keepmymail.com', 'killmail.com', 'killmail.net', 'kimsdisk.com', 'kingsq.ga', 'kir.ch.tc', 'klassmaster.com', 'klassmaster.net', 'klzlk.com', 'kook.ml', 'koszmail.pl', 'kulturbetrieb.info', 'kurzepost.de', 'l33r.eu', 'lackmail.net', 'lags.us', 'lawlita.com', 'lazyinbox.com', 'letthemeatspam.com', 'lhsdv.com', 'lifebyfood.com', 'link2mail.net', 'litedrop.com', 'loadby.us', 'login-email.ml', 'lol.ovpn.to', 'lolfreak.net', 'lookugly.com', 'lopl.co.cc', 'lortemail.dk', 'lovemeleaveme.com', 'lr78.com', 'lroid.com', 'lukop.dk', 'm21.cc', 'm4ilweb.info', 'maboard.com', 'mail-filter.com', 'mail-temporaire.fr', 'mail.by', 'mail.mezimages.net', 'mail.zp.ua', 'mail114.net', 'mail1a.de', 'mail21.cc', 'mail2rss.org', 'mail333.com', 'mail4trash.com', 'mailbidon.com', 'mailbiz.biz', 'mailblocks.com', 'mailbucket.org', 'mailcat.biz', 'mailcatch.com', 'mailde.de', 'mailde.info', 'maildrop.cc', 'maildx.com', 'maileater.com', 'mailed.ro', 'maileimer.de', 'mailexpire.com', 'mailfa.tk', 'mailforspam.com', 'mailfreeonline.com', 'mailfs.com', 'mailguard.me', 'mailimate.com', 'mailin8r.com', 'mailinater.com', 'mailinator.com', 'mailinator.net', 'mailinator.org', 'mailinator.us', 'mailinator2.com', 'mailincubator.com', 'mailismagic.com', 'mailmate.com', 'mailme.ir', 'mailme.lv', 'mailme24.com', 'mailmetrash.com', 'mailmetrash.comilzilla.org', 'mailmoat.com', 'mailms.com', 'mailnator.com', 'mailnesia.com', 'mailnull.com', 'mailorg.org', 'mailpick.biz', 'mailproxsy.com', 'mailquack.com', 'mailrock.biz', 'mailscrap.com', 'mailshell.com', 'mailsiphon.com', 'mailslapping.com', 'mailslite.com', 'mailtemp.info', 'mailtome.de', 'mailtothis.com', 'mailtrash.net', 'mailtv.net', 'mailtv.tv', 'mailzilla.com', 'mailzilla.org', 'mailzilla.orgmbx.cc', 'makemetheking.com', 'manifestgenerator.com', 'manybrain.com', 'mbx.cc', 'mega.zik.dj', 'meinspamschutz.de', 'meltmail.com', 'messagebeamer.de', 'mezimages.net', 'mierdamail.com', 'migumail.com', 'ministry-of-silly-walks.de', 'mintemail.com', 'misterpinball.de', 'mjukglass.nu', 'mmailinater.com', 'moakt.com', 'mobi.web.id', 'mobileninja.co.uk', 'moburl.com', 'mohmal.com', 'moncourrier.fr.nf', 'monemail.fr.nf', 'monmail.fr.nf', 'monumentmail.com', 'msa.minsmail.com', 'mt2009.com', 'mt2014.com', 'mx0.wwwnew.eu', 'my10minutemail.com', 'mycard.net.ua', 'mycleaninbox.net', 'myemailboxy.com', 'mymail-in.net', 'mymailoasis.com', 'mynetstore.de', 'mypacks.net', 'mypartyclip.de', 'myphantomemail.com', 'mysamp.de', 'myspaceinc.com', 'myspaceinc.net', 'myspaceinc.org', 'myspacepimpedup.com', 'myspamless.com', 'mytemp.email', 'mytempemail.com', 'mytempmail.com', 'mytrashmail.com', 'nabuma.com', 'neomailbox.com', 'nepwk.com', 'nervmich.net', 'nervtmich.net', 'netmails.com', 'netmails.net', 'netzidiot.de', 'neverbox.com', 'nice-4u.com', 'nincsmail.com', 'nincsmail.hu', 'nnh.com', 'no-spam.ws', 'noblepioneer.com', 'nobulk.com', 'noclickemail.com', 'nogmailspam.info', 'nomail.pw', 'nomail.xl.cx', 'nomail2me.com', 'nomorespamemails.com', 'nonspam.eu', 'nonspammer.de', 'noref.in', 'nospam.ze.tc', 'nospam4.us', 'nospamfor.us', 'nospammail.net', 'nospamthanks.info', 'notmailinator.com', 'notsharingmy.info', 'nowhere.org', 'nowmymail.com', 'nurfuerspam.de', 'nus.edu.sg', 'nwldx.com', 'objectmail.com', 'obobbo.com', 'odaymail.com', 'odnorazovoe.ru', 'one-time.email', 'oneoffemail.com', 'oneoffmail.com', 'onewaymail.com', 'onlatedotcom.info', 'online.ms', 'oopi.org', 'opayq.com', 'ordinaryamerican.net', 'otherinbox.codupmyspace.com', 'otherinbox.com', 'ourklips.com', 'outlawspam.com', 'ovpn.to', 'owlpic.com', 'pancakemail.com', 'paplease.com', 'pcusers.otherinbox.com', 'pepbot.com', 'pfui.ru', 'pimpedupmyspace.com', 'pjjkp.com', 'plexolan.de', 'poczta.onet.pl', 'politikerclub.de', 'pooae.com', 'poofy.org', 'pookmail.com', 'privacy.net', 'privatdemail.net', 'privy-mail.com', 'privymail.de', 'proxymail.eu', 'prtnx.com', 'prtz.eu', 'punkass.com', 'putthisinyourspamdatabase.com', 'pwrby.com', 'quickinbox.com', 'quickmail.nl', 'rcpt.at', 'reallymymail.com', 'realtyalerts.ca', 'recode.me', 'recursor.net', 'recyclemail.dk', 'regbypass.com', 'regbypass.comsafe-mail.net', 'rejectmail.com', 'reliable-mail.com', 'rhyta.com', 'rklips.com', 'rmqkr.net', 'royal.net', 'rppkn.com', 'rtrtr.com', 's0ny.net', 'safe-mail.net', 'safersignup.de', 'safetymail.info', 'safetypost.de', 'sandelf.de', 'saynotospams.com', 'schafmail.de', 'schrott-email.de', 'secretemail.de', 'secure-mail.biz', 'selfdestructingmail.com', 'selfdestructingmail.org', 'sendspamhere.com', 'sendspamhere.com', 'senseless-entertainment.com', 'services391.com', 'sharedmailbox.org', 'sharklasers.com', 'shieldedmail.com', 'shieldemail.com', 'shiftmail.com', 'shitmail.me', 'shitmail.org', 'shitware.nl', 'shmeriously.com', 'shortmail.net', 'shotmail.ru', 'showslow.de', 'sibmail.com', 'sinnlos-mail.de', 'siteposter.net', 'skeefmail.com', 'slapsfromlastnight.com', 'slaskpost.se', 'slipry.net', 'slopsbox.com', 'slushmail.com', 'smashmail.de', 'smellfear.com', 'smellrear.com', 'snakemail.com', 'sneakemail.com', 'sneakmail.de', 'snkmail.com', 'sofimail.com', 'sofort-mail.de', 'softpls.asia', 'sogetthis.com', 'sohu.com', 'solvemail.info', 'soodonims.com', 'spa.com', 'spaereplease.com', 'spam.la', 'spam.su', 'spam4.me', 'spamail.de', 'spamarrest.com', 'spamavert.com', 'spambob.com', 'spambob.net', 'spambob.org', 'spambog.com', 'spambog.de', 'spambog.net', 'spambog.ru', 'spambox.info', 'spambox.irishspringrealty.com', 'spambox.us', 'spamcannon.com', 'spamcannon.net', 'spamcero.com', 'spamcon.org', 'spamcorptastic.com', 'spamcowboy.com', 'spamcowboy.net', 'spamcowboy.org', 'spamday.com', 'spamex.com', 'spamfree.eu', 'spamfree24.com', 'spamfree24.de', 'spamfree24.eu', 'spamfree24.info', 'spamfree24.net', 'spamfree24.org', 'spamgoes.in', 'spamgourmet.com', 'spamgourmet.net', 'spamgourmet.org', 'spamherelots.com', 'spamhereplease.com', 'spamhole.com', 'spamify.com', 'spaminator.de', 'spamkill.info', 'spaml.com', 'spaml.de', 'spammotel.com', 'spamobox.com', 'spamoff.de', 'spamsalad.in', 'spamslicer.com', 'spamspot.com', 'spamstack.net', 'spamthis.co.uk', 'spamthisplease.com', 'spamtrail.com', 'spamtroll.net', 'speed.1s.fr', 'spikio.com', 'spoofmail.de', 'squizzy.de', 'ssoia.com', 'startkeys.com', 'stinkefinger.net', 'stop-my-spam.com', 'stuffmail.de', 'super-auswahl.de', 'supergreatmail.com', 'supermailer.jp', 'superrito.com', 'superstachel.de', 'suremail.info', 'svk.jp', 'sweetxxx.de', 'tagyourself.com', 'talkinator.com', 'tapchicuoihoi.com', 'teewars.org', 'teleosaurs.xyz', 'teleworm.com', 'teleworm.us', 'temp-mail.org', 'temp-mail.ru', 'temp.emeraldwebmail.com', 'temp.headstrong.de', 'tempalias.com', 'tempe-mail.com', 'tempemail.biz', 'tempemail.co.za', 'tempemail.com', 'tempemail.net', 'tempemail.net', 'tempinbox.co.uk', 'tempinbox.com', 'tempmail.eu', 'tempmail.it', 'tempmail2.com', 'tempmaildemo.com', 'tempmailer.com', 'tempmailer.de', 'tempomail.fr', 'temporarily.de', 'temporarioemail.com.br', 'temporaryemail.net', 'temporaryemail.us', 'temporaryforwarding.com', 'temporaryinbox.com', 'temporarymailaddress.com', 'tempsky.com', 'tempthe.net', 'tempymail.com', 'thanksnospam.info', 'thankyou2010.com', 'thc.st', 'thecloudindex.com', 'thelimestones.com', 'thisisnotmyrealemail.com', 'thismail.net', 'thrma.com', 'throwawayemailaddress.com', 'tilien.com', 'tittbit.in', 'tizi.com', 'tmail.ws', 'tmailinator.com', 'toiea.com', 'toomail.biz', 'topranklist.de', 'tradermail.info', 'trash-amil.com', 'trash-mail.at', 'trash-mail.com', 'trash-mail.de', 'trash2009.com', 'trash2010.com', 'trash2011.com', 'trashdevil.com', 'trashdevil.de', 'trashemail.de', 'trashmail.at', 'trashmail.com', 'trashmail.de', 'trashmail.me', 'trashmail.net', 'trashmail.org', 'trashmail.ws', 'trashmailer.com', 'trashymail.com', 'trashymail.net', 'trbvm.com', 'trbvn.com', 'trialmail.de', 'trillianpro.com', 'tryalert.com', 'turual.com', 'twinmail.de', 'twoweirdtricks.com', 'tyldd.com', 'uggsrock.com', 'umail.net', 'upliftnow.com', 'uplipht.com', 'uroid.com', 'us.af', 'username.e4ward.com', 'venompen.com', 'veryrealemail.com', 'vidchart.com', 'viditag.com', 'viewcastmedia.com', 'viewcastmedia.net', 'viewcastmedia.org', 'viewcastmediae', 'viralplays.com', 'vkcode.ru', 'vomoto.com', 'vpn.st', 'vsimcard.com', 'vubby.com', 'walala.org', 'walkmail.net', 'walkmail.ru', 'wasteland.rfc822.org', 'webemail.me', 'webm4il.info', 'webuser.in', 'wee.my', 'weg-werf-email.de', 'wegwerf-email-addressen.de', 'wegwerf-emails.de', 'wegwerfadresse.de', 'wegwerfemail.com', 'wegwerfemail.de', 'wegwerfmail.de', 'wegwerfmail.info', 'wegwerfmail.net', 'wegwerfmail.org', 'wetrainbayarea.com', 'wetrainbayarea.org', 'wh4f.org', 'whatiaas.com', 'whatpaas.com', 'whatsaas.com', 'whopy.com', 'whtjddn.33mail.com', 'whyspam.me', 'wilemail.com', 'willhackforfood.biz', 'willselfdestruct.com', 'winemaven.info', 'wronghead.com', 'wuzup.net', 'wuzupmail.net', 'www.e4ward.com', 'www.gishpuppy.com', 'www.mailinator.com', 'wwwnew.eu', 'x.ip6.li', 'xagloo.com', 'xemaps.com', 'xents.com', 'xmaily.com', 'xoxy.net', 'xyzfree.net', 'yapped.net', 'yeah.net', 'yep.it', 'yogamaven.com', 'yomail.info', 'yopmail.com', 'yopmail.fr', 'yopmail.net', 'yourdomain.com', 'ypmail.webarnak.fr.eu.org', 'yuurok.com', 'z1p.biz', 'za.com', 'zehnminuten.de', 'zehnminutenmail.de', 'zetmail.com', 'zippymail.info', 'zoaxe.com', 'zoemail.com', 'zoemail.net', 'zoemail.org', 'zomg.info', 'zxcv.com', 'zxcvbnm.com', 'zzz.com'];
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"interceptDirectReplyEmails.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/interceptDirectReplyEmails.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	IMAPIntercepter: () => IMAPIntercepter,
	POP3Intercepter: () => POP3Intercepter,
	POP3Helper: () => POP3Helper
});
let IMAP;
module.watch(require("imap"), {
	default(v) {
		IMAP = v;
	}

}, 0);
let POP3;
module.watch(require("poplib"), {
	default(v) {
		POP3 = v;
	}

}, 1);
let simpleParser;
module.watch(require("mailparser-node4"), {
	simpleParser(v) {
		simpleParser = v;
	}

}, 2);

class IMAPIntercepter {
	constructor() {
		this.imap = new IMAP({
			user: RocketChat.settings.get('Direct_Reply_Username'),
			password: RocketChat.settings.get('Direct_Reply_Password'),
			host: RocketChat.settings.get('Direct_Reply_Host'),
			port: RocketChat.settings.get('Direct_Reply_Port'),
			debug: RocketChat.settings.get('Direct_Reply_Debug') ? console.log : false,
			tls: !RocketChat.settings.get('Direct_Reply_IgnoreTLS'),
			connTimeout: 30000,
			keepalive: true
		});
		this.delete = RocketChat.settings.get('Direct_Reply_Delete') ? RocketChat.settings.get('Direct_Reply_Delete') : true; // On successfully connected.

		this.imap.on('ready', Meteor.bindEnvironment(() => {
			if (this.imap.state !== 'disconnected') {
				this.openInbox(Meteor.bindEnvironment(err => {
					if (err) {
						throw err;
					} // fetch new emails & wait [IDLE]


					this.getEmails(); // If new message arrived, fetch them

					this.imap.on('mail', Meteor.bindEnvironment(() => {
						this.getEmails();
					}));
				}));
			} else {
				console.log('IMAP didnot connected.');
				this.imap.end();
			}
		}));
		this.imap.on('error', err => {
			console.log('Error occurred ...');
			throw err;
		});
	}

	openInbox(cb) {
		this.imap.openBox('INBOX', false, cb);
	}

	start() {
		this.imap.connect();
	}

	isActive() {
		if (this.imap && this.imap.state && this.imap.state === 'disconnected') {
			return false;
		}

		return true;
	}

	stop(callback = new Function()) {
		this.imap.end();
		this.imap.once('end', callback);
	}

	restart() {
		this.stop(() => {
			console.log('Restarting IMAP ....');
			this.start();
		});
	} // Fetch all UNSEEN messages and pass them for further processing


	getEmails() {
		this.imap.search(['UNSEEN'], Meteor.bindEnvironment((err, newEmails) => {
			if (err) {
				console.log(err);
				throw err;
			} // newEmails => array containing serials of unseen messages


			if (newEmails.length > 0) {
				const f = this.imap.fetch(newEmails, {
					// fetch headers & first body part.
					bodies: ['HEADER.FIELDS (FROM TO DATE MESSAGE-ID)', '1'],
					struct: true,
					markSeen: true
				});
				f.on('message', Meteor.bindEnvironment((msg, seqno) => {
					const email = {};
					msg.on('body', (stream, info) => {
						let headerBuffer = '';
						let bodyBuffer = '';
						stream.on('data', chunk => {
							if (info.which === '1') {
								bodyBuffer += chunk.toString('utf8');
							} else {
								headerBuffer += chunk.toString('utf8');
							}
						});
						stream.once('end', () => {
							if (info.which === '1') {
								email.body = bodyBuffer;
							} else {
								// parse headers
								email.headers = IMAP.parseHeader(headerBuffer);
								email.headers.to = email.headers.to[0];
								email.headers.date = email.headers.date[0];
								email.headers.from = email.headers.from[0];
							}
						});
					}); // On fetched each message, pass it further

					msg.once('end', Meteor.bindEnvironment(() => {
						// delete message from inbox
						if (this.delete) {
							this.imap.seq.addFlags(seqno, 'Deleted', err => {
								if (err) {
									console.log(`Mark deleted error: ${err}`);
								}
							});
						}

						RocketChat.processDirectEmail(email);
					}));
				}));
				f.once('error', err => {
					console.log(`Fetch error: ${err}`);
				});
			}
		}));
	}

}

class POP3Intercepter {
	constructor() {
		this.pop3 = new POP3(RocketChat.settings.get('Direct_Reply_Port'), RocketChat.settings.get('Direct_Reply_Host'), {
			enabletls: !RocketChat.settings.get('Direct_Reply_IgnoreTLS'),
			debug: RocketChat.settings.get('Direct_Reply_Debug') ? console.log : false
		});
		this.totalMsgCount = 0;
		this.currentMsgCount = 0;
		this.pop3.on('connect', Meteor.bindEnvironment(() => {
			this.pop3.login(RocketChat.settings.get('Direct_Reply_Username'), RocketChat.settings.get('Direct_Reply_Password'));
		}));
		this.pop3.on('login', Meteor.bindEnvironment(status => {
			if (status) {
				// run on start
				this.pop3.list();
			} else {
				console.log('Unable to Log-in ....');
			}
		})); // on getting list of all emails

		this.pop3.on('list', Meteor.bindEnvironment((status, msgcount) => {
			if (status) {
				if (msgcount > 0) {
					this.totalMsgCount = msgcount;
					this.currentMsgCount = 1; // Retrieve email

					this.pop3.retr(this.currentMsgCount);
				} else {
					this.pop3.quit();
				}
			} else {
				console.log('Cannot Get Emails ....');
			}
		})); // on retrieved email

		this.pop3.on('retr', Meteor.bindEnvironment((status, msgnumber, data) => {
			if (status) {
				// parse raw email data to  JSON object
				simpleParser(data, Meteor.bindEnvironment((err, mail) => {
					this.initialProcess(mail);
				}));
				this.currentMsgCount += 1; // delete email

				this.pop3.dele(msgnumber);
			} else {
				console.log('Cannot Retrieve Message ....');
			}
		})); // on email deleted

		this.pop3.on('dele', Meteor.bindEnvironment(status => {
			if (status) {
				// get next email
				if (this.currentMsgCount <= this.totalMsgCount) {
					this.pop3.retr(this.currentMsgCount);
				} else {
					// parsed all messages.. so quitting
					this.pop3.quit();
				}
			} else {
				console.log('Cannot Delete Message....');
			}
		})); // invalid server state

		this.pop3.on('invalid-state', function (cmd) {
			console.log(`Invalid state. You tried calling ${cmd}`);
		}); // locked => command already running, not finished yet

		this.pop3.on('locked', function (cmd) {
			console.log(`Current command has not finished yet. You tried calling ${cmd}`);
		});
	}

	initialProcess(mail) {
		const email = {
			headers: {
				from: mail.from.text,
				to: mail.to.text,
				date: mail.date,
				'message-id': mail.messageId
			},
			body: mail.text
		};
		RocketChat.processDirectEmail(email);
	}

}

class POP3Helper {
	constructor() {
		this.running = false;
	}

	start() {
		// run every x-minutes
		if (RocketChat.settings.get('Direct_Reply_Frequency')) {
			RocketChat.POP3 = new POP3Intercepter();
			this.running = Meteor.setInterval(() => {
				// get new emails and process
				RocketChat.POP3 = new POP3Intercepter();
			}, Math.max(RocketChat.settings.get('Direct_Reply_Frequency') * 60 * 1000, 2 * 60 * 1000));
		}
	}

	isActive() {
		return this.running;
	}

	stop(callback = new Function()) {
		if (this.isActive()) {
			Meteor.clearInterval(this.running);
		}

		callback();
	}

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loginErrorMessageOverride.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/loginErrorMessageOverride.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Do not disclose if user exists when password is invalid
const _runLoginHandlers = Accounts._runLoginHandlers;

Accounts._runLoginHandlers = function (methodInvocation, options) {
	const result = _runLoginHandlers.call(Accounts, methodInvocation, options);

	if (result.error && result.error.reason === 'Incorrect password') {
		result.error = new Meteor.Error(403, 'User not found');
	}

	return result;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"notifyUsersOnMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/notifyUsersOnMessage.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);
let moment;
module.watch(require("moment"), {
	default(v) {
		moment = v;
	}

}, 2);
RocketChat.callbacks.add('afterSaveMessage', function (message, room) {
	// skips this callback if the message was edited and increments it if the edit was way in the past (aka imported)
	if (message.editedAt && Math.abs(moment(message.editedAt).diff()) > 60000) {
		//TODO: Review as I am not sure how else to get around this as the incrementing of the msgs count shouldn't be in this callback
		RocketChat.models.Rooms.incMsgCountById(message.rid, 1);
		return message;
	} else if (message.editedAt) {
		// only updates last message if it was edited (skip rest of callback)
		if (RocketChat.settings.get('Store_Last_Message') && (!room.lastMessage || room.lastMessage._id === message._id)) {
			RocketChat.models.Rooms.setLastMessageById(message.rid, message);
		}

		return message;
	}

	if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {
		RocketChat.models.Rooms.incMsgCountById(message.rid, 1);
		return message;
	} /**
    * Chechs if a messages contains a user highlight
    *
    * @param {string} message
    * @param {array|undefined} highlights
    *
    * @returns {boolean}
       */

	function messageContainsHighlight(message, highlights) {
		if (!highlights || highlights.length === 0) {
			return false;
		}

		let has = false;
		highlights.some(function (highlight) {
			const regexp = new RegExp(s.escapeRegExp(highlight), 'i');

			if (regexp.test(message.msg)) {
				has = true;
				return true;
			}
		});
		return has;
	}

	if (room != null) {
		let toAll = false;
		let toHere = false;
		const mentionIds = [];
		const highlightsIds = [];
		const highlights = RocketChat.models.Users.findUsersByUsernamesWithHighlights(room.usernames, {
			fields: {
				'_id': 1,
				'settings.preferences.highlights': 1
			}
		}).fetch();

		if (message.mentions != null) {
			message.mentions.forEach(function (mention) {
				if (!toAll && mention._id === 'all') {
					toAll = true;
				}

				if (!toHere && mention._id === 'here') {
					toHere = true;
				}

				if (mention._id !== message.u._id) {
					mentionIds.push(mention._id);
				}
			});
		}

		highlights.forEach(function (user) {
			const userHighlights = RocketChat.getUserPreference(user, 'highlights');

			if (userHighlights && messageContainsHighlight(message, userHighlights)) {
				if (user._id !== message.u._id) {
					highlightsIds.push(user._id);
				}
			}
		});

		if (room.t === 'd') {
			const unreadCountDM = RocketChat.settings.get('Unread_Count_DM');

			if (unreadCountDM === 'all_messages') {
				RocketChat.models.Subscriptions.incUnreadForRoomIdExcludingUserId(room._id, message.u._id);
			} else if (toAll || toHere) {
				RocketChat.models.Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(room._id, message.u._id, 1, 1);
			} else if (mentionIds && mentionIds.length > 0 || highlightsIds && highlightsIds.length > 0) {
				RocketChat.models.Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(room._id, _.compact(_.unique(mentionIds.concat(highlightsIds))), 1, 1);
			}
		} else {
			const unreadCount = RocketChat.settings.get('Unread_Count');

			if (toAll || toHere) {
				let incUnread = 0;

				if (['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount)) {
					incUnread = 1;
				}

				RocketChat.models.Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(room._id, message.u._id, 1, incUnread);
			} else if (mentionIds && mentionIds.length > 0 || highlightsIds && highlightsIds.length > 0) {
				let incUnread = 0;

				if (['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount)) {
					incUnread = 1;
				}

				RocketChat.models.Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(room._id, _.compact(_.unique(mentionIds.concat(highlightsIds))), 1, incUnread);
			} else if (unreadCount === 'all_messages') {
				RocketChat.models.Subscriptions.incUnreadForRoomIdExcludingUserId(room._id, message.u._id);
			}
		}
	} // Update all the room activity tracker fields


	RocketChat.models.Rooms.incMsgCountAndSetLastMessageById(message.rid, 1, message.ts, RocketChat.settings.get('Store_Last_Message') && message); // Update all other subscriptions to alert their owners but witout incrementing
	// the unread counter, as it is only for mentions and direct messages

	RocketChat.models.Subscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id);
	return message;
}, RocketChat.callbacks.priority.LOW, 'notifyUsersOnMessage');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"processDirectEmail.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/processDirectEmail.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let reply;
module.watch(require("emailreplyparser"), {
	EmailReplyParser(v) {
		reply = v;
	}

}, 0);
let moment;
module.watch(require("moment"), {
	default(v) {
		moment = v;
	}

}, 1);

RocketChat.processDirectEmail = function (email) {
	function sendMessage(email) {
		const message = {
			ts: new Date(email.headers.date),
			msg: email.body,
			sentByEmail: true,
			groupable: false
		};

		if (message.ts) {
			const tsDiff = Math.abs(moment(message.ts).diff());

			if (tsDiff > 10000) {
				message.ts = new Date();
			}
		} else {
			message.ts = new Date();
		}

		if (message.msg && message.msg.length > RocketChat.settings.get('Message_MaxAllowedSize')) {
			return false;
		} // reduce new lines in multiline message


		message.msg = message.msg.split('\n\n').join('\n');
		const user = RocketChat.models.Users.findOneByEmailAddress(email.headers.from, {
			fields: {
				username: 1,
				name: 1
			}
		});

		if (!user) {
			// user not found
			return false;
		}

		const prevMessage = RocketChat.models.Messages.findOneById(email.headers.mid, {
			rid: 1,
			u: 1
		});

		if (!prevMessage) {
			// message doesn't exist anymore
			return false;
		}

		message.rid = prevMessage.rid;
		const room = Meteor.call('canAccessRoom', message.rid, user._id);

		if (!room) {
			return false;
		}

		const roomInfo = RocketChat.models.Rooms.findOneById(message.rid, {
			t: 1,
			name: 1
		}); // check mention

		if (message.msg.indexOf(`@${prevMessage.u.username}`) === -1 && roomInfo.t !== 'd') {
			message.msg = `@${prevMessage.u.username} ${message.msg}`;
		} // reply message link


		let prevMessageLink = `[ ](${Meteor.absoluteUrl().replace(/\/$/, '')}`;

		if (roomInfo.t === 'c') {
			prevMessageLink += `/channel/${roomInfo.name}?msg=${email.headers.mid}) `;
		} else if (roomInfo.t === 'd') {
			prevMessageLink += `/direct/${prevMessage.u.username}?msg=${email.headers.mid}) `;
		} else if (roomInfo.t === 'p') {
			prevMessageLink += `/group/${roomInfo.name}?msg=${email.headers.mid}) `;
		} // add reply message link


		message.msg = prevMessageLink + message.msg;
		const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(message.rid, user._id);

		if (subscription && subscription.blocked || subscription.blocker) {
			// room is blocked
			return false;
		}

		if ((room.muted || []).includes(user.username)) {
			// room is muted
			return false;
		}

		if (message.alias == null && RocketChat.settings.get('Message_SetNameToAliasEnabled')) {
			message.alias = user.name;
		}

		RocketChat.metrics.messagesSent.inc(); // TODO This line needs to be moved to it's proper place. See the comments on: https://github.com/RocketChat/Rocket.Chat/pull/5736

		return RocketChat.sendMessage(user, message, room);
	} // Extract/parse reply from email body


	email.body = reply.parse_reply(email.body); // if 'To' email format is "Name <username@domain>"

	if (email.headers.to.indexOf('<') >= 0 && email.headers.to.indexOf('>') >= 0) {
		email.headers.to = email.headers.to.split('<')[1].split('>')[0];
	} // if 'From' email format is "Name <username@domain>"


	if (email.headers.from.indexOf('<') >= 0 && email.headers.from.indexOf('>') >= 0) {
		email.headers.from = email.headers.from.split('<')[1].split('>')[0];
	} // 'To' email format "username+messageId@domain"


	if (email.headers.to.indexOf('+') >= 0) {
		// Valid 'To' format
		email.headers.mid = email.headers.to.split('@')[0].split('+')[1];
		sendMessage(email);
	} else {
		console.log('Invalid Email....If not. Please report it.');
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"roomTypes.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/roomTypes.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RoomTypesCommon;
module.watch(require("../../lib/RoomTypesCommon"), {
	RoomTypesCommon(v) {
		RoomTypesCommon = v;
	}

}, 0);
RocketChat.roomTypes = new class roomTypesServer extends RoomTypesCommon {
	/**
  * Add a publish for a room type
  *
  * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))
  * @param {function} callback function that will return the publish's data
 */setPublish(roomType, callback) {
		if (this.roomTypes[roomType] && this.roomTypes[roomType].publish != null) {
			throw new Meteor.Error('route-publish-exists', 'Publish for the given type already exists');
		}

		if (this.roomTypes[roomType] == null) {
			this.roomTypes[roomType] = {};
		}

		return this.roomTypes[roomType].publish = callback;
	}

	setRoomFind(roomType, callback) {
		if (this.roomTypes[roomType] && this.roomTypes[roomType].roomFind != null) {
			throw new Meteor.Error('room-find-exists', 'Room find for the given type already exists');
		}

		if (this.roomTypes[roomType] == null) {
			this.roomTypes[roomType] = {};
		}

		return this.roomTypes[roomType].roomFind = callback;
	}

	getRoomFind(roomType) {
		return this.roomTypes[roomType] && this.roomTypes[roomType].roomFind;
	} /**
    * Run the publish for a room type
    *
    * @param scope Meteor publish scope
    * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))
    * @param identifier identifier of the room
   */

	runPublish(scope, roomType, identifier) {
		return this.roomTypes[roomType] && this.roomTypes[roomType].publish && this.roomTypes[roomType].publish.call(scope, identifier);
	}

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendEmailOnMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/sendEmailOnMessage.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let moment;
module.watch(require("moment"), {
	default(v) {
		moment = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);

function getEmailContent({
	messageContent,
	message,
	user,
	room
}) {
	const lng = user && user.language || RocketChat.settings.get('language') || 'en';
	const roomName = `#${RocketChat.settings.get('UI_Allow_room_names_with_special_chars') ? room.fname || room.name : room.name}`;
	const userName = RocketChat.settings.get('UI_Use_Real_Name') ? message.u.name || message.u.username : message.u.username;

	const header = TAPi18n.__(room.t === 'd' ? 'User_sent_a_message_to_you' : 'User_sent_a_message_on_channel', {
		username: userName,
		channel: roomName,
		lng
	});

	if (messageContent) {
		return `${header}<br/><br/>${messageContent}`;
	}

	if (message.file) {
		const fileHeader = TAPi18n.__(room.t === 'd' ? 'User_uploaded_a_file_to_you' : 'User_uploaded_a_file_on_channel', {
			username: userName,
			channel: roomName,
			lng
		});

		let content = `${TAPi18n.__('Attachment_File_Uploaded')}: ${message.file.name}`;

		if (message.attachments && message.attachments.length === 1 && message.attachments[0].description !== '') {
			content += `<br/><br/>${message.attachments[0].description}`;
		}

		return `${fileHeader}<br/><br/>${content}`;
	}

	if (message.attachments.length > 0) {
		const [attachment] = message.attachments;
		let content = '';

		if (attachment.title) {
			content += `${attachment.title}<br/>`;
		}

		if (attachment.text) {
			content += `${attachment.text}<br/>`;
		}

		return `${header}<br/><br/>${content}`;
	}

	return header;
}

RocketChat.callbacks.add('afterSaveMessage', function (message, room) {
	// skips this callback if the message was edited
	if (message.editedAt) {
		return message;
	}

	if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {
		return message;
	}

	const getMessageLink = (room, sub) => {
		const roomPath = RocketChat.roomTypes.getRouteLink(room.t, sub);
		const path = Meteor.absoluteUrl(roomPath ? roomPath.replace(/^\//, '') : '');
		const style = ['color: #fff;', 'padding: 9px 12px;', 'border-radius: 4px;', 'background-color: #04436a;', 'text-decoration: none;'].join(' ');

		const message = TAPi18n.__('Offline_Link_Message');

		return `<p style="text-align:center;margin-bottom:8px;"><a style="${style}" href="${path}">${message}</a>`;
	};

	const divisorMessage = '<hr style="margin: 20px auto; border: none; border-bottom: 1px solid #dddddd;">';
	let messageHTML;

	if (message.msg !== '') {
		messageHTML = s.escapeHTML(message.msg);
		message = RocketChat.callbacks.run('renderMessage', message);

		if (message.tokens && message.tokens.length > 0) {
			message.tokens.forEach(token => {
				token.text = token.text.replace(/([^\$])(\$[^\$])/gm, '$1$$$2');
				messageHTML = messageHTML.replace(token.token, token.text);
			});
		}

		messageHTML = messageHTML.replace(/\n/gm, '<br/>');
	}

	const header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');
	let footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');
	const usersToSendEmail = {};

	if (room.t === 'd') {
		usersToSendEmail[message.rid.replace(message.u._id, '')] = 'direct';
	} else {
		let isMentionAll = message.mentions.find(mention => mention._id === 'all');

		if (isMentionAll) {
			const maxMembersForNotification = RocketChat.settings.get('Notifications_Max_Room_Members');

			if (maxMembersForNotification !== 0 && room.usernames.length > maxMembersForNotification) {
				isMentionAll = undefined;
			}
		}

		let query;

		if (isMentionAll) {
			// Query all users in room limited by the max room members setting
			query = RocketChat.models.Subscriptions.findByRoomId(room._id);
		} else {
			// Query only mentioned users, will be always a few users
			const userIds = message.mentions.map(mention => mention._id);
			query = RocketChat.models.Subscriptions.findByRoomIdAndUserIdsOrAllMessages(room._id, userIds);
		}

		query.forEach(sub => {
			if (sub.disableNotifications) {
				return delete usersToSendEmail[sub.u._id];
			}

			const emailNotifications = sub.emailNotifications;

			if (emailNotifications === 'nothing') {
				return delete usersToSendEmail[sub.u._id];
			}

			const mentionedUser = isMentionAll || message.mentions.find(mention => mention._id === sub.u._id);

			if (emailNotifications === 'default' || emailNotifications == null) {
				if (mentionedUser) {
					return usersToSendEmail[sub.u._id] = 'default';
				}

				return delete usersToSendEmail[sub.u._id];
			}

			if (emailNotifications === 'mentions' && mentionedUser) {
				return usersToSendEmail[sub.u._id] = 'mention';
			}

			if (emailNotifications === 'all') {
				return usersToSendEmail[sub.u._id] = 'all';
			}
		});
	}

	const userIdsToSendEmail = Object.keys(usersToSendEmail);
	let defaultLink;
	const linkByUser = {};

	if (RocketChat.roomTypes.hasCustomLink(room.t)) {
		RocketChat.models.Subscriptions.findByRoomIdAndUserIds(room._id, userIdsToSendEmail).forEach(sub => {
			linkByUser[sub.u._id] = getMessageLink(room, sub);
		});
	} else {
		defaultLink = getMessageLink(room, {
			name: room.name
		});
	}

	if (userIdsToSendEmail.length > 0) {
		const usersOfMention = RocketChat.models.Users.getUsersToSendOfflineEmail(userIdsToSendEmail).fetch();

		if (usersOfMention && usersOfMention.length > 0) {
			usersOfMention.forEach(user => {
				const emailNotificationMode = RocketChat.getUserPreference(user, 'emailNotificationMode');

				if (usersToSendEmail[user._id] === 'default') {
					if (emailNotificationMode === 'all') {
						//Mention/DM
						usersToSendEmail[user._id] = 'mention';
					} else {
						return;
					}
				}

				if (usersToSendEmail[user._id] === 'direct') {
					const userEmailPreferenceIsDisabled = emailNotificationMode === 'disabled';
					const directMessageEmailPreference = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(message.rid, message.rid.replace(message.u._id, '')).emailNotifications;

					if (directMessageEmailPreference === 'nothing') {
						return;
					}

					if ((directMessageEmailPreference === 'default' || directMessageEmailPreference == null) && userEmailPreferenceIsDisabled) {
						return;
					}
				} // Checks if user is in the room he/she is mentioned (unless it's public channel)


				if (room.t !== 'c' && room.usernames.indexOf(user.username) === -1) {
					return;
				} // Footer in case direct reply is enabled.


				if (RocketChat.settings.get('Direct_Reply_Enable')) {
					footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer_Direct_Reply') || '');
				}

				let emailSubject;
				const username = RocketChat.settings.get('UI_Use_Real_Name') ? message.u.name : message.u.username;
				const roomName = RocketChat.settings.get('UI_Allow_room_names_with_special_chars') ? room.fname : room.name;

				switch (usersToSendEmail[user._id]) {
					case 'all':
						emailSubject = RocketChat.placeholders.replace(RocketChat.settings.get('Offline_Mention_All_Email'), {
							user: username,
							room: roomName || room.label
						});
						break;

					case 'direct':
						emailSubject = RocketChat.placeholders.replace(RocketChat.settings.get('Offline_DM_Email'), {
							user: username,
							room: roomName
						});
						break;

					case 'mention':
						emailSubject = RocketChat.placeholders.replace(RocketChat.settings.get('Offline_Mention_Email'), {
							user: username,
							room: roomName
						});
						break;
				}

				user.emails.some(email => {
					if (email.verified) {
						const content = getEmailContent({
							messageContent: messageHTML,
							message,
							user,
							room
						});
						email = {
							to: email.address,
							subject: emailSubject,
							html: header + content + divisorMessage + (linkByUser[user._id] || defaultLink) + footer
						}; // using user full-name/channel name in from address

						if (room.t === 'd') {
							email.from = `${message.u.name} <${RocketChat.settings.get('From_Email')}>`;
						} else {
							email.from = `${room.name} <${RocketChat.settings.get('From_Email')}>`;
						} // If direct reply enabled, email content with headers


						if (RocketChat.settings.get('Direct_Reply_Enable')) {
							email.headers = {
								// Reply-To header with format "username+messageId@domain"
								'Reply-To': `${RocketChat.settings.get('Direct_Reply_Username').split('@')[0].split(RocketChat.settings.get('Direct_Reply_Separator'))[0]}${RocketChat.settings.get('Direct_Reply_Separator')}${message._id}@${RocketChat.settings.get('Direct_Reply_Username').split('@')[1]}`
							};
						}

						Meteor.defer(() => {
							Email.send(email);
						});
						return true;
					}
				});
			});
		}
	}

	return message;
}, RocketChat.callbacks.priority.LOW, 'sendEmailOnMessage');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendNotificationsOnMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/sendNotificationsOnMessage.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);
let moment;
module.watch(require("moment"), {
	default(v) {
		moment = v;
	}

}, 2);
const CATEGORY_MESSAGE = 'MESSAGE';
const CATEGORY_MESSAGE_NOREPLY = 'MESSAGE_NOREPLY'; /**
                                                     * Replaces @username with full name
                                                     *
                                                     * @param {string} message The message to replace
                                                     * @param {object[]} mentions Array of mentions used to make replacements
                                                     *
                                                     * @returns {string}
                                                     */

function replaceMentionedUsernamesWithFullNames(message, mentions) {
	if (!mentions || !mentions.length) {
		return message;
	}

	mentions.forEach(mention => {
		const user = RocketChat.models.Users.findOneById(mention._id);

		if (user && user.name) {
			message = message.replace(`@${mention.username}`, user.name);
		}
	});
	return message;
}

function canSendMessageToRoom(room, username) {
	return !(room.muted || []).includes(username);
} /**
   * This function returns a string ready to be shown in the notification
   *
   * @param {object} message the message to be parsed
   */

function parseMessageText(message, userId) {
	const user = RocketChat.models.Users.findOneById(userId);
	const lng = user && user.language || RocketChat.settings.get('language') || 'en';

	if (!message.msg && message.attachments && message.attachments[0]) {
		message.msg = message.attachments[0].image_type ? TAPi18n.__('User_uploaded_image', {
			lng
		}) : TAPi18n.__('User_uploaded_file', {
			lng
		});
	}

	message.msg = RocketChat.callbacks.run('beforeNotifyUser', message.msg);
	return message.msg;
} /**
   * Send notification to user
   *
   * @param {string} userId The user to notify
   * @param {object} user The sender
   * @param {object} room The room send from
   * @param {number} duration Duration of notification
   */

function notifyDesktopUser(userId, user, message, room, duration) {
	const UI_Use_Real_Name = RocketChat.settings.get('UI_Use_Real_Name') === true;
	message.msg = parseMessageText(message, userId);

	if (UI_Use_Real_Name) {
		message.msg = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);
	}

	let title = UI_Use_Real_Name ? user.name : `@${user.username}`;

	if (room.t !== 'd' && room.name) {
		title += ` @ #${room.name}`;
	}

	RocketChat.Notifications.notifyUser(userId, 'notification', {
		title,
		text: message.msg,
		duration,
		payload: {
			_id: message._id,
			rid: message.rid,
			sender: message.u,
			type: room.t,
			name: room.name
		}
	});
}

function notifyAudioUser(userId, message, room) {
	RocketChat.Notifications.notifyUser(userId, 'audioNotification', {
		payload: {
			_id: message._id,
			rid: message.rid,
			sender: message.u,
			type: room.t,
			name: room.name
		}
	});
} /**
   * Checks if a message contains a user highlight
   *
   * @param {string} message
   * @param {array|undefined} highlights
   *
   * @returns {boolean}
   */

function messageContainsHighlight(message, highlights) {
	if (!highlights || highlights.length === 0) {
		return false;
	}

	let has = false;
	highlights.some(function (highlight) {
		const regexp = new RegExp(s.escapeRegExp(highlight), 'i');

		if (regexp.test(message.msg)) {
			has = true;
			return true;
		}
	});
	return has;
}

function getBadgeCount(userId) {
	const subscriptions = RocketChat.models.Subscriptions.findUnreadByUserId(userId).fetch();
	return subscriptions.reduce((unread, sub) => {
		return sub.unread + unread;
	}, 0);
}

const sendPushNotifications = (userIdsToPushNotify = [], message, room, push_room, push_username, push_message, pushUsernames) => {
	if (userIdsToPushNotify.length > 0 && Push.enabled === true) {
		// send a push notification for each user individually (to get his/her badge count)
		userIdsToPushNotify.forEach(userIdToNotify => {
			RocketChat.PushNotification.send({
				roomId: message.rid,
				roomName: push_room,
				username: push_username,
				message: push_message,
				badge: getBadgeCount(userIdToNotify),
				payload: {
					host: Meteor.absoluteUrl(),
					rid: message.rid,
					sender: message.u,
					type: room.t,
					name: room.name
				},
				usersTo: {
					userId: userIdToNotify
				},
				category: canSendMessageToRoom(room, pushUsernames[userIdToNotify]) ? CATEGORY_MESSAGE : CATEGORY_MESSAGE_NOREPLY
			});
		});
	}
};

const callJoin = (user, rid) => user.active && Meteor.runAsUser(user._id, () => Meteor.call('joinRoom', rid));

RocketChat.callbacks.add('afterSaveMessage', function (message, room, userId) {
	// skips this callback if the message was edited
	if (message.editedAt) {
		return message;
	}

	if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {
		return message;
	}

	const pushUsernames = {};
	const user = RocketChat.models.Users.findOneById(message.u._id); /*
                                                                  Increment unread couter if direct messages
                                                                   */
	const settings = {
		alwaysNotifyDesktopUsers: [],
		dontNotifyDesktopUsers: [],
		alwaysNotifyMobileUsers: [],
		dontNotifyMobileUsers: [],
		desktopNotificationDurations: {},
		alwaysNotifyAudioUsers: [],
		dontNotifyAudioUsers: [],
		audioNotificationValues: {}
	}; /**
     * Checks if a given user can be notified
     *
     * @param {string} id
     * @param {string} type - mobile|desktop
     *
     * @returns {boolean}
        */

	function canBeNotified(id, type) {
		const types = {
			desktop: ['dontNotifyDesktopUsers', 'alwaysNotifyDesktopUsers'],
			mobile: ['dontNotifyMobileUsers', 'alwaysNotifyMobileUsers'],
			audio: ['dontNotifyAudioUsers', 'alwaysNotifyAudioUsers']
		};
		return settings[types[type][0]].indexOf(id) === -1 || settings[types[type][1]].indexOf(id) !== -1;
	} // Don't fetch all users if room exceeds max members


	const maxMembersForNotification = RocketChat.settings.get('Notifications_Max_Room_Members');
	const disableAllMessageNotifications = room.usernames.length > maxMembersForNotification && maxMembersForNotification !== 0;
	const subscriptions = RocketChat.models.Subscriptions.findNotificationPreferencesByRoom(room._id, disableAllMessageNotifications);
	const userIds = [];
	subscriptions.forEach(s => {
		userIds.push(s.u._id);
	});
	const users = {};
	RocketChat.models.Users.findUsersByIds(userIds, {
		fields: {
			'settings.preferences': 1
		}
	}).forEach(user => {
		users[user._id] = user;
	});
	subscriptions.forEach(subscription => {
		if (subscription.disableNotifications) {
			settings.dontNotifyDesktopUsers.push(subscription.u._id);
			settings.dontNotifyMobileUsers.push(subscription.u._id);
			settings.dontNotifyAudioUsers.push(subscription.u._id);
			return;
		}

		const {
			audioNotifications = RocketChat.getUserPreference(users[subscription.u._id], 'audioNotifications'),
			desktopNotifications = RocketChat.getUserPreference(users[subscription.u._id], 'desktopNotifications'),
			mobilePushNotifications = RocketChat.getUserPreference(users[subscription.u._id], 'mobileNotifications')
		} = subscription;

		if (audioNotifications === 'all' && !disableAllMessageNotifications) {
			settings.alwaysNotifyAudioUsers.push(subscription.u._id);
		}

		if (desktopNotifications === 'all' && !disableAllMessageNotifications) {
			settings.alwaysNotifyDesktopUsers.push(subscription.u._id);
		} else if (desktopNotifications === 'nothing') {
			settings.dontNotifyDesktopUsers.push(subscription.u._id);
		}

		if (mobilePushNotifications === 'all' && !disableAllMessageNotifications) {
			settings.alwaysNotifyMobileUsers.push(subscription.u._id);
		} else if (mobilePushNotifications === 'nothing') {
			settings.dontNotifyMobileUsers.push(subscription.u._id);
		}

		settings.audioNotificationValues[subscription.u._id] = subscription.audioNotificationValue;
		settings.desktopNotificationDurations[subscription.u._id] = subscription.desktopNotificationDuration;
	});
	let userIdsForAudio = [];
	let userIdsToNotify = [];
	let userIdsToPushNotify = [];
	const mentions = [];
	const alwaysNotifyMobileBoolean = RocketChat.settings.get('Notifications_Always_Notify_Mobile');
	const usersWithHighlights = RocketChat.models.Users.findUsersByUsernamesWithHighlights(room.usernames, {
		fields: {
			'_id': 1,
			'settings.preferences.highlights': 1
		}
	}).fetch().filter(user => messageContainsHighlight(message, user.settings.preferences.highlights));
	let push_message = ' '; //Set variables depending on Push Notification settings

	if (RocketChat.settings.get('Push_show_message')) {
		push_message = parseMessageText(message, userId);
	}

	let push_username = '';
	let push_room = '';

	if (RocketChat.settings.get('Push_show_username_room')) {
		push_username = user.username;
		push_room = `#${room.name}`;
	}

	if (room.t == null || room.t === 'd') {
		const userOfMentionId = message.rid.replace(message.u._id, '');
		const userOfMention = RocketChat.models.Users.findOne({
			_id: userOfMentionId
		}, {
			fields: {
				username: 1,
				statusConnection: 1
			}
		}); // Always notify Sandstorm

		if (userOfMention != null) {
			RocketChat.Sandstorm.notify(message, [userOfMention._id], `@${user.username}: ${message.msg}`, 'privateMessage');

			if (canBeNotified(userOfMentionId, 'desktop')) {
				const duration = settings.desktopNotificationDurations[userOfMention._id];
				notifyDesktopUser(userOfMention._id, user, message, room, duration);
			}

			if (canBeNotified(userOfMentionId, 'mobile')) {
				if (Push.enabled === true && (userOfMention.statusConnection !== 'online' || alwaysNotifyMobileBoolean === true)) {
					RocketChat.PushNotification.send({
						roomId: message.rid,
						username: push_username,
						message: push_message,
						badge: getBadgeCount(userOfMention._id),
						payload: {
							host: Meteor.absoluteUrl(),
							rid: message.rid,
							sender: message.u,
							type: room.t,
							name: room.name
						},
						usersTo: {
							userId: userOfMention._id
						},
						category: canSendMessageToRoom(room, userOfMention.username) ? CATEGORY_MESSAGE : CATEGORY_MESSAGE_NOREPLY
					});
					return message;
				}
			}
		}
	} else {
		const mentionIds = (message.mentions || []).map(({
			_id
		}) => _id);
		const toAll = mentionIds.includes('all');
		const toHere = mentionIds.includes('here');

		if (mentionIds.length + settings.alwaysNotifyDesktopUsers.length > 0) {
			let desktopMentionIds = _.union(mentionIds, settings.alwaysNotifyDesktopUsers);

			desktopMentionIds = _.difference(desktopMentionIds, settings.dontNotifyDesktopUsers);
			let usersOfDesktopMentions = RocketChat.models.Users.find({
				_id: {
					$in: desktopMentionIds
				}
			}, {
				fields: {
					_id: 1,
					username: 1,
					active: 1
				}
			}).fetch();
			mentions.push(...usersOfDesktopMentions);

			if (room.t !== 'c') {
				usersOfDesktopMentions = _.reject(usersOfDesktopMentions, usersOfMentionItem => {
					return room.usernames.indexOf(usersOfMentionItem.username) === -1;
				});
			}

			userIdsToNotify = _.pluck(usersOfDesktopMentions, '_id');
		}

		if (mentionIds.length + settings.alwaysNotifyMobileUsers.length > 0) {
			let mobileMentionIds = _.union(mentionIds, settings.alwaysNotifyMobileUsers);

			mobileMentionIds = _.difference(mobileMentionIds, settings.dontNotifyMobileUsers);
			const usersOfMobileMentionsQuery = {
				_id: {
					$in: mobileMentionIds
				}
			};

			if (alwaysNotifyMobileBoolean !== true) {
				usersOfMobileMentionsQuery.statusConnection = {
					$ne: 'online'
				};
			}

			let usersOfMobileMentions = RocketChat.models.Users.find(usersOfMobileMentionsQuery, {
				fields: {
					_id: 1,
					username: 1,
					statusConnection: 1,
					active: 1
				}
			}).fetch();
			mentions.push(...usersOfMobileMentions);

			if (room.t !== 'c') {
				usersOfMobileMentions = _.reject(usersOfMobileMentions, usersOfMentionItem => !room.usernames.includes(usersOfMentionItem.username));
			}

			userIdsToPushNotify = usersOfMobileMentions.map(userMobile => {
				pushUsernames[userMobile._id] = userMobile.username;
				return userMobile._id;
			});
		}

		if (mentionIds.length + settings.alwaysNotifyAudioUsers.length > 0) {
			let audioMentionIds = _.union(mentionIds, settings.alwaysNotifyAudioUsers);

			audioMentionIds = _.difference(audioMentionIds, userIdsToNotify);
			let usersOfAudioMentions = RocketChat.models.Users.find({
				_id: {
					$in: audioMentionIds
				},
				statusConnection: {
					$ne: 'offline'
				}
			}, {
				fields: {
					_id: 1,
					username: 1,
					active: 1
				}
			}).fetch();
			mentions.push(...usersOfAudioMentions);

			if (room.t !== 'c') {
				usersOfAudioMentions = _.reject(usersOfAudioMentions, usersOfMentionItem => {
					return room.usernames.indexOf(usersOfMentionItem.username) === -1;
				});
			}

			userIdsForAudio = _.pluck(usersOfAudioMentions, '_id');
		}

		if (room.t === 'c') {
			mentions.filter(user => !room.usernames.includes(user.username)).forEach(user => callJoin(user, room._id));
		}

		if ([toAll, toHere].some(e => e) && room.usernames && room.usernames.length > 0) {
			RocketChat.models.Users.find({
				username: {
					$in: room.usernames
				},
				_id: {
					$ne: user._id
				}
			}, {
				fields: {
					_id: 1,
					username: 1,
					status: 1,
					statusConnection: 1
				}
			}).forEach(function (user) {
				if (['online', 'away', 'busy'].includes(user.status) && !(settings.dontNotifyDesktopUsers || []).includes(user._id)) {
					userIdsToNotify.push(user._id);
					userIdsForAudio.push(user._id);
				}

				if (toAll && user.statusConnection !== 'online' && !(settings.dontNotifyMobileUsers || []).includes(user._id)) {
					pushUsernames[user._id] = user.username;
					return userIdsToPushNotify.push(user._id);
				}

				if (toAll && user.statusConnection !== 'online') {
					userIdsForAudio.push(user._id);
				}
			});
		}

		if (usersWithHighlights.length > 0) {
			const highlightsIds = _.pluck(usersWithHighlights, '_id');

			userIdsForAudio = userIdsForAudio.concat(highlightsIds);
			userIdsToNotify = userIdsToNotify.concat(highlightsIds);
			userIdsToPushNotify = userIdsToPushNotify.concat(highlightsIds);
		}

		userIdsToNotify = _.without(_.compact(_.unique(userIdsToNotify)), message.u._id);
		userIdsToPushNotify = _.without(_.compact(_.unique(userIdsToPushNotify)), message.u._id);
		userIdsForAudio = _.without(_.compact(_.unique(userIdsForAudio)), message.u._id);

		for (const usersOfMentionId of userIdsToNotify) {
			const duration = settings.desktopNotificationDurations[usersOfMentionId];
			notifyDesktopUser(usersOfMentionId, user, message, room, duration);
		}

		for (const usersOfMentionId of userIdsForAudio) {
			notifyAudioUser(usersOfMentionId, message, room);
		}

		sendPushNotifications(userIdsToPushNotify, message, room, push_room, push_username, push_message, pushUsernames);

		const allUserIdsToNotify = _.unique(userIdsToNotify.concat(userIdsToPushNotify));

		RocketChat.Sandstorm.notify(message, allUserIdsToNotify, `@${user.username}: ${message.msg}`, room.t === 'p' ? 'privateMessage' : 'message');
	}

	return message;
}, RocketChat.callbacks.priority.LOW, 'sendNotificationOnMessage');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validateEmailDomain.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/validateEmailDomain.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);

const dns = Npm.require('dns');

let emailDomainBlackList = [];
let emailDomainWhiteList = [];
let useDefaultBlackList = false;
let useDNSDomainCheck = false;
RocketChat.settings.get('Accounts_BlockedDomainsList', function (key, value) {
	emailDomainBlackList = _.map(value.split(','), domain => domain.trim());
});
RocketChat.settings.get('Accounts_AllowedDomainsList', function (key, value) {
	emailDomainWhiteList = _.map(value.split(','), domain => domain.trim());
});
RocketChat.settings.get('Accounts_UseDefaultBlockedDomainsList', function (key, value) {
	useDefaultBlackList = value;
});
RocketChat.settings.get('Accounts_UseDNSDomainCheck', function (key, value) {
	useDNSDomainCheck = value;
});

RocketChat.validateEmailDomain = function (email) {
	const emailValidation = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;

	if (!emailValidation.test(email)) {
		throw new Meteor.Error('error-invalid-email', `Invalid email ${email}`, {
			function: 'RocketChat.validateEmailDomain',
			email
		});
	}

	const emailDomain = email.substr(email.lastIndexOf('@') + 1); // if not in whitelist

	if (emailDomainWhiteList.indexOf(emailDomain) === -1) {
		if (emailDomainBlackList.indexOf(emailDomain) !== -1 || useDefaultBlackList && RocketChat.emailDomainDefaultBlackList.indexOf(emailDomain) !== -1) {
			throw new Meteor.Error('error-email-domain-blacklisted', 'The email domain is blacklisted', {
				function: 'RocketChat.validateEmailDomain'
			});
		}
	}

	if (useDNSDomainCheck) {
		try {
			Meteor.wrapAsync(dns.resolveMx)(emailDomain);
		} catch (e) {
			throw new Meteor.Error('error-invalid-domain', 'Invalid domain', {
				function: 'RocketChat.validateEmailDomain'
			});
		}
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/index.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
	RoomSettingsEnum: () => RoomSettingsEnum,
	RoomTypeConfig: () => RoomTypeConfig,
	RoomTypeRouteConfig: () => RoomTypeRouteConfig
});
let RoomSettingsEnum, RoomTypeConfig, RoomTypeRouteConfig;
module.watch(require("../../lib/RoomTypeConfig"), {
	RoomSettingsEnum(v) {
		RoomSettingsEnum = v;
	},

	RoomTypeConfig(v) {
		RoomTypeConfig = v;
	},

	RoomTypeRouteConfig(v) {
		RoomTypeRouteConfig = v;
	}

}, 0);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"functions":{"isDocker.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/isDocker.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let fs;
module.watch(require("fs"), {
	default(v) {
		fs = v;
	}

}, 0);

function hasDockerEnv() {
	try {
		fs.statSync('/.dockerenv');
		return true;
	} catch (err) {
		return false;
	}
}

function hasDockerCGroup() {
	try {
		return fs.readFileSync('/proc/self/cgroup', 'utf8').indexOf('docker') !== -1;
	} catch (err) {
		return false;
	}
}

function check() {
	return hasDockerEnv() || hasDockerCGroup();
}

let isDocker;

RocketChat.isDocker = function () {
	if (isDocker === undefined) {
		isDocker = check();
	}

	return isDocker;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToDefaultChannels.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/addUserToDefaultChannels.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.addUserToDefaultChannels = function (user, silenced) {
	RocketChat.callbacks.run('beforeJoinDefaultChannels', user);
	const defaultRooms = RocketChat.models.Rooms.findByDefaultAndTypes(true, ['c', 'p'], {
		fields: {
			usernames: 0
		}
	}).fetch();
	defaultRooms.forEach(room => {
		// put user in default rooms
		const muted = room.ro && !RocketChat.authz.hasPermission(user._id, 'post-readonly');
		RocketChat.models.Rooms.addUsernameById(room._id, user.username, muted);

		if (!RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(room._id, user._id)) {
			// Add a subscription to this user
			RocketChat.models.Subscriptions.createWithRoomAndUser(room, user, {
				ts: new Date(),
				open: true,
				alert: true,
				unread: 1,
				userMentions: 1,
				groupMentions: 0
			}); // Insert user joined message

			if (!silenced) {
				RocketChat.models.Messages.createUserJoinWithRoomIdAndUser(room._id, user);
			}
		}
	});
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/addUserToRoom.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.addUserToRoom = function (rid, user, inviter, silenced) {
	const now = new Date();
	const room = RocketChat.models.Rooms.findOneById(rid); // Check if user is already in room

	const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, user._id);

	if (subscription) {
		return;
	}

	if (room.t === 'c' || room.t === 'p') {
		RocketChat.callbacks.run('beforeJoinRoom', user, room);
	}

	const muted = room.ro && !RocketChat.authz.hasPermission(user._id, 'post-readonly');
	RocketChat.models.Rooms.addUsernameById(rid, user.username, muted);
	RocketChat.models.Subscriptions.createWithRoomAndUser(room, user, {
		ts: now,
		open: true,
		alert: true,
		unread: 1,
		userMentions: 1,
		groupMentions: 0
	});

	if (!silenced) {
		if (inviter) {
			RocketChat.models.Messages.createUserAddedWithRoomIdAndUser(rid, user, {
				ts: now,
				u: {
					_id: inviter._id,
					username: inviter.username
				}
			});
		} else {
			RocketChat.models.Messages.createUserJoinWithRoomIdAndUser(rid, user, {
				ts: now
			});
		}
	}

	if (room.t === 'c' || room.t === 'p') {
		Meteor.defer(function () {
			RocketChat.callbacks.run('afterJoinRoom', user, room);
		});
	}

	return true;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"archiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/archiveRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.archiveRoom = function (rid) {
	RocketChat.models.Rooms.archiveById(rid);
	RocketChat.models.Subscriptions.archiveByRoomId(rid);
	RocketChat.callbacks.run('afterRoomArchived', RocketChat.models.Rooms.findOneById(rid), Meteor.user());
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkUsernameAvailability.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/checkUsernameAvailability.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);

RocketChat.checkUsernameAvailability = function (username) {
	return RocketChat.settings.get('Accounts_BlockedUsernameList', function (key, value) {
		const usernameBlackList = _.map(value.split(','), function (username) {
			return username.trim();
		});

		if (usernameBlackList.length !== 0) {
			if (usernameBlackList.every(restrictedUsername => {
				const regex = new RegExp(`^${s.escapeRegExp(restrictedUsername)}$`, 'i');
				return !regex.test(s.trim(s.escapeRegExp(username)));
			})) {
				return !Meteor.users.findOne({
					username: {
						$regex: new RegExp(`^${s.trim(s.escapeRegExp(username))}$`, 'i')
					}
				});
			}

			return false;
		}
	});
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkEmailAvailability.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/checkEmailAvailability.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);

RocketChat.checkEmailAvailability = function (email) {
	return !Meteor.users.findOne({
		'emails.address': {
			$regex: new RegExp(`^${s.trim(s.escapeRegExp(email))}$`, 'i')
		}
	});
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createRoom.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/createRoom.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);

RocketChat.createRoom = function (type, name, owner, members, readOnly, extraData = {}) {
	name = s.trim(name);
	owner = s.trim(owner);
	members = [].concat(members);

	if (!name) {
		throw new Meteor.Error('error-invalid-name', 'Invalid name', {
			function: 'RocketChat.createRoom'
		});
	}

	owner = RocketChat.models.Users.findOneByUsername(owner, {
		fields: {
			username: 1
		}
	});

	if (!owner) {
		throw new Meteor.Error('error-invalid-user', 'Invalid user', {
			function: 'RocketChat.createRoom'
		});
	}

	const slugifiedRoomName = RocketChat.getValidRoomName(name);
	const now = new Date();

	if (!_.contains(members, owner.username)) {
		members.push(owner.username);
	}

	if (type === 'c') {
		RocketChat.callbacks.run('beforeCreateChannel', owner, {
			t: 'c',
			name: slugifiedRoomName,
			fname: name,
			ts: now,
			ro: readOnly === true,
			sysMes: readOnly !== true,
			usernames: members,
			u: {
				_id: owner._id,
				username: owner.username
			}
		});
	}

	extraData = Object.assign({}, extraData, {
		ts: now,
		ro: readOnly === true,
		sysMes: readOnly !== true
	});
	const room = RocketChat.models.Rooms.createWithTypeNameUserAndUsernames(type, slugifiedRoomName, name, owner, members, extraData);

	for (const username of members) {
		const member = RocketChat.models.Users.findOneByUsername(username, {
			fields: {
				username: 1
			}
		});

		if (!member) {
			continue;
		} // make all room members muted by default, unless they have the post-readonly permission


		if (readOnly === true && !RocketChat.authz.hasPermission(member._id, 'post-readonly')) {
			RocketChat.models.Rooms.muteUsernameByRoomId(room._id, username);
		}

		const extra = {
			open: true
		};

		if (username === owner.username) {
			extra.ls = now;
		}

		RocketChat.models.Subscriptions.createWithRoomAndUser(room, member, extra);
	}

	RocketChat.authz.addUserRoles(owner._id, ['owner'], room._id);

	if (type === 'c') {
		Meteor.defer(() => {
			RocketChat.callbacks.run('afterCreateChannel', owner, room);
		});
	} else if (type === 'p') {
		Meteor.defer(() => {
			RocketChat.callbacks.run('afterCreatePrivateGroup', owner, room);
		});
	}

	return {
		rid: room._id,
		name: slugifiedRoomName
	};
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/deleteMessage.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals FileUpload */RocketChat.deleteMessage = function (message, user) {
	const keepHistory = RocketChat.settings.get('Message_KeepHistory');
	const showDeletedStatus = RocketChat.settings.get('Message_ShowDeletedStatus');
	let deletedMsg;

	if (keepHistory) {
		if (showDeletedStatus) {
			RocketChat.models.Messages.cloneAndSaveAsHistoryById(message._id);
		} else {
			RocketChat.models.Messages.setHiddenById(message._id, true);
		}

		if (message.file && message.file._id) {
			RocketChat.models.Uploads.update(message.file._id, {
				$set: {
					_hidden: true
				}
			});
		}
	} else {
		if (!showDeletedStatus) {
			deletedMsg = RocketChat.models.Messages.findOneById(message._id);
			RocketChat.models.Messages.removeById(message._id);
		}

		if (message.file && message.file._id) {
			FileUpload.getStore('Uploads').deleteById(message.file._id);
		}

		Meteor.defer(function () {
			RocketChat.callbacks.run('afterDeleteMessage', deletedMsg);
		});
	} // update last message


	if (RocketChat.settings.get('Store_Last_Message')) {
		const room = RocketChat.models.Rooms.findOneById(message.rid, {
			fields: {
				lastMessage: 1
			}
		});

		if (!room.lastMessage || room.lastMessage._id === message._id) {
			const lastMessage = RocketChat.models.Messages.getLastVisibleMessageSentWithNoTypeByRoomId(message.rid, message._id);
			RocketChat.models.Rooms.setLastMessageById(message.rid, lastMessage);
		}
	}

	if (showDeletedStatus) {
		RocketChat.models.Messages.setAsDeletedByIdAndUser(message._id, user);
	} else {
		RocketChat.Notifications.notifyRoom(message.rid, 'deleteMessage', {
			_id: message._id
		});
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/deleteUser.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.deleteUser = function (userId) {
	const user = RocketChat.models.Users.findOneById(userId);
	RocketChat.models.Messages.removeByUserId(userId); // Remove user messages

	RocketChat.models.Subscriptions.findByUserId(userId).forEach(subscription => {
		const room = RocketChat.models.Rooms.findOneById(subscription.rid);

		if (room) {
			if (room.t !== 'c' && room.usernames.length === 1) {
				RocketChat.models.Rooms.removeById(subscription.rid); // Remove non-channel rooms with only 1 user (the one being deleted)
			}

			if (room.t === 'd') {
				RocketChat.models.Subscriptions.removeByRoomId(subscription.rid);
				RocketChat.models.Messages.removeByRoomId(subscription.rid);
			}
		}
	});
	RocketChat.models.Subscriptions.removeByUserId(userId); // Remove user subscriptions

	RocketChat.models.Rooms.removeByTypeContainingUsername('d', user.username); // Remove direct rooms with the user

	RocketChat.models.Rooms.removeUsernameFromAll(user.username); // Remove user from all other rooms
	// removes user's avatar

	if (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url') {
		FileUpload.getStore('Avatars').deleteByName(user.username);
	}

	RocketChat.models.Integrations.disableByUserId(userId); // Disables all the integrations which rely on the user being deleted.

	RocketChat.models.Users.removeById(userId); // Remove user from users database
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFullUserData.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/getFullUserData.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);

RocketChat.getFullUserData = function ({
	userId,
	filter,
	limit
}) {
	let fields = {
		name: 1,
		username: 1,
		status: 1,
		utcOffset: 1,
		type: 1,
		active: 1
	};

	if (RocketChat.authz.hasPermission(userId, 'view-full-other-user-info')) {
		fields = _.extend(fields, {
			emails: 1,
			phone: 1,
			statusConnection: 1,
			createdAt: 1,
			lastLogin: 1,
			services: 1,
			requirePasswordChange: 1,
			requirePasswordChangeReason: 1,
			roles: 1,
			customFields: 1
		});
	} else if (limit !== 0) {
		limit = 1;
	}

	filter = s.trim(filter);

	if (!filter && limit === 1) {
		return undefined;
	}

	const options = {
		fields,
		limit,
		sort: {
			username: 1
		}
	};

	if (filter) {
		if (limit === 1) {
			return RocketChat.models.Users.findByUsername(filter, options);
		} else {
			const filterReg = new RegExp(s.escapeRegExp(filter), 'i');
			return RocketChat.models.Users.findByUsernameNameOrEmailAddress(filterReg, options);
		}
	}

	return RocketChat.models.Users.find({}, options);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getRoomByNameOrIdWithOptionToJoin.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);

RocketChat.getRoomByNameOrIdWithOptionToJoin = function _getRoomByNameOrIdWithOptionToJoin({
	currentUserId,
	nameOrId,
	type = '',
	tryDirectByUserIdOnly = false,
	joinChannel = true,
	errorOnEmpty = true
}) {
	let room; //If the nameOrId starts with #, then let's try to find a channel or group

	if (nameOrId.startsWith('#')) {
		nameOrId = nameOrId.substring(1);
		room = RocketChat.models.Rooms.findOneByIdOrName(nameOrId);
	} else if (nameOrId.startsWith('@') || type === 'd') {
		//If the nameOrId starts with @ OR type is 'd', then let's try just a direct message
		nameOrId = nameOrId.replace('@', '');
		let roomUser;

		if (tryDirectByUserIdOnly) {
			roomUser = RocketChat.models.Users.findOneById(nameOrId);
		} else {
			roomUser = RocketChat.models.Users.findOne({
				$or: [{
					_id: nameOrId
				}, {
					username: nameOrId
				}]
			});
		}

		const rid = _.isObject(roomUser) ? [currentUserId, roomUser._id].sort().join('') : nameOrId;
		room = RocketChat.models.Rooms.findOneById(rid); //If the room hasn't been found yet, let's try some more

		if (!_.isObject(room)) {
			//If the roomUser wasn't found, then there's no destination to point towards
			//so return out based upon errorOnEmpty
			if (!_.isObject(roomUser)) {
				if (errorOnEmpty) {
					throw new Meteor.Error('invalid-channel');
				} else {
					return;
				}
			}

			room = Meteor.runAsUser(currentUserId, function () {
				const {
					rid
				} = Meteor.call('createDirectMessage', roomUser.username);
				return RocketChat.models.Rooms.findOneById(rid);
			});
		}
	} else {
		//Otherwise, we'll treat this as a channel or group.
		room = RocketChat.models.Rooms.findOneByIdOrName(nameOrId);
	} //If no room was found, handle the room return based upon errorOnEmpty


	if (!room && errorOnEmpty) {
		throw new Meteor.Error('invalid-channel');
	} else if (!room) {
		return;
	} //If a room was found and they provided a type to search, then check
	//and if the type found isn't what we're looking for then handle
	//the return based upon errorOnEmpty


	if (type && room.t !== type) {
		if (errorOnEmpty) {
			throw new Meteor.Error('invalid-channel');
		} else {
			return;
		}
	} //If the room type is channel and joinChannel has been passed, try to join them
	//if they can't join the room, this will error out!


	if (room.t === 'c' && joinChannel) {
		const sub = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(room._id, currentUserId);

		if (!sub) {
			Meteor.runAsUser(currentUserId, function () {
				return Meteor.call('joinRoom', room._id);
			});
		}
	}

	return room;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeUserFromRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/removeUserFromRoom.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.removeUserFromRoom = function (rid, user) {
	const room = RocketChat.models.Rooms.findOneById(rid);

	if (room) {
		RocketChat.callbacks.run('beforeLeaveRoom', user, room);
		RocketChat.models.Rooms.removeUsernameById(rid, user.username);

		if (room.usernames.indexOf(user.username) !== -1) {
			const removedUser = user;
			RocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(rid, removedUser);
		}

		if (room.t === 'l') {
			RocketChat.models.Messages.createCommandWithRoomIdAndUser('survey', rid, user);
		}

		RocketChat.models.Subscriptions.removeByRoomIdAndUserId(rid, user._id);
		Meteor.defer(function () {
			RocketChat.callbacks.run('afterLeaveRoom', user, room);
		});
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveUser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveUser.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);

RocketChat.saveUser = function (userId, userData) {
	const user = RocketChat.models.Users.findOneById(userId);

	const existingRoles = _.pluck(RocketChat.authz.getRoles(), '_id');

	if (userData._id && userId !== userData._id && !RocketChat.authz.hasPermission(userId, 'edit-other-user-info')) {
		throw new Meteor.Error('error-action-not-allowed', 'Editing user is not allowed', {
			method: 'insertOrUpdateUser',
			action: 'Editing_user'
		});
	}

	if (!userData._id && !RocketChat.authz.hasPermission(userId, 'create-user')) {
		throw new Meteor.Error('error-action-not-allowed', 'Adding user is not allowed', {
			method: 'insertOrUpdateUser',
			action: 'Adding_user'
		});
	}

	if (userData.roles && _.difference(userData.roles, existingRoles).length > 0) {
		throw new Meteor.Error('error-action-not-allowed', 'The field Roles consist invalid role name', {
			method: 'insertOrUpdateUser',
			action: 'Assign_role'
		});
	}

	if (userData.roles && _.indexOf(userData.roles, 'admin') >= 0 && !RocketChat.authz.hasPermission(userId, 'assign-admin-role')) {
		throw new Meteor.Error('error-action-not-allowed', 'Assigning admin is not allowed', {
			method: 'insertOrUpdateUser',
			action: 'Assign_admin'
		});
	}

	if (!userData._id && !s.trim(userData.name)) {
		throw new Meteor.Error('error-the-field-is-required', 'The field Name is required', {
			method: 'insertOrUpdateUser',
			field: 'Name'
		});
	}

	if (!userData._id && !s.trim(userData.username)) {
		throw new Meteor.Error('error-the-field-is-required', 'The field Username is required', {
			method: 'insertOrUpdateUser',
			field: 'Username'
		});
	}

	let nameValidation;

	try {
		nameValidation = new RegExp(`^${RocketChat.settings.get('UTF8_Names_Validation')}$`);
	} catch (e) {
		nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');
	}

	if (userData.username && !nameValidation.test(userData.username)) {
		throw new Meteor.Error('error-input-is-not-a-valid-field', `${_.escape(userData.username)} is not a valid username`, {
			method: 'insertOrUpdateUser',
			input: userData.username,
			field: 'Username'
		});
	}

	if (!userData._id && !userData.password) {
		throw new Meteor.Error('error-the-field-is-required', 'The field Password is required', {
			method: 'insertOrUpdateUser',
			field: 'Password'
		});
	}

	if (!userData._id) {
		if (!RocketChat.checkUsernameAvailability(userData.username)) {
			throw new Meteor.Error('error-field-unavailable', `${_.escape(userData.username)} is already in use :(`, {
				method: 'insertOrUpdateUser',
				field: userData.username
			});
		}

		if (userData.email && !RocketChat.checkEmailAvailability(userData.email)) {
			throw new Meteor.Error('error-field-unavailable', `${_.escape(userData.email)} is already in use :(`, {
				method: 'insertOrUpdateUser',
				field: userData.email
			});
		}

		RocketChat.validateEmailDomain(userData.email); // insert user

		const createUser = {
			username: userData.username,
			password: userData.password,
			joinDefaultChannels: userData.joinDefaultChannels
		};

		if (userData.email) {
			createUser.email = userData.email;
		}

		const _id = Accounts.createUser(createUser);

		const updateUser = {
			$set: {
				name: userData.name,
				roles: userData.roles || ['user']
			}
		};

		if (typeof userData.requirePasswordChange !== 'undefined') {
			updateUser.$set.requirePasswordChange = userData.requirePasswordChange;
		}

		if (userData.verified) {
			updateUser.$set['emails.0.verified'] = true;
		}

		Meteor.users.update({
			_id
		}, updateUser);

		if (userData.sendWelcomeEmail) {
			const header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');
			const footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');
			let subject;
			let html;

			if (RocketChat.settings.get('Accounts_UserAddedEmail_Customized')) {
				subject = RocketChat.settings.get('Accounts_UserAddedEmailSubject');
				html = RocketChat.settings.get('Accounts_UserAddedEmail');
			} else {
				subject = TAPi18n.__('Accounts_UserAddedEmailSubject_Default', {
					lng: user.language || RocketChat.settings.get('language') || 'en'
				});
				html = TAPi18n.__('Accounts_UserAddedEmail_Default', {
					lng: user.language || RocketChat.settings.get('language') || 'en'
				});
			}

			subject = RocketChat.placeholders.replace(subject);
			html = RocketChat.placeholders.replace(html, {
				name: userData.name,
				email: userData.email,
				password: userData.password
			});
			const email = {
				to: userData.email,
				from: RocketChat.settings.get('From_Email'),
				subject,
				html: header + html + footer
			};
			Meteor.defer(function () {
				try {
					Email.send(email);
				} catch (error) {
					throw new Meteor.Error('error-email-send-failed', `Error trying to send email: ${error.message}`, {
						function: 'RocketChat.saveUser',
						message: error.message
					});
				}
			});
		}

		userData._id = _id;

		if (RocketChat.settings.get('Accounts_SetDefaultAvatar') === true && userData.email) {
			const gravatarUrl = Gravatar.imageUrl(userData.email, {
				default: '404',
				size: 200,
				secure: true
			});

			try {
				RocketChat.setUserAvatar(userData, gravatarUrl, '', 'url');
			} catch (e) {//Ignore this error for now, as it not being successful isn't bad
			}
		}

		return _id;
	} else {
		// update user
		if (userData.username) {
			RocketChat.setUsername(userData._id, userData.username);
		}

		if (userData.name) {
			RocketChat.setRealName(userData._id, userData.name);
		}

		if (userData.email) {
			RocketChat.setEmail(userData._id, userData.email);
		}

		if (userData.password && userData.password.trim() && RocketChat.authz.hasPermission(userId, 'edit-other-user-password')) {
			Accounts.setPassword(userData._id, userData.password.trim());
		}

		const updateUser = {
			$set: {}
		};

		if (userData.roles) {
			updateUser.$set.roles = userData.roles;
		}

		if (typeof userData.requirePasswordChange !== 'undefined') {
			updateUser.$set.requirePasswordChange = userData.requirePasswordChange;
		}

		if (userData.verified) {
			updateUser.$set['emails.0.verified'] = userData.verified;
		}

		Meteor.users.update({
			_id: userData._id
		}, updateUser);
		return true;
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveCustomFields.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveCustomFields.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);

RocketChat.saveCustomFields = function (userId, formData) {
	if (s.trim(RocketChat.settings.get('Accounts_CustomFields')) !== '') {
		RocketChat.validateCustomFields(formData);
		return RocketChat.saveCustomFieldsWithoutValidation(userId, formData);
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveCustomFieldsWithoutValidation.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveCustomFieldsWithoutValidation.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);

RocketChat.saveCustomFieldsWithoutValidation = function (userId, formData) {
	if (s.trim(RocketChat.settings.get('Accounts_CustomFields')) !== '') {
		let customFieldsMeta;

		try {
			customFieldsMeta = JSON.parse(RocketChat.settings.get('Accounts_CustomFields'));
		} catch (e) {
			throw new Meteor.Error('error-invalid-customfield-json', 'Invalid JSON for Custom Fields');
		}

		const customFields = {};
		Object.keys(customFieldsMeta).forEach(key => customFields[key] = formData[key]);
		RocketChat.models.Users.setCustomFields(userId, customFields);
		Object.keys(customFields).forEach(fieldName => {
			if (!customFieldsMeta[fieldName].modifyRecordField) {
				return;
			}

			const modifyRecordField = customFieldsMeta[fieldName].modifyRecordField;
			const update = {};

			if (modifyRecordField.array) {
				update.$addToSet = {};
				update.$addToSet[modifyRecordField.field] = customFields[fieldName];
			} else {
				update.$set = {};
				update.$set[modifyRecordField.field] = customFields[fieldName];
			}

			RocketChat.models.Users.update(userId, update);
		});
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/sendMessage.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);

RocketChat.sendMessage = function (user, message, room, upsert = false) {
	if (!user || !message || !room._id) {
		return false;
	}

	if (message.ts == null) {
		message.ts = new Date();
	}

	message.u = _.pick(user, ['_id', 'username', 'name']);

	if (!Match.test(message.msg, String)) {
		message.msg = '';
	}

	message.rid = room._id;

	if (!room.usernames || room.usernames.length === 0) {
		const updated_room = RocketChat.models.Rooms.findOneById(room._id);

		if (updated_room != null) {
			room = updated_room;
		} else {
			room.usernames = [];
		}
	}

	if (message.parseUrls !== false) {
		const urls = message.msg.match(/([A-Za-z]{3,9}):\/\/([-;:&=\+\$,\w]+@{1})?([-A-Za-z0-9\.]+)+:?(\d+)?((\/[-\+=!:~%\/\.@\,\(\)\w]*)?\??([-\+=&!:;%@\/\.\,\w]+)?(?:#([^\s\)]+))?)?/g);

		if (urls) {
			message.urls = urls.map(function (url) {
				return {
					url
				};
			});
		}
	}

	message = RocketChat.callbacks.run('beforeSaveMessage', message);

	if (message) {
		// Avoid saving sandstormSessionId to the database
		let sandstormSessionId = null;

		if (message.sandstormSessionId) {
			sandstormSessionId = message.sandstormSessionId;
			delete message.sandstormSessionId;
		}

		if (message._id && upsert) {
			const _id = message._id;
			delete message._id;
			RocketChat.models.Messages.upsert({
				_id,
				'u._id': message.u._id
			}, message);
			message._id = _id;
		} else {
			message._id = RocketChat.models.Messages.insert(message);
		} /*
    Defer other updates as their return is not interesting to the user
    */

		Meteor.defer(() => {
			// Execute all callbacks
			message.sandstormSessionId = sandstormSessionId;
			return RocketChat.callbacks.run('afterSaveMessage', message, room, user._id);
		});
		return message;
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/settings.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
const blockedSettings = {};

if (process.env.SETTINGS_BLOCKED) {
	process.env.SETTINGS_BLOCKED.split(',').forEach(settingId => blockedSettings[settingId] = 1);
}

const hiddenSettings = {};

if (process.env.SETTINGS_HIDDEN) {
	process.env.SETTINGS_HIDDEN.split(',').forEach(settingId => hiddenSettings[settingId] = 1);
}

RocketChat.settings._sorter = {}; /*
                                  * Add a setting
                                  * @param {String} _id
                                  * @param {Mixed} value
                                  * @param {Object} setting
                                  */

RocketChat.settings.add = function (_id, value, options = {}) {
	if (options == null) {
		options = {};
	}

	if (!_id || value == null) {
		return false;
	}

	if (RocketChat.settings._sorter[options.group] == null) {
		RocketChat.settings._sorter[options.group] = 0;
	}

	options.packageValue = value;
	options.valueSource = 'packageValue';
	options.hidden = options.hidden || false;
	options.blocked = options.blocked || false;

	if (options.sorter == null) {
		options.sorter = RocketChat.settings._sorter[options.group]++;
	}

	if (options.enableQuery != null) {
		options.enableQuery = JSON.stringify(options.enableQuery);
	}

	if (options.i18nDefaultQuery != null) {
		options.i18nDefaultQuery = JSON.stringify(options.i18nDefaultQuery);
	}

	if (typeof process !== 'undefined' && process.env && process.env[_id]) {
		value = process.env[_id];

		if (value.toLowerCase() === 'true') {
			value = true;
		} else if (value.toLowerCase() === 'false') {
			value = false;
		}

		options.processEnvValue = value;
		options.valueSource = 'processEnvValue';
	} else if (Meteor.settings && typeof Meteor.settings[_id] !== 'undefined') {
		if (Meteor.settings[_id] == null) {
			return false;
		}

		value = Meteor.settings[_id];
		options.meteorSettingsValue = value;
		options.valueSource = 'meteorSettingsValue';
	}

	if (options.i18nLabel == null) {
		options.i18nLabel = _id;
	}

	if (options.i18nDescription == null) {
		options.i18nDescription = `${_id}_Description`;
	}

	if (blockedSettings[_id] != null) {
		options.blocked = true;
	}

	if (hiddenSettings[_id] != null) {
		options.hidden = true;
	}

	if (typeof process !== 'undefined' && process.env && process.env[`OVERWRITE_SETTING_${_id}`]) {
		let value = process.env[`OVERWRITE_SETTING_${_id}`];

		if (value.toLowerCase() === 'true') {
			value = true;
		} else if (value.toLowerCase() === 'false') {
			value = false;
		}

		options.value = value;
		options.processEnvValue = value;
		options.valueSource = 'processEnvValue';
	}

	const updateOperations = {
		$set: options,
		$setOnInsert: {
			createdAt: new Date()
		}
	};

	if (options.editor != null) {
		updateOperations.$setOnInsert.editor = options.editor;
		delete options.editor;
	}

	if (options.value == null) {
		if (options.force === true) {
			updateOperations.$set.value = options.packageValue;
		} else {
			updateOperations.$setOnInsert.value = value;
		}
	}

	const query = _.extend({
		_id
	}, updateOperations.$set);

	if (options.section == null) {
		updateOperations.$unset = {
			section: 1
		};
		query.section = {
			$exists: false
		};
	}

	const existantSetting = RocketChat.models.Settings.db.findOne(query);

	if (existantSetting != null) {
		if (existantSetting.editor == null && updateOperations.$setOnInsert.editor != null) {
			updateOperations.$set.editor = updateOperations.$setOnInsert.editor;
			delete updateOperations.$setOnInsert.editor;
		}
	} else {
		updateOperations.$set.ts = new Date();
	}

	return RocketChat.models.Settings.upsert({
		_id
	}, updateOperations);
}; /*
   * Add a setting group
   * @param {String} _id
   */

RocketChat.settings.addGroup = function (_id, options = {}, cb) {
	if (!_id) {
		return false;
	}

	if (_.isFunction(options)) {
		cb = options;
		options = {};
	}

	if (options.i18nLabel == null) {
		options.i18nLabel = _id;
	}

	if (options.i18nDescription == null) {
		options.i18nDescription = `${_id}_Description`;
	}

	options.ts = new Date();
	options.blocked = false;
	options.hidden = false;

	if (blockedSettings[_id] != null) {
		options.blocked = true;
	}

	if (hiddenSettings[_id] != null) {
		options.hidden = true;
	}

	RocketChat.models.Settings.upsert({
		_id
	}, {
		$set: options,
		$setOnInsert: {
			type: 'group',
			createdAt: new Date()
		}
	});

	if (cb != null) {
		cb.call({
			add(id, value, options) {
				if (options == null) {
					options = {};
				}

				options.group = _id;
				return RocketChat.settings.add(id, value, options);
			},

			section(section, cb) {
				return cb.call({
					add(id, value, options) {
						if (options == null) {
							options = {};
						}

						options.group = _id;
						options.section = section;
						return RocketChat.settings.add(id, value, options);
					}

				});
			}

		});
	}
}; /*
   * Remove a setting by id
   * @param {String} _id
   */

RocketChat.settings.removeById = function (_id) {
	if (!_id) {
		return false;
	}

	return RocketChat.models.Settings.removeById(_id);
}; /*
   * Update a setting by id
   * @param {String} _id
   */

RocketChat.settings.updateById = function (_id, value, editor) {
	if (!_id || value == null) {
		return false;
	}

	if (editor != null) {
		return RocketChat.models.Settings.updateValueAndEditorById(_id, value, editor);
	}

	return RocketChat.models.Settings.updateValueById(_id, value);
}; /*
   * Update options of a setting by id
   * @param {String} _id
   */

RocketChat.settings.updateOptionsById = function (_id, options) {
	if (!_id || options == null) {
		return false;
	}

	return RocketChat.models.Settings.updateOptionsById(_id, options);
}; /*
   * Update a setting by id
   * @param {String} _id
   */

RocketChat.settings.clearById = function (_id) {
	if (_id == null) {
		return false;
	}

	return RocketChat.models.Settings.updateValueById(_id, undefined);
}; /*
   * Update a setting by id
   */

RocketChat.settings.init = function () {
	RocketChat.settings.initialLoad = true;
	RocketChat.models.Settings.find().observe({
		added(record) {
			Meteor.settings[record._id] = record.value;

			if (record.env === true) {
				process.env[record._id] = record.value;
			}

			return RocketChat.settings.load(record._id, record.value, RocketChat.settings.initialLoad);
		},

		changed(record) {
			Meteor.settings[record._id] = record.value;

			if (record.env === true) {
				process.env[record._id] = record.value;
			}

			return RocketChat.settings.load(record._id, record.value, RocketChat.settings.initialLoad);
		},

		removed(record) {
			delete Meteor.settings[record._id];

			if (record.env === true) {
				delete process.env[record._id];
			}

			return RocketChat.settings.load(record._id, undefined, RocketChat.settings.initialLoad);
		}

	});
	RocketChat.settings.initialLoad = false;
	RocketChat.settings.afterInitialLoad.forEach(fn => fn(Meteor.settings));
};

RocketChat.settings.afterInitialLoad = [];

RocketChat.settings.onAfterInitialLoad = function (fn) {
	RocketChat.settings.afterInitialLoad.push(fn);

	if (RocketChat.settings.initialLoad === false) {
		return fn(Meteor.settings);
	}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUserAvatar.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setUserAvatar.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.setUserAvatar = function (user, dataURI, contentType, service) {
	let encoding;
	let image;

	if (service === 'initials') {
		return RocketChat.models.Users.setAvatarOrigin(user._id, service);
	} else if (service === 'url') {
		let result = null;

		try {
			result = HTTP.get(dataURI, {
				npmRequestOptions: {
					encoding: 'binary'
				}
			});
		} catch (error) {
			if (!error.response || error.response.statusCode !== 404) {
				console.log(`Error while handling the setting of the avatar from a url (${dataURI}) for ${user.username}:`, error);
				throw new Meteor.Error('error-avatar-url-handling', `Error while handling avatar setting from a URL (${dataURI}) for ${user.username}`, {
					function: 'RocketChat.setUserAvatar',
					url: dataURI,
					username: user.username
				});
			}
		}

		if (result.statusCode !== 200) {
			console.log(`Not a valid response, ${result.statusCode}, from the avatar url: ${dataURI}`);
			throw new Meteor.Error('error-avatar-invalid-url', `Invalid avatar URL: ${dataURI}`, {
				function: 'RocketChat.setUserAvatar',
				url: dataURI
			});
		}

		if (!/image\/.+/.test(result.headers['content-type'])) {
			console.log(`Not a valid content-type from the provided url, ${result.headers['content-type']}, from the avatar url: ${dataURI}`);
			throw new Meteor.Error('error-avatar-invalid-url', `Invalid avatar URL: ${dataURI}`, {
				function: 'RocketChat.setUserAvatar',
				url: dataURI
			});
		}

		encoding = 'binary';
		image = result.content;
		contentType = result.headers['content-type'];
	} else if (service === 'rest') {
		encoding = 'binary';
		image = dataURI;
	} else {
		const fileData = RocketChatFile.dataURIParse(dataURI);
		encoding = 'base64';
		image = fileData.image;
		contentType = fileData.contentType;
	}

	const buffer = new Buffer(image, encoding);
	const fileStore = FileUpload.getStore('Avatars');
	fileStore.deleteByName(user.username);
	const file = {
		userId: user._id,
		type: contentType,
		size: buffer.length
	};
	fileStore.insert(file, buffer, () => {
		Meteor.setTimeout(function () {
			RocketChat.models.Users.setAvatarOrigin(user._id, service);
			RocketChat.Notifications.notifyLogged('updateAvatar', {
				username: user.username
			});
		}, 500);
	});
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUsername.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setUsername.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);

RocketChat._setUsername = function (userId, u) {
	const username = s.trim(u);

	if (!userId || !username) {
		return false;
	}

	let nameValidation;

	try {
		nameValidation = new RegExp(`^${RocketChat.settings.get('UTF8_Names_Validation')}$`);
	} catch (error) {
		nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');
	}

	if (!nameValidation.test(username)) {
		return false;
	}

	const user = RocketChat.models.Users.findOneById(userId); // User already has desired username, return

	if (user.username === username) {
		return user;
	}

	const previousUsername = user.username; // Check username availability or if the user already owns a different casing of the name

	if (!previousUsername || !(username.toLowerCase() === previousUsername.toLowerCase())) {
		if (!RocketChat.checkUsernameAvailability(username)) {
			return false;
		}
	} //If first time setting username, send Enrollment Email


	try {
		if (!previousUsername && user.emails && user.emails.length > 0 && RocketChat.settings.get('Accounts_Enrollment_Email')) {
			Accounts.sendEnrollmentEmail(user._id);
		}
	} catch (e) {
		console.error(e);
	} /* globals getAvatarSuggestionForUser */

	user.username = username;

	if (!previousUsername && RocketChat.settings.get('Accounts_SetDefaultAvatar') === true) {
		const avatarSuggestions = getAvatarSuggestionForUser(user);
		let gravatar;
		Object.keys(avatarSuggestions).some(service => {
			const avatarData = avatarSuggestions[service];

			if (service !== 'gravatar') {
				RocketChat.setUserAvatar(user, avatarData.blob, avatarData.contentType, service);
				gravatar = null;
				return true;
			} else {
				gravatar = avatarData;
			}
		});

		if (gravatar != null) {
			RocketChat.setUserAvatar(user, gravatar.blob, gravatar.contentType, 'gravatar');
		}
	} // Username is available; if coming from old username, update all references


	if (previousUsername) {
		RocketChat.models.Messages.updateAllUsernamesByUserId(user._id, username);
		RocketChat.models.Messages.updateUsernameOfEditByUserId(user._id, username);
		RocketChat.models.Messages.findByMention(previousUsername).forEach(function (msg) {
			const updatedMsg = msg.msg.replace(new RegExp(`@${previousUsername}`, 'ig'), `@${username}`);
			return RocketChat.models.Messages.updateUsernameAndMessageOfMentionByIdAndOldUsername(msg._id, previousUsername, username, updatedMsg);
		});
		RocketChat.models.Rooms.replaceUsername(previousUsername, username);
		RocketChat.models.Rooms.replaceMutedUsername(previousUsername, username);
		RocketChat.models.Rooms.replaceUsernameOfUserByUserId(user._id, username);
		RocketChat.models.Subscriptions.setUserUsernameByUserId(user._id, username);
		RocketChat.models.Subscriptions.setNameForDirectRoomsWithOldName(previousUsername, username);
		const fileStore = FileUpload.getStore('Avatars');
		const file = fileStore.model.findOneByName(previousUsername);

		if (file) {
			fileStore.model.updateFileNameById(file._id, username);
		}
	} // Set new username*


	RocketChat.models.Users.setUsername(user._id, username);
	return user;
};

RocketChat.setUsername = RocketChat.RateLimiter.limitFunction(RocketChat._setUsername, 1, 60000, {
	[0](userId) {
		return !userId || !RocketChat.authz.hasPermission(userId, 'edit-other-user-info');
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setRealName.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setRealName.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);

RocketChat._setRealName = function (userId, name) {
	name = s.trim(name);

	if (!userId || !name) {
		return false;
	}

	const user = RocketChat.models.Users.findOneById(userId); // User already has desired name, return

	if (user.name === name) {
		return user;
	} // Set new name


	RocketChat.models.Users.setName(user._id, name);
	user.name = name;

	if (RocketChat.settings.get('UI_Use_Real_Name') === true) {
		RocketChat.Notifications.notifyLogged('Users:NameChanged', {
			_id: user._id,
			name: user.name,
			username: user.username
		});
	}

	return user;
};

RocketChat.setRealName = RocketChat.RateLimiter.limitFunction(RocketChat._setRealName, 1, 60000, {
	0() {
		return !Meteor.userId() || !RocketChat.authz.hasPermission(Meteor.userId(), 'edit-other-user-info');
	} // Administrators have permission to change others names, so don't limit those


});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setEmail.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setEmail.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);

RocketChat._setEmail = function (userId, email) {
	email = s.trim(email);

	if (!userId) {
		throw new Meteor.Error('error-invalid-user', 'Invalid user', {
			function: '_setEmail'
		});
	}

	if (!email) {
		throw new Meteor.Error('error-invalid-email', 'Invalid email', {
			function: '_setEmail'
		});
	}

	RocketChat.validateEmailDomain(email);
	const user = RocketChat.models.Users.findOneById(userId); // User already has desired username, return

	if (user.emails && user.emails[0] && user.emails[0].address === email) {
		return user;
	} // Check email availability


	if (!RocketChat.checkEmailAvailability(email)) {
		throw new Meteor.Error('error-field-unavailable', `${email} is already in use :(`, {
			function: '_setEmail',
			field: email
		});
	} // Set new email


	RocketChat.models.Users.setEmail(user._id, email);
	user.email = email;
	return user;
};

RocketChat.setEmail = RocketChat.RateLimiter.limitFunction(RocketChat._setEmail, 1, 60000, {
	0() {
		return !Meteor.userId() || !RocketChat.authz.hasPermission(Meteor.userId(), 'edit-other-user-info');
	} // Administrators have permission to change others emails, so don't limit those


});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unarchiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/unarchiveRoom.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.unarchiveRoom = function (rid) {
	RocketChat.models.Rooms.unarchiveById(rid);
	RocketChat.models.Subscriptions.unarchiveByRoomId(rid);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/updateMessage.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.updateMessage = function (message, user) {
	// If we keep history of edits, insert a new message to store history information
	if (RocketChat.settings.get('Message_KeepHistory')) {
		RocketChat.models.Messages.cloneAndSaveAsHistoryById(message._id);
	}

	message.editedAt = new Date();
	message.editedBy = {
		_id: user._id,
		username: user.username
	};
	const urls = message.msg.match(/([A-Za-z]{3,9}):\/\/([-;:&=\+\$,\w]+@{1})?([-A-Za-z0-9\.]+)+:?(\d+)?((\/[-\+=!:~%\/\.@\,\w]*)?\??([-\+=&!:;%@\/\.\,\w]+)?(?:#([^\s\)]+))?)?/g);

	if (urls) {
		message.urls = urls.map(url => {
			return {
				url
			};
		});
	}

	message = RocketChat.callbacks.run('beforeSaveMessage', message);
	const tempid = message._id;
	delete message._id;
	RocketChat.models.Messages.update({
		_id: tempid
	}, {
		$set: message
	});
	const room = RocketChat.models.Rooms.findOneById(message.rid);
	Meteor.defer(function () {
		RocketChat.callbacks.run('afterSaveMessage', RocketChat.models.Messages.findOneById(tempid), room, user._id);
	});
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validateCustomFields.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/validateCustomFields.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);

RocketChat.validateCustomFields = function (fields) {
	// Special Case:
	// If an admin didn't set any custom fields there's nothing to validate against so consider any customFields valid
	if (s.trim(RocketChat.settings.get('Accounts_CustomFields')) === '') {
		return;
	}

	let customFieldsMeta;

	try {
		customFieldsMeta = JSON.parse(RocketChat.settings.get('Accounts_CustomFields'));
	} catch (e) {
		throw new Meteor.Error('error-invalid-customfield-json', 'Invalid JSON for Custom Fields');
	}

	const customFields = {};
	Object.keys(customFieldsMeta).forEach(fieldName => {
		const field = customFieldsMeta[fieldName];
		customFields[fieldName] = fields[fieldName];
		const fieldValue = s.trim(fields[fieldName]);

		if (field.required && fieldValue === '') {
			throw new Meteor.Error('error-user-registration-custom-field', `Field ${fieldName} is required`, {
				method: 'registerUser'
			});
		}

		if (field.type === 'select' && field.options.indexOf(fields[fieldName]) === -1) {
			throw new Meteor.Error('error-user-registration-custom-field', `Value for field ${fieldName} is invalid`, {
				method: 'registerUser'
			});
		}

		if (field.maxLength && fieldValue.length > field.maxLength) {
			throw new Meteor.Error('error-user-registration-custom-field', `Max length of field ${fieldName} ${field.maxLength}`, {
				method: 'registerUser'
			});
		}

		if (field.minLength && fieldValue.length < field.minLength) {
			throw new Meteor.Error('error-user-registration-custom-field', `Min length of field ${fieldName} ${field.minLength}`, {
				method: 'registerUser'
			});
		}
	});
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Notifications.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/Notifications.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.Notifications = new class {
	constructor() {
		this.debug = false;
		this.streamAll = new Meteor.Streamer('notify-all');
		this.streamLogged = new Meteor.Streamer('notify-logged');
		this.streamRoom = new Meteor.Streamer('notify-room');
		this.streamRoomUsers = new Meteor.Streamer('notify-room-users');
		this.streamUser = new Meteor.Streamer('notify-user');
		this.streamAll.allowWrite('none');
		this.streamLogged.allowWrite('none');
		this.streamRoom.allowWrite('none');
		this.streamRoomUsers.allowWrite(function (eventName, ...args) {
			const [roomId, e] = eventName.split('/'); // const user = Meteor.users.findOne(this.userId, {
			// 	fields: {
			// 		username: 1
			// 	}
			// });

			if (RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId) != null) {
				const subscriptions = RocketChat.models.Subscriptions.findByRoomIdAndNotUserId(roomId, this.userId).fetch();
				subscriptions.forEach(subscription => RocketChat.Notifications.notifyUser(subscription.u._id, e, ...args));
			}

			return false;
		});
		this.streamUser.allowWrite('logged');
		this.streamAll.allowRead('all');
		this.streamLogged.allowRead('logged');
		this.streamRoom.allowRead(function (eventName) {
			if (this.userId == null) {
				return false;
			}

			const [roomId] = eventName.split('/');
			const user = Meteor.users.findOne(this.userId, {
				fields: {
					username: 1
				}
			});
			const room = RocketChat.models.Rooms.findOneById(roomId);

			if (!room) {
				console.warn(`Invalid streamRoom eventName: "${eventName}"`);
				return false;
			}

			if (room.t === 'l' && room.v._id === user._id) {
				return true;
			}

			return room.usernames.indexOf(user.username) > -1;
		});
		this.streamRoomUsers.allowRead('none');
		this.streamUser.allowRead(function (eventName) {
			const [userId] = eventName.split('/');
			return this.userId != null && this.userId === userId;
		});
	}

	notifyAll(eventName, ...args) {
		if (this.debug === true) {
			console.log('notifyAll', arguments);
		}

		args.unshift(eventName);
		return this.streamAll.emit.apply(this.streamAll, args);
	}

	notifyLogged(eventName, ...args) {
		if (this.debug === true) {
			console.log('notifyLogged', arguments);
		}

		args.unshift(eventName);
		return this.streamLogged.emit.apply(this.streamLogged, args);
	}

	notifyRoom(room, eventName, ...args) {
		if (this.debug === true) {
			console.log('notifyRoom', arguments);
		}

		args.unshift(`${room}/${eventName}`);
		return this.streamRoom.emit.apply(this.streamRoom, args);
	}

	notifyUser(userId, eventName, ...args) {
		if (this.debug === true) {
			console.log('notifyUser', arguments);
		}

		args.unshift(`${userId}/${eventName}`);
		return this.streamUser.emit.apply(this.streamUser, args);
	}

	notifyAllInThisInstance(eventName, ...args) {
		if (this.debug === true) {
			console.log('notifyAll', arguments);
		}

		args.unshift(eventName);
		return this.streamAll.emitWithoutBroadcast.apply(this.streamAll, args);
	}

	notifyLoggedInThisInstance(eventName, ...args) {
		if (this.debug === true) {
			console.log('notifyLogged', arguments);
		}

		args.unshift(eventName);
		return this.streamLogged.emitWithoutBroadcast.apply(this.streamLogged, args);
	}

	notifyRoomInThisInstance(room, eventName, ...args) {
		if (this.debug === true) {
			console.log('notifyRoomAndBroadcast', arguments);
		}

		args.unshift(`${room}/${eventName}`);
		return this.streamRoom.emitWithoutBroadcast.apply(this.streamRoom, args);
	}

	notifyUserInThisInstance(userId, eventName, ...args) {
		if (this.debug === true) {
			console.log('notifyUserAndBroadcast', arguments);
		}

		args.unshift(`${userId}/${eventName}`);
		return this.streamUser.emitWithoutBroadcast.apply(this.streamUser, args);
	}

}();
RocketChat.Notifications.streamRoom.allowWrite(function (eventName, username) {
	const [, e] = eventName.split('/');

	if (e === 'webrtc') {
		return true;
	}

	if (e === 'typing') {
		const user = Meteor.users.findOne(this.userId, {
			fields: {
				username: 1
			}
		});

		if (user != null && user.username === username) {
			return true;
		}
	}

	return false;
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"models":{"_Base.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/_Base.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let ModelsBaseDb;
module.watch(require("./_BaseDb"), {
	default(v) {
		ModelsBaseDb = v;
	}

}, 0);
let ModelsBaseCache;
module.watch(require("./_BaseCache"), {
	default(v) {
		ModelsBaseCache = v;
	}

}, 1);
RocketChat.models._CacheControl = new Meteor.EnvironmentVariable();

class ModelsBase {
	constructor(nameOrModel, useCache) {
		this._db = new ModelsBaseDb(nameOrModel, this);
		this.model = this._db.model;
		this.collectionName = this._db.collectionName;
		this.name = this._db.name;
		this._useCache = useCache === true;
		this.cache = new ModelsBaseCache(this); // TODO_CACHE: remove

		this.on = this.cache.on.bind(this.cache);
		this.emit = this.cache.emit.bind(this.cache);
		this.getDynamicView = this.cache.getDynamicView.bind(this.cache);
		this.processQueryOptionsOnResult = this.cache.processQueryOptionsOnResult.bind(this.cache); // END_TODO_CACHE

		this.db = this;

		if (this._useCache) {
			this.db = new this.constructor(this.model, false);
		}
	}

	get useCache() {
		if (RocketChat.models._CacheControl.get() === false) {
			return false;
		}

		return this._useCache;
	}

	get origin() {
		return this.useCache === true ? 'cache' : '_db';
	}

	arrayToCursor(data) {
		return {
			fetch() {
				return data;
			},

			count() {
				return data.length;
			},

			forEach(fn) {
				return data.forEach(fn);
			}

		};
	}

	setUpdatedAt() /*record, checkQuery, query*/{
		return this._db.setUpdatedAt(...arguments);
	}

	find() {
		try {
			return this[this.origin].find(...arguments);
		} catch (e) {
			console.error('Exception on find', e, ...arguments);
		}
	}

	findOne() {
		try {
			return this[this.origin].findOne(...arguments);
		} catch (e) {
			console.error('Exception on find', e, ...arguments);
		}
	}

	findOneById() {
		try {
			return this[this.origin].findOneById(...arguments);
		} catch (e) {
			console.error('Exception on find', e, ...arguments);
		}
	}

	findOneByIds(ids, options) {
		check(ids, [String]);

		try {
			return this[this.origin].findOneByIds(ids, options);
		} catch (e) {
			console.error('Exception on find', e, ...arguments);
		}
	}

	insert() /*record*/{
		return this._db.insert(...arguments);
	}

	update() /*query, update, options*/{
		return this._db.update(...arguments);
	}

	upsert() /*query, update*/{
		return this._db.upsert(...arguments);
	}

	remove() /*query*/{
		return this._db.remove(...arguments);
	}

	insertOrUpsert() {
		return this._db.insertOrUpsert(...arguments);
	}

	allow() {
		return this._db.allow(...arguments);
	}

	deny() {
		return this._db.deny(...arguments);
	}

	ensureIndex() {
		return this._db.ensureIndex(...arguments);
	}

	dropIndex() {
		return this._db.dropIndex(...arguments);
	}

	tryEnsureIndex() {
		return this._db.tryEnsureIndex(...arguments);
	}

	tryDropIndex() {
		return this._db.tryDropIndex(...arguments);
	}

	trashFind() /*query, options*/{
		return this._db.trashFind(...arguments);
	}

	trashFindDeletedAfter() /*deletedAt, query, options*/{
		return this._db.trashFindDeletedAfter(...arguments);
	} // dinamicTrashFindAfter(method, deletedAt, ...args) {
	// 	const scope = {
	// 		find: (query={}) => {
	// 			return this.trashFindDeletedAfter(deletedAt, query, { fields: {_id: 1, _deletedAt: 1} });
	// 		}
	// 	};
	// 	scope.model = {
	// 		find: scope.find
	// 	};
	// 	return this[method].apply(scope, args);
	// }
	// dinamicFindAfter(method, updatedAt, ...args) {
	// 	const scope = {
	// 		find: (query={}, options) => {
	// 			query._updatedAt = {
	// 				$gt: updatedAt
	// 			};
	// 			return this.find(query, options);
	// 		}
	// 	};
	// 	scope.model = {
	// 		find: scope.find
	// 	};
	// 	return this[method].apply(scope, args);
	// }
	// dinamicFindChangesAfter(method, updatedAt, ...args) {
	// 	return {
	// 		update: this.dinamicFindAfter(method, updatedAt, ...args).fetch(),
	// 		remove: this.dinamicTrashFindAfter(method, updatedAt, ...args).fetch()
	// 	};
	// }


}

RocketChat.models._Base = ModelsBase;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Avatars.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Avatars.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);
RocketChat.models.Avatars = new class extends RocketChat.models._Base {
	constructor() {
		super('avatars');
		this.model.before.insert((userId, doc) => {
			doc.instanceId = InstanceStatus.id();
		});
		this.tryEnsureIndex({
			name: 1
		});
	}

	insertAvatarFileInit(name, userId, store, file, extra) {
		const fileData = {
			_id: name,
			name,
			userId,
			store,
			complete: false,
			uploading: true,
			progress: 0,
			extension: s.strRightBack(file.name, '.'),
			uploadedAt: new Date()
		};

		_.extend(fileData, file, extra);

		return this.insertOrUpsert(fileData);
	}

	updateFileComplete(fileId, userId, file) {
		if (!fileId) {
			return;
		}

		const filter = {
			_id: fileId,
			userId
		};
		const update = {
			$set: {
				complete: true,
				uploading: false,
				progress: 1
			}
		};
		update.$set = _.extend(file, update.$set);

		if (this.model.direct && this.model.direct.update) {
			return this.model.direct.update(filter, update);
		} else {
			return this.update(filter, update);
		}
	}

	findOneByName(name) {
		return this.findOne({
			name
		});
	}

	updateFileNameById(fileId, name) {
		const filter = {
			_id: fileId
		};
		const update = {
			$set: {
				name
			}
		};

		if (this.model.direct && this.model.direct.update) {
			return this.model.direct.update(filter, update);
		} else {
			return this.update(filter, update);
		}
	} // @TODO deprecated


	updateFileCompleteByNameAndUserId(name, userId, url) {
		if (!name) {
			return;
		}

		const filter = {
			name,
			userId
		};
		const update = {
			$set: {
				complete: true,
				uploading: false,
				progress: 1,
				url
			}
		};

		if (this.model.direct && this.model.direct.update) {
			return this.model.direct.update(filter, update);
		} else {
			return this.update(filter, update);
		}
	}

	deleteFile(fileId) {
		if (this.model.direct && this.model.direct.remove) {
			return this.model.direct.remove({
				_id: fileId
			});
		} else {
			return this.remove({
				_id: fileId
			});
		}
	}

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Messages.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Messages.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
RocketChat.models.Messages = new class extends RocketChat.models._Base {
	constructor() {
		super('message');
		this.tryEnsureIndex({
			'rid': 1,
			'ts': 1
		});
		this.tryEnsureIndex({
			'ts': 1
		});
		this.tryEnsureIndex({
			'u._id': 1
		});
		this.tryEnsureIndex({
			'editedAt': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'editedBy._id': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'rid': 1,
			't': 1,
			'u._id': 1
		});
		this.tryEnsureIndex({
			'expireAt': 1
		}, {
			expireAfterSeconds: 0
		});
		this.tryEnsureIndex({
			'msg': 'text'
		});
		this.tryEnsureIndex({
			'file._id': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'mentions.username': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'pinned': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'snippeted': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'location': '2dsphere'
		});
		this.tryEnsureIndex({
			'slackBotId': 1,
			'slackTs': 1
		}, {
			sparse: 1
		});
	} // FIND


	findByMention(username, options) {
		const query = {
			'mentions.username': username
		};
		return this.find(query, options);
	}

	findVisibleByMentionAndRoomId(username, rid, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			'mentions.username': username,
			rid
		};
		return this.find(query, options);
	}

	findVisibleByRoomId(roomId, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId
		};
		return this.find(query, options);
	}

	findVisibleByRoomIdNotContainingTypes(roomId, types, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId
		};

		if (Match.test(types, [String]) && types.length > 0) {
			query.t = {
				$nin: types
			};
		}

		return this.find(query, options);
	}

	findInvisibleByRoomId(roomId, options) {
		const query = {
			_hidden: true,
			rid: roomId
		};
		return this.find(query, options);
	}

	findVisibleByRoomIdAfterTimestamp(roomId, timestamp, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId,
			ts: {
				$gt: timestamp
			}
		};
		return this.find(query, options);
	}

	findForUpdates(roomId, timestamp, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId,
			_updatedAt: {
				$gt: timestamp
			}
		};
		return this.find(query, options);
	}

	findVisibleByRoomIdBeforeTimestamp(roomId, timestamp, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId,
			ts: {
				$lt: timestamp
			}
		};
		return this.find(query, options);
	}

	findVisibleByRoomIdBeforeTimestampInclusive(roomId, timestamp, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId,
			ts: {
				$lte: timestamp
			}
		};
		return this.find(query, options);
	}

	findVisibleByRoomIdBetweenTimestamps(roomId, afterTimestamp, beforeTimestamp, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId,
			ts: {
				$gt: afterTimestamp,
				$lt: beforeTimestamp
			}
		};
		return this.find(query, options);
	}

	findVisibleByRoomIdBetweenTimestampsInclusive(roomId, afterTimestamp, beforeTimestamp, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId,
			ts: {
				$gte: afterTimestamp,
				$lte: beforeTimestamp
			}
		};
		return this.find(query, options);
	}

	findVisibleByRoomIdBeforeTimestampNotContainingTypes(roomId, timestamp, types, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId,
			ts: {
				$lt: timestamp
			}
		};

		if (Match.test(types, [String]) && types.length > 0) {
			query.t = {
				$nin: types
			};
		}

		return this.find(query, options);
	}

	findVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, afterTimestamp, beforeTimestamp, types, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			rid: roomId,
			ts: {
				$gt: afterTimestamp,
				$lt: beforeTimestamp
			}
		};

		if (Match.test(types, [String]) && types.length > 0) {
			query.t = {
				$nin: types
			};
		}

		return this.find(query, options);
	}

	findVisibleCreatedOrEditedAfterTimestamp(timestamp, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			$or: [{
				ts: {
					$gt: timestamp
				}
			}, {
				'editedAt': {
					$gt: timestamp
				}
			}]
		};
		return this.find(query, options);
	}

	findStarredByUserAtRoom(userId, roomId, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			'starred._id': userId,
			rid: roomId
		};
		return this.find(query, options);
	}

	findPinnedByRoom(roomId, options) {
		const query = {
			t: {
				$ne: 'rm'
			},
			_hidden: {
				$ne: true
			},
			pinned: true,
			rid: roomId
		};
		return this.find(query, options);
	}

	findSnippetedByRoom(roomId, options) {
		const query = {
			_hidden: {
				$ne: true
			},
			snippeted: true,
			rid: roomId
		};
		return this.find(query, options);
	}

	getLastTimestamp(options) {
		if (options == null) {
			options = {};
		}

		const query = {
			ts: {
				$exists: 1
			}
		};
		options.sort = {
			ts: -1
		};
		options.limit = 1;
		const [message] = this.find(query, options).fetch();
		return message && message.ts;
	}

	findByRoomIdAndMessageIds(rid, messageIds, options) {
		const query = {
			rid,
			_id: {
				$in: messageIds
			}
		};
		return this.find(query, options);
	}

	findOneBySlackBotIdAndSlackTs(slackBotId, slackTs) {
		const query = {
			slackBotId,
			slackTs
		};
		return this.findOne(query);
	}

	findOneBySlackTs(slackTs) {
		const query = {
			slackTs
		};
		return this.findOne(query);
	}

	getLastVisibleMessageSentWithNoTypeByRoomId(rid, messageId) {
		const query = {
			rid,
			_hidden: {
				$ne: true
			},
			t: {
				$exists: false
			}
		};

		if (messageId) {
			query._id = {
				$ne: messageId
			};
		}

		const options = {
			sort: {
				ts: -1
			}
		};
		return this.findOne(query, options);
	}

	cloneAndSaveAsHistoryById(_id) {
		const me = RocketChat.models.Users.findOneById(Meteor.userId());
		const record = this.findOneById(_id);
		record._hidden = true;
		record.parent = record._id;
		record.editedAt = new Date();
		record.editedBy = {
			_id: Meteor.userId(),
			username: me.username
		};
		delete record._id;
		return this.insert(record);
	} // UPDATE


	setHiddenById(_id, hidden) {
		if (hidden == null) {
			hidden = true;
		}

		const query = {
			_id
		};
		const update = {
			$set: {
				_hidden: hidden
			}
		};
		return this.update(query, update);
	}

	setAsDeletedByIdAndUser(_id, user) {
		const query = {
			_id
		};
		const update = {
			$set: {
				msg: '',
				t: 'rm',
				urls: [],
				mentions: [],
				attachments: [],
				reactions: [],
				editedAt: new Date(),
				editedBy: {
					_id: user._id,
					username: user.username
				}
			}
		};
		return this.update(query, update);
	}

	setPinnedByIdAndUserId(_id, pinnedBy, pinned, pinnedAt) {
		if (pinned == null) {
			pinned = true;
		}

		if (pinnedAt == null) {
			pinnedAt = 0;
		}

		const query = {
			_id
		};
		const update = {
			$set: {
				pinned,
				pinnedAt: pinnedAt || new Date(),
				pinnedBy
			}
		};
		return this.update(query, update);
	}

	setSnippetedByIdAndUserId(message, snippetName, snippetedBy, snippeted, snippetedAt) {
		if (snippeted == null) {
			snippeted = true;
		}

		if (snippetedAt == null) {
			snippetedAt = 0;
		}

		const query = {
			_id: message._id
		};
		const msg = `\`\`\`${message.msg}\`\`\``;
		const update = {
			$set: {
				msg,
				snippeted,
				snippetedAt: snippetedAt || new Date(),
				snippetedBy,
				snippetName
			}
		};
		return this.update(query, update);
	}

	setUrlsById(_id, urls) {
		const query = {
			_id
		};
		const update = {
			$set: {
				urls
			}
		};
		return this.update(query, update);
	}

	updateAllUsernamesByUserId(userId, username) {
		const query = {
			'u._id': userId
		};
		const update = {
			$set: {
				'u.username': username
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	updateUsernameOfEditByUserId(userId, username) {
		const query = {
			'editedBy._id': userId
		};
		const update = {
			$set: {
				'editedBy.username': username
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	updateUsernameAndMessageOfMentionByIdAndOldUsername(_id, oldUsername, newUsername, newMessage) {
		const query = {
			_id,
			'mentions.username': oldUsername
		};
		const update = {
			$set: {
				'mentions.$.username': newUsername,
				'msg': newMessage
			}
		};
		return this.update(query, update);
	}

	updateUserStarById(_id, userId, starred) {
		let update;
		const query = {
			_id
		};

		if (starred) {
			update = {
				$addToSet: {
					starred: {
						_id: userId
					}
				}
			};
		} else {
			update = {
				$pull: {
					starred: {
						_id: Meteor.userId()
					}
				}
			};
		}

		return this.update(query, update);
	}

	upgradeEtsToEditAt() {
		const query = {
			ets: {
				$exists: 1
			}
		};
		const update = {
			$rename: {
				'ets': 'editedAt'
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	setMessageAttachments(_id, attachments) {
		const query = {
			_id
		};
		const update = {
			$set: {
				attachments
			}
		};
		return this.update(query, update);
	}

	setSlackBotIdAndSlackTs(_id, slackBotId, slackTs) {
		const query = {
			_id
		};
		const update = {
			$set: {
				slackBotId,
				slackTs
			}
		};
		return this.update(query, update);
	} // INSERT


	createWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {
		const room = RocketChat.models.Rooms.findOneById(roomId, {
			fields: {
				sysMes: 1
			}
		});

		if ((room != null ? room.sysMes : undefined) === false) {
			return;
		}

		const record = {
			t: type,
			rid: roomId,
			ts: new Date(),
			msg: message,
			u: {
				_id: user._id,
				username: user.username
			},
			groupable: false
		};

		_.extend(record, extraData);

		record._id = this.insertOrUpsert(record);
		RocketChat.models.Rooms.incMsgCountById(room._id, 1);
		return record;
	}

	createUserJoinWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('uj', roomId, message, user, extraData);
	}

	createUserLeaveWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('ul', roomId, message, user, extraData);
	}

	createUserRemovedWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('ru', roomId, message, user, extraData);
	}

	createUserAddedWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('au', roomId, message, user, extraData);
	}

	createCommandWithRoomIdAndUser(command, roomId, user, extraData) {
		return this.createWithTypeRoomIdMessageAndUser('command', roomId, command, user, extraData);
	}

	createUserMutedWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('user-muted', roomId, message, user, extraData);
	}

	createUserUnmutedWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('user-unmuted', roomId, message, user, extraData);
	}

	createNewModeratorWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('new-moderator', roomId, message, user, extraData);
	}

	createModeratorRemovedWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('moderator-removed', roomId, message, user, extraData);
	}

	createNewOwnerWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('new-owner', roomId, message, user, extraData);
	}

	createOwnerRemovedWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('owner-removed', roomId, message, user, extraData);
	}

	createNewLeaderWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('new-leader', roomId, message, user, extraData);
	}

	createLeaderRemovedWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('leader-removed', roomId, message, user, extraData);
	}

	createSubscriptionRoleAddedWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('subscription-role-added', roomId, message, user, extraData);
	}

	createSubscriptionRoleRemovedWithRoomIdAndUser(roomId, user, extraData) {
		const message = user.username;
		return this.createWithTypeRoomIdMessageAndUser('subscription-role-removed', roomId, message, user, extraData);
	} // REMOVE


	removeById(_id) {
		const query = {
			_id
		};
		return this.remove(query);
	}

	removeByRoomId(roomId) {
		const query = {
			rid: roomId
		};
		return this.remove(query);
	}

	removeByUserId(userId) {
		const query = {
			'u._id': userId
		};
		return this.remove(query);
	}

	getMessageByFileId(fileID) {
		return this.findOne({
			'file._id': fileID
		});
	}

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Reports.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Reports.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
RocketChat.models.Reports = new class extends RocketChat.models._Base {
	constructor() {
		super('reports');
	}

	createWithMessageDescriptionAndUserId(message, description, userId, extraData) {
		const record = {
			message,
			description,
			ts: new Date(),
			userId
		};

		_.extend(record, extraData);

		record._id = this.insert(record);
		return record;
	}

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Rooms.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Rooms.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);

class ModelRooms extends RocketChat.models._Base {
	constructor() {
		super(...arguments);
		this.tryEnsureIndex({
			'name': 1
		}, {
			unique: 1,
			sparse: 1
		});
		this.tryEnsureIndex({
			'default': 1
		});
		this.tryEnsureIndex({
			'usernames': 1
		});
		this.tryEnsureIndex({
			't': 1
		});
		this.tryEnsureIndex({
			'u._id': 1
		});
		this.cache.ignoreUpdatedFields = ['msgs', 'lm'];
		this.cache.ensureIndex(['t', 'name'], 'unique');
		this.cache.options = {
			fields: {
				usernames: 0
			}
		};
	}

	findOneByIdOrName(_idOrName, options) {
		const query = {
			$or: [{
				_id: _idOrName
			}, {
				name: _idOrName
			}]
		};
		return this.findOne(query, options);
	}

	findOneByImportId(_id, options) {
		const query = {
			importIds: _id
		};
		return this.findOne(query, options);
	}

	findOneByName(name, options) {
		const query = {
			name
		};
		return this.findOne(query, options);
	}

	findOneByNameAndNotId(name, rid) {
		const query = {
			_id: {
				$ne: rid
			},
			name
		};
		return this.findOne(query);
	}

	findOneByDisplayName(fname, options) {
		const query = {
			fname
		};
		return this.findOne(query, options);
	}

	findOneByNameAndType(name, type, options) {
		const query = {
			name,
			t: type
		};
		return this.findOne(query, options);
	}

	findOneByIdContainingUsername(_id, username, options) {
		const query = {
			_id,
			usernames: username
		};
		return this.findOne(query, options);
	}

	findOneByNameAndTypeNotContainingUsername(name, type, username, options) {
		const query = {
			name,
			t: type,
			usernames: {
				$ne: username
			}
		};
		return this.findOne(query, options);
	} // FIND


	findById(roomId, options) {
		return this.find({
			_id: roomId
		}, options);
	}

	findByIds(roomIds, options) {
		return this.find({
			_id: {
				$in: [].concat(roomIds)
			}
		}, options);
	}

	findByType(type, options) {
		const query = {
			t: type
		};
		return this.find(query, options);
	}

	findByTypes(types, options) {
		const query = {
			t: {
				$in: types
			}
		};
		return this.find(query, options);
	}

	findByUserId(userId, options) {
		const query = {
			'u._id': userId
		};
		return this.find(query, options);
	}

	findBySubscriptionUserId(userId, options) {
		let data;

		if (this.useCache) {
			data = RocketChat.models.Subscriptions.findByUserId(userId).fetch();
			data = data.map(function (item) {
				if (item._room) {
					return item._room;
				}

				console.log('Empty Room for Subscription', item);
				return {};
			});
			return this.arrayToCursor(this.processQueryOptionsOnResult(data, options));
		}

		data = RocketChat.models.Subscriptions.findByUserId(userId, {
			fields: {
				rid: 1
			}
		}).fetch();
		data = data.map(item => item.rid);
		const query = {
			_id: {
				$in: data
			}
		};
		return this.find(query, options);
	}

	findBySubscriptionUserIdUpdatedAfter(userId, _updatedAt, options) {
		if (this.useCache) {
			let data = RocketChat.models.Subscriptions.findByUserId(userId).fetch();
			data = data.map(function (item) {
				if (item._room) {
					return item._room;
				}

				console.log('Empty Room for Subscription', item);
				return {};
			});
			data = data.filter(item => item._updatedAt > _updatedAt);
			return this.arrayToCursor(this.processQueryOptionsOnResult(data, options));
		}

		let ids = RocketChat.models.Subscriptions.findByUserId(userId, {
			fields: {
				rid: 1
			}
		}).fetch();
		ids = ids.map(item => item.rid);
		const query = {
			_id: {
				$in: ids
			},
			_updatedAt: {
				$gt: _updatedAt
			}
		};
		return this.find(query, options);
	}

	findByNameContaining(name, options) {
		const nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), 'i');
		const query = {
			$or: [{
				name: nameRegex
			}, {
				t: 'd',
				usernames: nameRegex
			}]
		};
		return this.find(query, options);
	}

	findByNameContainingTypesWithUsername(name, types, options) {
		const nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), 'i');
		const $or = [];

		for (const type of Array.from(types)) {
			const obj = {
				name: nameRegex,
				t: type.type
			};

			if (type.username != null) {
				obj.usernames = type.username;
			}

			if (type.ids != null) {
				obj._id = {
					$in: type.ids
				};
			}

			$or.push(obj);
		}

		const query = {
			$or
		};
		return this.find(query, options);
	}

	findContainingTypesWithUsername(types, options) {
		const $or = [];

		for (const type of Array.from(types)) {
			const obj = {
				t: type.type
			};

			if (type.username != null) {
				obj.usernames = type.username;
			}

			if (type.ids != null) {
				obj._id = {
					$in: type.ids
				};
			}

			$or.push(obj);
		}

		const query = {
			$or
		};
		return this.find(query, options);
	}

	findByNameContainingAndTypes(name, types, options) {
		const nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), 'i');
		const query = {
			t: {
				$in: types
			},
			$or: [{
				name: nameRegex
			}, {
				t: 'd',
				usernames: nameRegex
			}]
		};
		return this.find(query, options);
	}

	findByNameAndTypeNotDefault(name, type, options) {
		const query = {
			t: type,
			name,
			default: {
				$ne: true
			}
		}; // do not use cache

		return this._db.find(query, options);
	}

	findByNameAndTypesNotContainingUsername(name, types, username, options) {
		const query = {
			t: {
				$in: types
			},
			name,
			usernames: {
				$ne: username
			}
		}; // do not use cache

		return this._db.find(query, options);
	}

	findByNameStartingAndTypes(name, types, options) {
		const nameRegex = new RegExp(`^${s.trim(s.escapeRegExp(name))}`, 'i');
		const query = {
			t: {
				$in: types
			},
			$or: [{
				name: nameRegex
			}, {
				t: 'd',
				usernames: nameRegex
			}]
		};
		return this.find(query, options);
	}

	findByDefaultAndTypes(defaultValue, types, options) {
		const query = {
			default: defaultValue,
			t: {
				$in: types
			}
		};
		return this.find(query, options);
	}

	findByTypeContainingUsername(type, username, options) {
		const query = {
			t: type,
			usernames: username
		};
		return this.find(query, options);
	}

	findByTypeContainingUsernames(type, username, options) {
		const query = {
			t: type,
			usernames: {
				$all: [].concat(username)
			}
		};
		return this.find(query, options);
	}

	findByTypesAndNotUserIdContainingUsername(types, userId, username, options) {
		const query = {
			t: {
				$in: types
			},
			uid: {
				$ne: userId
			},
			usernames: username
		};
		return this.find(query, options);
	}

	findByContainingUsername(username, options) {
		const query = {
			usernames: username
		};
		return this.find(query, options);
	}

	findByTypeAndName(type, name, options) {
		if (this.useCache) {
			return this.cache.findByIndex('t,name', [type, name], options);
		}

		const query = {
			name,
			t: type
		};
		return this.find(query, options);
	}

	findByTypeAndNameContainingUsername(type, name, username, options) {
		const query = {
			name,
			t: type,
			usernames: username
		};
		return this.find(query, options);
	}

	findByTypeAndArchivationState(type, archivationstate, options) {
		const query = {
			t: type
		};

		if (archivationstate) {
			query.archived = true;
		} else {
			query.archived = {
				$ne: true
			};
		}

		return this.find(query, options);
	} // UPDATE


	addImportIds(_id, importIds) {
		importIds = [].concat(importIds);
		const query = {
			_id
		};
		const update = {
			$addToSet: {
				importIds: {
					$each: importIds
				}
			}
		};
		return this.update(query, update);
	}

	archiveById(_id) {
		const query = {
			_id
		};
		const update = {
			$set: {
				archived: true
			}
		};
		return this.update(query, update);
	}

	unarchiveById(_id) {
		const query = {
			_id
		};
		const update = {
			$set: {
				archived: false
			}
		};
		return this.update(query, update);
	}

	addUsernameById(_id, username, muted) {
		const query = {
			_id
		};
		const update = {
			$addToSet: {
				usernames: username
			}
		};

		if (muted) {
			update.$addToSet.muted = username;
		}

		return this.update(query, update);
	}

	addUsernamesById(_id, usernames) {
		const query = {
			_id
		};
		const update = {
			$addToSet: {
				usernames: {
					$each: usernames
				}
			}
		};
		return this.update(query, update);
	}

	addUsernameByName(name, username) {
		const query = {
			name
		};
		const update = {
			$addToSet: {
				usernames: username
			}
		};
		return this.update(query, update);
	}

	removeUsernameById(_id, username) {
		const query = {
			_id
		};
		const update = {
			$pull: {
				usernames: username
			}
		};
		return this.update(query, update);
	}

	removeUsernamesById(_id, usernames) {
		const query = {
			_id
		};
		const update = {
			$pull: {
				usernames: {
					$in: usernames
				}
			}
		};
		return this.update(query, update);
	}

	removeUsernameFromAll(username) {
		const query = {
			usernames: username
		};
		const update = {
			$pull: {
				usernames: username
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	removeUsernameByName(name, username) {
		const query = {
			name
		};
		const update = {
			$pull: {
				usernames: username
			}
		};
		return this.update(query, update);
	}

	setNameById(_id, name, fname) {
		const query = {
			_id
		};
		const update = {
			$set: {
				name,
				fname
			}
		};
		return this.update(query, update);
	}

	incMsgCountById(_id, inc) {
		if (inc == null) {
			inc = 1;
		}

		const query = {
			_id
		};
		const update = {
			$inc: {
				msgs: inc
			}
		};
		return this.update(query, update);
	}

	incMsgCountAndSetLastMessageById(_id, inc, lastMessageTimestamp, lastMessage) {
		if (inc == null) {
			inc = 1;
		}

		const query = {
			_id
		};
		const update = {
			$set: {
				lm: lastMessageTimestamp
			},
			$inc: {
				msgs: inc
			}
		};

		if (lastMessage) {
			update.$set.lastMessage = lastMessage;
		}

		return this.update(query, update);
	}

	setLastMessageById(_id, lastMessage) {
		const query = {
			_id
		};
		const update = {
			$set: {
				lastMessage
			}
		};
		return this.update(query, update);
	}

	replaceUsername(previousUsername, username) {
		const query = {
			usernames: previousUsername
		};
		const update = {
			$set: {
				'usernames.$': username
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	replaceMutedUsername(previousUsername, username) {
		const query = {
			muted: previousUsername
		};
		const update = {
			$set: {
				'muted.$': username
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	replaceUsernameOfUserByUserId(userId, username) {
		const query = {
			'u._id': userId
		};
		const update = {
			$set: {
				'u.username': username
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	setJoinCodeById(_id, joinCode) {
		let update;
		const query = {
			_id
		};

		if ((joinCode != null ? joinCode.trim() : undefined) !== '') {
			update = {
				$set: {
					joinCodeRequired: true,
					joinCode
				}
			};
		} else {
			update = {
				$set: {
					joinCodeRequired: false
				},
				$unset: {
					joinCode: 1
				}
			};
		}

		return this.update(query, update);
	}

	setUserById(_id, user) {
		const query = {
			_id
		};
		const update = {
			$set: {
				u: {
					_id: user._id,
					username: user.username
				}
			}
		};
		return this.update(query, update);
	}

	setTypeById(_id, type) {
		const query = {
			_id
		};
		const update = {
			$set: {
				t: type
			}
		};

		if (type === 'p') {
			update.$unset = {
				default: ''
			};
		}

		return this.update(query, update);
	}

	setTopicById(_id, topic) {
		const query = {
			_id
		};
		const update = {
			$set: {
				topic
			}
		};
		return this.update(query, update);
	}

	setAnnouncementById(_id, announcement) {
		const query = {
			_id
		};
		const update = {
			$set: {
				announcement
			}
		};
		return this.update(query, update);
	}

	muteUsernameByRoomId(_id, username) {
		const query = {
			_id
		};
		const update = {
			$addToSet: {
				muted: username
			}
		};
		return this.update(query, update);
	}

	unmuteUsernameByRoomId(_id, username) {
		const query = {
			_id
		};
		const update = {
			$pull: {
				muted: username
			}
		};
		return this.update(query, update);
	}

	saveDefaultById(_id, defaultValue) {
		const query = {
			_id
		};
		const update = {
			$set: {
				default: defaultValue === 'true'
			}
		};
		return this.update(query, update);
	}

	setTopicAndTagsById(_id, topic, tags) {
		const setData = {};
		const unsetData = {};

		if (topic != null) {
			if (!_.isEmpty(s.trim(topic))) {
				setData.topic = s.trim(topic);
			} else {
				unsetData.topic = 1;
			}
		}

		if (tags != null) {
			if (!_.isEmpty(s.trim(tags))) {
				setData.tags = s.trim(tags).split(',').map(tag => s.trim(tag));
			} else {
				unsetData.tags = 1;
			}
		}

		const update = {};

		if (!_.isEmpty(setData)) {
			update.$set = setData;
		}

		if (!_.isEmpty(unsetData)) {
			update.$unset = unsetData;
		}

		if (_.isEmpty(update)) {
			return;
		}

		return this.update({
			_id
		}, update);
	} // INSERT


	createWithTypeNameUserAndUsernames(type, name, fname, user, usernames, extraData) {
		const room = {
			name,
			fname,
			t: type,
			usernames,
			msgs: 0,
			u: {
				_id: user._id,
				username: user.username
			}
		};

		_.extend(room, extraData);

		room._id = this.insert(room);
		return room;
	}

	createWithIdTypeAndName(_id, type, name, extraData) {
		const room = {
			_id,
			ts: new Date(),
			t: type,
			name,
			usernames: [],
			msgs: 0
		};

		_.extend(room, extraData);

		this.insert(room);
		return room;
	} // REMOVE


	removeById(_id) {
		const query = {
			_id
		};
		return this.remove(query);
	}

	removeByTypeContainingUsername(type, username) {
		const query = {
			t: type,
			usernames: username
		};
		return this.remove(query);
	}

}

RocketChat.models.Rooms = new ModelRooms('room', true);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Settings.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Settings.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
class ModelSettings extends RocketChat.models._Base {
	constructor() {
		super(...arguments);
		this.tryEnsureIndex({
			'blocked': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'hidden': 1
		}, {
			sparse: 1
		});
	} // FIND


	findById(_id) {
		const query = {
			_id
		};
		return this.find(query);
	}

	findOneNotHiddenById(_id) {
		const query = {
			_id,
			hidden: {
				$ne: true
			}
		};
		return this.findOne(query);
	}

	findByIds(_id = []) {
		_id = [].concat(_id);
		const query = {
			_id: {
				$in: _id
			}
		};
		return this.find(query);
	}

	findByRole(role, options) {
		const query = {
			role
		};
		return this.find(query, options);
	}

	findPublic(options) {
		const query = {
			public: true
		};
		return this.find(query, options);
	}

	findNotHiddenPublic(ids = []) {
		const filter = {
			hidden: {
				$ne: true
			},
			public: true
		};

		if (ids.length > 0) {
			filter._id = {
				$in: ids
			};
		}

		return this.find(filter, {
			fields: {
				_id: 1,
				value: 1
			}
		});
	}

	findNotHiddenPublicUpdatedAfter(updatedAt) {
		const filter = {
			hidden: {
				$ne: true
			},
			public: true,
			_updatedAt: {
				$gt: updatedAt
			}
		};
		return this.find(filter, {
			fields: {
				_id: 1,
				value: 1
			}
		});
	}

	findNotHiddenPrivate() {
		return this.find({
			hidden: {
				$ne: true
			},
			public: {
				$ne: true
			}
		});
	}

	findNotHidden(options) {
		return this.find({
			hidden: {
				$ne: true
			}
		}, options);
	}

	findNotHiddenUpdatedAfter(updatedAt) {
		return this.find({
			hidden: {
				$ne: true
			},
			_updatedAt: {
				$gt: updatedAt
			}
		});
	} // UPDATE


	updateValueById(_id, value) {
		const query = {
			blocked: {
				$ne: true
			},
			value: {
				$ne: value
			},
			_id
		};
		const update = {
			$set: {
				value
			}
		};
		return this.update(query, update);
	}

	updateValueAndEditorById(_id, value, editor) {
		const query = {
			blocked: {
				$ne: true
			},
			value: {
				$ne: value
			},
			_id
		};
		const update = {
			$set: {
				value,
				editor
			}
		};
		return this.update(query, update);
	}

	updateValueNotHiddenById(_id, value) {
		const query = {
			_id,
			hidden: {
				$ne: true
			},
			blocked: {
				$ne: true
			}
		};
		const update = {
			$set: {
				value
			}
		};
		return this.update(query, update);
	}

	updateOptionsById(_id, options) {
		const query = {
			blocked: {
				$ne: true
			},
			_id
		};
		const update = {
			$set: options
		};
		return this.update(query, update);
	} // INSERT


	createWithIdAndValue(_id, value) {
		const record = {
			_id,
			value,
			_createdAt: new Date()
		};
		return this.insert(record);
	} // REMOVE


	removeById(_id) {
		const query = {
			blocked: {
				$ne: true
			},
			_id
		};
		return this.remove(query);
	}

}

RocketChat.models.Settings = new ModelSettings('settings', true);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Subscriptions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Subscriptions.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);

class ModelSubscriptions extends RocketChat.models._Base {
	constructor() {
		super(...arguments);
		this.tryEnsureIndex({
			'rid': 1,
			'u._id': 1
		}, {
			unique: 1
		});
		this.tryEnsureIndex({
			'rid': 1,
			'alert': 1,
			'u._id': 1
		});
		this.tryEnsureIndex({
			'rid': 1,
			'roles': 1
		});
		this.tryEnsureIndex({
			'u._id': 1,
			'name': 1,
			't': 1
		});
		this.tryEnsureIndex({
			'u._id': 1,
			'name': 1,
			't': 1,
			'code': 1
		}, {
			unique: 1
		});
		this.tryEnsureIndex({
			'open': 1
		});
		this.tryEnsureIndex({
			'alert': 1
		});
		this.tryEnsureIndex({
			'unread': 1
		});
		this.tryEnsureIndex({
			'ts': 1
		});
		this.tryEnsureIndex({
			'ls': 1
		});
		this.tryEnsureIndex({
			'audioNotifications': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'desktopNotifications': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'mobilePushNotifications': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'emailNotifications': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'autoTranslate': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'autoTranslateLanguage': 1
		}, {
			sparse: 1
		});
		this.cache.ensureIndex('rid', 'array');
		this.cache.ensureIndex('u._id', 'array');
		this.cache.ensureIndex('name', 'array');
		this.cache.ensureIndex(['rid', 'u._id'], 'unique');
		this.cache.ensureIndex(['name', 'u._id'], 'unique');
	} // FIND ONE


	findOneByRoomIdAndUserId(roomId, userId) {
		if (this.useCache) {
			return this.cache.findByIndex('rid,u._id', [roomId, userId]).fetch();
		}

		const query = {
			rid: roomId,
			'u._id': userId
		};
		return this.findOne(query);
	}

	findOneByRoomNameAndUserId(roomName, userId) {
		if (this.useCache) {
			return this.cache.findByIndex('name,u._id', [roomName, userId]).fetch();
		}

		const query = {
			name: roomName,
			'u._id': userId
		};
		return this.findOne(query);
	} // FIND


	findByUserId(userId, options) {
		if (this.useCache) {
			return this.cache.findByIndex('u._id', userId, options);
		}

		const query = {
			'u._id': userId
		};
		return this.find(query, options);
	}

	findByUserIdUpdatedAfter(userId, updatedAt, options) {
		const query = {
			'u._id': userId,
			_updatedAt: {
				$gt: updatedAt
			}
		};
		return this.find(query, options);
	} // FIND


	findByRoomIdAndRoles(roomId, roles, options) {
		roles = [].concat(roles);
		const query = {
			'rid': roomId,
			'roles': {
				$in: roles
			}
		};
		return this.find(query, options);
	}

	findByType(types, options) {
		const query = {
			t: {
				$in: types
			}
		};
		return this.find(query, options);
	}

	findByTypeAndUserId(type, userId, options) {
		const query = {
			t: type,
			'u._id': userId
		};
		return this.find(query, options);
	}

	findByTypeNameAndUserId(type, name, userId, options) {
		const query = {
			t: type,
			name,
			'u._id': userId
		};
		return this.find(query, options);
	}

	findByRoomId(roomId, options) {
		if (this.useCache) {
			return this.cache.findByIndex('rid', roomId, options);
		}

		const query = {
			rid: roomId
		};
		return this.find(query, options);
	}

	findByRoomIdAndNotUserId(roomId, userId, options) {
		const query = {
			rid: roomId,
			'u._id': {
				$ne: userId
			}
		};
		return this.find(query, options);
	}

	getLastSeen(options) {
		if (options == null) {
			options = {};
		}

		const query = {
			ls: {
				$exists: 1
			}
		};
		options.sort = {
			ls: -1
		};
		options.limit = 1;
		const [subscription] = this.find(query, options).fetch();
		return subscription && subscription.ls;
	}

	findByRoomIdAndUserIds(roomId, userIds) {
		const query = {
			rid: roomId,
			'u._id': {
				$in: userIds
			}
		};
		return this.find(query);
	}

	findByRoomIdAndUserIdsOrAllMessages(roomId, userIds) {
		const query = {
			rid: roomId,
			$or: [{
				'u._id': {
					$in: userIds
				}
			}, {
				emailNotifications: 'all'
			}]
		};
		return this.find(query);
	}

	findUnreadByUserId(userId) {
		const query = {
			'u._id': userId,
			unread: {
				$gt: 0
			}
		};
		return this.find(query, {
			fields: {
				unread: 1
			}
		});
	} // UPDATE


	archiveByRoomId(roomId) {
		const query = {
			rid: roomId
		};
		const update = {
			$set: {
				alert: false,
				open: false,
				archived: true
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	unarchiveByRoomId(roomId) {
		const query = {
			rid: roomId
		};
		const update = {
			$set: {
				alert: false,
				open: true,
				archived: false
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	hideByRoomIdAndUserId(roomId, userId) {
		const query = {
			rid: roomId,
			'u._id': userId
		};
		const update = {
			$set: {
				alert: false,
				open: false
			}
		};
		return this.update(query, update);
	}

	openByRoomIdAndUserId(roomId, userId) {
		const query = {
			rid: roomId,
			'u._id': userId
		};
		const update = {
			$set: {
				open: true
			}
		};
		return this.update(query, update);
	}

	setAsReadByRoomIdAndUserId(roomId, userId) {
		const query = {
			rid: roomId,
			'u._id': userId
		};
		const update = {
			$set: {
				open: true,
				alert: false,
				unread: 0,
				userMentions: 0,
				groupMentions: 0,
				ls: new Date()
			}
		};
		return this.update(query, update);
	}

	setAsUnreadByRoomIdAndUserId(roomId, userId, firstMessageUnreadTimestamp) {
		const query = {
			rid: roomId,
			'u._id': userId
		};
		const update = {
			$set: {
				open: true,
				alert: true,
				ls: firstMessageUnreadTimestamp
			}
		};
		return this.update(query, update);
	}

	setFavoriteByRoomIdAndUserId(roomId, userId, favorite) {
		if (favorite == null) {
			favorite = true;
		}

		const query = {
			rid: roomId,
			'u._id': userId
		};
		const update = {
			$set: {
				f: favorite
			}
		};
		return this.update(query, update);
	}

	updateNameAndAlertByRoomId(roomId, name, fname) {
		const query = {
			rid: roomId
		};
		const update = {
			$set: {
				name,
				fname,
				alert: true
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	updateNameByRoomId(roomId, name) {
		const query = {
			rid: roomId
		};
		const update = {
			$set: {
				name
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	setUserUsernameByUserId(userId, username) {
		const query = {
			'u._id': userId
		};
		const update = {
			$set: {
				'u.username': username
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	setNameForDirectRoomsWithOldName(oldName, name) {
		const query = {
			name: oldName,
			t: 'd'
		};
		const update = {
			$set: {
				name
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	incUnreadForRoomIdExcludingUserId(roomId, userId, inc) {
		if (inc == null) {
			inc = 1;
		}

		const query = {
			rid: roomId,
			'u._id': {
				$ne: userId
			}
		};
		const update = {
			$set: {
				alert: true,
				open: true
			},
			$inc: {
				unread: inc
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	incGroupMentionsAndUnreadForRoomIdExcludingUserId(roomId, userId, incGroup = 1, incUnread = 1) {
		const query = {
			rid: roomId,
			'u._id': {
				$ne: userId
			}
		};
		const update = {
			$set: {
				alert: true,
				open: true
			},
			$inc: {
				unread: incUnread,
				groupMentions: incGroup
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	incUserMentionsAndUnreadForRoomIdAndUserIds(roomId, userIds, incUser = 1, incUnread = 1) {
		const query = {
			rid: roomId,
			'u._id': {
				$in: userIds
			}
		};
		const update = {
			$set: {
				alert: true,
				open: true
			},
			$inc: {
				unread: incUnread,
				userMentions: incUser
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	setAlertForRoomIdExcludingUserId(roomId, userId) {
		const query = {
			rid: roomId,
			'u._id': {
				$ne: userId
			},
			$or: [{
				alert: {
					$ne: true
				}
			}, {
				open: {
					$ne: true
				}
			}]
		};
		const update = {
			$set: {
				alert: true,
				open: true
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	setBlockedByRoomId(rid, blocked, blocker) {
		const query = {
			rid,
			'u._id': blocked
		};
		const update = {
			$set: {
				blocked: true
			}
		};
		const query2 = {
			rid,
			'u._id': blocker
		};
		const update2 = {
			$set: {
				blocker: true
			}
		};
		return this.update(query, update) && this.update(query2, update2);
	}

	unsetBlockedByRoomId(rid, blocked, blocker) {
		const query = {
			rid,
			'u._id': blocked
		};
		const update = {
			$unset: {
				blocked: 1
			}
		};
		const query2 = {
			rid,
			'u._id': blocker
		};
		const update2 = {
			$unset: {
				blocker: 1
			}
		};
		return this.update(query, update) && this.update(query2, update2);
	}

	updateTypeByRoomId(roomId, type) {
		const query = {
			rid: roomId
		};
		const update = {
			$set: {
				t: type
			}
		};
		return this.update(query, update, {
			multi: true
		});
	}

	addRoleById(_id, role) {
		const query = {
			_id
		};
		const update = {
			$addToSet: {
				roles: role
			}
		};
		return this.update(query, update);
	}

	removeRoleById(_id, role) {
		const query = {
			_id
		};
		const update = {
			$pull: {
				roles: role
			}
		};
		return this.update(query, update);
	}

	setArchivedByUsername(username, archived) {
		const query = {
			t: 'd',
			name: username
		};
		const update = {
			$set: {
				archived
			}
		};
		return this.update(query, update, {
			multi: true
		});
	} // INSERT


	createWithRoomAndUser(room, user, extraData) {
		const subscription = {
			open: false,
			alert: false,
			unread: 0,
			userMentions: 0,
			groupMentions: 0,
			ts: room.ts,
			rid: room._id,
			name: room.name,
			fname: room.fname,
			t: room.t,
			u: {
				_id: user._id,
				username: user.username,
				name: user.name
			}
		};

		_.extend(subscription, extraData);

		return this.insert(subscription);
	} // REMOVE


	removeByUserId(userId) {
		const query = {
			'u._id': userId
		};
		return this.remove(query);
	}

	removeByRoomId(roomId) {
		const query = {
			rid: roomId
		};
		return this.remove(query);
	}

	removeByRoomIdAndUserId(roomId, userId) {
		const query = {
			rid: roomId,
			'u._id': userId
		};
		return this.remove(query);
	}

}

RocketChat.models.Subscriptions = new ModelSubscriptions('subscription', true);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Uploads.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Uploads.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);
RocketChat.models.Uploads = new class extends RocketChat.models._Base {
	constructor() {
		super('uploads');
		this.model.before.insert((userId, doc) => {
			doc.instanceId = InstanceStatus.id();
		});
		this.tryEnsureIndex({
			'rid': 1
		});
		this.tryEnsureIndex({
			'uploadedAt': 1
		});
	}

	findNotHiddenFilesOfRoom(roomId, limit) {
		const fileQuery = {
			rid: roomId,
			complete: true,
			uploading: false,
			_hidden: {
				$ne: true
			}
		};
		const fileOptions = {
			limit,
			sort: {
				uploadedAt: -1
			},
			fields: {
				_id: 1,
				userId: 1,
				rid: 1,
				name: 1,
				description: 1,
				type: 1,
				url: 1,
				uploadedAt: 1
			}
		};
		return this.find(fileQuery, fileOptions);
	}

	insertFileInit(userId, store, file, extra) {
		const fileData = {
			userId,
			store,
			complete: false,
			uploading: true,
			progress: 0,
			extension: s.strRightBack(file.name, '.'),
			uploadedAt: new Date()
		};

		_.extend(fileData, file, extra);

		if (this.model.direct && this.model.direct.insert != null) {
			file = this.model.direct.insert(fileData);
		} else {
			file = this.insert(fileData);
		}

		return file;
	}

	updateFileComplete(fileId, userId, file) {
		let result;

		if (!fileId) {
			return;
		}

		const filter = {
			_id: fileId,
			userId
		};
		const update = {
			$set: {
				complete: true,
				uploading: false,
				progress: 1
			}
		};
		update.$set = _.extend(file, update.$set);

		if (this.model.direct && this.model.direct.update != null) {
			result = this.model.direct.update(filter, update);
		} else {
			result = this.update(filter, update);
		}

		return result;
	}

	deleteFile(fileId) {
		if (this.model.direct && this.model.direct.remove != null) {
			return this.model.direct.remove({
				_id: fileId
			});
		} else {
			return this.remove({
				_id: fileId
			});
		}
	}

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Users.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Users.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 1);

class ModelUsers extends RocketChat.models._Base {
	constructor() {
		super(...arguments);
		this.tryEnsureIndex({
			'roles': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'name': 1
		});
		this.tryEnsureIndex({
			'lastLogin': 1
		});
		this.tryEnsureIndex({
			'status': 1
		});
		this.tryEnsureIndex({
			'active': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'statusConnection': 1
		}, {
			sparse: 1
		});
		this.tryEnsureIndex({
			'type': 1
		});
		this.cache.ensureIndex('username', 'unique');
	}

	findOneByImportId(_id, options) {
		return this.findOne({
			importIds: _id
		}, options);
	}

	findOneByUsername(username, options) {
		if (typeof username === 'string') {
			username = new RegExp(`^${username}$`, 'i');
		}

		const query = {
			username
		};
		return this.findOne(query, options);
	}

	findOneByEmailAddress(emailAddress, options) {
		const query = {
			'emails.address': new RegExp(`^${s.escapeRegExp(emailAddress)}$`, 'i')
		};
		return this.findOne(query, options);
	}

	findOneAdmin(admin, options) {
		const query = {
			admin
		};
		return this.findOne(query, options);
	}

	findOneByIdAndLoginToken(_id, token, options) {
		const query = {
			_id,
			'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(token)
		};
		return this.findOne(query, options);
	} // FIND


	findById(userId) {
		const query = {
			_id: userId
		};
		return this.find(query);
	}

	findUsersNotOffline(options) {
		const query = {
			username: {
				$exists: 1
			},
			status: {
				$in: ['online', 'away', 'busy']
			}
		};
		return this.find(query, options);
	}

	findByUsername(username, options) {
		const query = {
			username
		};
		return this.find(query, options);
	}

	findUsersByUsernamesWithHighlights(usernames, options) {
		if (this.useCache) {
			const result = {
				fetch() {
					return RocketChat.models.Users.getDynamicView('highlights').data().filter(record => usernames.indexOf(record.username) > -1);
				},

				count() {
					return result.fetch().length;
				},

				forEach(fn) {
					return result.fetch().forEach(fn);
				}

			};
			return result;
		}

		const query = {
			username: {
				$in: usernames
			},
			'settings.preferences.highlights.0': {
				$exists: true
			}
		};
		return this.find(query, options);
	}

	findActiveByUsernameOrNameRegexWithExceptions(searchTerm, exceptions, options) {
		if (exceptions == null) {
			exceptions = [];
		}

		if (options == null) {
			options = {};
		}

		if (!_.isArray(exceptions)) {
			exceptions = [exceptions];
		}

		const termRegex = new RegExp(s.escapeRegExp(searchTerm), 'i');
		const query = {
			$or: [{
				username: termRegex
			}, {
				name: termRegex
			}],
			active: true,
			type: {
				$in: ['user', 'bot']
			},
			$and: [{
				username: {
					$exists: true
				}
			}, {
				username: {
					$nin: exceptions
				}
			}]
		};
		return this.find(query, options);
	}

	findByActiveUsersExcept(searchTerm, exceptions, options) {
		if (exceptions == null) {
			exceptions = [];
		}

		if (options == null) {
			options = {};
		}

		if (!_.isArray(exceptions)) {
			exceptions = [exceptions];
		}

		const termRegex = new RegExp(s.escapeRegExp(searchTerm), 'i');

		const orStmt = _.reduce(RocketChat.settings.get('Accounts_SearchFields').trim().split(','), function (acc, el) {
			acc.push({
				[el.trim()]: termRegex
			});
			return acc;
		}, []);

		const query = {
			$and: [{
				active: true,
				$or: orStmt
			}, {
				username: {
					$exists: true,
					$nin: exceptions
				}
			}]
		}; // do not use cache

		return this._db.find(query, options);
	}

	findUsersByNameOrUsername(nameOrUsername, options) {
		const query = {
			username: {
				$exists: 1
			},
			$or: [{
				name: nameOrUsername
			}, {
				username: nameOrUsername
			}],
			type: {
				$in: ['user']
			}
		};
		return this.find(query, options);
	}

	findByUsernameNameOrEmailAddress(usernameNameOrEmailAddress, options) {
		const query = {
			$or: [{
				name: usernameNameOrEmailAddress
			}, {
				username: usernameNameOrEmailAddress
			}, {
				'emails.address': usernameNameOrEmailAddress
			}],
			type: {
				$in: ['user', 'bot']
			}
		};
		return this.find(query, options);
	}

	findLDAPUsers(options) {
		const query = {
			ldap: true
		};
		return this.find(query, options);
	}

	findCrowdUsers(options) {
		const query = {
			crowd: true
		};
		return this.find(query, options);
	}

	getLastLogin(options) {
		if (options == null) {
			options = {};
		}

		const query = {
			lastLogin: {
				$exists: 1
			}
		};
		options.sort = {
			lastLogin: -1
		};
		options.limit = 1;
		const [user] = this.find(query, options).fetch();
		return user && user.lastLogin;
	}

	findUsersByUsernames(usernames, options) {
		const query = {
			username: {
				$in: usernames
			}
		};
		return this.find(query, options);
	}

	findUsersByIds(ids, options) {
		const query = {
			_id: {
				$in: ids
			}
		};
		return this.find(query, options);
	} // UPDATE


	addImportIds(_id, importIds) {
		importIds = [].concat(importIds);
		const query = {
			_id
		};
		const update = {
			$addToSet: {
				importIds: {
					$each: importIds
				}
			}
		};
		return this.update(query, update);
	}

	updateLastLoginById(_id) {
		const update = {
			$set: {
				lastLogin: new Date()
			}
		};
		return this.update(_id, update);
	}

	setServiceId(_id, serviceName, serviceId) {
		const update = {
			$set: {}
		};
		const serviceIdKey = `services.${serviceName}.id`;
		update.$set[serviceIdKey] = serviceId;
		return this.update(_id, update);
	}

	setUsername(_id, username) {
		const update = {
			$set: {
				username
			}
		};
		return this.update(_id, update);
	}

	setEmail(_id, email) {
		const update = {
			$set: {
				emails: [{
					address: email,
					verified: false
				}]
			}
		};
		return this.update(_id, update);
	}

	setEmailVerified(_id, email) {
		const query = {
			_id,
			emails: {
				$elemMatch: {
					address: email,
					verified: false
				}
			}
		};
		const update = {
			$set: {
				'emails.$.verified': true
			}
		};
		return this.update(query, update);
	}

	setName(_id, name) {
		const update = {
			$set: {
				name
			}
		};
		return this.update(_id, update);
	}

	setCustomFields(_id, fields) {
		const values = {};
		Object.keys(fields).forEach(key => {
			values[`customFields.${key}`] = fields[key];
		});
		const update = {
			$set: values
		};
		return this.update(_id, update);
	}

	setAvatarOrigin(_id, origin) {
		const update = {
			$set: {
				avatarOrigin: origin
			}
		};
		return this.update(_id, update);
	}

	unsetAvatarOrigin(_id) {
		const update = {
			$unset: {
				avatarOrigin: 1
			}
		};
		return this.update(_id, update);
	}

	setUserActive(_id, active) {
		if (active == null) {
			active = true;
		}

		const update = {
			$set: {
				active
			}
		};
		return this.update(_id, update);
	}

	setAllUsersActive(active) {
		const update = {
			$set: {
				active
			}
		};
		return this.update({}, update, {
			multi: true
		});
	}

	unsetLoginTokens(_id) {
		const update = {
			$set: {
				'services.resume.loginTokens': []
			}
		};
		return this.update(_id, update);
	}

	unsetRequirePasswordChange(_id) {
		const update = {
			$unset: {
				'requirePasswordChange': true,
				'requirePasswordChangeReason': true
			}
		};
		return this.update(_id, update);
	}

	resetPasswordAndSetRequirePasswordChange(_id, requirePasswordChange, requirePasswordChangeReason) {
		const update = {
			$unset: {
				'services.password': 1
			},
			$set: {
				requirePasswordChange,
				requirePasswordChangeReason
			}
		};
		return this.update(_id, update);
	}

	setLanguage(_id, language) {
		const update = {
			$set: {
				language
			}
		};
		return this.update(_id, update);
	}

	setProfile(_id, profile) {
		const update = {
			$set: {
				'settings.profile': profile
			}
		};
		return this.update(_id, update);
	}

	setPreferences(_id, preferences) {
		const update = {
			$set: {
				'settings.preferences': preferences
			}
		};
		return this.update(_id, update);
	}

	setUtcOffset(_id, utcOffset) {
		const query = {
			_id,
			utcOffset: {
				$ne: utcOffset
			}
		};
		const update = {
			$set: {
				utcOffset
			}
		};
		return this.update(query, update);
	}

	saveUserById(_id, data) {
		const setData = {};
		const unsetData = {};

		if (data.name != null) {
			if (!_.isEmpty(s.trim(data.name))) {
				setData.name = s.trim(data.name);
			} else {
				unsetData.name = 1;
			}
		}

		if (data.email != null) {
			if (!_.isEmpty(s.trim(data.email))) {
				setData.emails = [{
					address: s.trim(data.email)
				}];
			} else {
				unsetData.emails = 1;
			}
		}

		if (data.phone != null) {
			if (!_.isEmpty(s.trim(data.phone))) {
				setData.phone = [{
					phoneNumber: s.trim(data.phone)
				}];
			} else {
				unsetData.phone = 1;
			}
		}

		const update = {};

		if (!_.isEmpty(setData)) {
			update.$set = setData;
		}

		if (!_.isEmpty(unsetData)) {
			update.$unset = unsetData;
		}

		if (_.isEmpty(update)) {
			return true;
		}

		return this.update({
			_id
		}, update);
	} // INSERT


	create(data) {
		const user = {
			createdAt: new Date(),
			avatarOrigin: 'none'
		};

		_.extend(user, data);

		return this.insert(user);
	} // REMOVE


	removeById(_id) {
		return this.remove(_id);
	} /*
   Find users to send a message by email if:
   - he is not online
   - has a verified email
   - has not disabled email notifications
   - `active` is equal to true (false means they were deactivated and can't login)
   */

	getUsersToSendOfflineEmail(usersIds) {
		const query = {
			_id: {
				$in: usersIds
			},
			active: true,
			status: 'offline',
			statusConnection: {
				$ne: 'online'
			},
			'emails.verified': true
		};
		const options = {
			fields: {
				name: 1,
				username: 1,
				emails: 1,
				'settings.preferences.emailNotificationMode': 1,
				language: 1
			}
		};
		return this.find(query, options);
	}

}

RocketChat.models.Users = new ModelUsers(Meteor.users, true);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_BaseCache.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/_BaseCache.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let loki;
module.watch(require("lokijs"), {
	default(v) {
		loki = v;
	}

}, 1);
let EventEmitter;
module.watch(require("events"), {
	EventEmitter(v) {
		EventEmitter = v;
	}

}, 2);
let objectPath;
module.watch(require("object-path"), {
	default(v) {
		objectPath = v;
	}

}, 3);
const logger = new Logger('BaseCache');
const lokiEq = loki.LokiOps.$eq;
const lokiNe = loki.LokiOps.$ne;

loki.LokiOps.$eq = function (a, b) {
	if (Array.isArray(a)) {
		return a.indexOf(b) !== -1;
	}

	return lokiEq(a, b);
};

loki.LokiOps.$ne = function (a, b) {
	if (Array.isArray(a)) {
		return a.indexOf(b) === -1;
	}

	return lokiNe(a, b);
};

const lokiIn = loki.LokiOps.$in;

loki.LokiOps.$in = function (a, b) {
	if (Array.isArray(a)) {
		return a.some(subA => lokiIn(subA, b));
	}

	return lokiIn(a, b);
};

loki.LokiOps.$nin = function (a, b) {
	return !loki.LokiOps.$in(a, b);
};

loki.LokiOps.$all = function (a, b) {
	return b.every(subB => a.includes(subB));
};

loki.LokiOps.$exists = function (a, b) {
	if (b) {
		return loki.LokiOps.$ne(a, undefined);
	}

	return loki.LokiOps.$eq(a, undefined);
};

loki.LokiOps.$elemMatch = function (a, b) {
	return _.findWhere(a, b);
};

const ignore = ['emit', 'load', 'on', 'addToAllIndexes'];

function traceMethodCalls(target) {
	target._stats = {};

	for (const property in target) {
		if (typeof target[property] === 'function' && ignore.indexOf(property) === -1) {
			target._stats[property] = {
				calls: 0,
				time: 0,
				avg: 0
			};
			const origMethod = target[property];

			target[property] = function (...args) {
				if (target.loaded !== true) {
					return origMethod.apply(target, args);
				}

				const startTime = RocketChat.statsTracker.now();
				const result = origMethod.apply(target, args);
				const time = Math.round(RocketChat.statsTracker.now() - startTime) / 1000;
				target._stats[property].time += time;
				target._stats[property].calls++;
				target._stats[property].avg = target._stats[property].time / target._stats[property].calls;
				return result;
			};
		}
	}

	setInterval(function () {
		for (const property in target._stats) {
			if (target._stats.hasOwnProperty(property) && target._stats[property].time > 0) {
				const tags = [`property:${property}`, `collection:${target.collectionName}`];
				RocketChat.statsTracker.timing('cache.methods.time', target._stats[property].avg, tags);
				RocketChat.statsTracker.increment('cache.methods.totalTime', target._stats[property].time, tags);
				RocketChat.statsTracker.increment('cache.methods.count', target._stats[property].calls, tags);
				target._stats[property].avg = 0;
				target._stats[property].time = 0;
				target._stats[property].calls = 0;
			}
		}
	}, 10000);

	target._getStatsAvg = function () {
		const stats = [];

		for (const property in target._stats) {
			if (target._stats.hasOwnProperty(property)) {
				stats.push([Math.round(target._stats[property].avg * 100) / 100, property]);
			}
		}

		return _.sortBy(stats, function (record) {
			return record[0];
		});
	};
}

class Adapter {
	loadDatabase() /*dbname, callback*/{}

	saveDatabase() /*dbname, dbstring, callback*/{}

	deleteDatabase() /*dbname, callback*/{}

}

const db = new loki('rocket.chat.json', {
	adapter: Adapter
});

class ModelsBaseCache extends EventEmitter {
	constructor(model) {
		super();
		traceMethodCalls(this);
		this.indexes = {};
		this.ignoreUpdatedFields = ['_updatedAt'];
		this.query = {};
		this.options = {};
		this.ensureIndex('_id', 'unique');
		this.joins = {};
		this.on('inserted', (...args) => {
			this.emit('changed', 'inserted', ...args);
		});
		this.on('removed', (...args) => {
			this.emit('changed', 'removed', ...args);
		});
		this.on('updated', (...args) => {
			this.emit('changed', 'updated', ...args);
		});
		this.on('beforeinsert', (...args) => {
			this.emit('beforechange', 'inserted', ...args);
		});
		this.on('beforeremove', (...args) => {
			this.emit('beforechange', 'removed', ...args);
		});
		this.on('beforeupdate', (...args) => {
			this.emit('beforechange', 'updated', ...args);
		});
		this.on('inserted', (...args) => {
			this.emit('sync', 'inserted', ...args);
		});
		this.on('updated', (...args) => {
			this.emit('sync', 'updated', ...args);
		});
		this.on('beforeremove', (...args) => {
			this.emit('sync', 'removed', ...args);
		});
		this.db = db;
		this.model = model;
		this.collectionName = this.model._db.collectionName;
		this.collection = this.db.addCollection(this.collectionName);
	}

	hasOne(join, {
		field,
		link
	}) {
		this.join({
			join,
			field,
			link,
			multi: false
		});
	}

	hasMany(join, {
		field,
		link
	}) {
		this.join({
			join,
			field,
			link,
			multi: true
		});
	}

	join({
		join,
		field,
		link,
		multi
	}) {
		if (!RocketChat.models[join]) {
			console.log(`Invalid cache model ${join}`);
			return;
		}

		RocketChat.models[join].cache.on('inserted', record => {
			this.processRemoteJoinInserted({
				join,
				field,
				link,
				multi,
				record
			});
		});
		RocketChat.models[join].cache.on('beforeupdate', (record, diff) => {
			if (diff[link.remote]) {
				this.processRemoteJoinRemoved({
					join,
					field,
					link,
					multi,
					record
				});
			}
		});
		RocketChat.models[join].cache.on('updated', (record, diff) => {
			if (diff[link.remote]) {
				this.processRemoteJoinInserted({
					join,
					field,
					link,
					multi,
					record
				});
			}
		});
		RocketChat.models[join].cache.on('removed', record => {
			this.processRemoteJoinRemoved({
				join,
				field,
				link,
				multi,
				record
			});
		});
		this.on('inserted', localRecord => {
			this.processLocalJoinInserted({
				join,
				field,
				link,
				multi,
				localRecord
			});
		});
		this.on('beforeupdate', (localRecord, diff) => {
			if (diff[link.local]) {
				if (multi === true) {
					localRecord[field] = [];
				} else {
					localRecord[field] = undefined;
				}
			}
		});
		this.on('updated', (localRecord, diff) => {
			if (diff[link.local]) {
				this.processLocalJoinInserted({
					join,
					field,
					link,
					multi,
					localRecord
				});
			}
		});
	}

	processRemoteJoinInserted({
		field,
		link,
		multi,
		record
	}) {
		let localRecords = this._findByIndex(link.local, objectPath.get(record, link.remote));

		if (!localRecords) {
			return;
		}

		if (!Array.isArray(localRecords)) {
			localRecords = [localRecords];
		}

		for (let i = 0; i < localRecords.length; i++) {
			const localRecord = localRecords[i];

			if (multi === true && !localRecord[field]) {
				localRecord[field] = [];
			}

			if (typeof link.where === 'function' && link.where(localRecord, record) === false) {
				continue;
			}

			let mutableRecord = record;

			if (typeof link.transform === 'function') {
				mutableRecord = link.transform(localRecord, mutableRecord);
			}

			if (multi === true) {
				localRecord[field].push(mutableRecord);
			} else {
				localRecord[field] = mutableRecord;
			}

			this.emit(`join:${field}:inserted`, localRecord, mutableRecord);
			this.emit(`join:${field}:changed`, 'inserted', localRecord, mutableRecord);
		}
	}

	processLocalJoinInserted({
		join,
		field,
		link,
		multi,
		localRecord
	}) {
		let records = RocketChat.models[join].cache._findByIndex(link.remote, objectPath.get(localRecord, link.local));

		if (!Array.isArray(records)) {
			records = [records];
		}

		for (let i = 0; i < records.length; i++) {
			let record = records[i];

			if (typeof link.where === 'function' && link.where(localRecord, record) === false) {
				continue;
			}

			if (typeof link.transform === 'function') {
				record = link.transform(localRecord, record);
			}

			if (multi === true) {
				localRecord[field].push(record);
			} else {
				localRecord[field] = record;
			}

			this.emit(`join:${field}:inserted`, localRecord, record);
			this.emit(`join:${field}:changed`, 'inserted', localRecord, record);
		}
	}

	processRemoteJoinRemoved({
		field,
		link,
		multi,
		record
	}) {
		let localRecords = this._findByIndex(link.local, objectPath.get(record, link.remote));

		if (!localRecords) {
			return;
		}

		if (!Array.isArray(localRecords)) {
			localRecords = [localRecords];
		}

		for (let i = 0; i < localRecords.length; i++) {
			const localRecord = localRecords[i];

			if (multi === true) {
				if (Array.isArray(localRecord[field])) {
					if (typeof link.remove === 'function') {
						link.remove(localRecord[field], record);
					} else if (localRecord[field].indexOf(record) > -1) {
						localRecord[field].splice(localRecord[field].indexOf(record), 1);
					}
				}
			} else {
				localRecord[field] = undefined;
			}

			this.emit(`join:${field}:removed`, localRecord, record);
			this.emit(`join:${field}:changed`, 'removed', localRecord, record);
		}
	}

	ensureIndex(fields, type = 'array') {
		if (!Array.isArray(fields)) {
			fields = [fields];
		}

		this.indexes[fields.join(',')] = {
			type,
			fields,
			data: {}
		};
	}

	addToAllIndexes(record) {
		for (const indexName in this.indexes) {
			if (this.indexes.hasOwnProperty(indexName)) {
				this.addToIndex(indexName, record);
			}
		}
	}

	addToIndex(indexName, record) {
		const index = this.indexes[indexName];

		if (!index) {
			console.error(`Index not defined ${indexName}`);
			return;
		}

		const keys = [];

		for (const field of index.fields) {
			keys.push(objectPath.get(record, field));
		}

		const key = keys.join('|');

		if (index.type === 'unique') {
			index.data[key] = record;
			return;
		}

		if (index.type === 'array') {
			if (!index.data[key]) {
				index.data[key] = [];
			}

			index.data[key].push(record);
			return;
		}
	}

	removeFromAllIndexes(record) {
		for (const indexName in this.indexes) {
			if (this.indexes.hasOwnProperty(indexName)) {
				this.removeFromIndex(indexName, record);
			}
		}
	}

	removeFromIndex(indexName, record) {
		const index = this.indexes[indexName];

		if (!this.indexes[indexName]) {
			console.error(`Index not defined ${indexName}`);
			return;
		}

		if (!index.data) {
			return;
		}

		let key = [];

		for (const field of index.fields) {
			key.push(objectPath.get(record, field));
		}

		key = key.join('|');

		if (index.type === 'unique') {
			index.data[key] = undefined;
			return;
		}

		if (index.type === 'array') {
			if (!index.data[key]) {
				return;
			}

			const i = index.data[key].indexOf(record);

			if (i > -1) {
				index.data[key].splice(i, 1);
			}

			return;
		}
	}

	_findByIndex(index, keys) {
		const key = [].concat(keys).join('|');

		if (!this.indexes[index]) {
			return;
		}

		if (this.indexes[index].data) {
			const result = this.indexes[index].data[key];

			if (result) {
				return result;
			}
		}

		if (this.indexes[index].type === 'array') {
			return [];
		}
	}

	findByIndex(index, keys, options = {}) {
		return {
			fetch: () => {
				return this.processQueryOptionsOnResult(this._findByIndex(index, keys), options);
			},
			count: () => {
				const records = this.findByIndex(index, keys, options).fetch();

				if (Array.isArray(records)) {
					return records.length;
				}

				return !records ? 0 : 1;
			},
			forEach: fn => {
				const records = this.findByIndex(index, keys, options).fetch();

				if (Array.isArray(records)) {
					return records.forEach(fn);
				}

				if (records) {
					return fn(records);
				}
			}
		};
	}

	load() {
		if (this.model._useCache === false) {
			return;
		}

		console.log('Will load cache for', this.collectionName);
		this.emit('beforeload');
		this.loaded = false;
		const time = RocketChat.statsTracker.now();
		const data = this.model.db.find(this.query, this.options).fetch();

		for (let i = 0; i < data.length; i++) {
			this.insert(data[i]);
		}

		console.log(String(data.length), 'records load from', this.collectionName);
		RocketChat.statsTracker.timing('cache.load', RocketChat.statsTracker.now() - time, [`collection:${this.collectionName}`]);
		this.startSync();
		this.loaded = true;
		this.emit('afterload');
	}

	startSync() {
		if (this.model._useCache === false) {
			return;
		}

		this.model._db.on('change', ({
			action,
			id,
			data /*, oplog*/
		}) => {
			switch (action) {
				case 'insert':
					data._id = id;
					this.insert(data);
					break;

				case 'remove':
					this.removeById(id);
					break;

				case 'update:record':
					this.updateDiffById(id, data);
					break;

				case 'update:diff':
					this.updateDiffById(id, data);
					break;

				case 'update:query':
					this.update(data.query, data.update, data.options);
					break;
			}
		});
	}

	processQueryOptionsOnResult(result, options = {}) {
		if (result === undefined || result === null) {
			return undefined;
		}

		if (Array.isArray(result)) {
			if (options.sort) {
				result = result.sort((a, b) => {
					let r = 0;

					for (const field in options.sort) {
						if (options.sort.hasOwnProperty(field)) {
							const direction = options.sort[field];
							let valueA;
							let valueB;

							if (field.indexOf('.') > -1) {
								valueA = objectPath.get(a, field);
								valueB = objectPath.get(b, field);
							} else {
								valueA = a[field];
								valueB = b[field];
							}

							if (valueA > valueB) {
								r = direction;
								break;
							}

							if (valueA < valueB) {
								r = -direction;
								break;
							}
						}
					}

					return r;
				});
			}

			if (typeof options.skip === 'number') {
				result.splice(0, options.skip);
			}

			if (typeof options.limit === 'number' && options.limit !== 0) {
				result.splice(options.limit);
			}
		}

		if (!options.fields) {
			options.fields = {};
		}

		const fieldsToRemove = [];
		const fieldsToGet = [];

		for (const field in options.fields) {
			if (options.fields.hasOwnProperty(field)) {
				if (options.fields[field] === 0) {
					fieldsToRemove.push(field);
				} else if (options.fields[field] === 1) {
					fieldsToGet.push(field);
				}
			}
		}

		if (fieldsToRemove.length > 0 && fieldsToGet.length > 0) {
			console.warn('Can\'t mix remove and get fields');
			fieldsToRemove.splice(0, fieldsToRemove.length);
		}

		if (fieldsToGet.length > 0 && fieldsToGet.indexOf('_id') === -1) {
			fieldsToGet.push('_id');
		}

		const pickFields = (obj, fields) => {
			const picked = {};
			fields.forEach(field => {
				if (field.indexOf('.') !== -1) {
					objectPath.set(picked, field, objectPath.get(obj, field));
				} else {
					picked[field] = obj[field];
				}
			});
			return picked;
		};

		if (fieldsToRemove.length > 0 || fieldsToGet.length > 0) {
			if (Array.isArray(result)) {
				result = result.map(record => {
					if (fieldsToRemove.length > 0) {
						return _.omit(record, ...fieldsToRemove);
					}

					if (fieldsToGet.length > 0) {
						return pickFields(record, fieldsToGet);
					}
				});
			} else {
				if (fieldsToRemove.length > 0) {
					return _.omit(result, ...fieldsToRemove);
				}

				if (fieldsToGet.length > 0) {
					return pickFields(result, fieldsToGet);
				}
			}
		}

		return result;
	}

	processQuery(query, parentField) {
		if (!query) {
			return query;
		}

		if (Match.test(query, String)) {
			return {
				_id: query
			};
		}

		if (Object.keys(query).length > 1 && parentField !== '$elemMatch') {
			const and = [];

			for (const field in query) {
				if (query.hasOwnProperty(field)) {
					and.push({
						[field]: query[field]
					});
				}
			}

			query = {
				$and: and
			};
		}

		for (const field in query) {
			if (query.hasOwnProperty(field)) {
				const value = query[field];

				if (value instanceof RegExp && field !== '$regex') {
					query[field] = {
						$regex: value
					};
				}

				if (field === '$and' || field === '$or') {
					query[field] = value.map(subValue => {
						return this.processQuery(subValue, field);
					});
				}

				if (Match.test(value, Object) && Object.keys(value).length > 0) {
					query[field] = this.processQuery(value, field);
				}
			}
		}

		return query;
	}

	find(query, options = {}) {
		return {
			fetch: () => {
				try {
					query = this.processQuery(query);
					return this.processQueryOptionsOnResult(this.collection.find(query), options);
				} catch (e) {
					console.error('Exception on cache find for', this.collectionName);
					console.error('Query:', JSON.stringify(query, null, 2));
					console.error('Options:', JSON.stringify(options, null, 2));
					console.error(e.stack);
					throw e;
				}
			},
			count: () => {
				try {
					query = this.processQuery(query);
					const {
						limit,
						skip
					} = options;
					return this.processQueryOptionsOnResult(this.collection.find(query), {
						limit,
						skip
					}).length;
				} catch (e) {
					console.error('Exception on cache find for', this.collectionName);
					console.error('Query:', JSON.stringify(query, null, 2));
					console.error('Options:', JSON.stringify(options, null, 2));
					console.error(e.stack);
					throw e;
				}
			},
			forEach: fn => {
				return this.find(query, options).fetch().forEach(fn);
			},
			observe: obj => {
				logger.debug(this.collectionName, 'Falling back observe to model with query:', query);
				return this.model.db.find(...arguments).observe(obj);
			},
			observeChanges: obj => {
				logger.debug(this.collectionName, 'Falling back observeChanges to model with query:', query);
				return this.model.db.find(...arguments).observeChanges(obj);
			},
			_publishCursor: (cursor, sub, collection) => {
				logger.debug(this.collectionName, 'Falling back _publishCursor to model with query:', query);
				return this.model.db.find(...arguments)._publishCursor(cursor, sub, collection);
			}
		};
	}

	findOne(query, options) {
		try {
			query = this.processQuery(query);
			return this.processQueryOptionsOnResult(this.collection.findOne(query), options);
		} catch (e) {
			console.error('Exception on cache findOne for', this.collectionName);
			console.error('Query:', JSON.stringify(query, null, 2));
			console.error('Options:', JSON.stringify(options, null, 2));
			console.error(e.stack);
			throw e;
		}
	}

	findOneById(_id, options) {
		return this.findByIndex('_id', _id, options).fetch();
	}

	findOneByIds(ids, options) {
		const query = this.processQuery({
			_id: {
				$in: ids
			}
		});
		return this.processQueryOptionsOnResult(this.collection.findOne(query), options);
	}

	findWhere(query, options) {
		query = this.processQuery(query);
		return this.processQueryOptionsOnResult(this.collection.findWhere(query), options);
	}

	addDynamicView() {
		return this.collection.addDynamicView(...arguments);
	}

	getDynamicView() {
		return this.collection.getDynamicView(...arguments);
	}

	insert(record) {
		if (Array.isArray(record)) {
			for (const item of record) {
				this.insert(item);
			}
		} else {
			// TODO remove - ignore updates in room.usernames
			if (this.collectionName === 'rocketchat_room' && record.usernames) {
				delete record.usernames;
			}

			this.emit('beforeinsert', record);
			this.addToAllIndexes(record);
			this.collection.insert(record);
			this.emit('inserted', record);
		}
	}

	updateDiffById(id, diff) {
		// TODO remove - ignore updates in room.usernames
		if (this.collectionName === 'rocketchat_room' && diff.usernames) {
			delete diff.usernames;
		}

		const record = this._findByIndex('_id', id);

		if (!record) {
			console.error('Cache.updateDiffById: No record', this.collectionName, id, diff);
			return;
		}

		this.removeFromAllIndexes(record);

		const updatedFields = _.without(Object.keys(diff), ...this.ignoreUpdatedFields);

		if (updatedFields.length > 0) {
			this.emit('beforeupdate', record, diff);
		}

		for (const key in diff) {
			if (diff.hasOwnProperty(key)) {
				objectPath.set(record, key, diff[key]);
			}
		}

		this.collection.update(record);
		this.addToAllIndexes(record);

		if (updatedFields.length > 0) {
			this.emit('updated', record, diff);
		}
	}

	updateRecord(record, update) {
		// TODO remove - ignore updates in room.usernames
		if (this.collectionName === 'rocketchat_room' && (record.usernames || record.$set && record.$set.usernames)) {
			delete record.usernames;

			if (record.$set && record.$set.usernames) {
				delete record.$set.usernames;
			}
		}

		this.removeFromAllIndexes(record);
		const topLevelFields = Object.keys(update).map(field => field.split('.')[0]);

		const updatedFields = _.without(topLevelFields, ...this.ignoreUpdatedFields);

		if (updatedFields.length > 0) {
			this.emit('beforeupdate', record, record);
		}

		if (update.$set) {
			_.each(update.$set, (value, field) => {
				objectPath.set(record, field, value);
			});
		}

		if (update.$unset) {
			_.each(update.$unset, (value, field) => {
				objectPath.del(record, field);
			});
		}

		if (update.$min) {
			_.each(update.$min, (value, field) => {
				const curValue = objectPath.get(record, field);

				if (curValue === undefined || value < curValue) {
					objectPath.set(record, field, value);
				}
			});
		}

		if (update.$max) {
			_.each(update.$max, (value, field) => {
				const curValue = objectPath.get(record, field);

				if (curValue === undefined || value > curValue) {
					objectPath.set(record, field, value);
				}
			});
		}

		if (update.$inc) {
			_.each(update.$inc, (value, field) => {
				let curValue = objectPath.get(record, field);

				if (curValue === undefined) {
					curValue = value;
				} else {
					curValue += value;
				}

				objectPath.set(record, field, curValue);
			});
		}

		if (update.$mul) {
			_.each(update.$mul, (value, field) => {
				let curValue = objectPath.get(record, field);

				if (curValue === undefined) {
					curValue = 0;
				} else {
					curValue *= value;
				}

				objectPath.set(record, field, curValue);
			});
		}

		if (update.$rename) {
			_.each(update.$rename, (value, field) => {
				const curValue = objectPath.get(record, field);

				if (curValue !== undefined) {
					objectPath.set(record, value, curValue);
					objectPath.del(record, field);
				}
			});
		}

		if (update.$pullAll) {
			_.each(update.$pullAll, (value, field) => {
				let curValue = objectPath.get(record, field);

				if (Array.isArray(curValue)) {
					curValue = _.difference(curValue, value);
					objectPath.set(record, field, curValue);
				}
			});
		}

		if (update.$pop) {
			_.each(update.$pop, (value, field) => {
				const curValue = objectPath.get(record, field);

				if (Array.isArray(curValue)) {
					if (value === -1) {
						curValue.shift();
					} else {
						curValue.pop();
					}

					objectPath.set(record, field, curValue);
				}
			});
		}

		if (update.$addToSet) {
			_.each(update.$addToSet, (value, field) => {
				let curValue = objectPath.get(record, field);

				if (curValue === undefined) {
					curValue = [];
				}

				if (Array.isArray(curValue)) {
					const length = curValue.length;

					if (value && value.$each && Array.isArray(value.$each)) {
						for (const valueItem of value.$each) {
							if (curValue.indexOf(valueItem) === -1) {
								curValue.push(valueItem);
							}
						}
					} else if (curValue.indexOf(value) === -1) {
						curValue.push(value);
					}

					if (curValue.length > length) {
						objectPath.set(record, field, curValue);
					}
				}
			});
		}

		this.collection.update(record);
		this.addToAllIndexes(record);

		if (updatedFields.length > 0) {
			this.emit('updated', record, record);
		}
	}

	update(query, update, options = {}) {
		let records = options.multi ? this.find(query).fetch() : this.findOne(query) || [];

		if (!Array.isArray(records)) {
			records = [records];
		}

		for (const record of records) {
			this.updateRecord(record, update);
		}
	}

	removeById(id) {
		const record = this._findByIndex('_id', id);

		if (record) {
			this.emit('beforeremove', record);
			this.collection.removeWhere({
				_id: id
			});
			this.removeFromAllIndexes(record);
			this.emit('removed', record);
		}
	}

}

module.exportDefault(ModelsBaseCache);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_BaseDb.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/_BaseDb.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let EventEmitter;
module.watch(require("events"), {
	EventEmitter(v) {
		EventEmitter = v;
	}

}, 1);
const baseName = 'rocketchat_';
const trash = new Mongo.Collection(`${baseName}_trash`);

try {
	trash._ensureIndex({
		collection: 1
	});

	trash._ensureIndex({
		_deletedAt: 1
	}, {
		expireAfterSeconds: 60 * 60 * 24 * 30
	});
} catch (e) {
	console.log(e);
}

const isOplogAvailable = MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle && !!MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle.onOplogEntry;
let isOplogEnabled = isOplogAvailable;
RocketChat.settings.get('Force_Disable_OpLog_For_Cache', (key, value) => {
	isOplogEnabled = isOplogAvailable && value === false;
});

class ModelsBaseDb extends EventEmitter {
	constructor(model, baseModel) {
		super();

		if (Match.test(model, String)) {
			this.name = model;
			this.collectionName = this.baseName + this.name;
			this.model = new Mongo.Collection(this.collectionName);
		} else {
			this.name = model._name;
			this.collectionName = this.name;
			this.model = model;
		}

		this.baseModel = baseModel;
		this.wrapModel(); // When someone start listening for changes we start oplog if available

		this.once('newListener', (event /*, listener*/) => {
			if (event === 'change') {
				if (isOplogEnabled) {
					const query = {
						collection: this.collectionName
					};

					MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle.onOplogEntry(query, this.processOplogRecord.bind(this));

					MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle._defineTooFarBehind(Number.MAX_SAFE_INTEGER);
				}
			}
		});
		this.tryEnsureIndex({
			'_updatedAt': 1
		});
	}

	get baseName() {
		return baseName;
	}

	setUpdatedAt(record = {}) {
		// TODO: Check if this can be deleted, Rodrigo does not rememebr WHY he added it. So he removed it to fix issue #5541
		// setUpdatedAt(record = {}, checkQuery = false, query) {
		// if (checkQuery === true) {
		// 	if (!query || Object.keys(query).length === 0) {
		// 		throw new Meteor.Error('Models._Base: Empty query');
		// 	}
		// }
		if (/(^|,)\$/.test(Object.keys(record).join(','))) {
			record.$set = record.$set || {};
			record.$set._updatedAt = new Date();
		} else {
			record._updatedAt = new Date();
		}

		return record;
	}

	wrapModel() {
		this.originals = {
			insert: this.model.insert.bind(this.model),
			update: this.model.update.bind(this.model),
			remove: this.model.remove.bind(this.model)
		};
		const self = this;

		this.model.insert = function () {
			return self.insert(...arguments);
		};

		this.model.update = function () {
			return self.update(...arguments);
		};

		this.model.remove = function () {
			return self.remove(...arguments);
		};
	}

	find() {
		return this.model.find(...arguments);
	}

	findOne() {
		return this.model.findOne(...arguments);
	}

	findOneById(_id, options) {
		return this.model.findOne({
			_id
		}, options);
	}

	findOneByIds(ids, options) {
		return this.model.findOne({
			_id: {
				$in: ids
			}
		}, options);
	}

	defineSyncStrategy(query, modifier, options) {
		if (this.baseModel.useCache === false) {
			return 'db';
		}

		if (options.upsert === true) {
			return 'db';
		} // const dbModifiers = [
		// 	'$currentDate',
		// 	'$bit',
		// 	'$pull',
		// 	'$pushAll',
		// 	'$push',
		// 	'$setOnInsert'
		// ];


		const cacheAllowedModifiers = ['$set', '$unset', '$min', '$max', '$inc', '$mul', '$rename', '$pullAll', '$pop', '$addToSet'];
		const notAllowedModifiers = Object.keys(modifier).filter(i => i.startsWith('$') && cacheAllowedModifiers.includes(i) === false);

		if (notAllowedModifiers.length > 0) {
			return 'db';
		}

		const placeholderFields = Object.keys(query).filter(item => item.indexOf('$') > -1);

		if (placeholderFields.length > 0) {
			return 'db';
		}

		return 'cache';
	}

	updateHasPositionalOperator(update) {
		for (const key in update) {
			if (key.includes('.$')) {
				return true;
			}

			const value = update[key];

			if (Match.test(value, Object)) {
				if (this.updateHasPositionalOperator(value) === true) {
					return true;
				}
			}
		}

		return false;
	}

	processOplogRecord(action) {
		if (isOplogEnabled === false) {
			return;
		}

		if (action.op.op === 'i') {
			this.emit('change', {
				action: 'insert',
				id: action.op.o._id,
				data: action.op.o,
				oplog: true
			});
			return;
		}

		if (action.op.op === 'u') {
			if (!action.op.o.$set && !action.op.o.$unset) {
				this.emit('change', {
					action: 'update:record',
					id: action.id,
					data: action.op.o,
					oplog: true
				});
				return;
			}

			const diff = {};

			if (action.op.o.$set) {
				for (const key in action.op.o.$set) {
					if (action.op.o.$set.hasOwnProperty(key)) {
						diff[key] = action.op.o.$set[key];
					}
				}
			}

			if (action.op.o.$unset) {
				for (const key in action.op.o.$unset) {
					if (action.op.o.$unset.hasOwnProperty(key)) {
						diff[key] = undefined;
					}
				}
			}

			this.emit('change', {
				action: 'update:diff',
				id: action.id,
				data: diff,
				oplog: true
			});
			return;
		}

		if (action.op.op === 'd') {
			this.emit('change', {
				action: 'remove',
				id: action.id,
				oplog: true
			});
			return;
		}
	}

	insert(record) {
		this.setUpdatedAt(record);
		const result = this.originals.insert(...arguments);

		if (!isOplogEnabled && this.listenerCount('change') > 0) {
			this.emit('change', {
				action: 'insert',
				id: result,
				data: _.extend({}, record),
				oplog: false
			});
		}

		record._id = result;
		return result;
	}

	update(query, update, options = {}) {
		this.setUpdatedAt(update, true, query);
		const strategy = this.defineSyncStrategy(query, update, options);
		let ids = [];

		if (!isOplogEnabled && this.listenerCount('change') > 0 && strategy === 'db') {
			const findOptions = {
				fields: {
					_id: 1
				}
			};
			let records = options.multi ? this.find(query, findOptions).fetch() : this.findOne(query, findOptions) || [];

			if (!Array.isArray(records)) {
				records = [records];
			}

			ids = records.map(item => item._id);

			if (options.upsert !== true && this.updateHasPositionalOperator(update) === false) {
				query = {
					_id: {
						$in: ids
					}
				};
			}
		}

		const result = this.originals.update(query, update, options);

		if (!isOplogEnabled && this.listenerCount('change') > 0) {
			if (strategy === 'db') {
				if (options.upsert === true) {
					if (result.insertedId) {
						this.emit('change', {
							action: 'insert',
							id: result.insertedId,
							data: this.findOne({
								_id: result.insertedId
							}),
							oplog: false
						});
						return;
					}

					query = {
						_id: {
							$in: ids
						}
					};
				}

				let records = options.multi ? this.find(query).fetch() : this.findOne(query) || [];

				if (!Array.isArray(records)) {
					records = [records];
				}

				for (const record of records) {
					this.emit('change', {
						action: 'update:record',
						id: record._id,
						data: record,
						oplog: false
					});
				}
			} else {
				this.emit('change', {
					action: 'update:query',
					id: undefined,
					data: {
						query,
						update,
						options
					},
					oplog: false
				});
			}
		}

		return result;
	}

	upsert(query, update, options = {}) {
		options.upsert = true;
		options._returnObject = true;
		return this.update(query, update, options);
	}

	remove(query) {
		const records = this.model.find(query).fetch();
		const ids = [];

		for (const record of records) {
			ids.push(record._id);
			record._deletedAt = new Date();
			record.__collection__ = this.name;
			trash.upsert({
				_id: record._id
			}, _.omit(record, '_id'));
		}

		query = {
			_id: {
				$in: ids
			}
		};
		const result = this.originals.remove(query);

		if (!isOplogEnabled && this.listenerCount('change') > 0) {
			for (const record of records) {
				this.emit('change', {
					action: 'remove',
					id: record._id,
					data: _.extend({}, record),
					oplog: false
				});
			}
		}

		return result;
	}

	insertOrUpsert(...args) {
		if (args[0] && args[0]._id) {
			const _id = args[0]._id;
			delete args[0]._id;
			args.unshift({
				_id
			});
			this.upsert(...args);
			return _id;
		} else {
			return this.insert(...args);
		}
	}

	allow() {
		return this.model.allow(...arguments);
	}

	deny() {
		return this.model.deny(...arguments);
	}

	ensureIndex() {
		return this.model._ensureIndex(...arguments);
	}

	dropIndex() {
		return this.model._dropIndex(...arguments);
	}

	tryEnsureIndex() {
		try {
			return this.ensureIndex(...arguments);
		} catch (e) {
			console.error('Error creating index:', this.name, '->', ...arguments, e);
		}
	}

	tryDropIndex() {
		try {
			return this.dropIndex(...arguments);
		} catch (e) {
			console.error('Error dropping index:', this.name, '->', ...arguments, e);
		}
	}

	trashFind(query, options) {
		query.__collection__ = this.name;
		return trash.find(query, options);
	}

	trashFindDeletedAfter(deletedAt, query = {}, options) {
		query.__collection__ = this.name;
		query._deletedAt = {
			$gt: deletedAt
		};
		return trash.find(query, options);
	}

}

module.exportDefault(ModelsBaseDb);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"oauth":{"oauth.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/oauth.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
const AccessTokenServices = {};

RocketChat.registerAccessTokenService = function (serviceName, handleAccessTokenRequest) {
	AccessTokenServices[serviceName] = {
		serviceName,
		handleAccessTokenRequest
	};
}; // Listen to calls to `login` with an oauth option set. This is where
// users actually get logged in to meteor via oauth.


Accounts.registerLoginHandler(function (options) {
	if (!options.accessToken) {
		return undefined; // don't handle
	}

	check(options, Match.ObjectIncluding({
		serviceName: String
	}));
	const service = AccessTokenServices[options.serviceName]; // Skip everything if there's no service set by the oauth middleware

	if (!service) {
		throw new Error(`Unexpected AccessToken service ${options.serviceName}`);
	} // Make sure we're configured


	if (!ServiceConfiguration.configurations.findOne({
		service: service.serviceName
	})) {
		throw new ServiceConfiguration.ConfigError();
	}

	if (!_.contains(Accounts.oauth.serviceNames(), service.serviceName)) {
		// serviceName was not found in the registered services list.
		// This could happen because the service never registered itself or
		// unregisterService was called on it.
		return {
			type: 'oauth',
			error: new Meteor.Error(Accounts.LoginCancelledError.numericError, `No registered oauth service found for: ${service.serviceName}`)
		};
	}

	const oauthResult = service.handleAccessTokenRequest(options);
	return Accounts.updateOrCreateUserFromExternalService(service.serviceName, oauthResult.serviceData, oauthResult.options);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"google.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/google.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);

function getIdentity(accessToken) {
	try {
		return HTTP.get('https://www.googleapis.com/oauth2/v1/userinfo', {
			params: {
				access_token: accessToken
			}
		}).data;
	} catch (err) {
		throw _.extend(new Error(`Failed to fetch identity from Google. ${err.message}`), {
			response: err.response
		});
	}
}

function getScopes(accessToken) {
	try {
		return HTTP.get('https://www.googleapis.com/oauth2/v1/tokeninfo', {
			params: {
				access_token: accessToken
			}
		}).data.scope.split(' ');
	} catch (err) {
		throw _.extend(new Error(`Failed to fetch tokeninfo from Google. ${err.message}`), {
			response: err.response
		});
	}
}

RocketChat.registerAccessTokenService('google', function (options) {
	check(options, Match.ObjectIncluding({
		accessToken: String,
		idToken: String,
		expiresIn: Match.Integer,
		scope: Match.Maybe(String),
		identity: Match.Maybe(Object)
	}));
	const identity = options.identity || getIdentity(options.accessToken);
	const serviceData = {
		accessToken: options.accessToken,
		idToken: options.idToken,
		expiresAt: +new Date() + 1000 * parseInt(options.expiresIn, 10),
		scope: options.scopes || getScopes(options.accessToken)
	};

	const fields = _.pick(identity, Google.whitelistedFields);

	_.extend(serviceData, fields); // only set the token in serviceData if it's there. this ensures
	// that we don't lose old ones (since we only get this on the first
	// log in attempt)


	if (options.refreshToken) {
		serviceData.refreshToken = options.refreshToken;
	}

	return {
		serviceData,
		options: {
			profile: {
				name: identity.name
			}
		}
	};
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"proxy.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/proxy.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
OAuth._redirectUri = _.wrap(OAuth._redirectUri, function (func, serviceName, ...args) {
	const proxy = RocketChat.settings.get('Accounts_OAuth_Proxy_services').replace(/\s/g, '').split(',');

	if (proxy.includes(serviceName)) {
		return `${RocketChat.settings.get('Accounts_OAuth_Proxy_host')}/oauth_redirect`;
	} else {
		return func(serviceName, ...args);
	}
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"startup":{"statsTracker.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/statsTracker.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.statsTracker = new class StatsTracker {
	constructor() {
		this.StatsD = Npm.require('node-dogstatsd').StatsD;
		this.dogstatsd = new this.StatsD();
	}

	track(type, stats, ...args) {
		this.dogstatsd[type](`RocketChat.${stats}`, ...args);
	}

	now() {
		const hrtime = process.hrtime();
		return hrtime[0] * 1000000 + hrtime[1] / 1000;
	}

	timing(stats, time, tags) {
		this.track('timing', stats, time, tags);
	}

	increment(stats, time, tags) {
		this.track('increment', stats, time, tags);
	}

	decrement(stats, time, tags) {
		this.track('decrement', stats, time, tags);
	}

	histogram(stats, time, tags) {
		this.track('histogram', stats, time, tags);
	}

	gauge(stats, time, tags) {
		this.track('gauge', stats, time, tags);
	}

	unique(stats, time, tags) {
		this.track('unique', stats, time, tags);
	}

	set(stats, time, tags) {
		this.track('set', stats, time, tags);
	}

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cache":{"CacheLoad.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/cache/CacheLoad.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.models.Rooms.cache.hasMany('Subscriptions', {
	field: 'usernames',
	link: {
		local: '_id',
		remote: 'rid',

		transform(room, subscription) {
			return subscription.u.username;
		},

		remove(arr, subscription) {
			if (arr.indexOf(subscription.u.username) > -1) {
				arr.splice(arr.indexOf(subscription.u.username), 1);
			}
		}

	}
});
RocketChat.models.Subscriptions.cache.hasOne('Rooms', {
	field: '_room',
	link: {
		local: 'rid',
		remote: '_id'
	}
});
RocketChat.models.Subscriptions.cache.hasOne('Users', {
	field: '_user',
	link: {
		local: 'u._id',
		remote: '_id'
	}
});
RocketChat.models.Subscriptions.cache.hasOne('Users', {
	field: 'fname',
	link: {
		local: 'name',
		remote: 'username',

		where(subscription /*, user*/) {
			return subscription.t === 'd';
		},

		transform(subscription, user) {
			if (user == null || subscription == null) {
				return undefined;
			} // Prevent client cache for old subscriptions with new names
			// Cuz when a user change his name, the subscription's _updateAt
			// will not change


			if (subscription._updatedAt < user._updatedAt) {
				subscription._updatedAt = user._updatedAt;
			}

			return user.name;
		}

	}
});
RocketChat.models.Users.cache.load();
RocketChat.models.Rooms.cache.load();
RocketChat.models.Subscriptions.cache.load();
RocketChat.models.Settings.cache.load();
RocketChat.models.Users.cache.addDynamicView('highlights').applyFind({
	'settings.preferences.highlights': {
		$size: {
			$gt: 0
		}
	}
});
RocketChat.models.Subscriptions.cache.addDynamicView('notifications').applyFind({
	$or: [{
		desktopNotifications: {
			$in: ['all', 'nothing']
		}
	}, {
		mobilePushNotifications: {
			$in: ['all', 'nothing']
		}
	}]
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"settingsOnLoadCdnPrefix.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadCdnPrefix.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);

function testWebAppInternals(fn) {
	typeof WebAppInternals !== 'undefined' && fn(WebAppInternals);
}

RocketChat.settings.onload('CDN_PREFIX', function (key, value) {
	if (_.isString(value) && value.trim()) {
		return testWebAppInternals(WebAppInternals => WebAppInternals.setBundledJsCssPrefix(value));
	}
});
Meteor.startup(function () {
	const value = RocketChat.settings.get('CDN_PREFIX');

	if (_.isString(value) && value.trim()) {
		return testWebAppInternals(WebAppInternals => WebAppInternals.setBundledJsCssPrefix(value));
	}
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settingsOnLoadDirectReply.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadDirectReply.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
let IMAPIntercepter;
module.watch(require("../lib/interceptDirectReplyEmails.js"), {
	IMAPIntercepter(v) {
		IMAPIntercepter = v;
	}

}, 1);
let POP3Helper;
module.watch(require("../lib/interceptDirectReplyEmails.js"), {
	POP3Helper(v) {
		POP3Helper = v;
	}

}, 2);

const startEmailIntercepter = _.debounce(Meteor.bindEnvironment(function () {
	console.log('Starting Email Intercepter...');

	if (RocketChat.settings.get('Direct_Reply_Enable') && RocketChat.settings.get('Direct_Reply_Protocol') && RocketChat.settings.get('Direct_Reply_Host') && RocketChat.settings.get('Direct_Reply_Port') && RocketChat.settings.get('Direct_Reply_Username') && RocketChat.settings.get('Direct_Reply_Password')) {
		if (RocketChat.settings.get('Direct_Reply_Protocol') === 'IMAP') {
			// stop already running IMAP instance
			if (RocketChat.IMAP && RocketChat.IMAP.isActive()) {
				console.log('Disconnecting already running IMAP instance...');
				RocketChat.IMAP.stop(Meteor.bindEnvironment(function () {
					console.log('Starting new IMAP instance......');
					RocketChat.IMAP = new IMAPIntercepter();
					RocketChat.IMAP.start();
					return true;
				}));
			} else if (RocketChat.POP3 && RocketChat.POP3Helper && RocketChat.POP3Helper.isActive()) {
				console.log('Disconnecting already running POP instance...');
				RocketChat.POP3Helper.stop(Meteor.bindEnvironment(function () {
					console.log('Starting new IMAP instance......');
					RocketChat.IMAP = new IMAPIntercepter();
					RocketChat.IMAP.start();
					return true;
				}));
			} else {
				console.log('Starting new IMAP instance......');
				RocketChat.IMAP = new IMAPIntercepter();
				RocketChat.IMAP.start();
				return true;
			}
		} else if (RocketChat.settings.get('Direct_Reply_Protocol') === 'POP') {
			// stop already running POP instance
			if (RocketChat.POP3 && RocketChat.POP3Helper && RocketChat.POP3Helper.isActive()) {
				console.log('Disconnecting already running POP instance...');
				RocketChat.POP3Helper.stop(Meteor.bindEnvironment(function () {
					console.log('Starting new POP instance......');
					RocketChat.POP3Helper = new POP3Helper();
					RocketChat.POP3Helper.start();
					return true;
				}));
			} else if (RocketChat.IMAP && RocketChat.IMAP.isActive()) {
				console.log('Disconnecting already running IMAP instance...');
				RocketChat.IMAP.stop(Meteor.bindEnvironment(function () {
					console.log('Starting new POP instance......');
					RocketChat.POP3Helper = new POP3Helper();
					RocketChat.POP3Helper.start();
					return true;
				}));
			} else {
				console.log('Starting new POP instance......');
				RocketChat.POP3Helper = new POP3Helper();
				RocketChat.POP3Helper.start();
				return true;
			}
		}
	} else if (RocketChat.IMAP && RocketChat.IMAP.isActive()) {
		// stop IMAP instance
		RocketChat.IMAP.stop();
	} else if (RocketChat.POP3 && RocketChat.POP3Helper.isActive()) {
		// stop POP3 instance
		RocketChat.POP3Helper.stop();
	}
}), 1000);

RocketChat.settings.onload(/^Direct_Reply_.+/, startEmailIntercepter);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settingsOnLoadSMTP.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadSMTP.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);

const buildMailURL = _.debounce(function () {
	console.log('Updating process.env.MAIL_URL');

	if (RocketChat.settings.get('SMTP_Host')) {
		process.env.MAIL_URL = `${RocketChat.settings.get('SMTP_Protocol')}://`;

		if (RocketChat.settings.get('SMTP_Username') && RocketChat.settings.get('SMTP_Password')) {
			process.env.MAIL_URL += `${encodeURIComponent(RocketChat.settings.get('SMTP_Username'))}:${encodeURIComponent(RocketChat.settings.get('SMTP_Password'))}@`;
		}

		process.env.MAIL_URL += encodeURIComponent(RocketChat.settings.get('SMTP_Host'));

		if (RocketChat.settings.get('SMTP_Port')) {
			process.env.MAIL_URL += `:${parseInt(RocketChat.settings.get('SMTP_Port'))}`;
		}

		process.env.MAIL_URL += `?pool=${RocketChat.settings.get('SMTP_Pool')}`;

		if (RocketChat.settings.get('SMTP_Protocol') === 'smtp' && RocketChat.settings.get('SMTP_IgnoreTLS')) {
			process.env.MAIL_URL += '&secure=false&ignoreTLS=true';
		}

		return process.env.MAIL_URL;
	}
}, 500);

RocketChat.settings.onload('SMTP_Host', function (key, value) {
	if (_.isString(value)) {
		return buildMailURL();
	}
});
RocketChat.settings.onload('SMTP_Port', function () {
	return buildMailURL();
});
RocketChat.settings.onload('SMTP_Username', function (key, value) {
	if (_.isString(value)) {
		return buildMailURL();
	}
});
RocketChat.settings.onload('SMTP_Password', function (key, value) {
	if (_.isString(value)) {
		return buildMailURL();
	}
});
RocketChat.settings.onload('SMTP_Protocol', function () {
	return buildMailURL();
});
RocketChat.settings.onload('SMTP_Pool', function () {
	return buildMailURL();
});
RocketChat.settings.onload('SMTP_IgnoreTLS', function () {
	return buildMailURL();
});
Meteor.startup(function () {
	return buildMailURL();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"oAuthServicesUpdate.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/oAuthServicesUpdate.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
const logger = new Logger('rocketchat:lib', {
	methods: {
		oauth_updated: {
			type: 'info'
		}
	}
});

function _OAuthServicesUpdate() {
	const services = RocketChat.settings.get(/^(Accounts_OAuth_|Accounts_OAuth_Custom-)[a-z0-9_]+$/i);
	services.forEach(service => {
		logger.oauth_updated(service.key);
		let serviceName = service.key.replace('Accounts_OAuth_', '');

		if (serviceName === 'Meteor') {
			serviceName = 'meteor-developer';
		}

		if (/Accounts_OAuth_Custom-/.test(service.key)) {
			serviceName = service.key.replace('Accounts_OAuth_Custom-', '');
		}

		if (service.value === true) {
			const data = {
				clientId: RocketChat.settings.get(`${service.key}_id`),
				secret: RocketChat.settings.get(`${service.key}_secret`)
			};

			if (/Accounts_OAuth_Custom-/.test(service.key)) {
				data.custom = true;
				data.clientId = RocketChat.settings.get(`${service.key}-id`);
				data.secret = RocketChat.settings.get(`${service.key}-secret`);
				data.serverURL = RocketChat.settings.get(`${service.key}-url`);
				data.tokenPath = RocketChat.settings.get(`${service.key}-token_path`);
				data.identityPath = RocketChat.settings.get(`${service.key}-identity_path`);
				data.authorizePath = RocketChat.settings.get(`${service.key}-authorize_path`);
				data.scope = RocketChat.settings.get(`${service.key}-scope`);
				data.buttonLabelText = RocketChat.settings.get(`${service.key}-button_label_text`);
				data.buttonLabelColor = RocketChat.settings.get(`${service.key}-button_label_color`);
				data.loginStyle = RocketChat.settings.get(`${service.key}-login_style`);
				data.buttonColor = RocketChat.settings.get(`${service.key}-button_color`);
				data.tokenSentVia = RocketChat.settings.get(`${service.key}-token_sent_via`);
				data.identityTokenSentVia = RocketChat.settings.get(`${service.key}-identity_token_sent_via`);
				data.usernameField = RocketChat.settings.get(`${service.key}-username_field`);
				data.mergeUsers = RocketChat.settings.get(`${service.key}-merge_users`);
				new CustomOAuth(serviceName.toLowerCase(), {
					serverURL: data.serverURL,
					tokenPath: data.tokenPath,
					identityPath: data.identityPath,
					authorizePath: data.authorizePath,
					scope: data.scope,
					loginStyle: data.loginStyle,
					tokenSentVia: data.tokenSentVia,
					identityTokenSentVia: data.identityTokenSentVia,
					usernameField: data.usernameField,
					mergeUsers: data.mergeUsers
				});
			}

			if (serviceName === 'Facebook') {
				data.appId = data.clientId;
				delete data.clientId;
			}

			if (serviceName === 'Twitter') {
				data.consumerKey = data.clientId;
				delete data.clientId;
			}

			ServiceConfiguration.configurations.upsert({
				service: serviceName.toLowerCase()
			}, {
				$set: data
			});
		} else {
			ServiceConfiguration.configurations.remove({
				service: serviceName.toLowerCase()
			});
		}
	});
}

const OAuthServicesUpdate = _.debounce(Meteor.bindEnvironment(_OAuthServicesUpdate), 2000);

function OAuthServicesRemove(_id) {
	const serviceName = _id.replace('Accounts_OAuth_Custom-', '');

	return ServiceConfiguration.configurations.remove({
		service: serviceName.toLowerCase()
	});
}

RocketChat.settings.get(/^Accounts_OAuth_.+/, function () {
	return OAuthServicesUpdate(); // eslint-disable-line new-cap
});
RocketChat.settings.get(/^Accounts_OAuth_Custom-[a-z0-9_]+/, function (key, value) {
	if (!value) {
		return OAuthServicesRemove(key); // eslint-disable-line new-cap
	}
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settings.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Insert server unique id if it doesn't exist
RocketChat.settings.add('uniqueID', process.env.DEPLOYMENT_ID || Random.id(), {
	'public': true,
	hidden: true
}); // When you define a setting and want to add a description, you don't need to automatically define the i18nDescription
// if you add a node to the i18n.json with the same setting name but with `_Description` it will automatically work.

RocketChat.settings.addGroup('Accounts', function () {
	this.add('Accounts_AllowAnonymousRead', false, {
		type: 'boolean',
		public: true
	});
	this.add('Accounts_AllowAnonymousWrite', false, {
		type: 'boolean',
		public: true,
		enableQuery: {
			_id: 'Accounts_AllowAnonymousRead',
			value: true
		}
	});
	this.add('Accounts_AllowDeleteOwnAccount', false, {
		type: 'boolean',
		'public': true,
		enableQuery: {
			_id: 'Accounts_AllowUserProfileChange',
			value: true
		}
	});
	this.add('Accounts_AllowUserProfileChange', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Accounts_AllowUserAvatarChange', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Accounts_AllowRealNameChange', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Accounts_AllowUsernameChange', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Accounts_AllowEmailChange', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Accounts_AllowPasswordChange', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Accounts_CustomFieldsToShowInUserInfo', '', {
		type: 'string',
		public: true
	});
	this.add('Accounts_LoginExpiration', 90, {
		type: 'int',
		'public': true
	});
	this.add('Accounts_ShowFormLogin', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Accounts_EmailOrUsernamePlaceholder', '', {
		type: 'string',
		'public': true,
		i18nLabel: 'Placeholder_for_email_or_username_login_field'
	});
	this.add('Accounts_PasswordPlaceholder', '', {
		type: 'string',
		'public': true,
		i18nLabel: 'Placeholder_for_password_login_field'
	});
	this.add('Accounts_ForgetUserSessionOnWindowClose', false, {
		type: 'boolean',
		'public': true
	});
	this.add('Accounts_SearchFields', 'username, name, emails.address', {
		type: 'string',
		public: true
	});
	this.section('Registration', function () {
		this.add('Accounts_DefaultUsernamePrefixSuggestion', 'user', {
			type: 'string'
		});
		this.add('Accounts_RequireNameForSignUp', true, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_RequirePasswordConfirmation', true, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_EmailVerification', false, {
			type: 'boolean',
			'public': true,
			enableQuery: {
				_id: 'SMTP_Host',
				value: {
					$exists: 1,
					$ne: ''
				}
			}
		});
		this.add('Accounts_ManuallyApproveNewUsers', false, {
			type: 'boolean'
		});
		this.add('Accounts_AllowedDomainsList', '', {
			type: 'string',
			'public': true
		});
		this.add('Accounts_BlockedDomainsList', '', {
			type: 'string'
		});
		this.add('Accounts_BlockedUsernameList', '', {
			type: 'string'
		});
		this.add('Accounts_UseDefaultBlockedDomainsList', true, {
			type: 'boolean'
		});
		this.add('Accounts_UseDNSDomainCheck', false, {
			type: 'boolean'
		});
		this.add('Accounts_RegistrationForm', 'Public', {
			type: 'select',
			'public': true,
			values: [{
				key: 'Public',
				i18nLabel: 'Accounts_RegistrationForm_Public'
			}, {
				key: 'Disabled',
				i18nLabel: 'Accounts_RegistrationForm_Disabled'
			}, {
				key: 'Secret URL',
				i18nLabel: 'Accounts_RegistrationForm_Secret_URL'
			}]
		});
		this.add('Accounts_RegistrationForm_SecretURL', Random.id(), {
			type: 'string'
		});
		this.add('Accounts_RegistrationForm_LinkReplacementText', 'New user registration is currently disabled', {
			type: 'string',
			'public': true
		});
		this.add('Accounts_Registration_AuthenticationServices_Enabled', true, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_Registration_AuthenticationServices_Default_Roles', 'user', {
			type: 'string',
			enableQuery: {
				_id: 'Accounts_Registration_AuthenticationServices_Enabled',
				value: true
			}
		});
		this.add('Accounts_PasswordReset', true, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_CustomFields', '', {
			type: 'code',
			'public': true,
			i18nLabel: 'Custom_Fields'
		});
	});
	this.section('Accounts_Default_User_Preferences', function () {
		this.add('Accounts_Default_User_Preferences_enableAutoAway', false, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Enable_Auto_Away'
		});
		this.add('Accounts_Default_User_Preferences_idleTimeoutLimit', 300000, {
			type: 'int',
			'public': true,
			i18nLabel: 'Idle_Time_Limit'
		});
		this.add('Accounts_Default_User_Preferences_desktopNotificationDuration', 0, {
			type: 'int',
			'public': true,
			i18nLabel: 'Notification_Duration'
		});
		this.add('Accounts_Default_User_Preferences_audioNotifications', 'mentions', {
			type: 'select',
			values: [{
				key: 'all',
				i18nLabel: 'All_messages'
			}, {
				key: 'mentions',
				i18nLabel: 'Mentions'
			}, {
				key: 'nothing',
				i18nLabel: 'Nothing'
			}],
			public: true
		});
		this.add('Accounts_Default_User_Preferences_desktopNotifications', 'mentions', {
			type: 'select',
			values: [{
				key: 'all',
				i18nLabel: 'All_messages'
			}, {
				key: 'mentions',
				i18nLabel: 'Mentions'
			}, {
				key: 'nothing',
				i18nLabel: 'Nothing'
			}],
			'public': true
		});
		this.add('Accounts_Default_User_Preferences_mobileNotifications', 'mentions', {
			type: 'select',
			values: [{
				key: 'all',
				i18nLabel: 'All_messages'
			}, {
				key: 'mentions',
				i18nLabel: 'Mentions'
			}, {
				key: 'nothing',
				i18nLabel: 'Nothing'
			}],
			'public': true
		});
		this.add('Accounts_Default_User_Preferences_unreadAlert', true, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Unread_Tray_Icon_Alert'
		});
		this.add('Accounts_Default_User_Preferences_useEmojis', true, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Use_Emojis'
		});
		this.add('Accounts_Default_User_Preferences_convertAsciiEmoji', true, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Convert_Ascii_Emojis'
		});
		this.add('Accounts_Default_User_Preferences_autoImageLoad', true, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Auto_Load_Images'
		});
		this.add('Accounts_Default_User_Preferences_saveMobileBandwidth', true, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Save_Mobile_Bandwidth'
		});
		this.add('Accounts_Default_User_Preferences_collapseMediaByDefault', false, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Collapse_Embedded_Media_By_Default'
		});
		this.add('Accounts_Default_User_Preferences_hideUsernames', false, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Hide_usernames'
		});
		this.add('Accounts_Default_User_Preferences_hideRoles', false, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Hide_roles'
		});
		this.add('Accounts_Default_User_Preferences_hideFlexTab', false, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Hide_flextab'
		});
		this.add('Accounts_Default_User_Preferences_hideAvatars', false, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Hide_Avatars'
		});
		this.add('Accounts_Default_User_Preferences_roomsListExhibitionMode', 'category', {
			type: 'select',
			values: [{
				key: 'unread',
				i18nLabel: 'Unread_Rooms_Mode'
			}, {
				key: 'activity',
				i18nLabel: 'Sort_by_activity'
			}, {
				key: 'category',
				i18nLabel: 'Split_by_categories'
			}],
			'public': true,
			i18nLabel: 'Sidebar_list_mode'
		});
		this.add('Accounts_Default_User_Preferences_mergeChannels', false, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'UI_Merge_Channels_Groups'
		});
		this.add('Accounts_Default_User_Preferences_sendOnEnter', 'normal', {
			type: 'select',
			values: [{
				key: 'normal',
				i18nLabel: 'Enter_Normal'
			}, {
				key: 'alternative',
				i18nLabel: 'Enter_Alternative'
			}, {
				key: 'desktop',
				i18nLabel: 'Only_On_Desktop'
			}],
			'public': true,
			i18nLabel: 'Enter_Behaviour'
		});
		this.add('Accounts_Default_User_Preferences_viewMode', 0, {
			type: 'select',
			values: [{
				key: 0,
				i18nLabel: 'Normal'
			}, {
				key: 1,
				i18nLabel: 'Cozy'
			}, {
				key: 2,
				i18nLabel: 'Compact'
			}],
			'public': true,
			i18nLabel: 'View_mode'
		});
		this.add('Accounts_Default_User_Preferences_emailNotificationMode', 'all', {
			type: 'select',
			values: [{
				key: 'disabled',
				i18nLabel: 'Email_Notification_Mode_Disabled'
			}, {
				key: 'all',
				i18nLabel: 'Email_Notification_Mode_All'
			}],
			'public': true,
			i18nLabel: 'Email_Notification_Mode'
		});
		this.add('Accounts_Default_User_Preferences_roomCounterSidebar', false, {
			type: 'boolean',
			'public': true,
			i18nLabel: 'Show_room_counter_on_sidebar'
		});
		this.add('Accounts_Default_User_Preferences_newRoomNotification', 'door', {
			type: 'select',
			values: [{
				key: 'none',
				i18nLabel: 'None'
			}, {
				key: 'door',
				i18nLabel: 'Default'
			}],
			'public': true,
			i18nLabel: 'New_Room_Notification'
		});
		this.add('Accounts_Default_User_Preferences_newMessageNotification', 'chime', {
			type: 'select',
			values: [{
				key: 'none',
				i18nLabel: 'None'
			}, {
				key: 'chime',
				i18nLabel: 'Default'
			}],
			'public': true,
			i18nLabel: 'New_Message_Notification'
		});
		this.add('Accounts_Default_User_Preferences_notificationsSoundVolume', 100, {
			type: 'int',
			'public': true,
			i18nLabel: 'Notifications_Sound_Volume'
		});
	});
	this.section('Avatar', function () {
		this.add('Accounts_AvatarResize', true, {
			type: 'boolean'
		});
		this.add('Accounts_AvatarSize', 200, {
			type: 'int',
			enableQuery: {
				_id: 'Accounts_AvatarResize',
				value: true
			}
		});
		return this.add('Accounts_SetDefaultAvatar', true, {
			type: 'boolean'
		});
	});
});
RocketChat.settings.addGroup('OAuth', function () {
	this.section('Facebook', function () {
		const enableQuery = {
			_id: 'Accounts_OAuth_Facebook',
			value: true
		};
		this.add('Accounts_OAuth_Facebook', false, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_OAuth_Facebook_id', '', {
			type: 'string',
			enableQuery
		});
		this.add('Accounts_OAuth_Facebook_secret', '', {
			type: 'string',
			enableQuery
		});
		return this.add('Accounts_OAuth_Facebook_callback_url', '_oauth/facebook', {
			type: 'relativeUrl',
			readonly: true,
			force: true,
			enableQuery
		});
	});
	this.section('Google', function () {
		const enableQuery = {
			_id: 'Accounts_OAuth_Google',
			value: true
		};
		this.add('Accounts_OAuth_Google', false, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_OAuth_Google_id', '', {
			type: 'string',
			enableQuery
		});
		this.add('Accounts_OAuth_Google_secret', '', {
			type: 'string',
			enableQuery
		});
		return this.add('Accounts_OAuth_Google_callback_url', '_oauth/google', {
			type: 'relativeUrl',
			readonly: true,
			force: true,
			enableQuery
		});
	});
	this.section('GitHub', function () {
		const enableQuery = {
			_id: 'Accounts_OAuth_Github',
			value: true
		};
		this.add('Accounts_OAuth_Github', false, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_OAuth_Github_id', '', {
			type: 'string',
			enableQuery
		});
		this.add('Accounts_OAuth_Github_secret', '', {
			type: 'string',
			enableQuery
		});
		return this.add('Accounts_OAuth_Github_callback_url', '_oauth/github', {
			type: 'relativeUrl',
			readonly: true,
			force: true,
			enableQuery
		});
	});
	this.section('Linkedin', function () {
		const enableQuery = {
			_id: 'Accounts_OAuth_Linkedin',
			value: true
		};
		this.add('Accounts_OAuth_Linkedin', false, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_OAuth_Linkedin_id', '', {
			type: 'string',
			enableQuery
		});
		this.add('Accounts_OAuth_Linkedin_secret', '', {
			type: 'string',
			enableQuery
		});
		return this.add('Accounts_OAuth_Linkedin_callback_url', '_oauth/linkedin', {
			type: 'relativeUrl',
			readonly: true,
			force: true,
			enableQuery
		});
	});
	this.section('Meteor', function () {
		const enableQuery = {
			_id: 'Accounts_OAuth_Meteor',
			value: true
		};
		this.add('Accounts_OAuth_Meteor', false, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_OAuth_Meteor_id', '', {
			type: 'string',
			enableQuery
		});
		this.add('Accounts_OAuth_Meteor_secret', '', {
			type: 'string',
			enableQuery
		});
		return this.add('Accounts_OAuth_Meteor_callback_url', '_oauth/meteor', {
			type: 'relativeUrl',
			readonly: true,
			force: true,
			enableQuery
		});
	});
	this.section('Twitter', function () {
		const enableQuery = {
			_id: 'Accounts_OAuth_Twitter',
			value: true
		};
		this.add('Accounts_OAuth_Twitter', false, {
			type: 'boolean',
			'public': true
		});
		this.add('Accounts_OAuth_Twitter_id', '', {
			type: 'string',
			enableQuery
		});
		this.add('Accounts_OAuth_Twitter_secret', '', {
			type: 'string',
			enableQuery
		});
		return this.add('Accounts_OAuth_Twitter_callback_url', '_oauth/twitter', {
			type: 'relativeUrl',
			readonly: true,
			force: true,
			enableQuery
		});
	});
	return this.section('Proxy', function () {
		this.add('Accounts_OAuth_Proxy_host', 'https://oauth-proxy.rocket.chat', {
			type: 'string',
			'public': true
		});
		return this.add('Accounts_OAuth_Proxy_services', '', {
			type: 'string',
			'public': true
		});
	});
});
RocketChat.settings.addGroup('General', function () {
	this.add('Site_Url', typeof __meteor_runtime_config__ !== 'undefined' && __meteor_runtime_config__ !== null ? __meteor_runtime_config__.ROOT_URL : null, {
		type: 'string',
		i18nDescription: 'Site_Url_Description',
		'public': true
	});
	this.add('Site_Name', 'Rocket.Chat', {
		type: 'string',
		'public': true
	});
	this.add('Language', '', {
		type: 'language',
		'public': true
	});
	this.add('Allow_Invalid_SelfSigned_Certs', false, {
		type: 'boolean'
	});
	this.add('Favorite_Rooms', true, {
		type: 'boolean',
		'public': true
	});
	this.add('First_Channel_After_Login', '', {
		type: 'string',
		'public': true
	});
	this.add('Unread_Count', 'user_and_group_mentions_only', {
		type: 'select',
		values: [{
			key: 'all_messages',
			i18nLabel: 'All_messages'
		}, {
			key: 'user_mentions_only',
			i18nLabel: 'User_mentions_only'
		}, {
			key: 'group_mentions_only',
			i18nLabel: 'Group_mentions_only'
		}, {
			key: 'user_and_group_mentions_only',
			i18nLabel: 'User_and_group_mentions_only'
		}],
		'public': true
	});
	this.add('Unread_Count_DM', 'all_messages', {
		type: 'select',
		values: [{
			key: 'all_messages',
			i18nLabel: 'All_messages'
		}, {
			key: 'mentions_only',
			i18nLabel: 'Mentions_only'
		}],
		'public': true
	});
	this.add('CDN_PREFIX', '', {
		type: 'string',
		'public': true
	});
	this.add('Force_SSL', false, {
		type: 'boolean',
		'public': true
	});
	this.add('GoogleTagManager_id', '', {
		type: 'string',
		'public': true
	});
	this.add('Bugsnag_api_key', '', {
		type: 'string',
		'public': false
	});
	this.add('Force_Disable_OpLog_For_Cache', false, {
		type: 'boolean',
		'public': false
	});
	this.add('Restart', 'restart_server', {
		type: 'action',
		actionText: 'Restart_the_server'
	});
	this.add('Store_Last_Message', false, {
		type: 'boolean',
		public: true,
		i18nDescription: 'Store_Last_Message_Sent_per_Room'
	});
	this.section('UTF8', function () {
		this.add('UTF8_Names_Validation', '[0-9a-zA-Z-_.]+', {
			type: 'string',
			'public': true,
			i18nDescription: 'UTF8_Names_Validation_Description'
		});
		return this.add('UTF8_Names_Slugify', true, {
			type: 'boolean',
			'public': true
		});
	});
	this.section('Reporting', function () {
		return this.add('Statistics_reporting', true, {
			type: 'boolean'
		});
	});
	this.section('Notifications', function () {
		this.add('Notifications_Max_Room_Members', 100, {
			type: 'int',
			public: true,
			i18nDescription: 'Notifications_Max_Room_Members_Description'
		});
		this.add('Notifications_Always_Notify_Mobile', false, {
			type: 'boolean',
			public: true,
			i18nDescription: 'Notifications_Always_Notify_Mobile_Description'
		});
	});
	this.section('REST API', function () {
		return this.add('API_User_Limit', 500, {
			type: 'int',
			'public': true,
			i18nDescription: 'API_User_Limit'
		});
	});
	this.section('Iframe_Integration', function () {
		this.add('Iframe_Integration_send_enable', false, {
			type: 'boolean',
			'public': true
		});
		this.add('Iframe_Integration_send_target_origin', '*', {
			type: 'string',
			'public': true,
			enableQuery: {
				_id: 'Iframe_Integration_send_enable',
				value: true
			}
		});
		this.add('Iframe_Integration_receive_enable', false, {
			type: 'boolean',
			'public': true
		});
		return this.add('Iframe_Integration_receive_origin', '*', {
			type: 'string',
			'public': true,
			enableQuery: {
				_id: 'Iframe_Integration_receive_enable',
				value: true
			}
		});
	});
	this.section('Translations', function () {
		return this.add('Custom_Translations', '', {
			type: 'code',
			'public': true
		});
	});
	return this.section('Stream_Cast', function () {
		return this.add('Stream_Cast_Address', '', {
			type: 'string'
		});
	});
});
RocketChat.settings.addGroup('Email', function () {
	this.section('Subject', function () {
		this.add('Offline_DM_Email', '[[Site_Name]] You have been direct messaged by [User]', {
			type: 'code',
			code: 'text',
			multiline: true,
			i18nLabel: 'Offline_DM_Email',
			i18nDescription: 'Offline_Email_Subject_Description'
		});
		this.add('Offline_Mention_Email', '[[Site_Name]] You have been mentioned by [User] in #[Room]', {
			type: 'code',
			code: 'text',
			multiline: true,
			i18nLabel: 'Offline_Mention_Email',
			i18nDescription: 'Offline_Email_Subject_Description'
		});
		return this.add('Offline_Mention_All_Email', '[User] has posted a message in #[Room]', {
			type: 'code',
			code: 'text',
			multiline: true,
			i18nLabel: 'Offline_Mention_All_Email',
			i18nDescription: 'Offline_Email_Subject_Description'
		});
	});
	this.section('Header_and_Footer', function () {
		this.add('Email_Header', '<html><table border="0" cellspacing="0" cellpadding="0" width="100%" bgcolor="#f3f3f3" style="color:#4a4a4a;font-family: Helvetica,Arial,sans-serif;font-size:14px;line-height:20px;border-collapse:collapse;border-spacing:0;margin:0 auto"><tr><td style="padding:1em"><table border="0" cellspacing="0" cellpadding="0" align="center" width="100%" style="width:100%;margin:0 auto;max-width:800px"><tr><td bgcolor="#ffffff" style="background-color:#ffffff; border: 1px solid #DDD; font-size: 10pt; font-family: Helvetica,Arial,sans-serif;"><table width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td style="background-color: #04436a;"><h1 style="font-family: Helvetica,Arial,sans-serif; padding: 0 1em; margin: 0; line-height: 70px; color: #FFF;">[Site_Name]</h1></td></tr><tr><td style="padding: 1em; font-size: 10pt; font-family: Helvetica,Arial,sans-serif;">', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			i18nLabel: 'Header'
		});
		this.add('Email_Footer', '</td></tr></table></td></tr><tr><td border="0" cellspacing="0" cellpadding="0" width="100%" style="font-family: Helvetica,Arial,sans-serif; max-width: 800px; margin: 0 auto; padding: 1.5em; text-align: center; font-size: 8pt; color: #999;">Powered by <a href="https://rocket.chat" target="_blank">Rocket.Chat</a></td></tr></table></td></tr></table></html>', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			i18nLabel: 'Footer'
		});
		return this.add('Email_Footer_Direct_Reply', '</td></tr></table></td></tr><tr><td border="0" cellspacing="0" cellpadding="0" width="100%" style="font-family: Helvetica,Arial,sans-serif; max-width: 800px; margin: 0 auto; padding: 1.5em; text-align: center; font-size: 8pt; color: #999;">You can directly reply to this email.<br>Do not modify previous emails in the thread.<br>Powered by <a href="https://rocket.chat" target="_blank">Rocket.Chat</a></td></tr></table></td></tr></table></html>', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			i18nLabel: 'Footer_Direct_Reply'
		});
	});
	this.section('Direct_Reply', function () {
		this.add('Direct_Reply_Enable', false, {
			type: 'boolean',
			env: true,
			i18nLabel: 'Direct_Reply_Enable'
		});
		this.add('Direct_Reply_Debug', false, {
			type: 'boolean',
			env: true,
			i18nLabel: 'Direct_Reply_Debug',
			i18nDescription: 'Direct_Reply_Debug_Description'
		});
		this.add('Direct_Reply_Protocol', 'IMAP', {
			type: 'select',
			values: [{
				key: 'IMAP',
				i18nLabel: 'IMAP'
			}, {
				key: 'POP',
				i18nLabel: 'POP'
			}],
			env: true,
			i18nLabel: 'Protocol'
		});
		this.add('Direct_Reply_Host', '', {
			type: 'string',
			env: true,
			i18nLabel: 'Host'
		});
		this.add('Direct_Reply_Port', '143', {
			type: 'select',
			values: [{
				key: '143',
				i18nLabel: '143'
			}, {
				key: '993',
				i18nLabel: '993'
			}, {
				key: '110',
				i18nLabel: '110'
			}, {
				key: '995',
				i18nLabel: '995'
			}],
			env: true,
			i18nLabel: 'Port'
		});
		this.add('Direct_Reply_IgnoreTLS', false, {
			type: 'boolean',
			env: true,
			i18nLabel: 'IgnoreTLS'
		});
		this.add('Direct_Reply_Frequency', 5, {
			type: 'int',
			env: true,
			i18nLabel: 'Direct_Reply_Frequency',
			enableQuery: {
				_id: 'Direct_Reply_Protocol',
				value: 'POP'
			}
		});
		this.add('Direct_Reply_Delete', true, {
			type: 'boolean',
			env: true,
			i18nLabel: 'Direct_Reply_Delete',
			enableQuery: {
				_id: 'Direct_Reply_Protocol',
				value: 'IMAP'
			}
		});
		this.add('Direct_Reply_Separator', '+', {
			type: 'select',
			values: [{
				key: '!',
				i18nLabel: '!'
			}, {
				key: '#',
				i18nLabel: '#'
			}, {
				key: '$',
				i18nLabel: '$'
			}, {
				key: '%',
				i18nLabel: '%'
			}, {
				key: '&',
				i18nLabel: '&'
			}, {
				key: '\'',
				i18nLabel: '\''
			}, {
				key: '*',
				i18nLabel: '*'
			}, {
				key: '+',
				i18nLabel: '+'
			}, {
				key: '-',
				i18nLabel: '-'
			}, {
				key: '/',
				i18nLabel: '/'
			}, {
				key: '=',
				i18nLabel: '='
			}, {
				key: '?',
				i18nLabel: '?'
			}, {
				key: '^',
				i18nLabel: '^'
			}, {
				key: '_',
				i18nLabel: '_'
			}, {
				key: '`',
				i18nLabel: '`'
			}, {
				key: '{',
				i18nLabel: '{'
			}, {
				key: '|',
				i18nLabel: '|'
			}, {
				key: '}',
				i18nLabel: '}'
			}, {
				key: '~',
				i18nLabel: '~'
			}],
			env: true,
			i18nLabel: 'Direct_Reply_Separator'
		});
		this.add('Direct_Reply_Username', '', {
			type: 'string',
			env: true,
			i18nLabel: 'Username',
			placeholder: 'email@domain'
		});
		return this.add('Direct_Reply_Password', '', {
			type: 'password',
			env: true,
			i18nLabel: 'Password'
		});
	});
	this.section('SMTP', function () {
		this.add('SMTP_Protocol', 'smtp', {
			type: 'select',
			values: [{
				key: 'smtp',
				i18nLabel: 'smtp'
			}, {
				key: 'smtps',
				i18nLabel: 'smtps'
			}],
			env: true,
			i18nLabel: 'Protocol'
		});
		this.add('SMTP_Host', '', {
			type: 'string',
			env: true,
			i18nLabel: 'Host'
		});
		this.add('SMTP_Port', '', {
			type: 'string',
			env: true,
			i18nLabel: 'Port'
		});
		this.add('SMTP_IgnoreTLS', false, {
			type: 'boolean',
			env: true,
			i18nLabel: 'IgnoreTLS',
			enableQuery: {
				_id: 'SMTP_Protocol',
				value: 'smtp'
			}
		});
		this.add('SMTP_Pool', true, {
			type: 'boolean',
			env: true,
			i18nLabel: 'Pool'
		});
		this.add('SMTP_Username', '', {
			type: 'string',
			env: true,
			i18nLabel: 'Username'
		});
		this.add('SMTP_Password', '', {
			type: 'password',
			env: true,
			i18nLabel: 'Password'
		});
		this.add('From_Email', '', {
			type: 'string',
			placeholder: 'email@domain'
		});
		return this.add('SMTP_Test_Button', 'sendSMTPTestEmail', {
			type: 'action',
			actionText: 'Send_a_test_mail_to_my_user'
		});
	});
	this.section('Invitation', function () {
		this.add('Invitation_Customized', false, {
			type: 'boolean',
			i18nLabel: 'Custom'
		});
		this.add('Invitation_Subject', '', {
			type: 'string',
			i18nLabel: 'Subject',
			enableQuery: {
				_id: 'Invitation_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Invitation_Customized',
				value: false
			}
		});
		return this.add('Invitation_HTML', '', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			i18nLabel: 'Body',
			i18nDescription: 'Invitation_HTML_Description',
			enableQuery: {
				_id: 'Invitation_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Invitation_Customized',
				value: false
			}
		});
	});
	this.section('Registration', function () {
		this.add('Accounts_Enrollment_Customized', false, {
			type: 'boolean',
			i18nLabel: 'Custom'
		});
		this.add('Accounts_Enrollment_Email_Subject', '', {
			type: 'string',
			i18nLabel: 'Subject',
			enableQuery: {
				_id: 'Accounts_Enrollment_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Accounts_Enrollment_Customized',
				value: false
			}
		});
		return this.add('Accounts_Enrollment_Email', '', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			i18nLabel: 'Body',
			enableQuery: {
				_id: 'Accounts_Enrollment_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Accounts_Enrollment_Customized',
				value: false
			}
		});
	});
	this.section('Registration_via_Admin', function () {
		this.add('Accounts_UserAddedEmail_Customized', false, {
			type: 'boolean',
			i18nLabel: 'Custom'
		});
		this.add('Accounts_UserAddedEmailSubject', '', {
			type: 'string',
			i18nLabel: 'Subject',
			enableQuery: {
				_id: 'Accounts_UserAddedEmail_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Accounts_UserAddedEmail_Customized',
				value: false
			}
		});
		return this.add('Accounts_UserAddedEmail', '', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			i18nLabel: 'Body',
			i18nDescription: 'Accounts_UserAddedEmail_Description',
			enableQuery: {
				_id: 'Accounts_UserAddedEmail_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Accounts_UserAddedEmail_Customized',
				value: false
			}
		});
	});
	this.section('Forgot_password_section', function () {
		this.add('Forgot_Password_Customized', false, {
			type: 'boolean',
			i18nLabel: 'Custom'
		});
		this.add('Forgot_Password_Email_Subject', '', {
			type: 'string',
			i18nLabel: 'Subject',
			enableQuery: {
				_id: 'Forgot_Password_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Forgot_Password_Customized',
				value: false
			}
		});
		return this.add('Forgot_Password_Email', '', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			i18nLabel: 'Body',
			i18nDescription: 'Forgot_Password_Description',
			enableQuery: {
				_id: 'Forgot_Password_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Forgot_Password_Customized',
				value: false
			}
		});
	});
	return this.section('Verification', function () {
		this.add('Verification_Customized', false, {
			type: 'boolean',
			i18nLabel: 'Custom'
		});
		this.add('Verification_Email_Subject', '', {
			type: 'string',
			i18nLabel: 'Subject',
			enableQuery: {
				_id: 'Verification_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Verification_Customized',
				value: false
			}
		});
		return this.add('Verification_Email', '', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			i18nLabel: 'Body',
			i18nDescription: 'Verification_Description',
			enableQuery: {
				_id: 'Verification_Customized',
				value: true
			},
			i18nDefaultQuery: {
				_id: 'Verification_Customized',
				value: false
			}
		});
	});
});
RocketChat.settings.addGroup('Message', function () {
	this.section('Message_Attachments', function () {
		this.add('Message_Attachments_GroupAttach', false, {
			type: 'boolean',
			'public': true,
			i18nDescription: 'Message_Attachments_GroupAttachDescription'
		});
		this.add('Message_AudioRecorderEnabled', true, {
			type: 'boolean',
			'public': true,
			i18nDescription: 'Message_AudioRecorderEnabledDescription'
		});
	});
	this.add('Message_AllowEditing', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_AllowEditing_BlockEditInMinutes', 0, {
		type: 'int',
		'public': true,
		i18nDescription: 'Message_AllowEditing_BlockEditInMinutesDescription'
	});
	this.add('Message_AllowDeleting', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_AllowDeleting_BlockDeleteInMinutes', 0, {
		type: 'int',
		'public': true,
		i18nDescription: 'Message_AllowDeleting_BlockDeleteInMinutes'
	});
	this.add('Message_AllowUnrecognizedSlashCommand', false, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_AllowDirectMessagesToYourself', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_AlwaysSearchRegExp', false, {
		type: 'boolean'
	});
	this.add('Message_ShowEditedStatus', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_ShowDeletedStatus', false, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_AllowBadWordsFilter', false, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_BadWordsFilterList', '', {
		type: 'string',
		'public': true
	});
	this.add('Message_KeepHistory', false, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_MaxAll', 0, {
		type: 'int',
		'public': true
	});
	this.add('Message_MaxAllowedSize', 5000, {
		type: 'int',
		'public': true
	});
	this.add('Message_ShowFormattingTips', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_SetNameToAliasEnabled', false, {
		type: 'boolean',
		'public': false,
		i18nDescription: 'Message_SetNameToAliasEnabled_Description'
	});
	this.add('Message_GroupingPeriod', 300, {
		type: 'int',
		'public': true,
		i18nDescription: 'Message_GroupingPeriodDescription'
	});
	this.add('API_Embed', true, {
		type: 'boolean',
		'public': true
	});
	this.add('API_Embed_UserAgent', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36', {
		type: 'string',
		'public': true
	});
	this.add('API_EmbedCacheExpirationDays', 30, {
		type: 'int',
		'public': false
	});
	this.add('API_Embed_clear_cache_now', 'OEmbedCacheCleanup', {
		type: 'action',
		actionText: 'clear',
		i18nLabel: 'clear_cache_now'
	});
	this.add('API_EmbedDisabledFor', '', {
		type: 'string',
		'public': true,
		i18nDescription: 'API_EmbedDisabledFor_Description'
	});
	this.add('API_EmbedIgnoredHosts', 'localhost, 127.0.0.1, 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16', {
		type: 'string',
		i18nDescription: 'API_EmbedIgnoredHosts_Description'
	});
	this.add('API_EmbedSafePorts', '80, 443', {
		type: 'string'
	});
	this.add('Message_TimeFormat', 'LT', {
		type: 'string',
		'public': true,
		i18nDescription: 'Message_TimeFormat_Description'
	});
	this.add('Message_DateFormat', 'LL', {
		type: 'string',
		'public': true,
		i18nDescription: 'Message_DateFormat_Description'
	});
	this.add('Message_TimeAndDateFormat', 'LLL', {
		type: 'string',
		'public': true,
		i18nDescription: 'Message_TimeAndDateFormat_Description'
	});
	this.add('Message_QuoteChainLimit', 2, {
		type: 'int',
		'public': true
	});
	this.add('Message_HideType_uj', false, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_HideType_ul', false, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_HideType_ru', false, {
		type: 'boolean',
		'public': true
	});
	this.add('Message_HideType_au', false, {
		type: 'boolean',
		'public': true
	});
	return this.add('Message_HideType_mute_unmute', false, {
		type: 'boolean',
		'public': true
	});
});
RocketChat.settings.addGroup('Meta', function () {
	this.add('Meta_language', '', {
		type: 'string'
	});
	this.add('Meta_fb_app_id', '', {
		type: 'string'
	});
	this.add('Meta_robots', 'INDEX,FOLLOW', {
		type: 'string'
	});
	this.add('Meta_google-site-verification', '', {
		type: 'string'
	});
	this.add('Meta_msvalidate01', '', {
		type: 'string'
	});
	return this.add('Meta_custom', '', {
		type: 'code',
		code: 'text/html',
		multiline: true
	});
});
RocketChat.settings.addGroup('Push', function () {
	this.add('Push_enable', true, {
		type: 'boolean',
		'public': true
	});
	this.add('Push_debug', false, {
		type: 'boolean',
		'public': true,
		enableQuery: {
			_id: 'Push_enable',
			value: true
		}
	});
	this.add('Push_enable_gateway', true, {
		type: 'boolean',
		enableQuery: {
			_id: 'Push_enable',
			value: true
		}
	});
	this.add('Push_gateway', 'https://gateway.rocket.chat', {
		type: 'string',
		enableQuery: [{
			_id: 'Push_enable',
			value: true
		}, {
			_id: 'Push_enable_gateway',
			value: true
		}]
	});
	this.add('Push_production', true, {
		type: 'boolean',
		'public': true,
		enableQuery: [{
			_id: 'Push_enable',
			value: true
		}, {
			_id: 'Push_enable_gateway',
			value: false
		}]
	});
	this.add('Push_test_push', 'push_test', {
		type: 'action',
		actionText: 'Send_a_test_push_to_my_user',
		enableQuery: {
			_id: 'Push_enable',
			value: true
		}
	});
	this.section('Certificates_and_Keys', function () {
		this.add('Push_apn_passphrase', '', {
			type: 'string'
		});
		this.add('Push_apn_key', '', {
			type: 'string',
			multiline: true
		});
		this.add('Push_apn_cert', '', {
			type: 'string',
			multiline: true
		});
		this.add('Push_apn_dev_passphrase', '', {
			type: 'string'
		});
		this.add('Push_apn_dev_key', '', {
			type: 'string',
			multiline: true
		});
		this.add('Push_apn_dev_cert', '', {
			type: 'string',
			multiline: true
		});
		this.add('Push_gcm_api_key', '', {
			type: 'string'
		});
		return this.add('Push_gcm_project_number', '', {
			type: 'string',
			'public': true
		});
	});
	return this.section('Privacy', function () {
		this.add('Push_show_username_room', true, {
			type: 'boolean',
			'public': true
		});
		return this.add('Push_show_message', true, {
			type: 'boolean',
			'public': true
		});
	});
});
RocketChat.settings.addGroup('Layout', function () {
	this.section('Content', function () {
		this.add('Layout_Home_Title', 'Home', {
			type: 'string',
			'public': true
		});
		this.add('Layout_Home_Body', 'Welcome to Rocket.Chat <br> Go to APP SETTINGS -> Layout to customize this intro.', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			'public': true
		});
		this.add('Layout_Terms_of_Service', 'Terms of Service <br> Go to APP SETTINGS -> Layout to customize this page.', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			'public': true
		});
		this.add('Layout_Login_Terms', 'By proceeding you are agreeing to our <a href="terms-of-service">Terms of Service</a> and <a href="privacy-policy">Privacy Policy</a>.', {
			type: 'string',
			multiline: true,
			'public': true
		});
		this.add('Layout_Privacy_Policy', 'Privacy Policy <br> Go to APP SETTINGS -> Layout to customize this page.', {
			type: 'code',
			code: 'text/html',
			multiline: true,
			'public': true
		});
		return this.add('Layout_Sidenav_Footer', '<img src="assets/logo" />', {
			type: 'code',
			code: 'text/html',
			'public': true,
			i18nDescription: 'Layout_Sidenav_Footer_description'
		});
	});
	this.section('Custom_Scripts', function () {
		this.add('Custom_Script_Logged_Out', '//Add your script', {
			type: 'code',
			multiline: true,
			'public': true
		});
		return this.add('Custom_Script_Logged_In', '//Add your script', {
			type: 'code',
			multiline: true,
			'public': true
		});
	});
	return this.section('User_Interface', function () {
		this.add('UI_DisplayRoles', true, {
			type: 'boolean',
			'public': true
		});
		this.add('UI_Merge_Channels_Groups', true, {
			type: 'boolean',
			'public': true
		});
		this.add('UI_Use_Name_Avatar', false, {
			type: 'boolean',
			'public': true
		});
		this.add('UI_Use_Real_Name', false, {
			type: 'boolean',
			'public': true
		});
		this.add('UI_Click_Direct_Message', false, {
			type: 'boolean',
			'public': true
		});
		this.add('UI_Unread_Counter_Style', 'Different_Style_For_User_Mentions', {
			type: 'select',
			values: [{
				key: 'Same_Style_For_Mentions',
				i18nLabel: 'Same_Style_For_Mentions'
			}, {
				key: 'Different_Style_For_User_Mentions',
				i18nLabel: 'Different_Style_For_User_Mentions'
			}],
			'public': true
		});
		this.add('UI_Allow_room_names_with_special_chars', false, {
			type: 'boolean',
			public: true
		});
	});
});
RocketChat.settings.addGroup('Logs', function () {
	this.add('Log_Level', '0', {
		type: 'select',
		values: [{
			key: '0',
			i18nLabel: '0_Errors_Only'
		}, {
			key: '1',
			i18nLabel: '1_Errors_and_Information'
		}, {
			key: '2',
			i18nLabel: '2_Erros_Information_and_Debug'
		}],
		'public': true
	});
	this.add('Log_Package', false, {
		type: 'boolean',
		'public': true
	});
	this.add('Log_File', false, {
		type: 'boolean',
		'public': true
	});
	return this.add('Log_View_Limit', 1000, {
		type: 'int'
	});
});
RocketChat.settings.init();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"publications":{"settings.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/publications/settings.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
Meteor.methods({
	'public-settings/get'(updatedAt) {
		this.unblock();
		const records = RocketChat.models.Settings.find().fetch().filter(function (record) {
			return record.hidden !== true && record['public'] === true;
		});

		if (updatedAt instanceof Date) {
			return {
				update: records.filter(function (record) {
					return record._updatedAt > updatedAt;
				}),
				remove: RocketChat.models.Settings.trashFindDeletedAfter(updatedAt, {
					hidden: {
						$ne: true
					},
					'public': true
				}, {
					fields: {
						_id: 1,
						_deletedAt: 1
					}
				}).fetch()
			};
		}

		return records;
	},

	'private-settings/get'(updatedAt) {
		if (!Meteor.userId()) {
			return [];
		}

		this.unblock();

		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'view-privileged-setting')) {
			return [];
		}

		const records = RocketChat.models.Settings.find().fetch().filter(function (record) {
			return record.hidden !== true;
		});

		if (updatedAt instanceof Date) {
			return {
				update: records.filter(function (record) {
					return record._updatedAt > updatedAt;
				}),
				remove: RocketChat.models.Settings.trashFindDeletedAfter(updatedAt, {
					hidden: {
						$ne: true
					}
				}, {
					fields: {
						_id: 1,
						_deletedAt: 1
					}
				}).fetch()
			};
		}

		return records;
	}

});
RocketChat.models.Settings.cache.on('changed', function (type, setting) {
	if (setting['public'] === true) {
		RocketChat.Notifications.notifyAllInThisInstance('public-settings-changed', type, _.pick(setting, '_id', 'value', 'editor', 'properties'));
	}

	return RocketChat.Notifications.notifyLoggedInThisInstance('private-settings-changed', type, setting);
});
RocketChat.Notifications.streamAll.allowRead('private-settings-changed', function () {
	if (this.userId == null) {
		return false;
	}

	return RocketChat.authz.hasPermission(this.userId, 'view-privileged-setting');
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"addOAuthService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addOAuthService.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);
Meteor.methods({
	addOAuthService(name) {
		check(name, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'addOAuthService'
			});
		}

		if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {
			throw new Meteor.Error('error-action-not-allowed', 'Adding OAuth Services is not allowed', {
				method: 'addOAuthService',
				action: 'Adding_OAuth_Services'
			});
		}

		name = name.toLowerCase().replace(/[^a-z0-9_]/g, '');
		name = s.capitalize(name);
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}`, false, {
			type: 'boolean',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Enable',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-url`, '', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'URL',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-token_path`, '/oauth/token', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Token_Path',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-token_sent_via`, 'payload', {
			type: 'select',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Token_Sent_Via',
			persistent: true,
			values: [{
				key: 'header',
				i18nLabel: 'Header'
			}, {
				key: 'payload',
				i18nLabel: 'Payload'
			}]
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-identity_token_sent_via`, 'default', {
			type: 'select',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Identity_Token_Sent_Via',
			persistent: true,
			values: [{
				key: 'default',
				i18nLabel: 'Same_As_Token_Sent_Via'
			}, {
				key: 'header',
				i18nLabel: 'Header'
			}, {
				key: 'payload',
				i18nLabel: 'Payload'
			}]
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-identity_path`, '/me', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Identity_Path',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-authorize_path`, '/oauth/authorize', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Authorize_Path',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-scope`, 'openid', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Scope',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-id`, '', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_id',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-secret`, '', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Secret',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-login_style`, 'popup', {
			type: 'select',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Login_Style',
			persistent: true,
			values: [{
				key: 'redirect',
				i18nLabel: 'Redirect'
			}, {
				key: 'popup',
				i18nLabel: 'Popup'
			}, {
				key: '',
				i18nLabel: 'Default'
			}]
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-button_label_text`, '', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Text',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-button_label_color`, '#FFFFFF', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Color',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-button_color`, '#13679A', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Button_Color',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-username_field`, '', {
			type: 'string',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Username_Field',
			persistent: true
		});
		RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-merge_users`, false, {
			type: 'boolean',
			group: 'OAuth',
			section: `Custom OAuth: ${name}`,
			i18nLabel: 'Accounts_OAuth_Custom_Merge_Users',
			persistent: true
		});
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"refreshOAuthService.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/refreshOAuthService.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	refreshOAuthService() {
		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'refreshOAuthService'
			});
		}

		if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {
			throw new Meteor.Error('error-action-not-allowed', 'Refresh OAuth Services is not allowed', {
				method: 'refreshOAuthService',
				action: 'Refreshing_OAuth_Services'
			});
		}

		ServiceConfiguration.configurations.remove({});
		RocketChat.models.Settings.update({
			_id: /^Accounts_OAuth_.+/
		}, {
			$set: {
				_updatedAt: new Date()
			}
		}, {
			multi: true
		});
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addUserToRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	addUserToRoom(data) {
		return Meteor.call('addUsersToRoom', {
			rid: data.rid,
			users: [data.username]
		});
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUsersToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addUsersToRoom.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	addUsersToRoom(data = {}) {
		// Validate user and room
		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'addUsersToRoom'
			});
		}

		if (!Match.test(data.rid, String)) {
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {
				method: 'addUsersToRoom'
			});
		} // Get user and room details


		const room = RocketChat.models.Rooms.findOneById(data.rid);
		const userId = Meteor.userId();
		const user = Meteor.user();
		const userInRoom = Array.isArray(room.usernames) && room.usernames.includes(user.username); // Can't add to direct room ever

		if (room.t === 'd') {
			throw new Meteor.Error('error-cant-invite-for-direct-room', 'Can\'t invite user to direct rooms', {
				method: 'addUsersToRoom'
			});
		} // Can add to any room you're in, with permission, otherwise need specific room type permission


		let canAddUser = false;

		if (userInRoom && RocketChat.authz.hasPermission(userId, 'add-user-to-joined-room', room._id)) {
			canAddUser = true;
		} else if (room.t === 'c' && RocketChat.authz.hasPermission(userId, 'add-user-to-any-c-room')) {
			canAddUser = true;
		} else if (room.t === 'p' && RocketChat.authz.hasPermission(userId, 'add-user-to-any-p-room')) {
			canAddUser = true;
		} // Adding wasn't allowed


		if (!canAddUser) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'addUsersToRoom'
			});
		} // Missing the users to be added


		if (!Array.isArray(data.users)) {
			throw new Meteor.Error('error-invalid-arguments', 'Invalid arguments', {
				method: 'addUsersToRoom'
			});
		} // Validate each user, then add to room


		data.users.forEach(username => {
			const newUser = RocketChat.models.Users.findOneByUsername(username);

			if (!newUser) {
				throw new Meteor.Error('error-invalid-username', 'Invalid username', {
					method: 'addUsersToRoom'
				});
			}

			RocketChat.addUserToRoom(data.rid, newUser, user);
		});
		return true;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"archiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/archiveRoom.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	archiveRoom(rid) {
		check(rid, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'archiveRoom'
			});
		}

		const room = RocketChat.models.Rooms.findOneById(rid);

		if (!room) {
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {
				method: 'archiveRoom'
			});
		}

		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'archive-room', room._id)) {
			throw new Meteor.Error('error-not-authorized', 'Not authorized', {
				method: 'archiveRoom'
			});
		}

		if (room.t === 'd') {
			throw new Meteor.Error('error-direct-message-room', 'Direct Messages can not be archived', {
				method: 'archiveRoom'
			});
		}

		return RocketChat.archiveRoom(rid);
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"blockUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/blockUser.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	blockUser({
		rid,
		blocked
	}) {
		check(rid, String);
		check(blocked, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'blockUser'
			});
		}

		const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, Meteor.userId());
		const subscription2 = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, blocked);

		if (!subscription || !subscription2) {
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {
				method: 'blockUser'
			});
		}

		RocketChat.models.Subscriptions.setBlockedByRoomId(rid, blocked, Meteor.userId());
		return true;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkRegistrationSecretURL.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/checkRegistrationSecretURL.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	checkRegistrationSecretURL(hash) {
		check(hash, String);
		return hash === RocketChat.settings.get('Accounts_RegistrationForm_SecretURL');
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkUsernameAvailability.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/checkUsernameAvailability.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	checkUsernameAvailability(username) {
		check(username, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'setUsername'
			});
		}

		const user = Meteor.user();

		if (user.username && !RocketChat.settings.get('Accounts_AllowUsernameChange')) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'setUsername'
			});
		}

		if (user.username === username) {
			return true;
		}

		return RocketChat.checkUsernameAvailability(username);
	}

});
RocketChat.RateLimiter.limitMethod('checkUsernameAvailability', 1, 1000, {
	userId() {
		return true;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cleanChannelHistory.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/cleanChannelHistory.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	cleanChannelHistory({
		roomId,
		latest,
		oldest,
		inclusive
	}) {
		check(roomId, String);
		check(latest, Date);
		check(oldest, Date);
		check(inclusive, Boolean);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'cleanChannelHistory'
			});
		}

		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'clean-channel-history')) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'cleanChannelHistory'
			});
		}

		if (inclusive) {
			RocketChat.models.Messages.remove({
				rid: roomId,
				ts: {
					$gte: oldest,
					$lte: latest
				}
			});
		} else {
			RocketChat.models.Messages.remove({
				rid: roomId,
				ts: {
					$gt: oldest,
					$lt: latest
				}
			});
		}
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createChannel.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createChannel.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	createChannel(name, members, readOnly = false, customFields = {}) {
		check(name, String);
		check(members, Match.Optional([String]));

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'createChannel'
			});
		}

		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'create-c')) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'createChannel'
			});
		}

		return RocketChat.createRoom('c', name, Meteor.user() && Meteor.user().username, members, readOnly, {
			customFields
		});
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createToken.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createToken.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	createToken(userId) {
		if (Meteor.userId() !== userId && !RocketChat.authz.hasPermission(Meteor.userId(), 'user-generate-access-token')) {
			throw new Meteor.Error('error-not-authorized', 'Not authorized', {
				method: 'createToken'
			});
		}

		const token = Accounts._generateStampedLoginToken();

		Accounts._insertLoginToken(userId, token);

		return {
			userId,
			authToken: token.token
		};
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createPrivateGroup.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createPrivateGroup.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Meteor.methods({
	createPrivateGroup(name, members, readOnly = false, customFields = {}, extraData = {}) {
		check(name, String);
		check(members, Match.Optional([String]));

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'createPrivateGroup'
			});
		}

		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'create-p')) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'createPrivateGroup'
			});
		} // validate extra data schema


		check(extraData, Match.ObjectIncluding({
			tokenpass: Match.Maybe({
				require: String,
				tokens: [{
					token: String,
					balance: String
				}]
			})
		}));
		return RocketChat.createRoom('p', name, Meteor.user() && Meteor.user().username, members, readOnly, (0, _extends3.default)({
			customFields
		}, extraData));
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/deleteMessage.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let moment;
module.watch(require("moment"), {
	default(v) {
		moment = v;
	}

}, 0);
Meteor.methods({
	deleteMessage(message) {
		check(message, Match.ObjectIncluding({
			_id: String
		}));

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'deleteMessage'
			});
		}

		const originalMessage = RocketChat.models.Messages.findOneById(message._id, {
			fields: {
				u: 1,
				rid: 1,
				file: 1,
				ts: 1
			}
		});

		if (originalMessage == null) {
			throw new Meteor.Error('error-action-not-allowed', 'Not allowed', {
				method: 'deleteMessage',
				action: 'Delete_message'
			});
		}

		const forceDelete = RocketChat.authz.hasPermission(Meteor.userId(), 'force-delete-message', originalMessage.rid);
		const hasPermission = RocketChat.authz.hasPermission(Meteor.userId(), 'delete-message', originalMessage.rid);
		const deleteAllowed = RocketChat.settings.get('Message_AllowDeleting');
		const deleteOwn = originalMessage && originalMessage.u && originalMessage.u._id === Meteor.userId();

		if (!(hasPermission || deleteAllowed && deleteOwn) && !forceDelete) {
			throw new Meteor.Error('error-action-not-allowed', 'Not allowed', {
				method: 'deleteMessage',
				action: 'Delete_message'
			});
		}

		const blockDeleteInMinutes = RocketChat.settings.get('Message_AllowDeleting_BlockDeleteInMinutes');

		if (blockDeleteInMinutes != null && blockDeleteInMinutes !== 0 && !forceDelete) {
			if (originalMessage.ts == null) {
				return;
			}

			const msgTs = moment(originalMessage.ts);

			if (msgTs == null) {
				return;
			}

			const currentTsDiff = moment().diff(msgTs, 'minutes');

			if (currentTsDiff > blockDeleteInMinutes) {
				throw new Meteor.Error('error-message-deleting-blocked', 'Message deleting is blocked', {
					method: 'deleteMessage'
				});
			}
		}

		return RocketChat.deleteMessage(originalMessage, Meteor.user());
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteUserOwnAccount.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/deleteUserOwnAccount.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);
Meteor.methods({
	deleteUserOwnAccount(password) {
		check(password, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'deleteUserOwnAccount'
			});
		}

		if (!RocketChat.settings.get('Accounts_AllowDeleteOwnAccount')) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'deleteUserOwnAccount'
			});
		}

		const userId = Meteor.userId();
		const user = RocketChat.models.Users.findOneById(userId);

		if (!user) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'deleteUserOwnAccount'
			});
		}

		if (user.services && user.services.password && s.trim(user.services.password.bcrypt)) {
			const result = Accounts._checkPassword(user, {
				digest: password,
				algorithm: 'sha-256'
			});

			if (result.error) {
				throw new Meteor.Error('error-invalid-password', 'Invalid password', {
					method: 'deleteUserOwnAccount'
				});
			}
		} else if (user.username !== s.trim(password)) {
			throw new Meteor.Error('error-invalid-username', 'Invalid username', {
				method: 'deleteUserOwnAccount'
			});
		}

		Meteor.defer(function () {
			RocketChat.deleteUser(userId);
		});
		return true;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filterBadWords.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/filterBadWords.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const Filter = Npm.require('bad-words');

RocketChat.callbacks.add('beforeSaveMessage', function (message) {
	if (RocketChat.settings.get('Message_AllowBadWordsFilter')) {
		const badWordsList = RocketChat.settings.get('Message_BadWordsFilterList');
		let options; // Add words to the blacklist

		if (!!badWordsList && badWordsList.length) {
			options = {
				list: badWordsList.split(',')
			};
		}

		const filter = new Filter(options);
		message.msg = filter.clean(message.msg);
	}

	return message;
}, 1, 'filterBadWords');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filterATAllTag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/filterATAllTag.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
RocketChat.callbacks.add('beforeSaveMessage', function (message) {
	// Test if the message mentions include @all.
	if (message.mentions != null && _.pluck(message.mentions, '_id').some(item => item === 'all')) {
		// Check if the user has permissions to use @all in both global and room scopes.
		if (!RocketChat.authz.hasPermission(message.u._id, 'mention-all') && !RocketChat.authz.hasPermission(message.u._id, 'mention-all', message.rid)) {
			// Get the language of the user for the error notification.
			const language = RocketChat.models.Users.findOneById(message.u._id).language;

			const action = TAPi18n.__('Notify_all_in_this_room', {}, language); // Add a notification to the chat, informing the user that this
			// action is not allowed.


			RocketChat.Notifications.notifyUser(message.u._id, 'message', {
				_id: Random.id(),
				rid: message.rid,
				ts: new Date(),
				msg: TAPi18n.__('error-action-not-allowed', {
					action
				}, language)
			}); // Also throw to stop propagation of 'sendMessage'.

			throw new Meteor.Error('error-action-not-allowed', 'Notify all in this room not allowed', {
				method: 'filterATAllTag',
				action: 'Notify_all_in_this_room'
			});
		}
	}

	return message;
}, 1, 'filterATAllTag');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getChannelHistory.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getChannelHistory.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
Meteor.methods({
	getChannelHistory({
		rid,
		latest,
		oldest,
		inclusive,
		count = 20,
		unreads
	}) {
		check(rid, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'getChannelHistory'
			});
		}

		const fromUserId = Meteor.userId();
		const room = Meteor.call('canAccessRoom', rid, fromUserId);

		if (!room) {
			return false;
		} //Make sure they can access the room


		if (room.t === 'c' && !RocketChat.authz.hasPermission(fromUserId, 'preview-c-room') && room.usernames.indexOf(room.username) === -1) {
			return false;
		} //Ensure latest is always defined.


		if (_.isUndefined(latest)) {
			latest = new Date();
		} //Verify oldest is a date if it exists


		if (!_.isUndefined(oldest) && !_.isDate(oldest)) {
			throw new Meteor.Error('error-invalid-date', 'Invalid date', {
				method: 'getChannelHistory'
			});
		}

		const options = {
			sort: {
				ts: -1
			},
			limit: count
		};

		if (!RocketChat.settings.get('Message_ShowEditedStatus')) {
			options.fields = {
				'editedAt': 0
			};
		}

		let records = [];

		if (_.isUndefined(oldest) && inclusive) {
			records = RocketChat.models.Messages.findVisibleByRoomIdBeforeTimestampInclusive(rid, latest, options).fetch();
		} else if (_.isUndefined(oldest) && !inclusive) {
			records = RocketChat.models.Messages.findVisibleByRoomIdBeforeTimestamp(rid, latest, options).fetch();
		} else if (!_.isUndefined(oldest) && inclusive) {
			records = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestampsInclusive(rid, oldest, latest, options).fetch();
		} else {
			records = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestamps(rid, oldest, latest, options).fetch();
		}

		const UI_Use_Real_Name = RocketChat.settings.get('UI_Use_Real_Name') === true;

		const messages = _.map(records, message => {
			message.starred = _.findWhere(message.starred, {
				_id: fromUserId
			});

			if (message.u && message.u._id && UI_Use_Real_Name) {
				const user = RocketChat.models.Users.findOneById(message.u._id);
				message.u.name = user && user.name;
			}

			if (message.mentions && message.mentions.length && UI_Use_Real_Name) {
				message.mentions.forEach(mention => {
					const user = RocketChat.models.Users.findOneById(mention._id);
					mention.name = user && user.name;
				});
			}

			return message;
		});

		if (unreads) {
			let unreadNotLoaded = 0;
			let firstUnread = undefined;

			if (!_.isUndefined(oldest)) {
				const firstMsg = messages[messages.length - 1];

				if (!_.isUndefined(firstMsg) && firstMsg.ts > oldest) {
					const unreadMessages = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestamps(rid, oldest, firstMsg.ts, {
						limit: 1,
						sort: {
							ts: 1
						}
					});
					firstUnread = unreadMessages.fetch()[0];
					unreadNotLoaded = unreadMessages.count();
				}
			}

			return {
				messages: messages || [],
				firstUnread,
				unreadNotLoaded
			};
		}

		return {
			messages: messages || []
		};
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFullUserData.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getFullUserData.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	getFullUserData({
		filter = '',
		limit
	}) {
		const result = RocketChat.getFullUserData({
			userId: Meteor.userId(),
			filter,
			limit
		});

		if (!result) {
			return result;
		}

		return result.fetch();
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getRoomJoinCode.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getRoomJoinCode.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	getRoomJoinCode(rid) {
		check(rid, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'getJoinCode'
			});
		}

		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'view-join-code')) {
			throw new Meteor.Error('error-not-authorized', 'Not authorized', {
				method: 'getJoinCode'
			});
		}

		const [room] = RocketChat.models.Rooms.findById(rid).fetch();
		return room && room.joinCode;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getRoomRoles.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getRoomRoles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
Meteor.methods({
	getRoomRoles(rid) {
		check(rid, String);

		if (!Meteor.userId() && RocketChat.settings.get('Accounts_AllowAnonymousRead') === false) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'getRoomRoles'
			});
		}

		check(rid, String);
		const options = {
			sort: {
				'u.username': 1
			},
			fields: {
				rid: 1,
				u: 1,
				roles: 1
			}
		};
		const UI_Use_Real_Name = RocketChat.settings.get('UI_Use_Real_Name') === true;
		const roles = RocketChat.models.Roles.find({
			scope: 'Subscriptions',
			description: {
				$exists: 1,
				$ne: ''
			}
		}).fetch();
		const subscriptions = RocketChat.models.Subscriptions.findByRoomIdAndRoles(rid, _.pluck(roles, '_id'), options).fetch();

		if (!UI_Use_Real_Name) {
			return subscriptions;
		} else {
			return subscriptions.map(subscription => {
				const user = RocketChat.models.Users.findOneById(subscription.u._id);
				subscription.u.name = user && user.name;
				return subscription;
			});
		}
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getServerInfo.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getServerInfo.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	getServerInfo() {
		return RocketChat.Info;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getSingleMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getSingleMessage.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	getSingleMessage(msgId) {
		check(msgId, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'getSingleMessage'
			});
		}

		const msg = RocketChat.models.Messages.findOneById(msgId);

		if (!msg && !msg.rid) {
			return undefined;
		}

		Meteor.call('canAccessRoom', msg.rid, Meteor.userId());
		return msg;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getUserRoles.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getUserRoles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
Meteor.methods({
	getUserRoles() {
		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'getUserRoles'
			});
		}

		const options = {
			sort: {
				'username': 1
			},
			fields: {
				username: 1,
				roles: 1
			}
		};
		const roles = RocketChat.models.Roles.find({
			scope: 'Users',
			description: {
				$exists: 1,
				$ne: ''
			}
		}).fetch();

		const roleIds = _.pluck(roles, '_id'); // Security issue: we should not send all user's roles to all clients, only the 'public' roles
		// We must remove all roles that are not part of the query from the returned users


		const users = RocketChat.models.Users.findUsersInRoles(roleIds, null, options).fetch();

		for (const user of users) {
			user.roles = _.intersection(user.roles, roleIds);
		}

		return users;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"insertOrUpdateUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/insertOrUpdateUser.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	insertOrUpdateUser(userData) {
		check(userData, Object);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'insertOrUpdateUser'
			});
		}

		return RocketChat.saveUser(Meteor.userId(), userData);
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinDefaultChannels.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/joinDefaultChannels.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	joinDefaultChannels(silenced) {
		check(silenced, Match.Optional(Boolean));

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'joinDefaultChannels'
			});
		}

		this.unblock();
		return RocketChat.addUserToDefaultChannels(Meteor.user(), silenced);
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/joinRoom.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	joinRoom(rid, code) {
		check(rid, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'joinRoom'
			});
		}

		const room = RocketChat.models.Rooms.findOneById(rid);

		if (!room) {
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {
				method: 'joinRoom'
			});
		} // TODO we should have a 'beforeJoinRoom' call back so external services can do their own validations


		const user = Meteor.user();

		if (room.tokenpass && user && user.services && user.services.tokenpass) {
			const balances = RocketChat.updateUserTokenpassBalances(user);

			if (!RocketChat.Tokenpass.validateAccess(room.tokenpass, balances)) {
				throw new Meteor.Error('error-not-allowed', 'Token required', {
					method: 'joinRoom'
				});
			}
		} else {
			if (room.t !== 'c' || RocketChat.authz.hasPermission(Meteor.userId(), 'view-c-room') !== true) {
				throw new Meteor.Error('error-not-allowed', 'Not allowed', {
					method: 'joinRoom'
				});
			}

			if (room.joinCodeRequired === true && code !== room.joinCode && !RocketChat.authz.hasPermission(Meteor.userId(), 'join-without-join-code')) {
				throw new Meteor.Error('error-code-invalid', 'Invalid Room Password', {
					method: 'joinRoom'
				});
			}
		}

		return RocketChat.addUserToRoom(rid, user);
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"leaveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/leaveRoom.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	leaveRoom(rid) {
		check(rid, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'leaveRoom'
			});
		}

		this.unblock();
		const room = RocketChat.models.Rooms.findOneById(rid);
		const user = Meteor.user();

		if (room.t === 'd') {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'leaveRoom'
			});
		}

		if (!Array.from(room.usernames || []).includes(user.username)) {
			throw new Meteor.Error('error-user-not-in-room', 'You are not in this room', {
				method: 'leaveRoom'
			});
		} // If user is room owner, check if there are other owners. If there isn't anyone else, warn user to set a new owner.


		if (RocketChat.authz.hasRole(user._id, 'owner', room._id)) {
			const numOwners = RocketChat.authz.getUsersInRole('owner', room._id).fetch().length;

			if (numOwners === 1) {
				throw new Meteor.Error('error-you-are-last-owner', 'You are the last owner. Please set new owner before leaving the room.', {
					method: 'leaveRoom'
				});
			}
		}

		return RocketChat.removeUserFromRoom(rid, Meteor.user());
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeOAuthService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/removeOAuthService.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
	default(v) {
		s = v;
	}

}, 0);
Meteor.methods({
	removeOAuthService(name) {
		check(name, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'removeOAuthService'
			});
		}

		if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'removeOAuthService'
			});
		}

		name = name.toLowerCase().replace(/[^a-z0-9_]/g, '');
		name = s.capitalize(name);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-url`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-token_path`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-identity_path`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-authorize_path`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-scope`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-token_sent_via`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-identity_token_sent_via`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-id`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-secret`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-button_label_text`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-button_label_color`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-button_color`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-login_style`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-username_field`);
		RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-merge_users`);
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"restartServer.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/restartServer.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	restart_server() {
		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'restart_server'
			});
		}

		if (RocketChat.authz.hasRole(Meteor.userId(), 'admin') !== true) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'restart_server'
			});
		}

		Meteor.setTimeout(() => {
			Meteor.setTimeout(() => {
				console.warn('Call to process.exit() timed out, aborting.');
				process.abort();
			}, 1000);
			process.exit(1);
		}, 1000);
		return {
			message: 'The_server_will_restart_in_s_seconds',
			params: [2]
		};
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"robotMethods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/robotMethods.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
Meteor.methods({
	'robot.modelCall'(model, method, args) {
		check(model, String);
		check(method, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'robot.modelCall'
			});
		}

		if (!RocketChat.authz.hasRole(Meteor.userId(), 'robot')) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'robot.modelCall'
			});
		}

		const m = RocketChat.models[model];

		if (!m || !_.isFunction(m[method])) {
			throw new Meteor.Error('error-invalid-method', 'Invalid method', {
				method: 'robot.modelCall'
			});
		}

		const cursor = RocketChat.models[model][method].apply(RocketChat.models[model], args);
		return cursor && cursor.fetch ? cursor.fetch() : cursor;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveSetting.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/saveSetting.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* eslint new-cap: 0 */Meteor.methods({
	saveSetting(_id, value, editor) {
		if (Meteor.userId() === null) {
			throw new Meteor.Error('error-action-not-allowed', 'Editing settings is not allowed', {
				method: 'saveSetting'
			});
		}

		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'edit-privileged-setting')) {
			throw new Meteor.Error('error-action-not-allowed', 'Editing settings is not allowed', {
				method: 'saveSetting'
			});
		} //Verify the _id passed in is a string.


		check(_id, String);
		const setting = RocketChat.models.Settings.db.findOneById(_id); //Verify the value is what it should be

		switch (setting.type) {
			case 'roomPick':
				check(value, Match.OneOf([Object], ''));
				break;

			case 'boolean':
				check(value, Boolean);
				break;

			case 'int':
				check(value, Number);
				break;

			default:
				check(value, String);
				break;
		}

		RocketChat.settings.updateById(_id, value, editor);
		return true;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendInvitationEmail.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendInvitationEmail.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
Meteor.methods({
	sendInvitationEmail(emails) {
		check(emails, [String]);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'sendInvitationEmail'
			});
		}

		if (!RocketChat.authz.hasRole(Meteor.userId(), 'admin')) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'sendInvitationEmail'
			});
		}

		const rfcMailPattern = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;

		const validEmails = _.compact(_.map(emails, function (email) {
			if (rfcMailPattern.test(email)) {
				return email;
			}
		}));

		const header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');
		const footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');
		let html;
		let subject;
		const user = Meteor.user();
		const lng = user.language || RocketChat.settings.get('language') || 'en';

		if (RocketChat.settings.get('Invitation_Customized')) {
			subject = RocketChat.settings.get('Invitation_Subject');
			html = RocketChat.settings.get('Invitation_HTML');
		} else {
			subject = TAPi18n.__('Invitation_Subject_Default', {
				lng
			});
			html = TAPi18n.__('Invitation_HTML_Default', {
				lng
			});
		}

		subject = RocketChat.placeholders.replace(subject);
		validEmails.forEach(email => {
			this.unblock();
			html = RocketChat.placeholders.replace(html, {
				email
			});

			try {
				Email.send({
					to: email,
					from: RocketChat.settings.get('From_Email'),
					subject,
					html: header + html + footer
				});
			} catch ({
				message
			}) {
				throw new Meteor.Error('error-email-send-failed', `Error trying to send email: ${message}`, {
					method: 'sendInvitationEmail',
					message
				});
			}
		});
		return validEmails;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendMessage.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let moment;
module.watch(require("moment"), {
	default(v) {
		moment = v;
	}

}, 0);
Meteor.methods({
	sendMessage(message) {
		check(message, Object);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'sendMessage'
			});
		}

		if (message.ts) {
			const tsDiff = Math.abs(moment(message.ts).diff());

			if (tsDiff > 60000) {
				throw new Meteor.Error('error-message-ts-out-of-sync', 'Message timestamp is out of sync', {
					method: 'sendMessage',
					message_ts: message.ts,
					server_ts: new Date().getTime()
				});
			} else if (tsDiff > 10000) {
				message.ts = new Date();
			}
		} else {
			message.ts = new Date();
		}

		if (message.msg && message.msg.length > RocketChat.settings.get('Message_MaxAllowedSize')) {
			throw new Meteor.Error('error-message-size-exceeded', 'Message size exceeds Message_MaxAllowedSize', {
				method: 'sendMessage'
			});
		}

		const user = RocketChat.models.Users.findOneById(Meteor.userId(), {
			fields: {
				username: 1,
				name: 1
			}
		});
		const room = Meteor.call('canAccessRoom', message.rid, user._id);

		if (!room) {
			return false;
		}

		const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(message.rid, Meteor.userId());

		if (subscription && subscription.blocked || subscription.blocker) {
			RocketChat.Notifications.notifyUser(Meteor.userId(), 'message', {
				_id: Random.id(),
				rid: room._id,
				ts: new Date(),
				msg: TAPi18n.__('room_is_blocked', {}, user.language)
			});
			return false;
		}

		if ((room.muted || []).includes(user.username)) {
			RocketChat.Notifications.notifyUser(Meteor.userId(), 'message', {
				_id: Random.id(),
				rid: room._id,
				ts: new Date(),
				msg: TAPi18n.__('You_have_been_muted', {}, user.language)
			});
			return false;
		}

		if (message.alias == null && RocketChat.settings.get('Message_SetNameToAliasEnabled')) {
			message.alias = user.name;
		}

		if (Meteor.settings['public'].sandstorm) {
			message.sandstormSessionId = this.connection.sandstormSessionId();
		}

		RocketChat.metrics.messagesSent.inc(); // TODO This line needs to be moved to it's proper place. See the comments on: https://github.com/RocketChat/Rocket.Chat/pull/5736

		return RocketChat.sendMessage(user, message, room);
	}

}); // Limit a user, who does not have the "bot" role, to sending 5 msgs/second

RocketChat.RateLimiter.limitMethod('sendMessage', 5, 1000, {
	userId(userId) {
		return !RocketChat.authz.hasPermission(userId, 'send-many-messages');
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendSMTPTestEmail.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendSMTPTestEmail.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	sendSMTPTestEmail() {
		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'sendSMTPTestEmail'
			});
		}

		const user = Meteor.user();

		if (!user.emails && !user.emails[0] && user.emails[0].address) {
			throw new Meteor.Error('error-invalid-email', 'Invalid email', {
				method: 'sendSMTPTestEmail'
			});
		}

		this.unblock();
		const header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');
		const footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');
		console.log(`Sending test email to ${user.emails[0].address}`);

		try {
			Email.send({
				to: user.emails[0].address,
				from: RocketChat.settings.get('From_Email'),
				subject: 'SMTP Test Email',
				html: `${header}<p>You have successfully sent an email</p>${footer}`
			});
		} catch ({
			message
		}) {
			throw new Meteor.Error('error-email-send-failed', `Error trying to send email: ${message}`, {
				method: 'sendSMTPTestEmail',
				message
			});
		}

		return {
			message: 'Your_mail_was_sent_to_s',
			params: [user.emails[0].address]
		};
	}

});
DDPRateLimiter.addRule({
	type: 'method',
	name: 'sendSMTPTestEmail',

	userId() {
		return true;
	}

}, 1, 1000);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setAdminStatus.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setAdminStatus.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	setAdminStatus(userId, admin) {
		check(userId, String);
		check(admin, Match.Optional(Boolean));

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'setAdminStatus'
			});
		}

		if (RocketChat.authz.hasPermission(Meteor.userId(), 'assign-admin-role') !== true) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'setAdminStatus'
			});
		}

		const user = Meteor.users.findOne({
			_id: userId
		}, {
			fields: {
				username: 1
			}
		});

		if (admin) {
			return Meteor.call('authorization:addUserToRole', 'admin', user.username);
		} else {
			return Meteor.call('authorization:removeUserFromRole', 'admin', user.username);
		}
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setRealName.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setRealName.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	setRealName(name) {
		check(name, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'setRealName'
			});
		}

		if (!RocketChat.settings.get('Accounts_AllowRealNameChange')) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'setRealName'
			});
		}

		if (!RocketChat.setRealName(Meteor.userId(), name)) {
			throw new Meteor.Error('error-could-not-change-name', 'Could not change name', {
				method: 'setRealName'
			});
		}

		return name;
	}

});
RocketChat.RateLimiter.limitMethod('setRealName', 1, 1000, {
	userId: () => true
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUsername.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setUsername.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
	default(v) {
		_ = v;
	}

}, 0);
Meteor.methods({
	setUsername(username, param = {}) {
		const {
			joinDefaultChannelsSilenced
		} = param;
		check(username, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'setUsername'
			});
		}

		const user = Meteor.user();

		if (user.username && !RocketChat.settings.get('Accounts_AllowUsernameChange')) {
			throw new Meteor.Error('error-not-allowed', 'Not allowed', {
				method: 'setUsername'
			});
		}

		if (user.username === username || user.username && user.username.toLowerCase() === username.toLowerCase()) {
			return username;
		}

		let nameValidation;

		try {
			nameValidation = new RegExp(`^${RocketChat.settings.get('UTF8_Names_Validation')}$`);
		} catch (error) {
			nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');
		}

		if (!nameValidation.test(username)) {
			throw new Meteor.Error('username-invalid', `${_.escape(username)} is not a valid username, use only letters, numbers, dots, hyphens and underscores`);
		}

		if (!RocketChat.checkUsernameAvailability(username)) {
			throw new Meteor.Error('error-field-unavailable', `<strong>${_.escape(username)}</strong> is already in use :(`, {
				method: 'setUsername',
				field: username
			});
		}

		if (!RocketChat.setUsername(user._id, username)) {
			throw new Meteor.Error('error-could-not-change-username', 'Could not change username', {
				method: 'setUsername'
			});
		}

		if (!user.username) {
			Meteor.runAsUser(user._id, () => Meteor.call('joinDefaultChannels', joinDefaultChannelsSilenced));
			Meteor.defer(function () {
				return RocketChat.callbacks.run('afterCreateUser', RocketChat.models.Users.findOneById(user._id));
			});
		}

		return username;
	}

});
RocketChat.RateLimiter.limitMethod('setUsername', 1, 1000, {
	userId() {
		return true;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setEmail.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setEmail.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	setEmail(email) {
		check(email, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'setEmail'
			});
		}

		const user = Meteor.user();

		if (!RocketChat.settings.get('Accounts_AllowEmailChange')) {
			throw new Meteor.Error('error-action-not-allowed', 'Changing email is not allowed', {
				method: 'setEmail',
				action: 'Changing_email'
			});
		}

		if (user.emails && user.emails[0] && user.emails[0].address === email) {
			return email;
		}

		if (!RocketChat.setEmail(user._id, email)) {
			throw new Meteor.Error('error-could-not-change-email', 'Could not change email', {
				method: 'setEmail'
			});
		}

		return email;
	}

});
RocketChat.RateLimiter.limitMethod('setEmail', 1, 1000, {
	userId() /*userId*/{
		return true;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unarchiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/unarchiveRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	unarchiveRoom(rid) {
		check(rid, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'unarchiveRoom'
			});
		}

		const room = RocketChat.models.Rooms.findOneById(rid);

		if (!room) {
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {
				method: 'unarchiveRoom'
			});
		}

		if (!RocketChat.authz.hasPermission(Meteor.userId(), 'unarchive-room', room._id)) {
			throw new Meteor.Error('error-not-authorized', 'Not authorized', {
				method: 'unarchiveRoom'
			});
		}

		return RocketChat.unarchiveRoom(rid);
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unblockUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/unblockUser.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
	unblockUser({
		rid,
		blocked
	}) {
		check(rid, String);
		check(blocked, String);

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'blockUser'
			});
		}

		const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, Meteor.userId());
		const subscription2 = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, blocked);

		if (!subscription || !subscription2) {
			throw new Meteor.Error('error-invalid-room', 'Invalid room', {
				method: 'blockUser'
			});
		}

		RocketChat.models.Subscriptions.unsetBlockedByRoomId(rid, blocked, Meteor.userId());
		return true;
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/updateMessage.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let moment;
module.watch(require("moment"), {
	default(v) {
		moment = v;
	}

}, 0);
Meteor.methods({
	updateMessage(message) {
		check(message, Match.ObjectIncluding({
			_id: String
		}));

		if (!Meteor.userId()) {
			throw new Meteor.Error('error-invalid-user', 'Invalid user', {
				method: 'updateMessage'
			});
		}

		const originalMessage = RocketChat.models.Messages.findOneById(message._id);

		if (!originalMessage || !originalMessage._id) {
			return;
		}

		const hasPermission = RocketChat.authz.hasPermission(Meteor.userId(), 'edit-message', message.rid);
		const editAllowed = RocketChat.settings.get('Message_AllowEditing');
		const editOwn = originalMessage.u && originalMessage.u._id === Meteor.userId();

		if (!hasPermission && (!editAllowed || !editOwn)) {
			throw new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {
				method: 'updateMessage',
				action: 'Message_editing'
			});
		}

		const blockEditInMinutes = RocketChat.settings.get('Message_AllowEditing_BlockEditInMinutes');

		if (Match.test(blockEditInMinutes, Number) && blockEditInMinutes !== 0) {
			let currentTsDiff;
			let msgTs;

			if (Match.test(originalMessage.ts, Number)) {
				msgTs = moment(originalMessage.ts);
			}

			if (msgTs) {
				currentTsDiff = moment().diff(msgTs, 'minutes');
			}

			if (currentTsDiff > blockEditInMinutes) {
				throw new Meteor.Error('error-message-editing-blocked', 'Message editing is blocked', {
					method: 'updateMessage'
				});
			}
		} // It is possible to have an empty array as the attachments property, so ensure both things exist


		if (originalMessage.attachments && originalMessage.attachments.length > 0 && originalMessage.attachments[0].description !== undefined) {
			message.attachments = originalMessage.attachments;
			message.attachments[0].description = message.msg;
			message.msg = originalMessage.msg;
		}

		message.u = originalMessage.u;
		return RocketChat.updateMessage(message, Meteor.user());
	}

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"startup":{"defaultRoomTypes.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/startup/defaultRoomTypes.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let ChannelsRoomType, ConversationRoomType, DirectMessageRoomType, FavoriteRoomType, PrivateRoomType, PublicRoomType, UnreadRoomType;
module.watch(require("../lib/roomTypes"), {
	ChannelsRoomType(v) {
		ChannelsRoomType = v;
	},

	ConversationRoomType(v) {
		ConversationRoomType = v;
	},

	DirectMessageRoomType(v) {
		DirectMessageRoomType = v;
	},

	FavoriteRoomType(v) {
		FavoriteRoomType = v;
	},

	PrivateRoomType(v) {
		PrivateRoomType = v;
	},

	PublicRoomType(v) {
		PublicRoomType = v;
	},

	UnreadRoomType(v) {
		UnreadRoomType = v;
	}

}, 0);
RocketChat.roomTypes.add(new UnreadRoomType());
RocketChat.roomTypes.add(new FavoriteRoomType());
RocketChat.roomTypes.add(new ConversationRoomType());
RocketChat.roomTypes.add(new ChannelsRoomType());
RocketChat.roomTypes.add(new PublicRoomType());
RocketChat.roomTypes.add(new PrivateRoomType());
RocketChat.roomTypes.add(new DirectMessageRoomType());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"rocketchat.info.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/rocketchat.info.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.Info = {
    "version": "0.60.4",
    "build": {
        "date": "2018-01-10T16:12:38.911Z",
        "nodeVersion": "v8.9.3",
        "arch": "x64",
        "platform": "linux",
        "osRelease": "4.4.0-108-generic",
        "totalMemory": 63314890752,
        "freeMemory": 9617850368,
        "cpus": 32
    },
    "commit": {
        "hash": "34cd952f967a063f2b4d1275659381cf2d141652",
        "date": "Wed Jan 10 13:56:55 2018 -0200",
        "author": "Rodrigo Nascimento",
        "subject": "Merge pull request #9377 from RocketChat/release-0.60.4",
        "tag": "0.60.4",
        "branch": "HEAD"
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"node_modules":{"bugsnag":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// ../../.meteor/local/isopacks/rocketchat_lib/npm/node_modules/bugsnag/package.json                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "bugsnag";
exports.version = "1.8.0";
exports.main = "./lib/bugsnag.js";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"bugsnag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/rocketchat_lib/node_modules/bugsnag/lib/bugsnag.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var domain = require("domain"),
    path = require("path"),
    Utils = require("./utils"),
    Logger = require("./logger"),
    Configuration = require("./configuration"),
    BugsnagError = require("./error"),
    Notification = require("./notification"),
    requestInfo = require("./request_info");

// Ensure we get all stack frames from thrown errors.
Error.stackTraceLimit = Infinity;

function autoNotifyCallback(notifiedError, uncaughtError) {
    if (!uncaughtError) {
        uncaughtError = notifiedError.domain;
    }
    return function(error) {
        if (error) {
            Configuration.logger.error("Bugsnag: error notifying bugsnag.com - " + error);
        }
        if (Configuration.onUncaughtError && uncaughtError) {
            return Configuration.onUncaughtError(notifiedError);
        }
    };
}

var unCaughtErrorHandlerAdded = false;

var Bugsnag = {};

// This allows people to directly play with metaData without knowledge of Configuration
Object.defineProperty(Bugsnag, 'metaData', {
    get: function() {
        return Configuration.metaData;
    },
    set: function(metaData) {
        Configuration.metaData = metaData;
    }
});

// This allows people to directly play with requestData without knowledge of domains
Object.defineProperty(Bugsnag, 'requestData', {
    get: function () {
        return process.domain && process.domain._bugsnagOptions;
    },

    set: function (requestData) {
        if (process.domain) {
            process.domain._bugsnagOptions = requestData;
        }
    }
});

// Register sets api key and will configure bugsnag based on options
Bugsnag.register = function(apiKey, options) {
    if (!options) {
        options = {};
    }
    Configuration.apiKey = apiKey;
    Bugsnag.configure(options);
    Configuration.logger.info("Registered with apiKey " + apiKey);
    return Bugsnag;
};

// Configure bugsnag using the provided options
Bugsnag.configure = function(options) {
    Configuration.configure(options);

    // If we should auto notify we also configure the uncaught exception handler, we can't do this
    // by default as it changes the way the app response by removing the default handler.
    if (Configuration.autoNotifyUncaught && !unCaughtErrorHandlerAdded) {
        unCaughtErrorHandlerAdded = true;
        Configuration.logger.info("Configuring uncaughtExceptionHandler");
        process.on("uncaughtException", function(err) {
            Bugsnag.notify(err, {
                severity: "error"
            }, autoNotifyCallback(err, true));
        });
    }
};

// Only error is required and that can be a string or error object
Bugsnag.notify = function(error, options, cb) {
    var bugsnagErrors, notification;
    if (Utils.typeOf(options) === "function") {
        cb = options;
        options = {};
    }
    if (!options) {
        options = {};
    }
    if (!Bugsnag.shouldNotify()) {
        if (cb) {
            if (!Configuration.apiKey) {
                cb(new Error("Bugsnag has not been configured with an api key!"));
            } else {
                cb(new Error("Current release stage not permitted to send events to Bugsnag."));
            }
        }
        return;
    }
    Configuration.logger.info("Notifying Bugsnag of exception...\n" + (error && error.stack || error));
    bugsnagErrors = BugsnagError.buildErrors(error, options.errorName);
    delete options.errorName;
    notification = new Notification(bugsnagErrors, options);
    if (Configuration.sendCode === true) {
        notification.loadCode(function () {
            notification.deliver(cb);
        });
    } else {
        notification.deliver(cb);
    }
};

// The error handler express/connext middleware. Performs a notify
Bugsnag.errorHandler = function(err, req, res, next) {
    Configuration.logger.info("Handling express error: " + (err.stack || err));
    Bugsnag.notify(err, {
        req: req,
        severity: "error"
    }, autoNotifyCallback(err));
    return next(err);
};

// The request middleware for express/connect. Ensures next(err) is called when there is an error, and
// tracks the request for manual notifies.
Bugsnag.requestHandler = function(req, res, next) {
    var dom;
    dom = domain.create();
    dom._bugsnagOptions = {
        cleanedRequest: requestInfo(req)
    };
    dom.on('error', next);
    return dom.run(next);
};

Bugsnag.restifyHandler = function(req, res, route, err) {
    Bugsnag.notify(err, {
        req: req,
        severity: "error"
    }, autoNotifyCallback(err));
};

Bugsnag.koaHandler = function(err, ctx) {
    var request;
    Configuration.logger.info("Handling koa error: " + (err.stack || err));
    request = ctx.req;
    request.protocol = ctx.request.protocol;
    request.host = ctx.request.host.split(':', 1)[0];
    return Bugsnag.notify(err, {
        req: request,
        severity: "error"
    }, autoNotifyCallback(err));
};

// Intercepts the first argument from a callback and interprets it as an error.
// if the error is not null it notifies bugsnag and doesn't call the callback
Bugsnag.intercept = function(cb) {
    if (!cb) {
        cb = (function() {});
    }
    if (process.domain) {
        return process.domain.intercept(cb);
    } else {
        return function() {
            var err = arguments[0];
            var args = Array.prototype.slice.call(arguments, 1);
            if (err && (err instanceof Error)) {
                return Bugsnag.notify(err, {
                    severity: "error"
                }, autoNotifyCallback(err));
            }
            if (cb) {
                return cb.apply(null, args);
            }
        };
    }
};

// Automatically notifies of uncaught exceptions in the callback and error
// event emitters. Returns an event emitter, you can hook into .on("error") if
// you want to.
Bugsnag.autoNotify = function(options, cb) {
    var dom;
    if (Utils.typeOf(options) === "function") {
        cb = options;
        options = {};
    }
    dom = domain.create();
    dom._bugsnagOptions = options;
    options.severity = "error";
    dom.on('error', function(err) {
        return Bugsnag.notify(err, options, autoNotifyCallback(err));
    });
    process.nextTick(function() {
        return dom.run(cb);
    });
    return dom;
};

Bugsnag.shouldNotify = function() {
    return (Configuration.notifyReleaseStages === null || Configuration.notifyReleaseStages.indexOf(Configuration.releaseStage) !== -1) && Configuration.apiKey;
};

Bugsnag.onBeforeNotify = function (callback) {
    if (typeof callback !== "function") {
        throw new Error("must pass a callback to onBeforeNotify");
    }

    Configuration.beforeNotifyCallbacks.push(callback);
};

module.exports = Bugsnag;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"prom-client":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// ../../.meteor/local/isopacks/rocketchat_lib/npm/node_modules/prom-client/package.json                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "prom-client";
exports.version = "7.0.1";
exports.main = "index.js";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/rocketchat_lib/node_modules/prom-client/index.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * Prometheus client
 * @module Prometheus client
 */

'use strict';

exports.register = require('./lib/register');

exports.Counter = require('./lib/counter');
exports.Gauge = require('./lib/gauge');
exports.Histogram = require('./lib/histogram');
exports.Summary = require('./lib/summary');
exports.Pushgateway = require('./lib/pushgateway');

exports.linearBuckets = require('./lib/bucketGenerators').linearBuckets;
exports.exponentialBuckets = require('./lib/bucketGenerators').exponentialBuckets;

var defaultMetrics = require('./lib/defaultMetrics');

defaultMetrics();

exports.defaultMetrics = defaultMetrics;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"lokijs":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// ../../.meteor/local/isopacks/rocketchat_lib/npm/node_modules/lokijs/package.json                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "lokijs";
exports.version = "1.4.1";
exports.main = "src/lokijs.js";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"src":{"lokijs.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/rocketchat_lib/node_modules/lokijs/src/lokijs.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * LokiJS
 * @author Joe Minichino <joe.minichino@gmail.com>
 *
 * A lightweight document oriented javascript database
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD
    define([], factory);
  } else if (typeof exports === 'object') {
    // CommonJS
    module.exports = factory();
  } else {
    // Browser globals
    root.loki = factory();
  }
}(this, function () {

  return (function () {
    'use strict';

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var Utils = {
      copyProperties: function (src, dest) {
        var prop;
        for (prop in src) {
          dest[prop] = src[prop];
        }
      },
      // used to recursively scan hierarchical transform step object for param substitution
      resolveTransformObject: function (subObj, params, depth) {
        var prop,
          pname;

        if (typeof depth !== 'number') {
          depth = 0;
        }

        if (++depth >= 10) return subObj;

        for (prop in subObj) {
          if (typeof subObj[prop] === 'string' && subObj[prop].indexOf("[%lktxp]") === 0) {
            pname = subObj[prop].substring(8);
            if (params.hasOwnProperty(pname)) {
              subObj[prop] = params[pname];
            }
          } else if (typeof subObj[prop] === "object") {
            subObj[prop] = Utils.resolveTransformObject(subObj[prop], params, depth);
          }
        }

        return subObj;
      },
      // top level utility to resolve an entire (single) transform (array of steps) for parameter substitution
      resolveTransformParams: function (transform, params) {
        var idx,
          clonedStep,
          resolvedTransform = [];

        if (typeof params === 'undefined') return transform;

        // iterate all steps in the transform array
        for (idx = 0; idx < transform.length; idx++) {
          // clone transform so our scan and replace can operate directly on cloned transform
          clonedStep = JSON.parse(JSON.stringify(transform[idx]));
          resolvedTransform.push(Utils.resolveTransformObject(clonedStep, params));
        }

        return resolvedTransform;
      }
    };

    /** Helper function for determining 'less-than' conditions for ops, sorting, and binary indices.
     *     In the future we might want $lt and $gt ops to use their own functionality/helper.
     *     Since binary indices on a property might need to index [12, NaN, new Date(), Infinity], we
     *     need this function (as well as gtHelper) to always ensure one value is LT, GT, or EQ to another.
     */
    function ltHelper(prop1, prop2, equal) {
      var cv1, cv2;

      // 'falsy' and Boolean handling
      if (!prop1 || !prop2 || prop1 === true || prop2 === true) {
        if ((prop1 === true || prop1 === false) && (prop2 === true || prop2 === false)) {
          if (equal) {
            return prop1 === prop2;
          } else {
            if (prop1) {
              return false;
            } else {
              return prop2;
            }
          }
        }

        if (prop2 === undefined || prop2 === null || prop1 === true || prop2 === false) {
          return equal;
        }
        if (prop1 === undefined || prop1 === null || prop1 === false || prop2 === true) {
          return true;
        }
      }

      if (prop1 === prop2) {
        return equal;
      }

      if (prop1 < prop2) {
        return true;
      }

      if (prop1 > prop2) {
        return false;
      }

      // not strict equal nor less than nor gt so must be mixed types, convert to string and use that to compare
      cv1 = prop1.toString();
      cv2 = prop2.toString();

      if (cv1 == cv2) {
        return equal;
      }

      if (cv1 < cv2) {
        return true;
      }

      return false;
    }

    function gtHelper(prop1, prop2, equal) {
      var cv1, cv2;

      // 'falsy' and Boolean handling
      if (!prop1 || !prop2 || prop1 === true || prop2 === true) {
        if ((prop1 === true || prop1 === false) && (prop2 === true || prop2 === false)) {
          if (equal) {
            return prop1 === prop2;
          } else {
            if (prop1) {
              return !prop2;
            } else {
              return false;
            }
          }
        }

        if (prop1 === undefined || prop1 === null || prop1 === false || prop2 === true) {
          return equal;
        }
        if (prop2 === undefined || prop2 === null || prop1 === true || prop2 === false) {
          return true;
        }
      }

      if (prop1 === prop2) {
        return equal;
      }

      if (prop1 > prop2) {
        return true;
      }

      if (prop1 < prop2) {
        return false;
      }

      // not strict equal nor less than nor gt so must be mixed types, convert to string and use that to compare
      cv1 = prop1.toString();
      cv2 = prop2.toString();

      if (cv1 == cv2) {
        return equal;
      }

      if (cv1 > cv2) {
        return true;
      }

      return false;
    }

    function sortHelper(prop1, prop2, desc) {
      if (prop1 === prop2) {
        return 0;
      }

      if (ltHelper(prop1, prop2, false)) {
        return (desc) ? (1) : (-1);
      }

      if (gtHelper(prop1, prop2, false)) {
        return (desc) ? (-1) : (1);
      }

      // not lt, not gt so implied equality-- date compatible
      return 0;
    }

    /**
     * compoundeval() - helper function for compoundsort(), performing individual object comparisons
     *
     * @param {array} properties - array of property names, in order, by which to evaluate sort order
     * @param {object} obj1 - first object to compare
     * @param {object} obj2 - second object to compare
     * @returns {integer} 0, -1, or 1 to designate if identical (sortwise) or which should be first
     */
    function compoundeval(properties, obj1, obj2) {
      var res = 0;
      var prop, field;
      for (var i = 0, len = properties.length; i < len; i++) {
        prop = properties[i];
        field = prop[0];
        res = sortHelper(obj1[field], obj2[field], prop[1]);
        if (res !== 0) {
          return res;
        }
      }
      return 0;
    }

    /**
     * dotSubScan - helper function used for dot notation queries.
     *
     * @param {object} root - object to traverse
     * @param {array} paths - array of properties to drill into
     * @param {function} fun - evaluation function to test with
     * @param {any} value - comparative value to also pass to (compare) fun
     */
    function dotSubScan(root, paths, fun, value) {
      var path = paths[0];
      if (typeof root === 'undefined' || root === null || !root.hasOwnProperty(path)) {
        return false;
      }

      var valueFound = false;
      var element = root[path];
      if (Array.isArray(element)) {
        var index;
        for (index in element) {
          valueFound = valueFound || dotSubScan(element[index], paths.slice(1, paths.length), fun, value);
          if (valueFound === true) {
            break;
          }
        }
      } else if (typeof element === 'object') {
        valueFound = dotSubScan(element, paths.slice(1, paths.length), fun, value);
      } else {
        valueFound = fun(element, value);
      }

      return valueFound;
    }

    function containsCheckFn(a) {
      if (typeof a === 'string' || Array.isArray(a)) {
        return function (b) {
          return a.indexOf(b) !== -1;
        };
      } else if (typeof a === 'object' && a !== null) {
        return function (b) {
          return hasOwnProperty.call(a, b);
        };
      }
      return null;
    }

    function doQueryOp(val, op) {
      for (var p in op) {
        if (hasOwnProperty.call(op, p)) {
          return LokiOps[p](val, op[p]);
        }
      }
      return false;
    }

    var LokiOps = {
      // comparison operators
      // a is the value in the collection
      // b is the query value
      $eq: function (a, b) {
        return a === b;
      },

      // abstract/loose equality
      $aeq: function (a, b) {
        return a == b;
      },

      $ne: function (a, b) {
        // ecma 5 safe test for NaN
        if (b !== b) {
          // ecma 5 test value is not NaN
          return (a === a);
        }

        return a !== b;
      },

      $dteq: function (a, b) {
        if (ltHelper(a, b, false)) {
          return false;
        }
        return !gtHelper(a, b, false);
      },

      $gt: function (a, b) {
        return gtHelper(a, b, false);
      },

      $gte: function (a, b) {
        return gtHelper(a, b, true);
      },

      $lt: function (a, b) {
        return ltHelper(a, b, false);
      },

      $lte: function (a, b) {
        return ltHelper(a, b, true);
      },

      $in: function (a, b) {
        return b.indexOf(a) !== -1;
      },

      $nin: function (a, b) {
        return b.indexOf(a) === -1;
      },

      $keyin: function (a, b) {
        return a in b;
      },

      $nkeyin: function (a, b) {
        return !(a in b);
      },

      $definedin: function (a, b) {
        return b[a] !== undefined;
      },

      $undefinedin: function (a, b) {
        return b[a] === undefined;
      },

      $regex: function (a, b) {
        return b.test(a);
      },

      $containsString: function (a, b) {
        return (typeof a === 'string') && (a.indexOf(b) !== -1);
      },

      $containsNone: function (a, b) {
        return !LokiOps.$containsAny(a, b);
      },

      $containsAny: function (a, b) {
        var checkFn = containsCheckFn(a);
        if (checkFn !== null) {
          return (Array.isArray(b)) ? (b.some(checkFn)) : (checkFn(b));
        }
        return false;
      },

      $contains: function (a, b) {
        var checkFn = containsCheckFn(a);
        if (checkFn !== null) {
          return (Array.isArray(b)) ? (b.every(checkFn)) : (checkFn(b));
        }
        return false;
      },

      $type: function (a, b) {
        var type = typeof a;
        if (type === 'object') {
          if (Array.isArray(a)) {
            type = 'array';
          } else if (a instanceof Date) {
            type = 'date';
          }
        }
        return (typeof b !== 'object') ? (type === b) : doQueryOp(type, b);
      },

      $size: function (a, b) {
        if (Array.isArray(a)) {
          return (typeof b !== 'object') ? (a.length === b) : doQueryOp(a.length, b);
        }
        return false;
      },

      $len: function (a, b) {
        if (typeof a === 'string') {
          return (typeof b !== 'object') ? (a.length === b) : doQueryOp(a.length, b);
        }
        return false;
      },

      $where: function (a, b) {
        return b(a) === true;
      },

      // field-level logical operators
      // a is the value in the collection
      // b is the nested query operation (for '$not')
      //   or an array of nested query operations (for '$and' and '$or')
      $not: function (a, b) {
        return !doQueryOp(a, b);
      },

      $and: function (a, b) {
        for (var idx = 0, len = b.length; idx < len; idx += 1) {
          if (!doQueryOp(a, b[idx])) {
            return false;
          }
        }
        return true;
      },

      $or: function (a, b) {
        for (var idx = 0, len = b.length; idx < len; idx += 1) {
          if (doQueryOp(a, b[idx])) {
            return true;
          }
        }
        return false;
      }
    };

    // making indexing opt-in... our range function knows how to deal with these ops :
    var indexedOpsList = ['$eq', '$aeq', '$dteq', '$gt', '$gte', '$lt', '$lte'];

    function clone(data, method) {
      var cloneMethod = method || 'parse-stringify',
        cloned;

      switch (cloneMethod) {
      case "parse-stringify":
        cloned = JSON.parse(JSON.stringify(data));
        break;
      case "jquery-extend-deep":
        cloned = jQuery.extend(true, {}, data);
        break;
      case "shallow":
        cloned = Object.create(data.prototype || null);
        Object.keys(data).map(function (i) {
          cloned[i] = data[i];
        });
        break;
      default:
        break;
      }

      //if (cloneMethod === 'parse-stringify') {
      //  cloned = JSON.parse(JSON.stringify(data));
      //}
      return cloned;
    }

    function cloneObjectArray(objarray, method) {
      var i,
        result = [];

      if (method == "parse-stringify") {
        return clone(objarray, method);
      }

      i = objarray.length - 1;

      for (; i <= 0; i--) {
        result.push(clone(objarray[i], method));
      }

      return result;
    }

    function localStorageAvailable() {
      try {
        return (window && window.localStorage !== undefined && window.localStorage !== null);
      } catch (e) {
        return false;
      }
    }


    /**
     * LokiEventEmitter is a minimalist version of EventEmitter. It enables any
     * constructor that inherits EventEmitter to emit events and trigger
     * listeners that have been added to the event through the on(event, callback) method
     *
     * @constructor LokiEventEmitter
     */
    function LokiEventEmitter() {}

    /**
     * @prop {hashmap} events - a hashmap, with each property being an array of callbacks
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.events = {};

    /**
     * @prop {boolean} asyncListeners - boolean determines whether or not the callbacks associated with each event
     * should happen in an async fashion or not
     * Default is false, which means events are synchronous
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.asyncListeners = false;

    /**
     * on(eventName, listener) - adds a listener to the queue of callbacks associated to an event
     * @param {string} eventName - the name of the event to listen to
     * @param {function} listener - callback function of listener to attach
     * @returns {int} the index of the callback in the array of listeners for a particular event
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.on = function (eventName, listener) {
      var event = this.events[eventName];
      if (!event) {
        event = this.events[eventName] = [];
      }
      event.push(listener);
      return listener;
    };

    /**
     * emit(eventName, data) - emits a particular event
     * with the option of passing optional parameters which are going to be processed by the callback
     * provided signatures match (i.e. if passing emit(event, arg0, arg1) the listener should take two parameters)
     * @param {string} eventName - the name of the event
     * @param {object=} data - optional object passed with the event
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.emit = function (eventName, data) {
      var self = this;
      if (eventName && this.events[eventName]) {
        this.events[eventName].forEach(function (listener) {
          if (self.asyncListeners) {
            setTimeout(function () {
              listener(data);
            }, 1);
          } else {
            listener(data);
          }

        });
      } else {
        throw new Error('No event ' + eventName + ' defined');
      }
    };

    /**
     * removeListener() - removes the listener at position 'index' from the event 'eventName'
     * @param {string} eventName - the name of the event which the listener is attached to
     * @param {function} listener - the listener callback function to remove from emitter
     * @memberof LokiEventEmitter
     */
    LokiEventEmitter.prototype.removeListener = function (eventName, listener) {
      if (this.events[eventName]) {
        var listeners = this.events[eventName];
        listeners.splice(listeners.indexOf(listener), 1);
      }
    };

    /**
     * Loki: The main database class
     * @constructor Loki
     * @implements LokiEventEmitter
     * @param {string} filename - name of the file to be saved to
     * @param {object=} options - (Optional) config options object
     * @param {string} options.env - override environment detection as 'NODEJS', 'BROWSER', 'CORDOVA'
     * @param {boolean} options.verbose - enable console output (default is 'false')
     * @param {boolean} options.autosave - enables autosave
     * @param {int} options.autosaveInterval - time interval (in milliseconds) between saves (if dirty)
     * @param {boolean} options.autoload - enables autoload on loki instantiation
     * @param {function} options.autoloadCallback - user callback called after database load
     * @param {adapter} options.adapter - an instance of a loki persistence adapter
     */
    function Loki(filename, options) {
      this.filename = filename || 'loki.db';
      this.collections = [];

      // persist version of code which created the database to the database.
      // could use for upgrade scenarios
      this.databaseVersion = 1.1;
      this.engineVersion = 1.1;

      // autosave support (disabled by default)
      // pass autosave: true, autosaveInterval: 6000 in options to set 6 second autosave
      this.autosave = false;
      this.autosaveInterval = 5000;
      this.autosaveHandle = null;

      this.options = {};

      // currently keeping persistenceMethod and persistenceAdapter as loki level properties that
      // will not or cannot be deserialized.  You are required to configure persistence every time
      // you instantiate a loki object (or use default environment detection) in order to load the database anyways.

      // persistenceMethod could be 'fs', 'localStorage', or 'adapter'
      // this is optional option param, otherwise environment detection will be used
      // if user passes their own adapter we will force this method to 'adapter' later, so no need to pass method option.
      this.persistenceMethod = null;

      // retain reference to optional (non-serializable) persistenceAdapter 'instance'
      this.persistenceAdapter = null;

      // enable console output if verbose flag is set (disabled by default)
      this.verbose = options && options.hasOwnProperty('verbose') ? options.verbose : false;

      this.events = {
        'init': [],
        'loaded': [],
        'flushChanges': [],
        'close': [],
        'changes': [],
        'warning': []
      };

      var getENV = function () {
        // if (typeof global !== 'undefined' && (global.android || global.NSObject)) {
        //   //If no adapter is set use the default nativescript adapter
        //   if (!options.adapter) {
        //     var LokiNativescriptAdapter = require('./loki-nativescript-adapter');
        //     options.adapter=new LokiNativescriptAdapter();
        //   }
        //   return 'NATIVESCRIPT'; //nativescript
        // }

        if (typeof window === 'undefined') {
          return 'NODEJS';
        }

        if (typeof global !== 'undefined' && global.window) {
          return 'NODEJS'; //node-webkit
        }

        if (typeof document !== 'undefined') {
          if (document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1) {
            return 'CORDOVA';
          }
          return 'BROWSER';
        }
        return 'CORDOVA';
      };

      // refactored environment detection due to invalid detection for browser environments.
      // if they do not specify an options.env we want to detect env rather than default to nodejs.
      // currently keeping two properties for similar thing (options.env and options.persistenceMethod)
      //   might want to review whether we can consolidate.
      if (options && options.hasOwnProperty('env')) {
        this.ENV = options.env;
      } else {
        this.ENV = getENV();
      }

      // not sure if this is necessary now that i have refactored the line above
      if (this.ENV === 'undefined') {
        this.ENV = 'NODEJS';
      }

      //if (typeof (options) !== 'undefined') {
      this.configureOptions(options, true);
      //}

      this.on('init', this.clearChanges);

    }

    // db class is an EventEmitter
    Loki.prototype = new LokiEventEmitter();

    // experimental support for browserify's abstract syntax scan to pick up dependency of indexed adapter.
    // Hopefully, once this hits npm a browserify require of lokijs should scan the main file and detect this indexed adapter reference.
    Loki.prototype.getIndexedAdapter = function () {
      var adapter;

      if (typeof require === 'function') {
        adapter = require("./loki-indexed-adapter.js");
      }

      return adapter;
    };


    /**
     * Allows reconfiguring database options
     *
     * @param {object} options - configuration options to apply to loki db object
     * @param {string} options.env - override environment detection as 'NODEJS', 'BROWSER', 'CORDOVA'
     * @param {boolean} options.verbose - enable console output (default is 'false')
     * @param {boolean} options.autosave - enables autosave
     * @param {int} options.autosaveInterval - time interval (in milliseconds) between saves (if dirty)
     * @param {boolean} options.autoload - enables autoload on loki instantiation
     * @param {function} options.autoloadCallback - user callback called after database load
     * @param {adapter} options.adapter - an instance of a loki persistence adapter
     * @param {boolean} initialConfig - (internal) true is passed when loki ctor is invoking
     * @memberof Loki
     */
    Loki.prototype.configureOptions = function (options, initialConfig) {
      var defaultPersistence = {
          'NODEJS': 'fs',
          'BROWSER': 'localStorage',
          'CORDOVA': 'localStorage'
        },
        persistenceMethods = {
          'fs': LokiFsAdapter,
          'localStorage': LokiLocalStorageAdapter
        };

      this.options = {};

      this.persistenceMethod = null;
      // retain reference to optional persistence adapter 'instance'
      // currently keeping outside options because it can't be serialized
      this.persistenceAdapter = null;

      // process the options
      if (typeof (options) !== 'undefined') {
        this.options = options;


        if (this.options.hasOwnProperty('persistenceMethod')) {
          // check if the specified persistence method is known
          if (typeof (persistenceMethods[options.persistenceMethod]) == 'function') {
            this.persistenceMethod = options.persistenceMethod;
            this.persistenceAdapter = new persistenceMethods[options.persistenceMethod]();
          }
          // should be throw an error here, or just fall back to defaults ??
        }

        // if user passes adapter, set persistence mode to adapter and retain persistence adapter instance
        if (this.options.hasOwnProperty('adapter')) {
          this.persistenceMethod = 'adapter';
          this.persistenceAdapter = options.adapter;
          this.options.adapter = null;
        }


        // if they want to load database on loki instantiation, now is a good time to load... after adapter set and before possible autosave initiation
        if (options.autoload && initialConfig) {
          // for autoload, let the constructor complete before firing callback
          var self = this;
          setTimeout(function () {
            self.loadDatabase(options, options.autoloadCallback);
          }, 1);
        }

        if (this.options.hasOwnProperty('autosaveInterval')) {
          this.autosaveDisable();
          this.autosaveInterval = parseInt(this.options.autosaveInterval, 10);
        }

        if (this.options.hasOwnProperty('autosave') && this.options.autosave) {
          this.autosaveDisable();
          this.autosave = true;

          if (this.options.hasOwnProperty('autosaveCallback')) {
            this.autosaveEnable(options, options.autosaveCallback);
          } else {
            this.autosaveEnable();
          }
        }
      } // end of options processing

      // if by now there is no adapter specified by user nor derived from persistenceMethod: use sensible defaults
      if (this.persistenceAdapter === null) {
        this.persistenceMethod = defaultPersistence[this.ENV];
        if (this.persistenceMethod) {
          this.persistenceAdapter = new persistenceMethods[this.persistenceMethod]();
        }
      }

    };

    /**
     * Shorthand method for quickly creating and populating an anonymous collection.
     *    This collection is not referenced internally so upon losing scope it will be garbage collected.
     *
     * @example
     * var results = new loki().anonym(myDocArray).find({'age': {'$gt': 30} });
     *
     * @param {Array} docs - document array to initialize the anonymous collection with
     * @param {object} options - configuration object, see {@link Loki#addCollection} options
     * @returns {Collection} New collection which you can query or chain
     * @memberof Loki
     */
    Loki.prototype.anonym = function (docs, options) {
      var collection = new Collection('anonym', options);
      collection.insert(docs);

      if (this.verbose)
        collection.console = console;

      return collection;
    };

    /**
     * Adds a collection to the database.
     * @param {string} name - name of collection to add
     * @param {object=} options - (optional) options to configure collection with.
     * @param {array} options.unique - array of property names to define unique constraints for
     * @param {array} options.exact - array of property names to define exact constraints for
     * @param {array} options.indices - array property names to define binary indexes for
     * @param {boolean} options.asyncListeners - default is false
     * @param {boolean} options.disableChangesApi - default is true
     * @param {boolean} options.autoupdate - use Object.observe to update objects automatically (default: false)
     * @param {boolean} options.clone - specify whether inserts and queries clone to/from user
     * @param {string} options.cloneMethod - 'parse-stringify' (default), 'jquery-extend-deep', 'shallow'
     * @param {int} options.ttlInterval - time interval for clearing out 'aged' documents; not set by default.
     * @returns {Collection} a reference to the collection which was just added
     * @memberof Loki
     */
    Loki.prototype.addCollection = function (name, options) {
      var collection = new Collection(name, options);
      this.collections.push(collection);

      if (this.verbose)
        collection.console = console;

      return collection;
    };

    Loki.prototype.loadCollection = function (collection) {
      if (!collection.name) {
        throw new Error('Collection must have a name property to be loaded');
      }
      this.collections.push(collection);
    };

    /**
     * Retrieves reference to a collection by name.
     * @param {string} collectionName - name of collection to look up
     * @returns {Collection} Reference to collection in database by that name, or null if not found
     * @memberof Loki
     */
    Loki.prototype.getCollection = function (collectionName) {
      var i,
        len = this.collections.length;

      for (i = 0; i < len; i += 1) {
        if (this.collections[i].name === collectionName) {
          return this.collections[i];
        }
      }

      // no such collection
      this.emit('warning', 'collection ' + collectionName + ' not found');
      return null;
    };

    Loki.prototype.listCollections = function () {

      var i = this.collections.length,
        colls = [];

      while (i--) {
        colls.push({
          name: this.collections[i].name,
          type: this.collections[i].objType,
          count: this.collections[i].data.length
        });
      }
      return colls;
    };

    /**
     * Removes a collection from the database.
     * @param {string} collectionName - name of collection to remove
     * @memberof Loki
     */
    Loki.prototype.removeCollection = function (collectionName) {
      var i,
        len = this.collections.length;

      for (i = 0; i < len; i += 1) {
        if (this.collections[i].name === collectionName) {
          var tmpcol = new Collection(collectionName, {});
          var curcol = this.collections[i];
          for (var prop in curcol) {
            if (curcol.hasOwnProperty(prop) && tmpcol.hasOwnProperty(prop)) {
              curcol[prop] = tmpcol[prop];
            }
          }
          this.collections.splice(i, 1);
          return;
        }
      }
    };

    Loki.prototype.getName = function () {
      return this.name;
    };

    /**
     * serializeReplacer - used to prevent certain properties from being serialized
     *
     */
    Loki.prototype.serializeReplacer = function (key, value) {
      switch (key) {
      case 'autosaveHandle':
      case 'persistenceAdapter':
      case 'constraints':
        return null;
      default:
        return value;
      }
    };

    /**
     * Serialize database to a string which can be loaded via {@link Loki#loadJSON}
     *
     * @returns {string} Stringified representation of the loki database.
     * @memberof Loki
     */
    Loki.prototype.serialize = function () {
      return JSON.stringify(this, this.serializeReplacer);
    };
    // alias of serialize
    Loki.prototype.toJson = Loki.prototype.serialize;

    /**
     * Inflates a loki database from a serialized JSON string
     *
     * @param {string} serializedDb - a serialized loki database string
     * @param {object} options - apply or override collection level settings
     * @memberof Loki
     */
    Loki.prototype.loadJSON = function (serializedDb, options) {
      var dbObject;
      if (serializedDb.length === 0) {
        dbObject = {};
      } else {
        dbObject = JSON.parse(serializedDb);
      }

      this.loadJSONObject(dbObject, options);
    };

    /**
     * Inflates a loki database from a JS object
     *
     * @param {object} dbObject - a serialized loki database string
     * @param {object} options - apply or override collection level settings
     * @memberof Loki
     */
    Loki.prototype.loadJSONObject = function (dbObject, options) {
      var i = 0,
        len = dbObject.collections ? dbObject.collections.length : 0,
        coll,
        copyColl,
        clen,
        j;

      this.name = dbObject.name;

      // restore database version
      this.databaseVersion = 1.0;
      if (dbObject.hasOwnProperty('databaseVersion')) {
        this.databaseVersion = dbObject.databaseVersion;
      }

      this.collections = [];

      for (i; i < len; i += 1) {
        coll = dbObject.collections[i];
        copyColl = this.addCollection(coll.name);

        copyColl.transactional = coll.transactional;
        copyColl.asyncListeners = coll.asyncListeners;
        copyColl.disableChangesApi = coll.disableChangesApi;
        copyColl.cloneObjects = coll.cloneObjects;
        copyColl.cloneMethod = coll.cloneMethod || "parse-stringify";
        copyColl.autoupdate = coll.autoupdate;

        // load each element individually
        clen = coll.data.length;
        j = 0;
        if (options && options.hasOwnProperty(coll.name)) {

          var loader = options[coll.name].inflate ? options[coll.name].inflate : Utils.copyProperties;

          for (j; j < clen; j++) {
            var collObj = new(options[coll.name].proto)();
            loader(coll.data[j], collObj);
            copyColl.data[j] = collObj;
            copyColl.addAutoUpdateObserver(collObj);
          }
        } else {

          for (j; j < clen; j++) {
            copyColl.data[j] = coll.data[j];
            copyColl.addAutoUpdateObserver(copyColl.data[j]);
          }
        }

        copyColl.maxId = (coll.data.length === 0) ? 0 : coll.maxId;
        copyColl.idIndex = coll.idIndex;
        if (typeof (coll.binaryIndices) !== 'undefined') {
          copyColl.binaryIndices = coll.binaryIndices;
        }
        if (typeof coll.transforms !== 'undefined') {
          copyColl.transforms = coll.transforms;
        }

        copyColl.ensureId();

        // regenerate unique indexes
        copyColl.uniqueNames = [];
        if (coll.hasOwnProperty("uniqueNames")) {
          copyColl.uniqueNames = coll.uniqueNames;
          for (j = 0; j < copyColl.uniqueNames.length; j++) {
            copyColl.ensureUniqueIndex(copyColl.uniqueNames[j]);
          }
        }

        // in case they are loading a database created before we added dynamic views, handle undefined
        if (typeof (coll.DynamicViews) === 'undefined') continue;

        // reinflate DynamicViews and attached Resultsets
        for (var idx = 0; idx < coll.DynamicViews.length; idx++) {
          var colldv = coll.DynamicViews[idx];

          var dv = copyColl.addDynamicView(colldv.name, colldv.options);
          dv.resultdata = colldv.resultdata;
          dv.resultsdirty = colldv.resultsdirty;
          dv.filterPipeline = colldv.filterPipeline;

          dv.sortCriteria = colldv.sortCriteria;
          dv.sortFunction = null;

          dv.sortDirty = colldv.sortDirty;
          dv.resultset.filteredrows = colldv.resultset.filteredrows;
          dv.resultset.searchIsChained = colldv.resultset.searchIsChained;
          dv.resultset.filterInitialized = colldv.resultset.filterInitialized;

          dv.rematerialize({
            removeWhereFilters: true
          });
        }
      }
    };

    /**
     * Emits the close event. In autosave scenarios, if the database is dirty, this will save and disable timer.
     * Does not actually destroy the db.
     *
     * @param {function=} callback - (Optional) if supplied will be registered with close event before emitting.
     * @memberof Loki
     */
    Loki.prototype.close = function (callback) {
      // for autosave scenarios, we will let close perform final save (if dirty)
      // For web use, you might call from window.onbeforeunload to shutdown database, saving pending changes
      if (this.autosave) {
        this.autosaveDisable();
        if (this.autosaveDirty()) {
          this.saveDatabase(callback);
          callback = undefined;
        }
      }

      if (callback) {
        this.on('close', callback);
      }
      this.emit('close');
    };

    /**-------------------------+
    | Changes API               |
    +--------------------------*/

    /**
     * The Changes API enables the tracking the changes occurred in the collections since the beginning of the session,
     * so it's possible to create a differential dataset for synchronization purposes (possibly to a remote db)
     */

    /**
     * (Changes API) : takes all the changes stored in each
     * collection and creates a single array for the entire database. If an array of names
     * of collections is passed then only the included collections will be tracked.
     *
     * @param {array=} optional array of collection names. No arg means all collections are processed.
     * @returns {array} array of changes
     * @see private method createChange() in Collection
     * @memberof Loki
     */
    Loki.prototype.generateChangesNotification = function (arrayOfCollectionNames) {
      function getCollName(coll) {
        return coll.name;
      }
      var changes = [],
        selectedCollections = arrayOfCollectionNames || this.collections.map(getCollName);

      this.collections.forEach(function (coll) {
        if (selectedCollections.indexOf(getCollName(coll)) !== -1) {
          changes = changes.concat(coll.getChanges());
        }
      });
      return changes;
    };

    /**
     * (Changes API) - stringify changes for network transmission
     * @returns {string} string representation of the changes
     * @memberof Loki
     */
    Loki.prototype.serializeChanges = function (collectionNamesArray) {
      return JSON.stringify(this.generateChangesNotification(collectionNamesArray));
    };

    /**
     * (Changes API) : clears all the changes in all collections.
     * @memberof Loki
     */
    Loki.prototype.clearChanges = function () {
      this.collections.forEach(function (coll) {
        if (coll.flushChanges) {
          coll.flushChanges();
        }
      });
    };

    /*------------------+
    | PERSISTENCE       |
    -------------------*/


    /** there are two build in persistence adapters for internal use
     * fs             for use in Nodejs type environments
     * localStorage   for use in browser environment
     * defined as helper classes here so its easy and clean to use
     */

    /**
     * A loki persistence adapter which persists using node fs module
     * @constructor LokiFsAdapter
     */
    function LokiFsAdapter() {
      this.fs = require('fs');
    }

    /**
     * loadDatabase() - Load data from file, will throw an error if the file does not exist
     * @param {string} dbname - the filename of the database to load
     * @param {function} callback - the callback to handle the result
     * @memberof LokiFsAdapter
     */
    LokiFsAdapter.prototype.loadDatabase = function loadDatabase(dbname, callback) {
      this.fs.readFile(dbname, {
        encoding: 'utf8'
      }, function readFileCallback(err, data) {
        if (err) {
          callback(new Error(err));
        } else {
          callback(data);
        }
      });
    };

    /**
     * saveDatabase() - save data to file, will throw an error if the file can't be saved
     * might want to expand this to avoid dataloss on partial save
     * @param {string} dbname - the filename of the database to load
     * @param {function} callback - the callback to handle the result
     * @memberof LokiFsAdapter
     */
    LokiFsAdapter.prototype.saveDatabase = function saveDatabase(dbname, dbstring, callback) {
      this.fs.writeFile(dbname, dbstring, callback);
    };

    /**
     * deleteDatabase() - delete the database file, will throw an error if the
     * file can't be deleted
     * @param {string} dbname - the filename of the database to delete
     * @param {function} callback - the callback to handle the result
     * @memberof LokiFsAdapter
     */
    LokiFsAdapter.prototype.deleteDatabase = function deleteDatabase(dbname, callback) {
      this.fs.unlink(dbname, function deleteDatabaseCallback(err) {
        if (err) {
          callback(new Error(err));
        } else {
          callback();
        }
      });
    };


    /**
     * A loki persistence adapter which persists to web browser's local storage object
     * @constructor LokiLocalStorageAdapter
     */
    function LokiLocalStorageAdapter() {}

    /**
     * loadDatabase() - Load data from localstorage
     * @param {string} dbname - the name of the database to load
     * @param {function} callback - the callback to handle the result
     * @memberof LokiLocalStorageAdapter
     */
    LokiLocalStorageAdapter.prototype.loadDatabase = function loadDatabase(dbname, callback) {
      if (localStorageAvailable()) {
        callback(localStorage.getItem(dbname));
      } else {
        callback(new Error('localStorage is not available'));
      }
    };

    /**
     * saveDatabase() - save data to localstorage, will throw an error if the file can't be saved
     * might want to expand this to avoid dataloss on partial save
     * @param {string} dbname - the filename of the database to load
     * @param {function} callback - the callback to handle the result
     * @memberof LokiLocalStorageAdapter
     */
    LokiLocalStorageAdapter.prototype.saveDatabase = function saveDatabase(dbname, dbstring, callback) {
      if (localStorageAvailable()) {
        localStorage.setItem(dbname, dbstring);
        callback(null);
      } else {
        callback(new Error('localStorage is not available'));
      }
    };

    /**
     * deleteDatabase() - delete the database from localstorage, will throw an error if it
     * can't be deleted
     * @param {string} dbname - the filename of the database to delete
     * @param {function} callback - the callback to handle the result
     * @memberof LokiLocalStorageAdapter
     */
    LokiLocalStorageAdapter.prototype.deleteDatabase = function deleteDatabase(dbname, callback) {
      if (localStorageAvailable()) {
        localStorage.removeItem(dbname);
        callback(null);
      } else {
        callback(new Error('localStorage is not available'));
      }
    };

    /**
     * Handles loading from file system, local storage, or adapter (indexeddb)
     *    This method utilizes loki configuration options (if provided) to determine which
     *    persistence method to use, or environment detection (if configuration was not provided).
     *
     * @param {object} options - not currently used (remove or allow overrides?)
     * @param {function=} callback - (Optional) user supplied async callback / error handler
     * @memberof Loki
     */
    Loki.prototype.loadDatabase = function (options, callback) {
      var cFun = callback || function (err, data) {
          if (err) {
            throw err;
          }
        },
        self = this;

      // the persistenceAdapter should be present if all is ok, but check to be sure.
      if (this.persistenceAdapter !== null) {

        this.persistenceAdapter.loadDatabase(this.filename, function loadDatabaseCallback(dbString) {
          if (typeof (dbString) === 'string') {
            var parseSuccess = false;
            try {
              self.loadJSON(dbString, options || {});
              parseSuccess = true;
            } catch (err) {
              cFun(err);
            }
            if (parseSuccess) {
              cFun(null);
              self.emit('loaded', 'database ' + self.filename + ' loaded');
            }
          } else {
            // if adapter has returned an js object (other than null or error) attempt to load from JSON object
            if (typeof (dbString) === "object" && dbString !== null && !(dbString instanceof Error)) {
              self.loadJSONObject(dbString, options || {});
              cFun(null); // return null on success
              self.emit('loaded', 'database ' + self.filename + ' loaded');
            } else {
              // error from adapter (either null or instance of error), pass on to 'user' callback
              cFun(dbString);
            }
          }
        });

      } else {
        cFun(new Error('persistenceAdapter not configured'));
      }
    };

    /**
     * Handles saving to file system, local storage, or adapter (indexeddb)
     *    This method utilizes loki configuration options (if provided) to determine which
     *    persistence method to use, or environment detection (if configuration was not provided).
     *
     * @param {function=} callback - (Optional) user supplied async callback / error handler
     * @memberof Loki
     */
    Loki.prototype.saveDatabase = function (callback) {
      var cFun = callback || function (err) {
          if (err) {
            throw err;
          }
          return;
        },
        self = this;

      // the persistenceAdapter should be present if all is ok, but check to be sure.
      if (this.persistenceAdapter !== null) {
        // check if the adapter is requesting (and supports) a 'reference' mode export
        if (this.persistenceAdapter.mode === "reference" && typeof this.persistenceAdapter.exportDatabase === "function") {
          // filename may seem redundant but loadDatabase will need to expect this same filename
          this.persistenceAdapter.exportDatabase(this.filename, this, function exportDatabaseCallback(err) {
            self.autosaveClearFlags();
            cFun(err);
          });
        }
        // otherwise just pass the serialized database to adapter
        else {
          this.persistenceAdapter.saveDatabase(this.filename, self.serialize(), function saveDatabasecallback(err) {
            self.autosaveClearFlags();
            cFun(err);
          });
        }
      } else {
        cFun(new Error('persistenceAdapter not configured'));
      }
    };

    // alias
    Loki.prototype.save = Loki.prototype.saveDatabase;

    /**
     * Handles deleting a database from file system, local
     *    storage, or adapter (indexeddb)
     *    This method utilizes loki configuration options (if provided) to determine which
     *    persistence method to use, or environment detection (if configuration was not provided).
     *
     * @param {object} options - not currently used (remove or allow overrides?)
     * @param {function=} callback - (Optional) user supplied async callback / error handler
     * @memberof Loki
     */
    Loki.prototype.deleteDatabase = function (options, callback) {
      var cFun = callback || function (err, data) {
        if (err) {
          throw err;
        }
      };

      // the persistenceAdapter should be present if all is ok, but check to be sure.
      if (this.persistenceAdapter !== null) {
        this.persistenceAdapter.deleteDatabase(this.filename, function deleteDatabaseCallback(err) {
          cFun(err);
        });
      } else {
        cFun(new Error('persistenceAdapter not configured'));
      }
    };

    /**
     * autosaveDirty - check whether any collections are 'dirty' meaning we need to save (entire) database
     *
     * @returns {boolean} - true if database has changed since last autosave, false if not.
     */
    Loki.prototype.autosaveDirty = function () {
      for (var idx = 0; idx < this.collections.length; idx++) {
        if (this.collections[idx].dirty) {
          return true;
        }
      }

      return false;
    };

    /**
     * autosaveClearFlags - resets dirty flags on all collections.
     *    Called from saveDatabase() after db is saved.
     *
     */
    Loki.prototype.autosaveClearFlags = function () {
      for (var idx = 0; idx < this.collections.length; idx++) {
        this.collections[idx].dirty = false;
      }
    };

    /**
     * autosaveEnable - begin a javascript interval to periodically save the database.
     *
     * @param {object} options - not currently used (remove or allow overrides?)
     * @param {function=} callback - (Optional) user supplied async callback
     */
    Loki.prototype.autosaveEnable = function (options, callback) {
      this.autosave = true;

      var delay = 5000,
        self = this;

      if (typeof (this.autosaveInterval) !== 'undefined' && this.autosaveInterval !== null) {
        delay = this.autosaveInterval;
      }

      this.autosaveHandle = setInterval(function autosaveHandleInterval() {
        // use of dirty flag will need to be hierarchical since mods are done at collection level with no visibility of 'db'
        // so next step will be to implement collection level dirty flags set on insert/update/remove
        // along with loki level isdirty() function which iterates all collections to see if any are dirty

        if (self.autosaveDirty()) {
          self.saveDatabase(callback);
        }
      }, delay);
    };

    /**
     * autosaveDisable - stop the autosave interval timer.
     *
     */
    Loki.prototype.autosaveDisable = function () {
      if (typeof (this.autosaveHandle) !== 'undefined' && this.autosaveHandle !== null) {
        clearInterval(this.autosaveHandle);
        this.autosaveHandle = null;
      }
    };


    /**
     * Resultset class allowing chainable queries.  Intended to be instanced internally.
     *    Collection.find(), Collection.where(), and Collection.chain() instantiate this.
     *
     * @example
     *    mycollection.chain()
     *      .find({ 'doors' : 4 })
     *      .where(function(obj) { return obj.name === 'Toyota' })
     *      .data();
     *
     * @constructor Resultset
     * @param {Collection} collection - The collection which this Resultset will query against.
     * @param {Object=} options - Object containing one or more options.
     * @param {string} options.queryObj - Optional mongo-style query object to initialize resultset with.
     * @param {function} options.queryFunc - Optional javascript filter function to initialize resultset with.
     * @param {bool} options.firstOnly - Optional boolean used by collection.findOne().
     */
    function Resultset(collection, options) {
      options = options || {};

      options.queryObj = options.queryObj || null;
      options.queryFunc = options.queryFunc || null;
      options.firstOnly = options.firstOnly || false;

      // retain reference to collection we are querying against
      this.collection = collection;

      // if chain() instantiates with null queryObj and queryFunc, so we will keep flag for later
      this.searchIsChained = (!options.queryObj && !options.queryFunc);
      this.filteredrows = [];
      this.filterInitialized = false;

      // if user supplied initial queryObj or queryFunc, apply it
      if (typeof (options.queryObj) !== "undefined" && options.queryObj !== null) {
        return this.find(options.queryObj, options.firstOnly);
      }
      if (typeof (options.queryFunc) !== "undefined" && options.queryFunc !== null) {
        return this.where(options.queryFunc);
      }

      // otherwise return unfiltered Resultset for future filtering
      return this;
    }

    /**
     * reset() - Reset the resultset to its initial state.
     *
     * @returns {Resultset} Reference to this resultset, for future chain operations.
     */
    Resultset.prototype.reset = function () {
      if (this.filteredrows.length > 0) {
        this.filteredrows = [];
      }
      this.filterInitialized = false;
      return this;
    };

    /**
     * toJSON() - Override of toJSON to avoid circular references
     *
     */
    Resultset.prototype.toJSON = function () {
      var copy = this.copy();
      copy.collection = null;
      return copy;
    };

    /**
     * Allows you to limit the number of documents passed to next chain operation.
     *    A resultset copy() is made to avoid altering original resultset.
     *
     * @param {int} qty - The number of documents to return.
     * @returns {Resultset} Returns a copy of the resultset, limited by qty, for subsequent chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.limit = function (qty) {
      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var rscopy = new Resultset(this.collection);
      rscopy.filteredrows = this.filteredrows.slice(0, qty);
      rscopy.filterInitialized = true;
      return rscopy;
    };

    /**
     * Used for skipping 'pos' number of documents in the resultset.
     *
     * @param {int} pos - Number of documents to skip; all preceding documents are filtered out.
     * @returns {Resultset} Returns a copy of the resultset, containing docs starting at 'pos' for subsequent chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.offset = function (pos) {
      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var rscopy = new Resultset(this.collection);
      rscopy.filteredrows = this.filteredrows.slice(pos);
      rscopy.filterInitialized = true;
      return rscopy;
    };

    /**
     * copy() - To support reuse of resultset in branched query situations.
     *
     * @returns {Resultset} Returns a copy of the resultset (set) but the underlying document references will be the same.
     * @memberof Resultset
     */
    Resultset.prototype.copy = function () {
      var result = new Resultset(this.collection);

      if (this.filteredrows.length > 0) {
        result.filteredrows = this.filteredrows.slice();
      }
      result.filterInitialized = this.filterInitialized;

      return result;
    };

    /**
     * Alias of copy()
     * @memberof Resultset
     */
    Resultset.prototype.branch = Resultset.prototype.copy;

    /**
     * transform() - executes a named collection transform or raw array of transform steps against the resultset.
     *
     * @param transform {(string|array)} - name of collection transform or raw transform array
     * @param parameters {object=} - (Optional) object property hash of parameters, if the transform requires them.
     * @returns {Resultset} either (this) resultset or a clone of of this resultset (depending on steps)
     * @memberof Resultset
     */
    Resultset.prototype.transform = function (transform, parameters) {
      var idx,
        step,
        rs = this;

      // if transform is name, then do lookup first
      if (typeof transform === 'string') {
        if (this.collection.transforms.hasOwnProperty(transform)) {
          transform = this.collection.transforms[transform];
        }
      }

      // either they passed in raw transform array or we looked it up, so process
      if (typeof transform !== 'object' || !Array.isArray(transform)) {
        throw new Error("Invalid transform");
      }

      if (typeof parameters !== 'undefined') {
        transform = Utils.resolveTransformParams(transform, parameters);
      }

      for (idx = 0; idx < transform.length; idx++) {
        step = transform[idx];

        switch (step.type) {
        case "find":
          rs.find(step.value);
          break;
        case "where":
          rs.where(step.value);
          break;
        case "simplesort":
          rs.simplesort(step.property, step.desc);
          break;
        case "compoundsort":
          rs.compoundsort(step.value);
          break;
        case "sort":
          rs.sort(step.value);
          break;
        case "limit":
          rs = rs.limit(step.value);
          break; // limit makes copy so update reference
        case "offset":
          rs = rs.offset(step.value);
          break; // offset makes copy so update reference
        case "map":
          rs = rs.map(step.value);
          break;
        case "eqJoin":
          rs = rs.eqJoin(step.joinData, step.leftJoinKey, step.rightJoinKey, step.mapFun);
          break;
          // following cases break chain by returning array data so make any of these last in transform steps
        case "mapReduce":
          rs = rs.mapReduce(step.mapFunction, step.reduceFunction);
          break;
          // following cases update documents in current filtered resultset (use carefully)
        case "update":
          rs.update(step.value);
          break;
        case "remove":
          rs.remove();
          break;
        default:
          break;
        }
      }

      return rs;
    };

    /**
     * User supplied compare function is provided two documents to compare. (chainable)
     * @example
     *    rslt.sort(function(obj1, obj2) {
     *      if (obj1.name === obj2.name) return 0;
     *      if (obj1.name > obj2.name) return 1;
     *      if (obj1.name < obj2.name) return -1;
     *    });
     *
     * @param {function} comparefun - A javascript compare function used for sorting.
     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.
     * @memberof Resultset
     */
    Resultset.prototype.sort = function (comparefun) {
      // if this is chained resultset with no filters applied, just we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var wrappedComparer =
        (function (userComparer, data) {
          return function (a, b) {
            return userComparer(data[a], data[b]);
          };
        })(comparefun, this.collection.data);

      this.filteredrows.sort(wrappedComparer);

      return this;
    };

    /**
     * Simpler, loose evaluation for user to sort based on a property name. (chainable).
     *    Sorting based on the same lt/gt helper functions used for binary indices.
     *
     * @param {string} propname - name of property to sort by.
     * @param {bool=} isdesc - (Optional) If true, the property will be sorted in descending order
     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.
     * @memberof Resultset
     */
    Resultset.prototype.simplesort = function (propname, isdesc) {
      // if this is chained resultset with no filters applied, just we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      if (typeof (isdesc) === 'undefined') {
        isdesc = false;
      }

      var wrappedComparer =
        (function (prop, desc, data) {
          return function (a, b) {
            return sortHelper(data[a][prop], data[b][prop], desc);
          };
        })(propname, isdesc, this.collection.data);

      this.filteredrows.sort(wrappedComparer);

      return this;
    };

    /**
     * Allows sorting a resultset based on multiple columns.
     * @example
     * // to sort by age and then name (both ascending)
     * rs.compoundsort(['age', 'name']);
     * // to sort by age (ascending) and then by name (descending)
     * rs.compoundsort(['age', ['name', true]);
     *
     * @param {array} properties - array of property names or subarray of [propertyname, isdesc] used evaluate sort order
     * @returns {Resultset} Reference to this resultset, sorted, for future chain operations.
     * @memberof Resultset
     */
    Resultset.prototype.compoundsort = function (properties) {
      if (properties.length === 0) {
        throw new Error("Invalid call to compoundsort, need at least one property");
      }

      var prop;
      if (properties.length === 1) {
        prop = properties[0];
        if (Array.isArray(prop)) {
          return this.simplesort(prop[0], prop[1]);
        }
        return this.simplesort(prop, false);
      }

      // unify the structure of 'properties' to avoid checking it repeatedly while sorting
      for (var i = 0, len = properties.length; i < len; i += 1) {
        prop = properties[i];
        if (!Array.isArray(prop)) {
          properties[i] = [prop, false];
        }
      }

      // if this is chained resultset with no filters applied, just we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var wrappedComparer =
        (function (props, data) {
          return function (a, b) {
            return compoundeval(props, data[a], data[b]);
          };
        })(properties, this.collection.data);

      this.filteredrows.sort(wrappedComparer);

      return this;
    };

    /**
     * calculateRange() - Binary Search utility method to find range/segment of values matching criteria.
     *    this is used for collection.find() and first find filter of resultset/dynview
     *    slightly different than get() binary search in that get() hones in on 1 value,
     *    but we have to hone in on many (range)
     * @param {string} op - operation, such as $eq
     * @param {string} prop - name of property to calculate range for
     * @param {object} val - value to use for range calculation.
     * @returns {array} [start, end] index array positions
     */
    Resultset.prototype.calculateRange = function (op, prop, val) {
      var rcd = this.collection.data;
      var index = this.collection.binaryIndices[prop].values;
      var min = 0;
      var max = index.length - 1;
      var mid = 0;

      // when no documents are in collection, return empty range condition
      if (rcd.length === 0) {
        return [0, -1];
      }

      var minVal = rcd[index[min]][prop];
      var maxVal = rcd[index[max]][prop];

      // if value falls outside of our range return [0, -1] to designate no results
      switch (op) {
      case '$eq':
      case '$aeq':
        if (ltHelper(val, minVal, false) || gtHelper(val, maxVal, false)) {
          return [0, -1];
        }
        break;
      case '$dteq':
        if (ltHelper(val, minVal, false) || gtHelper(val, maxVal, false)) {
          return [0, -1];
        }
        break;
      case '$gt':
        if (gtHelper(val, maxVal, true)) {
          return [0, -1];
        }
        break;
      case '$gte':
        if (gtHelper(val, maxVal, false)) {
          return [0, -1];
        }
        break;
      case '$lt':
        if (ltHelper(val, minVal, true)) {
          return [0, -1];
        }
        if (ltHelper(maxVal, val, false)) {
          return [0, rcd.length - 1];
        }
        break;
      case '$lte':
        if (ltHelper(val, minVal, false)) {
          return [0, -1];
        }
        if (ltHelper(maxVal, val, true)) {
          return [0, rcd.length - 1];
        }
        break;
      }

      // hone in on start position of value
      while (min < max) {
        mid = (min + max) >> 1;

        if (ltHelper(rcd[index[mid]][prop], val, false)) {
          min = mid + 1;
        } else {
          max = mid;
        }
      }

      var lbound = min;

      // do not reset min, as the upper bound cannot be prior to the found low bound
      max = index.length - 1;

      // hone in on end position of value
      while (min < max) {
        mid = (min + max) >> 1;

        if (ltHelper(val, rcd[index[mid]][prop], false)) {
          max = mid;
        } else {
          min = mid + 1;
        }
      }

      var ubound = max;

      var lval = rcd[index[lbound]][prop];
      var uval = rcd[index[ubound]][prop];

      switch (op) {
      case '$eq':
        if (lval !== val) {
          return [0, -1];
        }
        if (uval !== val) {
          ubound--;
        }

        return [lbound, ubound];
      case '$dteq':
        if (lval > val || lval < val) {
          return [0, -1];
        }
        if (uval > val || uval < val) {
          ubound--;
        }

        return [lbound, ubound];


      case '$gt':
        if (ltHelper(uval, val, true)) {
          return [0, -1];
        }

        return [ubound, rcd.length - 1];

      case '$gte':
        if (ltHelper(lval, val, false)) {
          return [0, -1];
        }

        return [lbound, rcd.length - 1];

      case '$lt':
        if (lbound === 0 && ltHelper(lval, val, false)) {
          return [0, 0];
        }
        return [0, lbound - 1];

      case '$lte':
        if (uval !== val) {
          ubound--;
        }

        if (ubound === 0 && ltHelper(uval, val, false)) {
          return [0, 0];
        }
        return [0, ubound];

      default:
        return [0, rcd.length - 1];
      }
    };

    /**
     * findOr() - oversee the operation of OR'ed query expressions.
     *    OR'ed expression evaluation runs each expression individually against the full collection,
     *    and finally does a set OR on each expression's results.
     *    Each evaluation can utilize a binary index to prevent multiple linear array scans.
     *
     * @param {array} expressionArray - array of expressions
     * @returns {Resultset} this resultset for further chain ops.
     */
    Resultset.prototype.findOr = function (expressionArray) {
      var fr = null,
        fri = 0,
        frlen = 0,
        docset = [],
        idxset = [],
        idx = 0,
        origCount = this.count();

      // If filter is already initialized, then we query against only those items already in filter.
      // This means no index utilization for fields, so hopefully its filtered to a smallish filteredrows.
      for (var ei = 0, elen = expressionArray.length; ei < elen; ei++) {
        // we need to branch existing query to run each filter separately and combine results
        fr = this.branch().find(expressionArray[ei]).filteredrows;
        frlen = fr.length;
        // if the find operation did not reduce the initial set, then the initial set is the actual result
        if (frlen === origCount) {
          return this;
        }

        // add any document 'hits'
        for (fri = 0; fri < frlen; fri++) {
          idx = fr[fri];
          if (idxset[idx] === undefined) {
            idxset[idx] = true;
            docset.push(idx);
          }
        }
      }

      this.filteredrows = docset;
      this.filterInitialized = true;

      return this;
    };
    Resultset.prototype.$or = Resultset.prototype.findOr;

    /**
     * findAnd() - oversee the operation of AND'ed query expressions.
     *    AND'ed expression evaluation runs each expression progressively against the full collection,
     *    internally utilizing existing chained resultset functionality.
     *    Only the first filter can utilize a binary index.
     *
     * @param {array} expressionArray - array of expressions
     * @returns {Resultset} this resultset for further chain ops.
     */
    Resultset.prototype.findAnd = function (expressionArray) {
      // we have already implementing method chaining in this (our Resultset class)
      // so lets just progressively apply user supplied and filters
      for (var i = 0, len = expressionArray.length; i < len; i++) {
        if (this.count() === 0) {
          return this;
        }
        this.find(expressionArray[i]);
      }
      return this;
    };
    Resultset.prototype.$and = Resultset.prototype.findAnd;

    /**
     * Used for querying via a mongo-style query object.
     *
     * @param {object} query - A mongo-style query object used for filtering current results.
     * @param {boolean=} firstOnly - (Optional) Used by collection.findOne()
     * @returns {Resultset} this resultset for further chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.find = function (query, firstOnly) {
      if (this.collection.data.length === 0) {
        if (this.searchIsChained) {
          this.filteredrows = [];
          this.filterInitialized = true;
          return this;
        }
        return [];
      }

      var queryObject = query || 'getAll',
        p,
        property,
        queryObjectOp,
        operator,
        value,
        key,
        searchByIndex = false,
        result = [],
        index = null;

      // if this was note invoked via findOne()
      firstOnly = firstOnly || false;

      if (typeof queryObject === 'object') {
        for (p in queryObject) {
          if (hasOwnProperty.call(queryObject, p)) {
            property = p;
            queryObjectOp = queryObject[p];
            break;
          }
        }
      }

      // apply no filters if they want all
      if (!property || queryObject === 'getAll') {
        // Chained queries can just do coll.chain().data() but let's
        // be versatile and allow this also coll.chain().find().data()

        // If a chained search, simply leave everything as-is.
        // Note: If no filter at this point, it will be properly
        // created by the follow-up queries or sorts that need it.
        // If not chained, then return the collection data array copy.
        return (this.searchIsChained) ? (this) : (this.collection.data.slice());
      }

      // injecting $and and $or expression tree evaluation here.
      if (property === '$and' || property === '$or') {
        if (this.searchIsChained) {
          this[property](queryObjectOp);

          // for chained find with firstonly,
          if (firstOnly && this.filteredrows.length > 1) {
            this.filteredrows = this.filteredrows.slice(0, 1);
          }

          return this;
        } else {
          // our $and operation internally chains filters
          result = this.collection.chain()[property](queryObjectOp).data();

          // if this was coll.findOne() return first object or empty array if null
          // since this is invoked from a constructor we can't return null, so we will
          // make null in coll.findOne();
          if (firstOnly) {
            return (result.length === 0) ? ([]) : (result[0]);
          }

          // not first only return all results
          return result;
        }
      }

      // see if query object is in shorthand mode (assuming eq operator)
      if (queryObjectOp === null || (typeof queryObjectOp !== 'object' || queryObjectOp instanceof Date)) {
        operator = '$eq';
        value = queryObjectOp;
      } else if (typeof queryObjectOp === 'object') {
        for (key in queryObjectOp) {
          if (hasOwnProperty.call(queryObjectOp, key)) {
            operator = key;
            value = queryObjectOp[key];
            break;
          }
        }
      } else {
        throw new Error('Do not know what you want to do.');
      }

      // for regex ops, precompile
      if (operator === '$regex') {
        if (Array.isArray(value)) {
          value = new RegExp(value[0], value[1]);
        } else if (!(value instanceof RegExp)) {
          value = new RegExp(value);
        }
      }

      // if user is deep querying the object such as find('name.first': 'odin')
      var usingDotNotation = (property.indexOf('.') !== -1);

      // if an index exists for the property being queried against, use it
      // for now only enabling for non-chained query (who's set of docs matches index)
      // or chained queries where it is the first filter applied and prop is indexed
      var doIndexCheck = !usingDotNotation &&
        (!this.searchIsChained || !this.filterInitialized);

      if (doIndexCheck && this.collection.binaryIndices[property] &&
        indexedOpsList.indexOf(operator) !== -1) {
        // this is where our lazy index rebuilding will take place
        // basically we will leave all indexes dirty until we need them
        // so here we will rebuild only the index tied to this property
        // ensureIndex() will only rebuild if flagged as dirty since we are not passing force=true param
        this.collection.ensureIndex(property);

        searchByIndex = true;
        index = this.collection.binaryIndices[property];
      }

      // the comparison function
      var fun = LokiOps[operator];

      // "shortcut" for collection data
      var t = this.collection.data;
      // filter data length
      var i = 0;

      // Query executed differently depending on :
      //    - whether it is chained or not
      //    - whether the property being queried has an index defined
      //    - if chained, we handle first pass differently for initial filteredrows[] population
      //
      // For performance reasons, each case has its own if block to minimize in-loop calculations

      // If not a chained query, bypass filteredrows and work directly against data
      if (!this.searchIsChained) {
        if (!searchByIndex) {
          i = t.length;

          if (firstOnly) {
            if (usingDotNotation) {
              property = property.split('.');
              while (i--) {
                if (dotSubScan(t[i], property, fun, value)) {
                  return (t[i]);
                }
              }
            } else {
              while (i--) {
                if (fun(t[i][property], value)) {
                  return (t[i]);
                }
              }
            }

            return [];
          }

          // if using dot notation then treat property as keypath such as 'name.first'.
          // currently supporting dot notation for non-indexed conditions only
          if (usingDotNotation) {
            property = property.split('.');
            while (i--) {
              if (dotSubScan(t[i], property, fun, value)) {
                result.push(t[i]);
              }
            }
          } else {
            while (i--) {
              if (fun(t[i][property], value)) {
                result.push(t[i]);
              }
            }
          }
        } else {
          // searching by binary index via calculateRange() utility method
          var seg = this.calculateRange(operator, property, value);

          // not chained so this 'find' was designated in Resultset constructor
          // so return object itself
          if (firstOnly) {
            if (seg[1] !== -1) {
              return t[index.values[seg[0]]];
            }
            return [];
          }

          for (i = seg[0]; i <= seg[1]; i++) {
            result.push(t[index.values[i]]);
          }
        }

        // not a chained query so return result as data[]
        return result;
      }


      // Otherwise this is a chained query

      var filter, rowIdx = 0;

      // If the filteredrows[] is already initialized, use it
      if (this.filterInitialized) {
        filter = this.filteredrows;
        i = filter.length;

        // currently supporting dot notation for non-indexed conditions only
        if (usingDotNotation) {
          property = property.split('.');
          while (i--) {
            rowIdx = filter[i];
            if (dotSubScan(t[rowIdx], property, fun, value)) {
              result.push(rowIdx);
            }
          }
        } else {
          while (i--) {
            rowIdx = filter[i];
            if (fun(t[rowIdx][property], value)) {
              result.push(rowIdx);
            }
          }
        }
      }
      // first chained query so work against data[] but put results in filteredrows
      else {
        // if not searching by index
        if (!searchByIndex) {
          i = t.length;

          if (usingDotNotation) {
            property = property.split('.');
            while (i--) {
              if (dotSubScan(t[i], property, fun, value)) {
                result.push(i);
              }
            }
          } else {
            while (i--) {
              if (fun(t[i][property], value)) {
                result.push(i);
              }
            }
          }
        } else {
          // search by index
          var segm = this.calculateRange(operator, property, value);

          for (i = segm[0]; i <= segm[1]; i++) {
            result.push(index.values[i]);
          }
        }

        this.filterInitialized = true; // next time work against filteredrows[]
      }

      this.filteredrows = result;
      return this;
    };


    /**
     * where() - Used for filtering via a javascript filter function.
     *
     * @param {function} fun - A javascript function used for filtering current results by.
     * @returns {Resultset} this resultset for further chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.where = function (fun) {
      var viewFunction,
        result = [];

      if ('function' === typeof fun) {
        viewFunction = fun;
      } else {
        throw new TypeError('Argument is not a stored view or a function');
      }
      try {
        // if not a chained query then run directly against data[] and return object []
        if (!this.searchIsChained) {
          var i = this.collection.data.length;

          while (i--) {
            if (viewFunction(this.collection.data[i]) === true) {
              result.push(this.collection.data[i]);
            }
          }

          // not a chained query so returning result as data[]
          return result;
        }
        // else chained query, so run against filteredrows
        else {
          // If the filteredrows[] is already initialized, use it
          if (this.filterInitialized) {
            var j = this.filteredrows.length;

            while (j--) {
              if (viewFunction(this.collection.data[this.filteredrows[j]]) === true) {
                result.push(this.filteredrows[j]);
              }
            }

            this.filteredrows = result;

            return this;
          }
          // otherwise this is initial chained op, work against data, push into filteredrows[]
          else {
            var k = this.collection.data.length;

            while (k--) {
              if (viewFunction(this.collection.data[k]) === true) {
                result.push(k);
              }
            }

            this.filteredrows = result;
            this.filterInitialized = true;

            return this;
          }
        }
      } catch (err) {
        throw err;
      }
    };

    /**
     * count() - returns the number of documents in the resultset.
     *
     * @returns {number} The number of documents in the resultset.
     * @memberof Resultset
     */
    Resultset.prototype.count = function () {
      if (this.searchIsChained && this.filterInitialized) {
        return this.filteredrows.length;
      }
      return this.collection.count();
    };

    /**
     * Terminates the chain and returns array of filtered documents
     *
     * @param {object=} options - allows specifying 'forceClones' and 'forceCloneMethod' options.
     * @param {boolean} options.forceClones - Allows forcing the return of cloned objects even when
     *        the collection is not configured for clone object.
     * @param {string} options.forceCloneMethod - Allows overriding the default or collection specified cloning method.
     *        Possible values include 'parse-stringify', 'jquery-extend-deep', and 'shallow'
     *
     * @returns {array} Array of documents in the resultset
     * @memberof Resultset
     */
    Resultset.prototype.data = function (options) {
      var result = [],
        data = this.collection.data,
        len,
        i,
        method;

      options = options || {};

      // if this is chained resultset with no filters applied, just return collection.data
      if (this.searchIsChained && !this.filterInitialized) {
        if (this.filteredrows.length === 0) {
          // determine whether we need to clone objects or not
          if (this.collection.cloneObjects || options.forceClones) {
            len = data.length;
            method = options.forceCloneMethod || this.collection.cloneMethod;

            for (i = 0; i < len; i++) {
              result.push(clone(data[i], method));
            }
            return result;
          }
          // otherwise we are not cloning so return sliced array with same object references
          else {
            return data.slice();
          }
        } else {
          // filteredrows must have been set manually, so use it
          this.filterInitialized = true;
        }
      }

      var fr = this.filteredrows;
      len = fr.length;

      if (this.collection.cloneObjects || options.forceClones) {
        method = options.forceCloneMethod || this.collection.cloneMethod;
        for (i = 0; i < len; i++) {
          result.push(clone(data[fr[i]], method));
        }
      } else {
        for (i = 0; i < len; i++) {
          result.push(data[fr[i]]);
        }
      }
      return result;
    };

    /**
     * Used to run an update operation on all documents currently in the resultset.
     *
     * @param {function} updateFunction - User supplied updateFunction(obj) will be executed for each document object.
     * @returns {Resultset} this resultset for further chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.update = function (updateFunction) {

      if (typeof (updateFunction) !== "function") {
        throw new TypeError('Argument is not a function');
      }

      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      var len = this.filteredrows.length,
        rcd = this.collection.data;

      for (var idx = 0; idx < len; idx++) {
        // pass in each document object currently in resultset to user supplied updateFunction
        updateFunction(rcd[this.filteredrows[idx]]);

        // notify collection we have changed this object so it can update meta and allow DynamicViews to re-evaluate
        this.collection.update(rcd[this.filteredrows[idx]]);
      }

      return this;
    };

    /**
     * Removes all document objects which are currently in resultset from collection (as well as resultset)
     *
     * @returns {Resultset} this (empty) resultset for further chain ops.
     * @memberof Resultset
     */
    Resultset.prototype.remove = function () {

      // if this is chained resultset with no filters applied, we need to populate filteredrows first
      if (this.searchIsChained && !this.filterInitialized && this.filteredrows.length === 0) {
        this.filteredrows = this.collection.prepareFullDocIndex();
      }

      this.collection.remove(this.data());

      this.filteredrows = [];

      return this;
    };

    /**
     * data transformation via user supplied functions
     *
     * @param {function} mapFunction - this function accepts a single document for you to transform and return
     * @param {function} reduceFunction - this function accepts many (array of map outputs) and returns single value
     * @returns {value} The output of your reduceFunction
     * @memberof Resultset
     */
    Resultset.prototype.mapReduce = function (mapFunction, reduceFunction) {
      try {
        return reduceFunction(this.data().map(mapFunction));
      } catch (err) {
        throw err;
      }
    };

    /**
     * eqJoin() - Left joining two sets of data. Join keys can be defined or calculated properties
     * eqJoin expects the right join key values to be unique.  Otherwise left data will be joined on the last joinData object with that key
     * @param {Array} joinData - Data array to join to.
     * @param {(string|function)} leftJoinKey - Property name in this result set to join on or a function to produce a value to join on
     * @param {(string|function)} rightJoinKey - Property name in the joinData to join on or a function to produce a value to join on
     * @param {function=} mapFun - (Optional) A function that receives each matching pair and maps them into output objects - function(left,right){return joinedObject}
     * @returns {Resultset} A resultset with data in the format [{left: leftObj, right: rightObj}]
     * @memberof Resultset
     */
    Resultset.prototype.eqJoin = function (joinData, leftJoinKey, rightJoinKey, mapFun) {

      var leftData = [],
        leftDataLength,
        rightData = [],
        rightDataLength,
        key,
        result = [],
        leftKeyisFunction = typeof leftJoinKey === 'function',
        rightKeyisFunction = typeof rightJoinKey === 'function',
        joinMap = {};

      //get the left data
      leftData = this.data();
      leftDataLength = leftData.length;

      //get the right data
      if (joinData instanceof Resultset) {
        rightData = joinData.data();
      } else if (Array.isArray(joinData)) {
        rightData = joinData;
      } else {
        throw new TypeError('joinData needs to be an array or result set');
      }
      rightDataLength = rightData.length;

      //construct a lookup table

      for (var i = 0; i < rightDataLength; i++) {
        key = rightKeyisFunction ? rightJoinKey(rightData[i]) : rightData[i][rightJoinKey];
        joinMap[key] = rightData[i];
      }

      if (!mapFun) {
        mapFun = function (left, right) {
          return {
            left: left,
            right: right
          };
        };
      }

      //Run map function over each object in the resultset
      for (var j = 0; j < leftDataLength; j++) {
        key = leftKeyisFunction ? leftJoinKey(leftData[j]) : leftData[j][leftJoinKey];
        result.push(mapFun(leftData[j], joinMap[key] || {}));
      }

      //return return a new resultset with no filters
      this.collection = new Collection('joinData');
      this.collection.insert(result);
      this.filteredrows = [];
      this.filterInitialized = false;

      return this;
    };

    Resultset.prototype.map = function (mapFun) {
      var data = this.data().map(mapFun);
      //return return a new resultset with no filters
      this.collection = new Collection('mappedData');
      this.collection.insert(data);
      this.filteredrows = [];
      this.filterInitialized = false;

      return this;
    };

    /**
     * DynamicView class is a versatile 'live' view class which can have filters and sorts applied.
     *    Collection.addDynamicView(name) instantiates this DynamicView object and notifies it
     *    whenever documents are add/updated/removed so it can remain up-to-date. (chainable)
     *
     * @example
     * var mydv = mycollection.addDynamicView('test');  // default is non-persistent
     * mydv.applyFind({ 'doors' : 4 });
     * mydv.applyWhere(function(obj) { return obj.name === 'Toyota'; });
     * var results = mydv.data();
     *
     * @constructor DynamicView
     * @implements LokiEventEmitter
     * @param {Collection} collection - A reference to the collection to work against
     * @param {string} name - The name of this dynamic view
     * @param {object=} options - (Optional) Pass in object with 'persistent' and/or 'sortPriority' options.
     * @param {boolean} options.persistent - indicates if view is to main internal results array in 'resultdata'
     * @param {string} options.sortPriority - 'passive' (sorts performed on call to data) or 'active' (after updates)
     * @param {number} options.minRebuildInterval - minimum rebuild interval (need clarification to docs here)
     * @see {@link Collection#addDynamicView} to construct instances of DynamicView
     */
    function DynamicView(collection, name, options) {
      this.collection = collection;
      this.name = name;
      this.rebuildPending = false;
      this.options = options || {};

      if (!this.options.hasOwnProperty('persistent')) {
        this.options.persistent = false;
      }

      // 'persistentSortPriority':
      // 'passive' will defer the sort phase until they call data(). (most efficient overall)
      // 'active' will sort async whenever next idle. (prioritizes read speeds)
      if (!this.options.hasOwnProperty('sortPriority')) {
        this.options.sortPriority = 'passive';
      }

      if (!this.options.hasOwnProperty('minRebuildInterval')) {
        this.options.minRebuildInterval = 1;
      }

      this.resultset = new Resultset(collection);
      this.resultdata = [];
      this.resultsdirty = false;

      this.cachedresultset = null;

      // keep ordered filter pipeline
      this.filterPipeline = [];

      // sorting member variables
      // we only support one active search, applied using applySort() or applySimpleSort()
      this.sortFunction = null;
      this.sortCriteria = null;
      this.sortDirty = false;

      // for now just have 1 event for when we finally rebuilt lazy view
      // once we refactor transactions, i will tie in certain transactional events

      this.events = {
        'rebuild': []
      };
    }

    DynamicView.prototype = new LokiEventEmitter();


    /**
     * rematerialize() - intended for use immediately after deserialization (loading)
     *    This will clear out and reapply filterPipeline ops, recreating the view.
     *    Since where filters do not persist correctly, this method allows
     *    restoring the view to state where user can re-apply those where filters.
     *
     * @param {Object=} options - (Optional) allows specification of 'removeWhereFilters' option
     * @returns {DynamicView} This dynamic view for further chained ops.
     * @memberof DynamicView
     * @fires DynamicView.rebuild
     */
    DynamicView.prototype.rematerialize = function (options) {
      var fpl,
        fpi,
        idx;

      options = options || {};

      this.resultdata = [];
      this.resultsdirty = true;
      this.resultset = new Resultset(this.collection);

      if (this.sortFunction || this.sortCriteria) {
        this.sortDirty = true;
      }

      if (options.hasOwnProperty('removeWhereFilters')) {
        // for each view see if it had any where filters applied... since they don't
        // serialize those functions lets remove those invalid filters
        fpl = this.filterPipeline.length;
        fpi = fpl;
        while (fpi--) {
          if (this.filterPipeline[fpi].type === 'where') {
            if (fpi !== this.filterPipeline.length - 1) {
              this.filterPipeline[fpi] = this.filterPipeline[this.filterPipeline.length - 1];
            }

            this.filterPipeline.length--;
          }
        }
      }

      // back up old filter pipeline, clear filter pipeline, and reapply pipeline ops
      var ofp = this.filterPipeline;
      this.filterPipeline = [];

      // now re-apply 'find' filterPipeline ops
      fpl = ofp.length;
      for (idx = 0; idx < fpl; idx++) {
        this.applyFind(ofp[idx].val);
      }

      // during creation of unit tests, i will remove this forced refresh and leave lazy
      this.data();

      // emit rebuild event in case user wants to be notified
      this.emit('rebuild', this);

      return this;
    };

    /**
     * branchResultset() - Makes a copy of the internal resultset for branched queries.
     *    Unlike this dynamic view, the branched resultset will not be 'live' updated,
     *    so your branched query should be immediately resolved and not held for future evaluation.
     *
     * @param {(string|array=)} transform - Optional name of collection transform, or an array of transform steps
     * @param {object=} parameters - optional parameters (if optional transform requires them)
     * @returns {Resultset} A copy of the internal resultset for branched queries.
     * @memberof DynamicView
     */
    DynamicView.prototype.branchResultset = function (transform, parameters) {
      var rs = this.resultset.branch();

      if (typeof transform === 'undefined') {
        return rs;
      }

      return rs.transform(transform, parameters);
    };

    /**
     * toJSON() - Override of toJSON to avoid circular references
     *
     */
    DynamicView.prototype.toJSON = function () {
      var copy = new DynamicView(this.collection, this.name, this.options);

      copy.resultset = this.resultset;
      copy.resultdata = []; // let's not save data (copy) to minimize size
      copy.resultsdirty = true;
      copy.filterPipeline = this.filterPipeline;
      copy.sortFunction = this.sortFunction;
      copy.sortCriteria = this.sortCriteria;
      copy.sortDirty = this.sortDirty;

      // avoid circular reference, reapply in db.loadJSON()
      copy.collection = null;

      return copy;
    };

    /**
     * removeFilters() - Used to clear pipeline and reset dynamic view to initial state.
     *     Existing options should be retained.
     * @memberof DynamicView
     */
    DynamicView.prototype.removeFilters = function () {
      this.rebuildPending = false;
      this.resultset.reset();
      this.resultdata = [];
      this.resultsdirty = false;

      this.cachedresultset = null;

      // keep ordered filter pipeline
      this.filterPipeline = [];

      // sorting member variables
      // we only support one active search, applied using applySort() or applySimpleSort()
      this.sortFunction = null;
      this.sortCriteria = null;
      this.sortDirty = false;
    };

    /**
     * applySort() - Used to apply a sort to the dynamic view
     * @example
     * dv.applySort(function(obj1, obj2) {
     *   if (obj1.name === obj2.name) return 0;
     *   if (obj1.name > obj2.name) return 1;
     *   if (obj1.name < obj2.name) return -1;
     * });
     *
     * @param {function} comparefun - a javascript compare function used for sorting
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applySort = function (comparefun) {
      this.sortFunction = comparefun;
      this.sortCriteria = null;

      this.queueSortPhase();

      return this;
    };

    /**
     * applySimpleSort() - Used to specify a property used for view translation.
     * @example
     * dv.applySimpleSort("name");
     *
     * @param {string} propname - Name of property by which to sort.
     * @param {boolean=} isdesc - (Optional) If true, the sort will be in descending order.
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applySimpleSort = function (propname, isdesc) {
      this.sortCriteria = [
        [propname, isdesc || false]
      ];
      this.sortFunction = null;

      this.queueSortPhase();

      return this;
    };

    /**
     * applySortCriteria() - Allows sorting a resultset based on multiple columns.
     * @example
     * // to sort by age and then name (both ascending)
     * dv.applySortCriteria(['age', 'name']);
     * // to sort by age (ascending) and then by name (descending)
     * dv.applySortCriteria(['age', ['name', true]);
     * // to sort by age (descending) and then by name (descending)
     * dv.applySortCriteria(['age', true], ['name', true]);
     *
     * @param {array} properties - array of property names or subarray of [propertyname, isdesc] used evaluate sort order
     * @returns {DynamicView} Reference to this DynamicView, sorted, for future chain operations.
     * @memberof DynamicView
     */
    DynamicView.prototype.applySortCriteria = function (criteria) {
      this.sortCriteria = criteria;
      this.sortFunction = null;

      this.queueSortPhase();

      return this;
    };

    /**
     * startTransaction() - marks the beginning of a transaction.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.startTransaction = function () {
      this.cachedresultset = this.resultset.copy();

      return this;
    };

    /**
     * commit() - commits a transaction.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.commit = function () {
      this.cachedresultset = null;

      return this;
    };

    /**
     * rollback() - rolls back a transaction.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.rollback = function () {
      this.resultset = this.cachedresultset;

      if (this.options.persistent) {
        // for now just rebuild the persistent dynamic view data in this worst case scenario
        // (a persistent view utilizing transactions which get rolled back), we already know the filter so not too bad.
        this.resultdata = this.resultset.data();

        this.emit('rebuild', this);
      }

      return this;
    };


    /**
     * Implementation detail.
     * _indexOfFilterWithId() - Find the index of a filter in the pipeline, by that filter's ID.
     *
     * @param {(string|number)} uid - The unique ID of the filter.
     * @returns {number}: index of the referenced filter in the pipeline; -1 if not found.
     */
    DynamicView.prototype._indexOfFilterWithId = function (uid) {
      if (typeof uid === 'string' || typeof uid === 'number') {
        for (var idx = 0, len = this.filterPipeline.length; idx < len; idx += 1) {
          if (uid === this.filterPipeline[idx].uid) {
            return idx;
          }
        }
      }
      return -1;
    };

    /**
     * Implementation detail.
     * _addFilter() - Add the filter object to the end of view's filter pipeline and apply the filter to the resultset.
     *
     * @param {object} filter - The filter object. Refer to applyFilter() for extra details.
     */
    DynamicView.prototype._addFilter = function (filter) {
      this.filterPipeline.push(filter);
      this.resultset[filter.type](filter.val);
    };

    /**
     * reapplyFilters() - Reapply all the filters in the current pipeline.
     *
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     */
    DynamicView.prototype.reapplyFilters = function () {
      this.resultset.reset();

      this.cachedresultset = null;
      if (this.options.persistent) {
        this.resultdata = [];
        this.resultsdirty = true;
      }

      var filters = this.filterPipeline;
      this.filterPipeline = [];

      for (var idx = 0, len = filters.length; idx < len; idx += 1) {
        this._addFilter(filters[idx]);
      }

      if (this.sortFunction || this.sortCriteria) {
        this.queueSortPhase();
      } else {
        this.queueRebuildEvent();
      }

      return this;
    };

    /**
     * applyFilter() - Adds or updates a filter in the DynamicView filter pipeline
     *
     * @param {object} filter - A filter object to add to the pipeline.
     *    The object is in the format { 'type': filter_type, 'val', filter_param, 'uid', optional_filter_id }
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applyFilter = function (filter) {
      var idx = this._indexOfFilterWithId(filter.uid);
      if (idx >= 0) {
        this.filterPipeline[idx] = filter;
        return this.reapplyFilters();
      }

      this.cachedresultset = null;
      if (this.options.persistent) {
        this.resultdata = [];
        this.resultsdirty = true;
      }

      this._addFilter(filter);

      if (this.sortFunction || this.sortCriteria) {
        this.queueSortPhase();
      } else {
        this.queueRebuildEvent();
      }

      return this;
    };

    /**
     * applyFind() - Adds or updates a mongo-style query option in the DynamicView filter pipeline
     *
     * @param {object} query - A mongo-style query object to apply to pipeline
     * @param {(string|number)=} uid - Optional: The unique ID of this filter, to reference it in the future.
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applyFind = function (query, uid) {
      this.applyFilter({
        type: 'find',
        val: query,
        uid: uid
      });
      return this;
    };

    /**
     * applyWhere() - Adds or updates a javascript filter function in the DynamicView filter pipeline
     *
     * @param {function} fun - A javascript filter function to apply to pipeline
     * @param {(string|number)=} uid - Optional: The unique ID of this filter, to reference it in the future.
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.applyWhere = function (fun, uid) {
      this.applyFilter({
        type: 'where',
        val: fun,
        uid: uid
      });
      return this;
    };

    /**
     * removeFilter() - Remove the specified filter from the DynamicView filter pipeline
     *
     * @param {(string|number)} uid - The unique ID of the filter to be removed.
     * @returns {DynamicView} this DynamicView object, for further chain ops.
     * @memberof DynamicView
     */
    DynamicView.prototype.removeFilter = function (uid) {
      var idx = this._indexOfFilterWithId(uid);
      if (idx < 0) {
        throw new Error("Dynamic view does not contain a filter with ID: " + uid);
      }

      this.filterPipeline.splice(idx, 1);
      this.reapplyFilters();
      return this;
    };

    /**
     * count() - returns the number of documents representing the current DynamicView contents.
     *
     * @returns {number} The number of documents representing the current DynamicView contents.
     * @memberof DynamicView
     */
    DynamicView.prototype.count = function () {
      if (this.options.persistent) {
        return this.resultdata.length;
      }
      return this.resultset.count();
    };

    /**
     * data() - resolves and pending filtering and sorting, then returns document array as result.
     *
     * @returns {array} An array of documents representing the current DynamicView contents.
     * @memberof DynamicView
     */
    DynamicView.prototype.data = function () {
      // using final sort phase as 'catch all' for a few use cases which require full rebuild
      if (this.sortDirty || this.resultsdirty) {
        this.performSortPhase({
          suppressRebuildEvent: true
        });
      }
      return (this.options.persistent) ? (this.resultdata) : (this.resultset.data());
    };

    /**
     * queueRebuildEvent() - When the view is not sorted we may still wish to be notified of rebuild events.
     *     This event will throttle and queue a single rebuild event when batches of updates affect the view.
     */
    DynamicView.prototype.queueRebuildEvent = function () {
      if (this.rebuildPending) {
        return;
      }
      this.rebuildPending = true;

      var self = this;
      setTimeout(function () {
        if (self.rebuildPending) {
          self.rebuildPending = false;
          self.emit('rebuild', self);
        }
      }, this.options.minRebuildInterval);
    };

    /**
     * queueSortPhase : If the view is sorted we will throttle sorting to either :
     *    (1) passive - when the user calls data(), or
     *    (2) active - once they stop updating and yield js thread control
     */
    DynamicView.prototype.queueSortPhase = function () {
      // already queued? exit without queuing again
      if (this.sortDirty) {
        return;
      }
      this.sortDirty = true;

      var self = this;
      if (this.options.sortPriority === "active") {
        // active sorting... once they are done and yield js thread, run async performSortPhase()
        setTimeout(function () {
          self.performSortPhase();
        }, this.options.minRebuildInterval);
      } else {
        // must be passive sorting... since not calling performSortPhase (until data call), lets use queueRebuildEvent to
        // potentially notify user that data has changed.
        this.queueRebuildEvent();
      }
    };

    /**
     * performSortPhase() - invoked synchronously or asynchronously to perform final sort phase (if needed)
     *
     */
    DynamicView.prototype.performSortPhase = function (options) {
      // async call to this may have been pre-empted by synchronous call to data before async could fire
      if (!this.sortDirty && !this.resultsdirty) {
        return;
      }

      options = options || {};

      if (this.sortDirty) {
        if (this.sortFunction) {
          this.resultset.sort(this.sortFunction);
        } else if (this.sortCriteria) {
          this.resultset.compoundsort(this.sortCriteria);
        }

        this.sortDirty = false;
      }

      if (this.options.persistent) {
        // persistent view, rebuild local resultdata array
        this.resultdata = this.resultset.data();
        this.resultsdirty = false;
      }

      if (!options.suppressRebuildEvent) {
        this.emit('rebuild', this);
      }
    };

    /**
     * evaluateDocument() - internal method for (re)evaluating document inclusion.
     *    Called by : collection.insert() and collection.update().
     *
     * @param {int} objIndex - index of document to (re)run through filter pipeline.
     * @param {bool} isNew - true if the document was just added to the collection.
     */
    DynamicView.prototype.evaluateDocument = function (objIndex, isNew) {
      // if no filter applied yet, the result 'set' should remain 'everything'
      if (!this.resultset.filterInitialized) {
        if (this.options.persistent) {
          this.resultdata = this.resultset.data();
        }
        // need to re-sort to sort new document
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }
        return;
      }

      var ofr = this.resultset.filteredrows;
      var oldPos = (isNew) ? (-1) : (ofr.indexOf(+objIndex));
      var oldlen = ofr.length;

      // creating a 1-element resultset to run filter chain ops on to see if that doc passes filters;
      // mostly efficient algorithm, slight stack overhead price (this function is called on inserts and updates)
      var evalResultset = new Resultset(this.collection);
      evalResultset.filteredrows = [objIndex];
      evalResultset.filterInitialized = true;
      var filter;
      for (var idx = 0, len = this.filterPipeline.length; idx < len; idx++) {
        filter = this.filterPipeline[idx];
        evalResultset[filter.type](filter.val);
      }

      // not a true position, but -1 if not pass our filter(s), 0 if passed filter(s)
      var newPos = (evalResultset.filteredrows.length === 0) ? -1 : 0;

      // wasn't in old, shouldn't be now... do nothing
      if (oldPos === -1 && newPos === -1) return;

      // wasn't in resultset, should be now... add
      if (oldPos === -1 && newPos !== -1) {
        ofr.push(objIndex);

        if (this.options.persistent) {
          this.resultdata.push(this.collection.data[objIndex]);
        }

        // need to re-sort to sort new document
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }

        return;
      }

      // was in resultset, shouldn't be now... delete
      if (oldPos !== -1 && newPos === -1) {
        if (oldPos < oldlen - 1) {
          // http://dvolvr.davidwaterston.com/2013/06/09/restating-the-obvious-the-fastest-way-to-truncate-an-array-in-javascript/comment-page-1/
          ofr[oldPos] = ofr[oldlen - 1];
          ofr.length = oldlen - 1;

          if (this.options.persistent) {
            this.resultdata[oldPos] = this.resultdata[oldlen - 1];
            this.resultdata.length = oldlen - 1;
          }
        } else {
          ofr.length = oldlen - 1;

          if (this.options.persistent) {
            this.resultdata.length = oldlen - 1;
          }
        }

        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }

        return;
      }

      // was in resultset, should still be now... (update persistent only?)
      if (oldPos !== -1 && newPos !== -1) {
        if (this.options.persistent) {
          // in case document changed, replace persistent view data with the latest collection.data document
          this.resultdata[oldPos] = this.collection.data[objIndex];
        }

        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }

        return;
      }
    };

    /**
     * removeDocument() - internal function called on collection.delete()
     */
    DynamicView.prototype.removeDocument = function (objIndex) {
      // if no filter applied yet, the result 'set' should remain 'everything'
      if (!this.resultset.filterInitialized) {
        if (this.options.persistent) {
          this.resultdata = this.resultset.data();
        }
        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }
        return;
      }

      var ofr = this.resultset.filteredrows;
      var oldPos = ofr.indexOf(+objIndex);
      var oldlen = ofr.length;
      var idx;

      if (oldPos !== -1) {
        // if not last row in resultdata, swap last to hole and truncate last row
        if (oldPos < oldlen - 1) {
          ofr[oldPos] = ofr[oldlen - 1];
          ofr.length = oldlen - 1;

          if (this.options.persistent) {
            this.resultdata[oldPos] = this.resultdata[oldlen - 1];
            this.resultdata.length = oldlen - 1;
          }
        }
        // last row, so just truncate last row
        else {
          ofr.length = oldlen - 1;

          if (this.options.persistent) {
            this.resultdata.length = oldlen - 1;
          }
        }

        // in case changes to data altered a sort column
        if (this.sortFunction || this.sortCriteria) {
          this.queueSortPhase();
        } else {
          this.queueRebuildEvent();
        }
      }

      // since we are using filteredrows to store data array positions
      // if they remove a document (whether in our view or not),
      // we need to adjust array positions -1 for all document array references after that position
      oldlen = ofr.length;
      for (idx = 0; idx < oldlen; idx++) {
        if (ofr[idx] > objIndex) {
          ofr[idx]--;
        }
      }
    };

    /**
     * mapReduce() - data transformation via user supplied functions
     *
     * @param {function} mapFunction - this function accepts a single document for you to transform and return
     * @param {function} reduceFunction - this function accepts many (array of map outputs) and returns single value
     * @returns The output of your reduceFunction
     * @memberof DynamicView
     */
    DynamicView.prototype.mapReduce = function (mapFunction, reduceFunction) {
      try {
        return reduceFunction(this.data().map(mapFunction));
      } catch (err) {
        throw err;
      }
    };


    /**
     * Collection class that handles documents of same type
     * @constructor Collection
     * @implements LokiEventEmitter
     * @param {string} name - collection name
     * @param {(array|object)=} options - (optional) array of property names to be indicized OR a configuration object
     * @param {array} options.unique - array of property names to define unique constraints for
     * @param {array} options.exact - array of property names to define exact constraints for
     * @param {array} options.indices - array property names to define binary indexes for
     * @param {boolean} options.asyncListeners - default is false
     * @param {boolean} options.disableChangesApi - default is true
     * @param {boolean} options.autoupdate - use Object.observe to update objects automatically (default: false)
     * @param {boolean} options.clone - specify whether inserts and queries clone to/from user
     * @param {string} options.cloneMethod - 'parse-stringify' (default), 'jquery-extend-deep', 'shallow'
     * @param {int} options.ttlInterval - time interval for clearing out 'aged' documents; not set by default.
     * @see {@link Loki#addCollection} for normal creation of collections
     */
    function Collection(name, options) {
      // the name of the collection

      this.name = name;
      // the data held by the collection
      this.data = [];
      this.idIndex = []; // index of id
      this.binaryIndices = {}; // user defined indexes
      this.constraints = {
        unique: {},
        exact: {}
      };

      // unique contraints contain duplicate object references, so they are not persisted.
      // we will keep track of properties which have unique contraint applied here, and regenerate on load
      this.uniqueNames = [];

      // transforms will be used to store frequently used query chains as a series of steps
      // which itself can be stored along with the database.
      this.transforms = {};

      // the object type of the collection
      this.objType = name;

      // in autosave scenarios we will use collection level dirty flags to determine whether save is needed.
      // currently, if any collection is dirty we will autosave the whole database if autosave is configured.
      // defaulting to true since this is called from addCollection and adding a collection should trigger save
      this.dirty = true;

      // private holders for cached data
      this.cachedIndex = null;
      this.cachedBinaryIndex = null;
      this.cachedData = null;
      var self = this;

      /* OPTIONS */
      options = options || {};

      // exact match and unique constraints
      if (options.hasOwnProperty('unique')) {
        if (!Array.isArray(options.unique)) {
          options.unique = [options.unique];
        }
        options.unique.forEach(function (prop) {
          self.uniqueNames.push(prop); // used to regenerate on subsequent database loads
          self.constraints.unique[prop] = new UniqueIndex(prop);
        });
      }

      if (options.hasOwnProperty('exact')) {
        options.exact.forEach(function (prop) {
          self.constraints.exact[prop] = new ExactIndex(prop);
        });
      }

      // is collection transactional
      this.transactional = options.hasOwnProperty('transactional') ? options.transactional : false;

      // options to clone objects when inserting them
      this.cloneObjects = options.hasOwnProperty('clone') ? options.clone : false;

      // default clone method (if enabled) is parse-stringify
      this.cloneMethod = options.hasOwnProperty('cloneMethod') ? options.cloneMethod : "parse-stringify";

      // option to make event listeners async, default is sync
      this.asyncListeners = options.hasOwnProperty('asyncListeners') ? options.asyncListeners : false;

      // disable track changes
      this.disableChangesApi = options.hasOwnProperty('disableChangesApi') ? options.disableChangesApi : true;

      // option to observe objects and update them automatically, ignored if Object.observe is not supported
      this.autoupdate = options.hasOwnProperty('autoupdate') ? options.autoupdate : false;

      //option to activate a cleaner daemon - clears "aged" documents at set intervals.
      this.ttl = {
        age: null,
        ttlInterval: null,
        daemon: null
      };
      this.setTTL(options.ttl || -1, options.ttlInterval);

      // currentMaxId - change manually at your own peril!
      this.maxId = 0;

      this.DynamicViews = [];

      // events
      this.events = {
        'insert': [],
        'update': [],
        'pre-insert': [],
        'pre-update': [],
        'close': [],
        'flushbuffer': [],
        'error': [],
        'delete': [],
        'warning': []
      };

      // changes are tracked by collection and aggregated by the db
      this.changes = [];

      // initialize the id index
      this.ensureId();
      var indices = [];
      // initialize optional user-supplied indices array ['age', 'lname', 'zip']
      if (options && options.indices) {
        if (Object.prototype.toString.call(options.indices) === '[object Array]') {
          indices = options.indices;
        } else if (typeof options.indices === 'string') {
          indices = [options.indices];
        } else {
          throw new TypeError('Indices needs to be a string or an array of strings');
        }
      }

      for (var idx = 0; idx < indices.length; idx++) {
        this.ensureIndex(indices[idx]);
      }

      function observerCallback(changes) {

        var changedObjects = typeof Set === 'function' ? new Set() : [];

        if (!changedObjects.add)
          changedObjects.add = function (object) {
            if (this.indexOf(object) === -1)
              this.push(object);
            return this;
          };

        changes.forEach(function (change) {
          changedObjects.add(change.object);
        });

        changedObjects.forEach(function (object) {
          if (!hasOwnProperty.call(object, '$loki'))
            return self.removeAutoUpdateObserver(object);
          try {
            self.update(object);
          } catch (err) {}
        });
      }

      this.observerCallback = observerCallback;

      /*
       * This method creates a clone of the current status of an object and associates operation and collection name,
       * so the parent db can aggregate and generate a changes object for the entire db
       */
      function createChange(name, op, obj) {
        self.changes.push({
          name: name,
          operation: op,
          obj: JSON.parse(JSON.stringify(obj))
        });
      }

      // clear all the changes
      function flushChanges() {
        self.changes = [];
      }

      this.getChanges = function () {
        return self.changes;
      };

      this.flushChanges = flushChanges;

      /**
       * If the changes API is disabled make sure only metadata is added without re-evaluating everytime if the changesApi is enabled
       */
      function insertMeta(obj) {
        if (!obj) {
          return;
        }
        if (!obj.meta) {
          obj.meta = {};
        }

        obj.meta.created = (new Date()).getTime();
        obj.meta.revision = 0;
      }

      function updateMeta(obj) {
        if (!obj) {
          return;
        }
        obj.meta.updated = (new Date()).getTime();
        obj.meta.revision += 1;
      }

      function createInsertChange(obj) {
        createChange(self.name, 'I', obj);
      }

      function createUpdateChange(obj) {
        createChange(self.name, 'U', obj);
      }

      function insertMetaWithChange(obj) {
        insertMeta(obj);
        createInsertChange(obj);
      }

      function updateMetaWithChange(obj) {
        updateMeta(obj);
        createUpdateChange(obj);
      }


      /* assign correct handler based on ChangesAPI flag */
      var insertHandler, updateHandler;

      function setHandlers() {
        insertHandler = self.disableChangesApi ? insertMeta : insertMetaWithChange;
        updateHandler = self.disableChangesApi ? updateMeta : updateMetaWithChange;
      }

      setHandlers();

      this.setChangesApi = function (enabled) {
        self.disableChangesApi = !enabled;
        setHandlers();
      };
      /**
       * built-in events
       */
      this.on('insert', function insertCallback(obj) {
        insertHandler(obj);
      });

      this.on('update', function updateCallback(obj) {
        updateHandler(obj);
      });

      this.on('delete', function deleteCallback(obj) {
        if (!self.disableChangesApi) {
          createChange(self.name, 'R', obj);
        }
      });

      this.on('warning', function (warning) {
        self.console.warn(warning);
      });
      // for de-serialization purposes
      flushChanges();
    }

    Collection.prototype = new LokiEventEmitter();

    Collection.prototype.console = {
      log: function () {},
      warn: function () {},
      error: function () {},
    };

    Collection.prototype.addAutoUpdateObserver = function (object) {
      if (!this.autoupdate || typeof Object.observe !== 'function')
        return;

      Object.observe(object, this.observerCallback, ['add', 'update', 'delete', 'reconfigure', 'setPrototype']);
    };

    Collection.prototype.removeAutoUpdateObserver = function (object) {
      if (!this.autoupdate || typeof Object.observe !== 'function')
        return;

      Object.unobserve(object, this.observerCallback);
    };

    /**
     * Adds a named collection transform to the collection
     * @param {string} name - name to associate with transform
     * @param {array} transform - an array of transformation 'step' objects to save into the collection
     * @memberof Collection
     */
    Collection.prototype.addTransform = function (name, transform) {
      if (this.transforms.hasOwnProperty(name)) {
        throw new Error("a transform by that name already exists");
      }

      this.transforms[name] = transform;
    };

    /**
     * Updates a named collection transform to the collection
     * @param {string} name - name to associate with transform
     * @param {object} transform - a transformation object to save into collection
     * @memberof Collection
     */
    Collection.prototype.setTransform = function (name, transform) {
      this.transforms[name] = transform;
    };

    /**
     * Removes a named collection transform from the collection
     * @param {string} name - name of collection transform to remove
     * @memberof Collection
     */
    Collection.prototype.removeTransform = function (name) {
      delete this.transforms[name];
    };

    Collection.prototype.byExample = function (template) {
      var k, obj, query;
      query = [];
      for (k in template) {
        if (!template.hasOwnProperty(k)) continue;
        query.push((
          obj = {},
          obj[k] = template[k],
          obj
        ));
      }
      return {
        '$and': query
      };
    };

    Collection.prototype.findObject = function (template) {
      return this.findOne(this.byExample(template));
    };

    Collection.prototype.findObjects = function (template) {
      return this.find(this.byExample(template));
    };

    /*----------------------------+
    | TTL daemon                  |
    +----------------------------*/
    Collection.prototype.ttlDaemonFuncGen = function () {
      var collection = this;
      var age = this.ttl.age;
      return function ttlDaemon() {
        var now = Date.now();
        var toRemove = collection.chain().where(function daemonFilter(member) {
          var timestamp = member.meta.updated || member.meta.created;
          var diff = now - timestamp;
          return age < diff;
        });
        toRemove.remove();
      };
    };

    Collection.prototype.setTTL = function (age, interval) {
      if (age < 0) {
        clearInterval(this.ttl.daemon);
      } else {
        this.ttl.age = age;
        this.ttl.ttlInterval = interval;
        this.ttl.daemon = setInterval(this.ttlDaemonFuncGen(), interval);
      }
    };

    /*----------------------------+
    | INDEXING                    |
    +----------------------------*/

    /**
     * create a row filter that covers all documents in the collection
     */
    Collection.prototype.prepareFullDocIndex = function () {
      var len = this.data.length;
      var indexes = new Array(len);
      for (var i = 0; i < len; i += 1) {
        indexes[i] = i;
      }
      return indexes;
    };

    /**
     * Ensure binary index on a certain field
     * @param {string} property - name of property to create binary index on
     * @param {boolean=} force - (Optional) flag indicating whether to construct index immediately
     * @memberof Collection
     */
    Collection.prototype.ensureIndex = function (property, force) {
      // optional parameter to force rebuild whether flagged as dirty or not
      if (typeof (force) === 'undefined') {
        force = false;
      }

      if (property === null || property === undefined) {
        throw new Error('Attempting to set index without an associated property');
      }

      if (this.binaryIndices[property] && !force) {
        if (!this.binaryIndices[property].dirty) return;
      }

      var index = {
        'name': property,
        'dirty': true,
        'values': this.prepareFullDocIndex()
      };
      this.binaryIndices[property] = index;

      var wrappedComparer =
        (function (p, data) {
          return function (a, b) {
            var objAp = data[a][p],
              objBp = data[b][p];
            if (objAp !== objBp) {
              if (ltHelper(objAp, objBp, false)) return -1;
              if (gtHelper(objAp, objBp, false)) return 1;
            }
            return 0;
          };
        })(property, this.data);

      index.values.sort(wrappedComparer);
      index.dirty = false;

      this.dirty = true; // for autosave scenarios
    };

    Collection.prototype.getSequencedIndexValues = function (property) {
      var idx, idxvals = this.binaryIndices[property].values;
      var result = "";

      for (idx = 0; idx < idxvals.length; idx++) {
        result += " [" + idx + "] " + this.data[idxvals[idx]][property];
      }

      return result;
    };

    Collection.prototype.ensureUniqueIndex = function (field) {
      var index = this.constraints.unique[field];
      if (!index) {
        // keep track of new unique index for regenerate after database (re)load.
        if (this.uniqueNames.indexOf(field) == -1) {
          this.uniqueNames.push(field);
        }
      }

      // if index already existed, (re)loading it will likely cause collisions, rebuild always
      this.constraints.unique[field] = index = new UniqueIndex(field);
      this.data.forEach(function (obj) {
        index.set(obj);
      });
      return index;
    };

    /**
     * Ensure all binary indices
     */
    Collection.prototype.ensureAllIndexes = function (force) {
      var key, bIndices = this.binaryIndices;
      for (key in bIndices) {
        if (hasOwnProperty.call(bIndices, key)) {
          this.ensureIndex(key, force);
        }
      }
    };

    Collection.prototype.flagBinaryIndexesDirty = function () {
      var key, bIndices = this.binaryIndices;
      for (key in bIndices) {
        if (hasOwnProperty.call(bIndices, key)) {
          bIndices[key].dirty = true;
        }
      }
    };

    Collection.prototype.flagBinaryIndexDirty = function (index) {
      if (this.binaryIndices[index])
        this.binaryIndices[index].dirty = true;
    };

    /**
     * Quickly determine number of documents in collection (or query)
     * @param {object=} query - (optional) query object to count results of
     * @returns {number} number of documents in the collection
     * @memberof Collection
     */
    Collection.prototype.count = function (query) {
      if (!query) {
        return this.data.length;
      }

      return this.chain().find(query).filteredrows.length;
    };

    /**
     * Rebuild idIndex
     */
    Collection.prototype.ensureId = function () {
      var len = this.data.length,
        i = 0;

      this.idIndex = [];
      for (i; i < len; i += 1) {
        this.idIndex.push(this.data[i].$loki);
      }
    };

    /**
     * Rebuild idIndex async with callback - useful for background syncing with a remote server
     */
    Collection.prototype.ensureIdAsync = function (callback) {
      this.async(function () {
        this.ensureId();
      }, callback);
    };

    /**
     * Add a dynamic view to the collection
     * @param {string} name - name of dynamic view to add
     * @param {object=} options - (optional) options to configure dynamic view with
     * @param {boolean} options.persistent - indicates if view is to main internal results array in 'resultdata'
     * @param {string} options.sortPriority - 'passive' (sorts performed on call to data) or 'active' (after updates)
     * @param {number} options.minRebuildInterval - minimum rebuild interval (need clarification to docs here)
     * @returns {DynamicView} reference to the dynamic view added
     * @memberof Collection
     **/

    Collection.prototype.addDynamicView = function (name, options) {
      var dv = new DynamicView(this, name, options);
      this.DynamicViews.push(dv);

      return dv;
    };

    /**
     * Remove a dynamic view from the collection
     * @param {string} name - name of dynamic view to remove
     * @memberof Collection
     **/
    Collection.prototype.removeDynamicView = function (name) {
      for (var idx = 0; idx < this.DynamicViews.length; idx++) {
        if (this.DynamicViews[idx].name === name) {
          this.DynamicViews.splice(idx, 1);
        }
      }
    };

    /**
     * Look up dynamic view reference from within the collection
     * @param {string} name - name of dynamic view to retrieve reference of
     * @returns {DynamicView} A reference to the dynamic view with that name
     * @memberof Collection
     **/
    Collection.prototype.getDynamicView = function (name) {
      for (var idx = 0; idx < this.DynamicViews.length; idx++) {
        if (this.DynamicViews[idx].name === name) {
          return this.DynamicViews[idx];
        }
      }

      return null;
    };

    /**
     * find and update: pass a filtering function to select elements to be updated
     * and apply the updatefunctino to those elements iteratively
     * @param {function} filterFunction - filter function whose results will execute update
     * @param {function} updateFunction - update function to run against filtered documents
     * @memberof Collection
     */
    Collection.prototype.findAndUpdate = function (filterFunction, updateFunction) {
      var results = this.where(filterFunction),
        i = 0,
        obj;
      try {
        for (i; i < results.length; i++) {
          obj = updateFunction(results[i]);
          this.update(obj);
        }

      } catch (err) {
        this.rollback();
        this.console.error(err.message);
      }
    };

    /**
     * Adds object(s) to collection, ensure object(s) have meta properties, clone it if necessary, etc.
     * @param {(object|array)} doc - the document (or array of documents) to be inserted
     * @returns {(object|array)} document or documents inserted
     * @memberof Collection
     */
    Collection.prototype.insert = function (doc) {
      if (!Array.isArray(doc)) {
        return this.insertOne(doc);
      }

      // holder to the clone of the object inserted if collections is set to clone objects
      var obj;
      var results = [];
      for (var i = 0, len = doc.length; i < len; i++) {
        obj = this.insertOne(doc[i]);
        if (!obj) {
          return undefined;
        }
        results.push(obj);
      }
      return results.length === 1 ? results[0] : results;
    };

    /**
     * Adds a single object, ensures it has meta properties, clone it if necessary, etc.
     * @param {object} doc - the document to be inserted
     * @returns {object} document or 'undefined' if there was a problem inserting it
     * @memberof Collection
     */
    Collection.prototype.insertOne = function (doc) {
      var err = null;
      if (typeof doc !== 'object') {
        err = new TypeError('Document needs to be an object');
      } else if (doc === null) {
        err = new TypeError('Object cannot be null');
      }

      if (err !== null) {
        this.emit('error', err);
        throw err;
      }

      // if configured to clone, do so now... otherwise just use same obj reference
      var obj = this.cloneObjects ? clone(doc, this.cloneMethod) : doc;

      if (typeof obj.meta === 'undefined') {
        obj.meta = {
          revision: 0,
          created: 0
        };
      }

      this.emit('pre-insert', obj);
      if (!this.add(obj)) {
        return undefined;
      }

      this.addAutoUpdateObserver(obj);
      this.emit('insert', obj);
      return obj;
    };

    /**
     * Empties the collection.
     * @memberof Collection
     */
    Collection.prototype.clear = function () {
      this.data = [];
      this.idIndex = [];
      this.binaryIndices = {};
      this.cachedIndex = null;
      this.cachedBinaryIndex = null;
      this.cachedData = null;
      this.maxId = 0;
      this.DynamicViews = [];
      this.dirty = true;
    };

    /**
     * Updates an object and notifies collection that the document has changed.
     * @param {object} doc - document to update within the collection
     * @memberof Collection
     */
    Collection.prototype.update = function (doc) {
      this.flagBinaryIndexesDirty();

      if (Array.isArray(doc)) {
        var k = 0,
          len = doc.length;
        for (k; k < len; k += 1) {
          this.update(doc[k]);
        }
        return;
      }

      // verify object is a properly formed document
      if (!hasOwnProperty.call(doc, '$loki')) {
        throw new Error('Trying to update unsynced document. Please save the document first by using insert() or addMany()');
      }
      try {
        this.startTransaction();
        var arr = this.get(doc.$loki, true),
          obj,
          position,
          self = this;

        obj = arr[0]; // -internal- obj ref
        position = arr[1]; // position in data array

        if (!arr) {
          throw new Error('Trying to update a document not in collection.');
        }
        this.emit('pre-update', doc);

        Object.keys(this.constraints.unique).forEach(function (key) {
          self.constraints.unique[key].update(obj, doc);
        });

        // operate the update
        this.data[position] = doc;

        if (obj !== doc) {
          this.addAutoUpdateObserver(doc);
        }

        // now that we can efficiently determine the data[] position of newly added document,
        // submit it for all registered DynamicViews to evaluate for inclusion/exclusion
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].evaluateDocument(position, false);
        }

        this.idIndex[position] = obj.$loki;

        this.commit();
        this.dirty = true; // for autosave scenarios
        this.emit('update', doc);
        return doc;
      } catch (err) {
        this.rollback();
        this.console.error(err.message);
        this.emit('error', err);
        throw (err); // re-throw error so user does not think it succeeded
      }
    };

    /**
     * Add object to collection
     */
    Collection.prototype.add = function (obj) {
      // if parameter isn't object exit with throw
      if ('object' !== typeof obj) {
        throw new TypeError('Object being added needs to be an object');
      }
      // if object you are adding already has id column it is either already in the collection
      // or the object is carrying its own 'id' property.  If it also has a meta property,
      // then this is already in collection so throw error, otherwise rename to originalId and continue adding.
      if (typeof (obj.$loki) !== 'undefined') {
        throw new Error('Document is already in collection, please use update()');
      }

      this.flagBinaryIndexesDirty();

      /*
       * try adding object to collection
       */
      try {
        this.startTransaction();
        this.maxId++;

        if (isNaN(this.maxId)) {
          this.maxId = (this.data[this.data.length - 1].$loki + 1);
        }

        obj.$loki = this.maxId;
        obj.meta.version = 0;

        var key, constrUnique = this.constraints.unique;
        for (key in constrUnique) {
          if (hasOwnProperty.call(constrUnique, key)) {
            constrUnique[key].set(obj);
          }
        }

        // add new obj id to idIndex
        this.idIndex.push(obj.$loki);

        // add the object
        this.data.push(obj);

        // now that we can efficiently determine the data[] position of newly added document,
        // submit it for all registered DynamicViews to evaluate for inclusion/exclusion
        var addedPos = this.data.length - 1;
        var dvlen = this.DynamicViews.length;
        for (var i = 0; i < dvlen; i++) {
          this.DynamicViews[i].evaluateDocument(addedPos, true);
        }

        this.commit();
        this.dirty = true; // for autosave scenarios

        return (this.cloneObjects) ? (clone(obj, this.cloneMethod)) : (obj);
      } catch (err) {
        this.rollback();
        this.console.error(err.message);
        this.emit('error', err);
        throw (err); // re-throw error so user does not think it succeeded
      }
    };


    /**
     * Remove all documents matching supplied filter object
     * @param {object} query - query object to filter on
     * @memberof Collection
     */
    Collection.prototype.removeWhere = function (query) {
      var list;
      if (typeof query === 'function') {
        list = this.data.filter(query);
      } else {
        list = new Resultset(this, {
          queryObj: query
        });
      }
      this.remove(list);
    };

    Collection.prototype.removeDataOnly = function () {
      this.remove(this.data.slice());
    };

    /**
     * Remove a document from the collection
     * @param {object} doc - document to remove from collection
     * @memberof Collection
     */
    Collection.prototype.remove = function (doc) {
      if (typeof doc === 'number') {
        doc = this.get(doc);
      }

      if ('object' !== typeof doc) {
        throw new Error('Parameter is not an object');
      }
      if (Array.isArray(doc)) {
        var k = 0,
          len = doc.length;
        for (k; k < len; k += 1) {
          this.remove(doc[k]);
        }
        return;
      }

      if (!hasOwnProperty.call(doc, '$loki')) {
        throw new Error('Object is not a document stored in the collection');
      }

      this.flagBinaryIndexesDirty();

      try {
        this.startTransaction();
        var arr = this.get(doc.$loki, true),
          // obj = arr[0],
          position = arr[1];
        var self = this;
        Object.keys(this.constraints.unique).forEach(function (key) {
          if (doc[key] !== null && typeof doc[key] !== 'undefined') {
            self.constraints.unique[key].remove(doc[key]);
          }
        });
        // now that we can efficiently determine the data[] position of newly added document,
        // submit it for all registered DynamicViews to remove
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].removeDocument(position);
        }

        this.data.splice(position, 1);
        this.removeAutoUpdateObserver(doc);

        // remove id from idIndex
        this.idIndex.splice(position, 1);

        this.commit();
        this.dirty = true; // for autosave scenarios
        this.emit('delete', arr[0]);
        delete doc.$loki;
        delete doc.meta;
        return doc;

      } catch (err) {
        this.rollback();
        this.console.error(err.message);
        this.emit('error', err);
        return null;
      }
    };

    /*---------------------+
    | Finding methods     |
    +----------------------*/

    /**
     * Get by Id - faster than other methods because of the searching algorithm
     * @param {int} id - $loki id of document you want to retrieve
     * @param {boolean} returnPosition - if 'true' we will return [object, position]
     * @returns {(object|array|null)} Object reference if document was found, null if not,
     *     or an array if 'returnPosition' was passed.
     * @memberof Collection
     */
    Collection.prototype.get = function (id, returnPosition) {
      var retpos = returnPosition || false,
        data = this.idIndex,
        max = data.length - 1,
        min = 0,
        mid = (min + max) >> 1;

      id = typeof id === 'number' ? id : parseInt(id, 10);

      if (isNaN(id)) {
        throw new TypeError('Passed id is not an integer');
      }

      while (data[min] < data[max]) {
        mid = (min + max) >> 1;

        if (data[mid] < id) {
          min = mid + 1;
        } else {
          max = mid;
        }
      }

      if (max === min && data[min] === id) {
        if (retpos) {
          return [this.data[min], min];
        }
        return this.data[min];
      }
      return null;

    };

    /**
     * Retrieve doc by Unique index
     * @param {string} field - name of uniquely indexed property to use when doing lookup
     * @param {value} value - unique value to search for
     * @returns {object} document matching the value passed
     * @memberof Collection
     */
    Collection.prototype.by = function (field, value) {
      var self;
      if (value === undefined) {
        self = this;
        return function (value) {
          return self.by(field, value);
        };
      }

      var result = this.constraints.unique[field].get(value);
      if (!this.cloneObjects) {
        return result;
      } else {
        return clone(result, this.cloneMethod);
      }
    };

    /**
     * Find one object by index property, by property equal to value
     * @param {object} query - query object used to perform search with
     * @returns {(object|null)} First matching document, or null if none
     * @memberof Collection
     */
    Collection.prototype.findOne = function (query) {
      // Instantiate Resultset and exec find op passing firstOnly = true param
      var result = new Resultset(this, {
        queryObj: query,
        firstOnly: true
      });
      if (Array.isArray(result) && result.length === 0) {
        return null;
      } else {
        if (!this.cloneObjects) {
          return result;
        } else {
          return clone(result, this.cloneMethod);
        }
      }
    };

    /**
     * Chain method, used for beginning a series of chained find() and/or view() operations
     * on a collection.
     *
     * @param {array} transform - Ordered array of transform step objects similar to chain
     * @param {object} parameters - Object containing properties representing parameters to substitute
     * @returns {Resultset} (this) resultset, or data array if any map or join functions where called
     * @memberof Collection
     */
    Collection.prototype.chain = function (transform, parameters) {
      var rs = new Resultset(this);

      if (typeof transform === 'undefined') {
        return rs;
      }

      return rs.transform(transform, parameters);
    };

    /**
     * Find method, api is similar to mongodb.
     * for more complex queries use [chain()]{@link Collection#chain} or [where()]{@link Collection#where}.
     * @example {@tutorial Query Examples}
     * @param {object} query - 'mongo-like' query object
     * @returns {array} Array of matching documents
     * @memberof Collection
     */
    Collection.prototype.find = function (query) {
      if (typeof (query) === 'undefined') {
        query = 'getAll';
      }

      var results = new Resultset(this, {
        queryObj: query
      });
      if (!this.cloneObjects) {
        return results;
      } else {
        return cloneObjectArray(results, this.cloneMethod);
      }
    };

    /**
     * Find object by unindexed field by property equal to value,
     * simply iterates and returns the first element matching the query
     */
    Collection.prototype.findOneUnindexed = function (prop, value) {
      var i = this.data.length,
        doc;
      while (i--) {
        if (this.data[i][prop] === value) {
          doc = this.data[i];
          return doc;
        }
      }
      return null;
    };

    /**
     * Transaction methods
     */

    /** start the transation */
    Collection.prototype.startTransaction = function () {
      if (this.transactional) {
        this.cachedData = clone(this.data, this.cloneMethod);
        this.cachedIndex = this.idIndex;
        this.cachedBinaryIndex = this.binaryIndices;

        // propagate startTransaction to dynamic views
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].startTransaction();
        }
      }
    };

    /** commit the transation */
    Collection.prototype.commit = function () {
      if (this.transactional) {
        this.cachedData = null;
        this.cachedIndex = null;
        this.cachedBinaryIndex = null;

        // propagate commit to dynamic views
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].commit();
        }
      }
    };

    /** roll back the transation */
    Collection.prototype.rollback = function () {
      if (this.transactional) {
        if (this.cachedData !== null && this.cachedIndex !== null) {
          this.data = this.cachedData;
          this.idIndex = this.cachedIndex;
          this.binaryIndices = this.cachedBinaryIndex;
        }

        // propagate rollback to dynamic views
        for (var idx = 0; idx < this.DynamicViews.length; idx++) {
          this.DynamicViews[idx].rollback();
        }
      }
    };

    // async executor. This is only to enable callbacks at the end of the execution.
    Collection.prototype.async = function (fun, callback) {
      setTimeout(function () {
        if (typeof fun === 'function') {
          fun();
          callback();
        } else {
          throw new TypeError('Argument passed for async execution is not a function');
        }
      }, 0);
    };

    /**
     * Query the collection by supplying a javascript filter function.
     * @example
     * var results = coll.where(function(obj) {
     *   return obj.legs === 8;
     * });
     *
     * @param {function} fun - filter function to run against all collection docs
     * @returns {array} all documents which pass your filter function
     * @memberof Collection
     */
    Collection.prototype.where = function (fun) {
      var results = new Resultset(this, {
        queryFunc: fun
      });
      if (!this.cloneObjects) {
        return results;
      } else {
        return cloneObjectArray(results, this.cloneMethod);
      }
    };

    /**
     * Map Reduce operation
     *
     * @param {function} mapFunction - function to use as map function
     * @param {function} reduceFunction - function to use as reduce function
     * @returns {data} The result of your mapReduce operation
     * @memberof Collection
     */
    Collection.prototype.mapReduce = function (mapFunction, reduceFunction) {
      try {
        return reduceFunction(this.data.map(mapFunction));
      } catch (err) {
        throw err;
      }
    };

    /**
     * Join two collections on specified properties
     *
     * @param {array} joinData - array of documents to 'join' to this collection
     * @param {string} leftJoinProp - property name in collection
     * @param {string} rightJoinProp - property name in joinData
     * @param {function=} mapFun - (Optional) map function to use
     * @returns {Resultset} Result of the mapping operation
     * @memberof Collection
     */
    Collection.prototype.eqJoin = function (joinData, leftJoinProp, rightJoinProp, mapFun) {
      // logic in Resultset class
      return new Resultset(this).eqJoin(joinData, leftJoinProp, rightJoinProp, mapFun);
    };

    /* ------ STAGING API -------- */
    /**
     * stages: a map of uniquely identified 'stages', which hold copies of objects to be
     * manipulated without affecting the data in the original collection
     */
    Collection.prototype.stages = {};

    /**
     * (Staging API) create a stage and/or retrieve it
     * @memberof Collection
     */
    Collection.prototype.getStage = function (name) {
      if (!this.stages[name]) {
        this.stages[name] = {};
      }
      return this.stages[name];
    };
    /**
     * a collection of objects recording the changes applied through a commmitStage
     */
    Collection.prototype.commitLog = [];

    /**
     * (Staging API) create a copy of an object and insert it into a stage
     * @memberof Collection
     */
    Collection.prototype.stage = function (stageName, obj) {
      var copy = JSON.parse(JSON.stringify(obj));
      this.getStage(stageName)[obj.$loki] = copy;
      return copy;
    };

    /**
     * (Staging API) re-attach all objects to the original collection, so indexes and views can be rebuilt
     * then create a message to be inserted in the commitlog
     * @param {string} stageName - name of stage
     * @param {string} message
     * @memberof Collection
     */
    Collection.prototype.commitStage = function (stageName, message) {
      var stage = this.getStage(stageName),
        prop,
        timestamp = new Date().getTime();

      for (prop in stage) {

        this.update(stage[prop]);
        this.commitLog.push({
          timestamp: timestamp,
          message: message,
          data: JSON.parse(JSON.stringify(stage[prop]))
        });
      }
      this.stages[stageName] = {};
    };

    Collection.prototype.no_op = function () {
      return;
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.extract = function (field) {
      var i = 0,
        len = this.data.length,
        isDotNotation = isDeepProperty(field),
        result = [];
      for (i; i < len; i += 1) {
        result.push(deepProperty(this.data[i], field, isDotNotation));
      }
      return result;
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.max = function (field) {
      return Math.max.apply(null, this.extract(field));
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.min = function (field) {
      return Math.min.apply(null, this.extract(field));
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.maxRecord = function (field) {
      var i = 0,
        len = this.data.length,
        deep = isDeepProperty(field),
        result = {
          index: 0,
          value: undefined
        },
        max;

      for (i; i < len; i += 1) {
        if (max !== undefined) {
          if (max < deepProperty(this.data[i], field, deep)) {
            max = deepProperty(this.data[i], field, deep);
            result.index = this.data[i].$loki;
          }
        } else {
          max = deepProperty(this.data[i], field, deep);
          result.index = this.data[i].$loki;
        }
      }
      result.value = max;
      return result;
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.minRecord = function (field) {
      var i = 0,
        len = this.data.length,
        deep = isDeepProperty(field),
        result = {
          index: 0,
          value: undefined
        },
        min;

      for (i; i < len; i += 1) {
        if (min !== undefined) {
          if (min > deepProperty(this.data[i], field, deep)) {
            min = deepProperty(this.data[i], field, deep);
            result.index = this.data[i].$loki;
          }
        } else {
          min = deepProperty(this.data[i], field, deep);
          result.index = this.data[i].$loki;
        }
      }
      result.value = min;
      return result;
    };

    /**
     * @memberof Collection
     */
    Collection.prototype.extractNumerical = function (field) {
      return this.extract(field).map(parseBase10).filter(Number).filter(function (n) {
        return !(isNaN(n));
      });
    };

    /**
     * Calculates the average numerical value of a property
     *
     * @param {string} field - name of property in docs to average
     * @returns {number} average of property in all docs in the collection
     * @memberof Collection
     */
    Collection.prototype.avg = function (field) {
      return average(this.extractNumerical(field));
    };

    /**
     * Calculate standard deviation of a field
     * @memberof Collection
     * @param {string} field
     */
    Collection.prototype.stdDev = function (field) {
      return standardDeviation(this.extractNumerical(field));
    };

    /**
     * @memberof Collection
     * @param {string} field
     */
    Collection.prototype.mode = function (field) {
      var dict = {},
        data = this.extract(field);
      data.forEach(function (obj) {
        if (dict[obj]) {
          dict[obj] += 1;
        } else {
          dict[obj] = 1;
        }
      });
      var max,
        prop, mode;
      for (prop in dict) {
        if (max) {
          if (max < dict[prop]) {
            mode = prop;
          }
        } else {
          mode = prop;
          max = dict[prop];
        }
      }
      return mode;
    };

    /**
     * @memberof Collection
     * @param {string} field - property name
     */
    Collection.prototype.median = function (field) {
      var values = this.extractNumerical(field);
      values.sort(sub);

      var half = Math.floor(values.length / 2);

      if (values.length % 2) {
        return values[half];
      } else {
        return (values[half - 1] + values[half]) / 2.0;
      }
    };

    /**
     * General utils, including statistical functions
     */
    function isDeepProperty(field) {
      return field.indexOf('.') !== -1;
    }

    function parseBase10(num) {
      return parseFloat(num, 10);
    }

    function isNotUndefined(obj) {
      return obj !== undefined;
    }

    function add(a, b) {
      return a + b;
    }

    function sub(a, b) {
      return a - b;
    }

    function median(values) {
      values.sort(sub);
      var half = Math.floor(values.length / 2);
      return (values.length % 2) ? values[half] : ((values[half - 1] + values[half]) / 2.0);
    }

    function average(array) {
      return (array.reduce(add, 0)) / array.length;
    }

    function standardDeviation(values) {
      var avg = average(values);
      var squareDiffs = values.map(function (value) {
        var diff = value - avg;
        var sqrDiff = diff * diff;
        return sqrDiff;
      });

      var avgSquareDiff = average(squareDiffs);

      var stdDev = Math.sqrt(avgSquareDiff);
      return stdDev;
    }

    function deepProperty(obj, property, isDeep) {
      if (isDeep === false) {
        // pass without processing
        return obj[property];
      }
      var pieces = property.split('.'),
        root = obj;
      while (pieces.length > 0) {
        root = root[pieces.shift()];
      }
      return root;
    }

    function binarySearch(array, item, fun) {
      var lo = 0,
        hi = array.length,
        compared,
        mid;
      while (lo < hi) {
        mid = (lo + hi) >> 1;
        compared = fun.apply(null, [item, array[mid]]);
        if (compared === 0) {
          return {
            found: true,
            index: mid
          };
        } else if (compared < 0) {
          hi = mid;
        } else {
          lo = mid + 1;
        }
      }
      return {
        found: false,
        index: hi
      };
    }

    function BSonSort(fun) {
      return function (array, item) {
        return binarySearch(array, item, fun);
      };
    }

    function KeyValueStore() {}

    KeyValueStore.prototype = {
      keys: [],
      values: [],
      sort: function (a, b) {
        return (a < b) ? -1 : ((a > b) ? 1 : 0);
      },
      setSort: function (fun) {
        this.bs = new BSonSort(fun);
      },
      bs: function () {
        return new BSonSort(this.sort);
      },
      set: function (key, value) {
        var pos = this.bs(this.keys, key);
        if (pos.found) {
          this.values[pos.index] = value;
        } else {
          this.keys.splice(pos.index, 0, key);
          this.values.splice(pos.index, 0, value);
        }
      },
      get: function (key) {
        return this.values[binarySearch(this.keys, key, this.sort).index];
      }
    };

    function UniqueIndex(uniqueField) {
      this.field = uniqueField;
      this.keyMap = {};
      this.lokiMap = {};
    }
    UniqueIndex.prototype.keyMap = {};
    UniqueIndex.prototype.lokiMap = {};
    UniqueIndex.prototype.set = function (obj) {
      var fieldValue = obj[this.field];
      if (fieldValue !== null && typeof (fieldValue) !== 'undefined') {
        if (this.keyMap[fieldValue]) {
          throw new Error('Duplicate key for property ' + this.field + ': ' + fieldValue);
        } else {
          this.keyMap[fieldValue] = obj;
          this.lokiMap[obj.$loki] = fieldValue;
        }
      }
    };
    UniqueIndex.prototype.get = function (key) {
      return this.keyMap[key];
    };

    UniqueIndex.prototype.byId = function (id) {
      return this.keyMap[this.lokiMap[id]];
    };
    /**
     * Updates a document's unique index given an updated object.
     * @param  {Object} obj Original document object
     * @param  {Object} doc New document object (likely the same as obj)
     */
    UniqueIndex.prototype.update = function (obj, doc) {
      if (this.lokiMap[obj.$loki] !== doc[this.field]) {
        var old = this.lokiMap[obj.$loki];
        this.set(doc);
        // make the old key fail bool test, while avoiding the use of delete (mem-leak prone)
        this.keyMap[old] = undefined;
      } else {
        this.keyMap[obj[this.field]] = doc;
      }
    };
    UniqueIndex.prototype.remove = function (key) {
      var obj = this.keyMap[key];
      if (obj !== null && typeof obj !== 'undefined') {
        this.keyMap[key] = undefined;
        this.lokiMap[obj.$loki] = undefined;
      } else {
        throw new Error('Key is not in unique index: ' + this.field);
      }
    };
    UniqueIndex.prototype.clear = function () {
      this.keyMap = {};
      this.lokiMap = {};
    };

    function ExactIndex(exactField) {
      this.index = {};
      this.field = exactField;
    }

    // add the value you want returned to the key in the index
    ExactIndex.prototype = {
      set: function add(key, val) {
        if (this.index[key]) {
          this.index[key].push(val);
        } else {
          this.index[key] = [val];
        }
      },

      // remove the value from the index, if the value was the last one, remove the key
      remove: function remove(key, val) {
        var idxSet = this.index[key];
        for (var i in idxSet) {
          if (idxSet[i] == val) {
            idxSet.splice(i, 1);
          }
        }
        if (idxSet.length < 1) {
          this.index[key] = undefined;
        }
      },

      // get the values related to the key, could be more than one
      get: function get(key) {
        return this.index[key];
      },

      // clear will zap the index
      clear: function clear(key) {
        this.index = {};
      }
    };

    function SortedIndex(sortedField) {
      this.field = sortedField;
    }

    SortedIndex.prototype = {
      keys: [],
      values: [],
      // set the default sort
      sort: function (a, b) {
        return (a < b) ? -1 : ((a > b) ? 1 : 0);
      },
      bs: function () {
        return new BSonSort(this.sort);
      },
      // and allow override of the default sort
      setSort: function (fun) {
        this.bs = new BSonSort(fun);
      },
      // add the value you want returned  to the key in the index
      set: function (key, value) {
        var pos = binarySearch(this.keys, key, this.sort);
        if (pos.found) {
          this.values[pos.index].push(value);
        } else {
          this.keys.splice(pos.index, 0, key);
          this.values.splice(pos.index, 0, [value]);
        }
      },
      // get all values which have a key == the given key
      get: function (key) {
        var bsr = binarySearch(this.keys, key, this.sort);
        if (bsr.found) {
          return this.values[bsr.index];
        } else {
          return [];
        }
      },
      // get all values which have a key < the given key
      getLt: function (key) {
        var bsr = binarySearch(this.keys, key, this.sort);
        var pos = bsr.index;
        if (bsr.found) pos--;
        return this.getAll(key, 0, pos);
      },
      // get all values which have a key > the given key
      getGt: function (key) {
        var bsr = binarySearch(this.keys, key, this.sort);
        var pos = bsr.index;
        if (bsr.found) pos++;
        return this.getAll(key, pos, this.keys.length);
      },

      // get all vals from start to end
      getAll: function (key, start, end) {
        var results = [];
        for (var i = start; i < end; i++) {
          results = results.concat(this.values[i]);
        }
        return results;
      },
      // just in case someone wants to do something smart with ranges
      getPos: function (key) {
        return binarySearch(this.keys, key, this.sort);
      },
      // remove the value from the index, if the value was the last one, remove the key
      remove: function (key, value) {
        var pos = binarySearch(this.keys, key, this.sort).index;
        var idxSet = this.values[pos];
        for (var i in idxSet) {
          if (idxSet[i] == value) idxSet.splice(i, 1);
        }
        if (idxSet.length < 1) {
          this.keys.splice(pos, 1);
          this.values.splice(pos, 1);
        }
      },
      // clear will zap the index
      clear: function () {
        this.keys = [];
        this.values = [];
      }
    };


    Loki.LokiOps = LokiOps;
    Loki.Collection = Collection;
    Loki.KeyValueStore = KeyValueStore;
    Loki.persistenceAdapters = {
      fs: LokiFsAdapter,
      localStorage: LokiLocalStorageAdapter
    };
    return Loki;
  }());

}));

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"object-path":{"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/rocketchat_lib/node_modules/object-path/index.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
(function (root, factory){
  'use strict';

  /*istanbul ignore next:cant test*/
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else {
    // Browser globals
    root.objectPath = factory();
  }
})(this, function(){
  'use strict';

  var
    toStr = Object.prototype.toString,
    _hasOwnProperty = Object.prototype.hasOwnProperty;

  function isEmpty(value){
    if (!value) {
      return true;
    }
    if (isArray(value) && value.length === 0) {
        return true;
    } else if (!isString(value)) {
        for (var i in value) {
            if (_hasOwnProperty.call(value, i)) {
                return false;
            }
        }
        return true;
    }
    return false;
  }

  function toString(type){
    return toStr.call(type);
  }

  function isNumber(value){
    return typeof value === 'number' || toString(value) === "[object Number]";
  }

  function isString(obj){
    return typeof obj === 'string' || toString(obj) === "[object String]";
  }

  function isObject(obj){
    return typeof obj === 'object' && toString(obj) === "[object Object]";
  }

  function isArray(obj){
    return typeof obj === 'object' && typeof obj.length === 'number' && toString(obj) === '[object Array]';
  }

  function isBoolean(obj){
    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
  }

  function getKey(key){
    var intKey = parseInt(key);
    if (intKey.toString() === key) {
      return intKey;
    }
    return key;
  }

  function set(obj, path, value, doNotReplace){
    if (isNumber(path)) {
      path = [path];
    }
    if (isEmpty(path)) {
      return obj;
    }
    if (isString(path)) {
      return set(obj, path.split('.').map(getKey), value, doNotReplace);
    }
    var currentPath = path[0];

    if (path.length === 1) {
      var oldVal = obj[currentPath];
      if (oldVal === void 0 || !doNotReplace) {
        obj[currentPath] = value;
      }
      return oldVal;
    }

    if (obj[currentPath] === void 0) {
      //check if we assume an array
      if(isNumber(path[1])) {
        obj[currentPath] = [];
      } else {
        obj[currentPath] = {};
      }
    }

    return set(obj[currentPath], path.slice(1), value, doNotReplace);
  }

  function del(obj, path) {
    if (isNumber(path)) {
      path = [path];
    }

    if (isEmpty(obj)) {
      return void 0;
    }

    if (isEmpty(path)) {
      return obj;
    }
    if(isString(path)) {
      return del(obj, path.split('.'));
    }

    var currentPath = getKey(path[0]);
    var oldVal = obj[currentPath];

    if(path.length === 1) {
      if (oldVal !== void 0) {
        if (isArray(obj)) {
          obj.splice(currentPath, 1);
        } else {
          delete obj[currentPath];
        }
      }
    } else {
      if (obj[currentPath] !== void 0) {
        return del(obj[currentPath], path.slice(1));
      }
    }

    return obj;
  }

  var objectPath = function(obj) {
    return Object.keys(objectPath).reduce(function(proxy, prop) {
      if (typeof objectPath[prop] === 'function') {
        proxy[prop] = objectPath[prop].bind(objectPath, obj);
      }

      return proxy;
    }, {});
  };

  objectPath.has = function (obj, path) {
    if (isEmpty(obj)) {
      return false;
    }

    if (isNumber(path)) {
      path = [path];
    } else if (isString(path)) {
      path = path.split('.');
    }

    if (isEmpty(path) || path.length === 0) {
      return false;
    }

    for (var i = 0; i < path.length; i++) {
      var j = path[i];
      if ((isObject(obj) || isArray(obj)) && _hasOwnProperty.call(obj, j)) {
        obj = obj[j];
      } else {
        return false;
      }
    }

    return true;
  };

  objectPath.ensureExists = function (obj, path, value){
    return set(obj, path, value, true);
  };

  objectPath.set = function (obj, path, value, doNotReplace){
    return set(obj, path, value, doNotReplace);
  };

  objectPath.insert = function (obj, path, value, at){
    var arr = objectPath.get(obj, path);
    at = ~~at;
    if (!isArray(arr)) {
      arr = [];
      objectPath.set(obj, path, arr);
    }
    arr.splice(at, 0, value);
  };

  objectPath.empty = function(obj, path) {
    if (isEmpty(path)) {
      return obj;
    }
    if (isEmpty(obj)) {
      return void 0;
    }

    var value, i;
    if (!(value = objectPath.get(obj, path))) {
      return obj;
    }

    if (isString(value)) {
      return objectPath.set(obj, path, '');
    } else if (isBoolean(value)) {
      return objectPath.set(obj, path, false);
    } else if (isNumber(value)) {
      return objectPath.set(obj, path, 0);
    } else if (isArray(value)) {
      value.length = 0;
    } else if (isObject(value)) {
      for (i in value) {
        if (_hasOwnProperty.call(value, i)) {
          delete value[i];
        }
      }
    } else {
      return objectPath.set(obj, path, null);
    }
  };

  objectPath.push = function (obj, path /*, values */){
    var arr = objectPath.get(obj, path);
    if (!isArray(arr)) {
      arr = [];
      objectPath.set(obj, path, arr);
    }

    arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
  };

  objectPath.coalesce = function (obj, paths, defaultValue) {
    var value;

    for (var i = 0, len = paths.length; i < len; i++) {
      if ((value = objectPath.get(obj, paths[i])) !== void 0) {
        return value;
      }
    }

    return defaultValue;
  };

  objectPath.get = function (obj, path, defaultValue){
    if (isNumber(path)) {
      path = [path];
    }
    if (isEmpty(path)) {
      return obj;
    }
    if (isEmpty(obj)) {
      return defaultValue;
    }
    if (isString(path)) {
      return objectPath.get(obj, path.split('.'), defaultValue);
    }

    var currentPath = getKey(path[0]);

    if (path.length === 1) {
      if (obj[currentPath] === void 0) {
        return defaultValue;
      }
      return obj[currentPath];
    }

    return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
  };

  objectPath.del = function(obj, path) {
    return del(obj, path);
  };

  return objectPath;
});

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}}},{
  "extensions": [
    ".js",
    ".json",
    ".info"
  ]
});
require("./node_modules/meteor/rocketchat:lib/lib/core.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/debug.js");
require("./node_modules/meteor/rocketchat:lib/lib/RoomTypeConfig.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypes/channels.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypes/conversation.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypes/direct.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypes/favorite.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypes/index.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypes/private.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypes/public.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypes/unread.js");
require("./node_modules/meteor/rocketchat:lib/lib/getURL.js");
require("./node_modules/meteor/rocketchat:lib/lib/settings.js");
require("./node_modules/meteor/rocketchat:lib/lib/callbacks.js");
require("./node_modules/meteor/rocketchat:lib/lib/fileUploadRestrictions.js");
require("./node_modules/meteor/rocketchat:lib/lib/getAvatarColor.js");
require("./node_modules/meteor/rocketchat:lib/lib/getValidRoomName.js");
require("./node_modules/meteor/rocketchat:lib/lib/placeholders.js");
require("./node_modules/meteor/rocketchat:lib/lib/promises.js");
require("./node_modules/meteor/rocketchat:lib/lib/RoomTypesCommon.js");
require("./node_modules/meteor/rocketchat:lib/lib/slashCommand.js");
require("./node_modules/meteor/rocketchat:lib/lib/Message.js");
require("./node_modules/meteor/rocketchat:lib/lib/messageBox.js");
require("./node_modules/meteor/rocketchat:lib/lib/MessageTypes.js");
require("./node_modules/meteor/rocketchat:lib/lib/templateVarHandler.js");
require("./node_modules/meteor/rocketchat:lib/lib/getUserPreference.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/bugsnag.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/metrics.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/RateLimiter.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/isDocker.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/addUserToDefaultChannels.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/addUserToRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/archiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/checkUsernameAvailability.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/checkEmailAvailability.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/createRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/deleteMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/deleteUser.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/getFullUserData.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/removeUserFromRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/saveUser.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/saveCustomFields.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/saveCustomFieldsWithoutValidation.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/sendMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/settings.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setUserAvatar.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setUsername.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setRealName.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/unarchiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/updateMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/validateCustomFields.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/Notifications.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/configLogger.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/PushNotification.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/defaultBlockedDomainsList.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/interceptDirectReplyEmails.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/loginErrorMessageOverride.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/notifyUsersOnMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/processDirectEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/roomTypes.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/sendEmailOnMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/sendNotificationsOnMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/validateEmailDomain.js");
require("./node_modules/meteor/rocketchat:lib/server/models/_Base.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Avatars.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Messages.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Reports.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Rooms.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Settings.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Subscriptions.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Uploads.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Users.js");
require("./node_modules/meteor/rocketchat:lib/server/oauth/oauth.js");
require("./node_modules/meteor/rocketchat:lib/server/oauth/google.js");
require("./node_modules/meteor/rocketchat:lib/server/oauth/proxy.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/statsTracker.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/cache/CacheLoad.js");
require("./node_modules/meteor/rocketchat:lib/server/publications/settings.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/addOAuthService.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/refreshOAuthService.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/addUserToRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/addUsersToRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/archiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/blockUser.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/checkRegistrationSecretURL.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/checkUsernameAvailability.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/cleanChannelHistory.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/createChannel.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/createToken.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/createPrivateGroup.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/deleteMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/deleteUserOwnAccount.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/filterBadWords.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/filterATAllTag.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getChannelHistory.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getFullUserData.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getRoomJoinCode.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getRoomRoles.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getServerInfo.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getSingleMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getUserRoles.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/insertOrUpdateUser.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/joinDefaultChannels.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/joinRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/leaveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/removeOAuthService.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/restartServer.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/robotMethods.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/saveSetting.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/sendInvitationEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/sendMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/sendSMTPTestEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setAdminStatus.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setRealName.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setUsername.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/unarchiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/unblockUser.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/updateMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadCdnPrefix.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadDirectReply.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadSMTP.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/oAuthServicesUpdate.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settings.js");
require("./node_modules/meteor/rocketchat:lib/lib/startup/settingsOnLoadSiteUrl.js");
require("./node_modules/meteor/rocketchat:lib/startup/defaultRoomTypes.js");
require("./node_modules/meteor/rocketchat:lib/rocketchat.info.js");
var exports = require("./node_modules/meteor/rocketchat:lib/server/lib/index.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['rocketchat:lib'] = exports, {
  RocketChat: RocketChat
});

})();

//# sourceURL=meteor://💻app/packages/rocketchat_lib.js
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL2NvcmUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9Sb29tVHlwZUNvbmZpZy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL3Jvb21UeXBlcy9jaGFubmVscy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL3Jvb21UeXBlcy9jb252ZXJzYXRpb24uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9yb29tVHlwZXMvZGlyZWN0LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvcm9vbVR5cGVzL2Zhdm9yaXRlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvcm9vbVR5cGVzL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvcm9vbVR5cGVzL3ByaXZhdGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9yb29tVHlwZXMvcHVibGljLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvcm9vbVR5cGVzL3VucmVhZC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL2dldFVSTC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL3NldHRpbmdzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvY2FsbGJhY2tzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvZmlsZVVwbG9hZFJlc3RyaWN0aW9ucy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL2dldEF2YXRhckNvbG9yLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvZ2V0VmFsaWRSb29tTmFtZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL3BsYWNlaG9sZGVycy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL3Byb21pc2VzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvUm9vbVR5cGVzQ29tbW9uLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvc2xhc2hDb21tYW5kLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvTWVzc2FnZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL21lc3NhZ2VCb3guanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9NZXNzYWdlVHlwZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi90ZW1wbGF0ZVZhckhhbmRsZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9nZXRVc2VyUHJlZmVyZW5jZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL3N0YXJ0dXAvc2V0dGluZ3NPbkxvYWRTaXRlVXJsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL2RlYnVnLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL2J1Z3NuYWcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvbWV0cmljcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi9SYXRlTGltaXRlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi9jb25maWdMb2dnZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvUHVzaE5vdGlmaWNhdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi9kZWZhdWx0QmxvY2tlZERvbWFpbnNMaXN0LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL2ludGVyY2VwdERpcmVjdFJlcGx5RW1haWxzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL2xvZ2luRXJyb3JNZXNzYWdlT3ZlcnJpZGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvbm90aWZ5VXNlcnNPbk1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvcHJvY2Vzc0RpcmVjdEVtYWlsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL3Jvb21UeXBlcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi9zZW5kRW1haWxPbk1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvc2VuZE5vdGlmaWNhdGlvbnNPbk1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvdmFsaWRhdGVFbWFpbERvbWFpbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi9pbmRleC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9pc0RvY2tlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9hZGRVc2VyVG9EZWZhdWx0Q2hhbm5lbHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvYWRkVXNlclRvUm9vbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9hcmNoaXZlUm9vbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9jaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL2NoZWNrRW1haWxBdmFpbGFiaWxpdHkuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvY3JlYXRlUm9vbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9kZWxldGVNZXNzYWdlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL2RlbGV0ZVVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvZ2V0RnVsbFVzZXJEYXRhLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL2dldFJvb21CeU5hbWVPcklkV2l0aE9wdGlvblRvSm9pbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9yZW1vdmVVc2VyRnJvbVJvb20uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvc2F2ZVVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvc2F2ZUN1c3RvbUZpZWxkcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9zYXZlQ3VzdG9tRmllbGRzV2l0aG91dFZhbGlkYXRpb24uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvc2VuZE1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvc2V0dGluZ3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvc2V0VXNlckF2YXRhci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9zZXRVc2VybmFtZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9zZXRSZWFsTmFtZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9zZXRFbWFpbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy91bmFyY2hpdmVSb29tLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL3VwZGF0ZU1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvdmFsaWRhdGVDdXN0b21GaWVsZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvTm90aWZpY2F0aW9ucy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21vZGVscy9fQmFzZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21vZGVscy9BdmF0YXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbW9kZWxzL01lc3NhZ2VzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbW9kZWxzL1JlcG9ydHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tb2RlbHMvUm9vbXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tb2RlbHMvU2V0dGluZ3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tb2RlbHMvU3Vic2NyaXB0aW9ucy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21vZGVscy9VcGxvYWRzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbW9kZWxzL1VzZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbW9kZWxzL19CYXNlQ2FjaGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tb2RlbHMvX0Jhc2VEYi5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL29hdXRoL29hdXRoLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvb2F1dGgvZ29vZ2xlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvb2F1dGgvcHJveHkuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9zdGFydHVwL3N0YXRzVHJhY2tlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL3N0YXJ0dXAvY2FjaGUvQ2FjaGVMb2FkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvc3RhcnR1cC9zZXR0aW5nc09uTG9hZENkblByZWZpeC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL3N0YXJ0dXAvc2V0dGluZ3NPbkxvYWREaXJlY3RSZXBseS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL3N0YXJ0dXAvc2V0dGluZ3NPbkxvYWRTTVRQLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvc3RhcnR1cC9vQXV0aFNlcnZpY2VzVXBkYXRlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvc3RhcnR1cC9zZXR0aW5ncy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL3B1YmxpY2F0aW9ucy9zZXR0aW5ncy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvYWRkT0F1dGhTZXJ2aWNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9yZWZyZXNoT0F1dGhTZXJ2aWNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9hZGRVc2VyVG9Sb29tLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9hZGRVc2Vyc1RvUm9vbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvYXJjaGl2ZVJvb20uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2Jsb2NrVXNlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvY2hlY2tSZWdpc3RyYXRpb25TZWNyZXRVUkwuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2NoZWNrVXNlcm5hbWVBdmFpbGFiaWxpdHkuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2NsZWFuQ2hhbm5lbEhpc3RvcnkuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2NyZWF0ZUNoYW5uZWwuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2NyZWF0ZVRva2VuLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9jcmVhdGVQcml2YXRlR3JvdXAuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2RlbGV0ZU1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2RlbGV0ZVVzZXJPd25BY2NvdW50LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9maWx0ZXJCYWRXb3Jkcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvZmlsdGVyQVRBbGxUYWcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2dldENoYW5uZWxIaXN0b3J5LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9nZXRGdWxsVXNlckRhdGEuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2dldFJvb21Kb2luQ29kZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvZ2V0Um9vbVJvbGVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9nZXRTZXJ2ZXJJbmZvLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9nZXRTaW5nbGVNZXNzYWdlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9nZXRVc2VyUm9sZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2luc2VydE9yVXBkYXRlVXNlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvam9pbkRlZmF1bHRDaGFubmVscy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvam9pblJvb20uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2xlYXZlUm9vbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvcmVtb3ZlT0F1dGhTZXJ2aWNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9yZXN0YXJ0U2VydmVyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9yb2JvdE1ldGhvZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL3NhdmVTZXR0aW5nLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9zZW5kSW52aXRhdGlvbkVtYWlsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9zZW5kTWVzc2FnZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvc2VuZFNNVFBUZXN0RW1haWwuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL3NldEFkbWluU3RhdHVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9zZXRSZWFsTmFtZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvc2V0VXNlcm5hbWUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL3NldEVtYWlsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy91bmFyY2hpdmVSb29tLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy91bmJsb2NrVXNlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvdXBkYXRlTWVzc2FnZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc3RhcnR1cC9kZWZhdWx0Um9vbVR5cGVzLmpzIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsIm1vZHVsZSIsIndhdGNoIiwicmVxdWlyZSIsImRlZmF1bHQiLCJ2IiwiUm9ja2V0Q2hhdCIsIm1vZGVscyIsImV4cG9ydCIsIlJvb21TZXR0aW5nc0VudW0iLCJVaVRleHRDb250ZXh0IiwiUm9vbVR5cGVSb3V0ZUNvbmZpZyIsIlJvb21UeXBlQ29uZmlnIiwiTkFNRSIsIlRPUElDIiwiQU5OT1VOQ0VNRU5UIiwiREVTQ1JJUFRJT04iLCJSRUFEX09OTFkiLCJSRUFDVF9XSEVOX1JFQURfT05MWSIsIkFSQ0hJVkVfT1JfVU5BUkNISVZFIiwiSk9JTl9DT0RFIiwiQ0xPU0VfV0FSTklORyIsIkhJREVfV0FSTklORyIsIkxFQVZFX1dBUk5JTkciLCJOT19ST09NU19TVUJTQ1JJQkVEIiwiY29uc3RydWN0b3IiLCJuYW1lIiwicGF0aCIsImxlbmd0aCIsIkVycm9yIiwiX25hbWUiLCJfcGF0aCIsImlkZW50aWZpZXIiLCJSYW5kb20iLCJpZCIsIm9yZGVyIiwiaWNvbiIsImhlYWRlciIsImxhYmVsIiwicm91dGUiLCJfaWRlbnRpZmllciIsIl9vcmRlciIsIl9pY29uIiwiX2hlYWRlciIsIl9sYWJlbCIsIl9yb3V0ZSIsImdldERpc3BsYXlOYW1lIiwicm9vbSIsImFsbG93Um9vbVNldHRpbmdDaGFuZ2UiLCJjYW5CZUNyZWF0ZWQiLCJNZXRlb3IiLCJpc1NlcnZlciIsImF1dGh6IiwiaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24iLCJ1c2VySWQiLCJjYW5CZURlbGV0ZWQiLCJ0IiwiX2lkIiwic3VwcG9ydE1lbWJlcnNMaXN0IiwiaXNHcm91cENoYXQiLCJjYW5BZGRVc2VyIiwidXNlckRldGFpbFNob3dBbGwiLCJ1c2VyRGV0YWlsU2hvd0FkbWluIiwicHJldmVudFJlbmFtaW5nIiwiaW5jbHVkZUluUm9vbVNlYXJjaCIsImVuYWJsZU1lbWJlcnNMaXN0UHJvZmlsZSIsImdldFVpVGV4dCIsIkNoYW5uZWxzUm9vbVR5cGUiLCJjb25kaXRpb24iLCJ1c2VyIiwicm9vbXNMaXN0RXhoaWJpdGlvbk1vZGUiLCJnZXRVc2VyUHJlZmVyZW5jZSIsIm1lcmdlQ2hhbm5lbHMiLCJpbmNsdWRlcyIsIkNvbnZlcnNhdGlvblJvb21UeXBlIiwiRGlyZWN0TWVzc2FnZVJvb21Sb3V0ZSIsIkRpcmVjdE1lc3NhZ2VSb29tVHlwZSIsImFjdGlvbiIsInBhcmFtcyIsIm9wZW5Sb29tIiwidXNlcm5hbWUiLCJsaW5rIiwic3ViIiwiZmluZFJvb20iLCJxdWVyeSIsInN1YnNjcmlwdGlvbiIsIkNoYXRTdWJzY3JpcHRpb24iLCJmaW5kT25lIiwicmlkIiwiQ2hhdFJvb20iLCJyb29tTmFtZSIsInJvb21EYXRhIiwiZmllbGRzIiwiZm5hbWUiLCJzZXR0aW5ncyIsImdldCIsInNlY29uZGFyeVJvb21OYW1lIiwiZ2V0VXNlclN0YXR1cyIsInJvb21JZCIsIlN1YnNjcmlwdGlvbnMiLCJTZXNzaW9uIiwidXNlcm5hbWVzIiwiam9pbiIsInNldHRpbmciLCJjb250ZXh0IiwiRmF2b3JpdGVSb29tVHlwZSIsIlByaXZhdGVSb29tVHlwZSIsIlB1YmxpY1Jvb21UeXBlIiwiVW5yZWFkUm9vbVR5cGUiLCJQcml2YXRlUm9vbVJvdXRlIiwiaGFzQWxsUGVybWlzc2lvbiIsIlB1YmxpY1Jvb21Sb3V0ZSIsInNob3dKb2luTGluayIsInVucmVhZCIsInMiLCJnZXRVUkwiLCJjZG4iLCJmdWxsIiwiY2RuUHJlZml4IiwicnRyaW0iLCJ0cmltIiwicGF0aFByZWZpeCIsIl9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18iLCJST09UX1VSTF9QQVRIX1BSRUZJWCIsImJhc2VQYXRoIiwiZmluYWxQYXRoIiwibHRyaW0iLCJpc0NvcmRvdmEiLCJhYnNvbHV0ZVVybCIsIl8iLCJjYWxsYmFja3MiLCJyZWdleENhbGxiYWNrcyIsInRzIiwiRGF0ZSIsImNhbGxiYWNrIiwib25sb2FkIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsImlzUmVnRXhwIiwidGVzdCIsInJlZHVjZSIsIml0ZW1zIiwicHVzaCIsInNldCIsImNhbGwiLCJiYXRjaFNldCIsInNhdmUiLCJlZGl0b3IiLCJhY3Rpb25zIiwibWFwIiwicmVkdWNlUmlnaHQiLCJ3cmFwIiwiZXJyIiwic3VjY2VzcyIsImxvYWQiLCJpbml0aWFsTG9hZCIsIml0ZW0iLCJjYktleSIsImNiVmFsdWUiLCJyZWdleCIsImNvbmNhdCIsImsiLCJzb3VyY2UiLCJzaG93VGltZSIsInNob3dUb3RhbFRpbWUiLCJwcmlvcml0eSIsIkhJR0giLCJNRURJVU0iLCJMT1ciLCJhZGQiLCJob29rIiwiaXNOdW1iZXIiLCJzdGFjayIsImZpbmQiLCJjYiIsInJlbW92ZSIsImhvb2tOYW1lIiwicmVqZWN0IiwicnVuIiwiY29uc3RhbnQiLCJ0b3RhbFRpbWUiLCJyZXN1bHQiLCJzb3J0QnkiLCJ0aW1lIiwibm93IiwiY2FsbGJhY2tSZXN1bHQiLCJjdXJyZW50VGltZSIsInN0YXRzVHJhY2tlciIsInRpbWluZyIsInNwbGl0IiwibWF0Y2giLCJjb25zb2xlIiwibG9nIiwiU3RyaW5nIiwicnVuQXN5bmMiLCJkZWZlciIsImZpbGVVcGxvYWRNZWRpYVdoaXRlTGlzdCIsIm1lZGlhVHlwZVdoaXRlTGlzdCIsImZpbGVVcGxvYWRJc1ZhbGlkQ29udGVudFR5cGUiLCJ0eXBlIiwibGlzdCIsImNvbnRhaW5zIiwid2lsZENhcmRHbG9iIiwid2lsZGNhcmRzIiwiZmlsdGVyIiwiaW5kZXhPZiIsInJlcGxhY2UiLCJjb2xvcnMiLCJnZXRBdmF0YXJDb2xvciIsImdldFZhbGlkUm9vbU5hbWUiLCJkaXNwbGF5TmFtZSIsInNsdWdpZmllZE5hbWUiLCJSb29tcyIsImZpbmRPbmVCeURpc3BsYXlOYW1lIiwiYXJjaGl2ZWQiLCJmdW5jdGlvbiIsImNoYW5uZWxfbmFtZSIsInNsdWdpZnkiLCJuYW1lVmFsaWRhdGlvbiIsIlJlZ0V4cCIsImVycm9yIiwiZmluZE9uZUJ5TmFtZSIsInRtcE5hbWUiLCJuZXh0IiwiZmluZE9uZUJ5TmFtZUFuZE5vdElkIiwicGxhY2Vob2xkZXJzIiwic3RyIiwiZGF0YSIsInN0ckxlZnQiLCJzdHJSaWdodEJhY2siLCJlbWFpbCIsInBhc3N3b3JkIiwidW5zdWJzY3JpYmUiLCJwcm9taXNlcyIsInAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInByZXZpb3VzUHJvbWlzZSIsInRoZW4iLCJSb29tVHlwZXNDb21tb24iLCJyb29tVHlwZXMiLCJyb29tVHlwZXNPcmRlciIsIm1haW5PcmRlciIsInJvb21Db25maWciLCJyb3V0ZUNvbmZpZyIsImlzQ2xpZW50IiwidHJpZ2dlcnNFeGl0Iiwicm9vbUV4aXQiLCJGbG93Um91dGVyIiwiaGFzQ3VzdG9tTGluayIsInJvb21UeXBlIiwiZ2V0Um91dGVMaW5rIiwic3ViRGF0YSIsInJvdXRlRGF0YSIsIm9wZW5Sb3V0ZUxpbmsiLCJxdWVyeVBhcmFtcyIsImdvIiwic2xhc2hDb21tYW5kcyIsImNvbW1hbmRzIiwiY29tbWFuZCIsIm9wdGlvbnMiLCJkZXNjcmlwdGlvbiIsImNsaWVudE9ubHkiLCJtZXRob2RzIiwic2xhc2hDb21tYW5kIiwibWV0aG9kIiwiY21kIiwibXNnIiwiTWVzc2FnZSIsInBhcnNlIiwibGFuZ3VhZ2UiLCJtZXNzYWdlVHlwZSIsIk1lc3NhZ2VUeXBlcyIsImdldFR5cGUiLCJyZW5kZXIiLCJ0ZW1wbGF0ZSIsIm1lc3NhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiVEFQaTE4biIsIl9fIiwidSIsImh0bWwiLCJlc2NhcGVIVE1MIiwibWVzc2FnZUJveCIsImdyb3VwIiwiY29uZmlnIiwiYWN0aW9uRXhpc3RzIiwicmV0IiwiZ2V0QnlJZCIsIm1lc3NhZ2VBY3Rpb25zIiwidHlwZXMiLCJyZWdpc3RlclR5cGUiLCJpc1N5c3RlbU1lc3NhZ2UiLCJzeXN0ZW0iLCJzdGFydHVwIiwicm9vbV9uYW1lIiwidXNlcl9ieSIsInVzZXJfYWRkZWQiLCJ1c2VyX3JlbW92ZWQiLCJ1c2VyX2xlZnQiLCJ1c2VyX211dGVkIiwidXNlcl91bm11dGVkIiwicm9sZSIsImxvZ2dlciIsIkxvZ2dlciIsInRlbXBsYXRlVmFySGFuZGxlciIsInZhcmlhYmxlIiwib2JqZWN0IiwidGVtcGxhdGVSZWdleCIsImV4ZWMiLCJ0bXBWYXJpYWJsZSIsImhhc093blByb3BlcnR5IiwiZGVidWciLCJ0bXBsVmFyIiwidG1wbEF0dHJOYW1lIiwiYXR0clZhbCIsImRlZmF1bHRWYWx1ZSIsInVuZGVmaW5lZCIsInByZWZlcmVuY2UiLCJwcmVmZXJlbmNlcyIsImhvc3QiLCJST09UX1VSTCIsImRlZmF1bHRPcHRpb25zIiwicm9vdFVybCIsImhvc3RuYW1lIiwicHJvY2VzcyIsImVudiIsIk1PQklMRV9ST09UX1VSTCIsIk1PQklMRV9ERFBfVVJMIiwiV2ViQXBwSW50ZXJuYWxzIiwiZ2VuZXJhdGVCb2lsZXJwbGF0ZSIsInB1Ymxpc2giLCJ3cmFwTWV0aG9kcyIsIm9yaWdpbmFsSGFuZGxlciIsIm1ldGhvZHNNYXAiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImFyZ3VtZW50cyIsImFwcGx5Iiwib3JpZ2luYWxNZXRlb3JNZXRob2RzIiwibWV0aG9kTWFwIiwiZWFjaCIsImhhbmRsZXIiLCJvcmlnaW5hbE1ldGVvclB1Ymxpc2giLCJmdW5jIiwiV2ViQXBwIiwicmF3Q29ubmVjdEhhbmRsZXJzIiwidXNlIiwicmVxIiwicmVzIiwic2V0SGVhZGVyIiwiSW5zdGFuY2VTdGF0dXMiLCJidWdzbmFnIiwicmVnaXN0ZXIiLCJub3RpZnkiLCJJbmZvIiwiYXBwIiwidmVyc2lvbiIsImluZm8iLCJvbiIsImJpbmRFbnZpcm9ubWVudCIsIm9yaWdpbmFsTWV0ZW9yRGVidWciLCJfZGVidWciLCJjbGllbnQiLCJwcm9tY2xpZW50IiwibWV0cmljcyIsIm1lc3NhZ2VzU2VudCIsIkNvdW50ZXIiLCJSYXRlTGltaXRlciIsImxpbWl0RnVuY3Rpb24iLCJmbiIsIm51bVJlcXVlc3RzIiwidGltZUludGVydmFsIiwibWF0Y2hlcnMiLCJURVNUX01PREUiLCJyYXRlTGltaXRlciIsImFkZFJ1bGUiLCJtYXRjaGVyIiwiaW5jcmVtZW50IiwicmF0ZUxpbWl0UmVzdWx0IiwiY2hlY2siLCJhbGxvd2VkIiwiTWF0aCIsImNlaWwiLCJ0aW1lVG9SZXNldCIsInNlY29uZHMiLCJsaW1pdE1ldGhvZCIsIm1ldGhvZE5hbWUiLCJERFBSYXRlTGltaXRlciIsIkxvZ2dlck1hbmFnZXIiLCJzaG93UGFja2FnZSIsInNob3dGaWxlQW5kTGluZSIsImxvZ0xldmVsIiwicGFyc2VJbnQiLCJzZXRUaW1lb3V0IiwiZW5hYmxlIiwiUHVzaE5vdGlmaWNhdGlvbiIsImdldE5vdGlmaWNhdGlvbklkIiwic2VydmVySWQiLCJoYXNoIiwiaSIsImNoYXJDb2RlQXQiLCJzZW5kIiwidXNlcnNUbyIsInBheWxvYWQiLCJiYWRnZSIsImNhdGVnb3J5IiwidGl0bGUiLCJ1cmwiLCJkZWZhdWx0VXJsIiwiZnJvbSIsInNvdW5kIiwidGV4dCIsIm5vdElkIiwiZ2NtIiwic3R5bGUiLCJzdW1tYXJ5VGV4dCIsImltYWdlIiwiYXBuIiwiUHVzaCIsImVtYWlsRG9tYWluRGVmYXVsdEJsYWNrTGlzdCIsIklNQVBJbnRlcmNlcHRlciIsIlBPUDNJbnRlcmNlcHRlciIsIlBPUDNIZWxwZXIiLCJJTUFQIiwiUE9QMyIsInNpbXBsZVBhcnNlciIsImltYXAiLCJwb3J0IiwidGxzIiwiY29ublRpbWVvdXQiLCJrZWVwYWxpdmUiLCJkZWxldGUiLCJzdGF0ZSIsIm9wZW5JbmJveCIsImdldEVtYWlscyIsImVuZCIsIm9wZW5Cb3giLCJzdGFydCIsImNvbm5lY3QiLCJpc0FjdGl2ZSIsInN0b3AiLCJGdW5jdGlvbiIsIm9uY2UiLCJyZXN0YXJ0Iiwic2VhcmNoIiwibmV3RW1haWxzIiwiZiIsImZldGNoIiwiYm9kaWVzIiwic3RydWN0IiwibWFya1NlZW4iLCJzZXFubyIsInN0cmVhbSIsImhlYWRlckJ1ZmZlciIsImJvZHlCdWZmZXIiLCJjaHVuayIsIndoaWNoIiwidG9TdHJpbmciLCJib2R5IiwiaGVhZGVycyIsInBhcnNlSGVhZGVyIiwidG8iLCJkYXRlIiwic2VxIiwiYWRkRmxhZ3MiLCJwcm9jZXNzRGlyZWN0RW1haWwiLCJwb3AzIiwiZW5hYmxldGxzIiwidG90YWxNc2dDb3VudCIsImN1cnJlbnRNc2dDb3VudCIsImxvZ2luIiwic3RhdHVzIiwibXNnY291bnQiLCJyZXRyIiwicXVpdCIsIm1zZ251bWJlciIsIm1haWwiLCJpbml0aWFsUHJvY2VzcyIsImRlbGUiLCJtZXNzYWdlSWQiLCJydW5uaW5nIiwic2V0SW50ZXJ2YWwiLCJtYXgiLCJjbGVhckludGVydmFsIiwiX3J1bkxvZ2luSGFuZGxlcnMiLCJBY2NvdW50cyIsIm1ldGhvZEludm9jYXRpb24iLCJyZWFzb24iLCJtb21lbnQiLCJlZGl0ZWRBdCIsImFicyIsImRpZmYiLCJpbmNNc2dDb3VudEJ5SWQiLCJsYXN0TWVzc2FnZSIsInNldExhc3RNZXNzYWdlQnlJZCIsIm1lc3NhZ2VDb250YWluc0hpZ2hsaWdodCIsImhpZ2hsaWdodHMiLCJoYXMiLCJzb21lIiwiaGlnaGxpZ2h0IiwicmVnZXhwIiwiZXNjYXBlUmVnRXhwIiwidG9BbGwiLCJ0b0hlcmUiLCJtZW50aW9uSWRzIiwiaGlnaGxpZ2h0c0lkcyIsIlVzZXJzIiwiZmluZFVzZXJzQnlVc2VybmFtZXNXaXRoSGlnaGxpZ2h0cyIsIm1lbnRpb25zIiwibWVudGlvbiIsInVzZXJIaWdobGlnaHRzIiwidW5yZWFkQ291bnRETSIsImluY1VucmVhZEZvclJvb21JZEV4Y2x1ZGluZ1VzZXJJZCIsImluY0dyb3VwTWVudGlvbnNBbmRVbnJlYWRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQiLCJpbmNVc2VyTWVudGlvbnNBbmRVbnJlYWRGb3JSb29tSWRBbmRVc2VySWRzIiwiY29tcGFjdCIsInVuaXF1ZSIsInVucmVhZENvdW50IiwiaW5jVW5yZWFkIiwiaW5jTXNnQ291bnRBbmRTZXRMYXN0TWVzc2FnZUJ5SWQiLCJzZXRBbGVydEZvclJvb21JZEV4Y2x1ZGluZ1VzZXJJZCIsInJlcGx5IiwiRW1haWxSZXBseVBhcnNlciIsInNlbmRNZXNzYWdlIiwic2VudEJ5RW1haWwiLCJncm91cGFibGUiLCJ0c0RpZmYiLCJmaW5kT25lQnlFbWFpbEFkZHJlc3MiLCJwcmV2TWVzc2FnZSIsIk1lc3NhZ2VzIiwiZmluZE9uZUJ5SWQiLCJtaWQiLCJyb29tSW5mbyIsInByZXZNZXNzYWdlTGluayIsImZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZCIsImJsb2NrZWQiLCJibG9ja2VyIiwibXV0ZWQiLCJhbGlhcyIsImluYyIsInBhcnNlX3JlcGx5Iiwicm9vbVR5cGVzU2VydmVyIiwic2V0UHVibGlzaCIsInNldFJvb21GaW5kIiwicm9vbUZpbmQiLCJnZXRSb29tRmluZCIsInJ1blB1Ymxpc2giLCJzY29wZSIsImdldEVtYWlsQ29udGVudCIsIm1lc3NhZ2VDb250ZW50IiwibG5nIiwidXNlck5hbWUiLCJjaGFubmVsIiwiZmlsZSIsImZpbGVIZWFkZXIiLCJjb250ZW50IiwiYXR0YWNobWVudHMiLCJhdHRhY2htZW50IiwiZ2V0TWVzc2FnZUxpbmsiLCJyb29tUGF0aCIsImRpdmlzb3JNZXNzYWdlIiwibWVzc2FnZUhUTUwiLCJ0b2tlbnMiLCJ0b2tlbiIsImZvb3RlciIsInVzZXJzVG9TZW5kRW1haWwiLCJpc01lbnRpb25BbGwiLCJtYXhNZW1iZXJzRm9yTm90aWZpY2F0aW9uIiwiZmluZEJ5Um9vbUlkIiwidXNlcklkcyIsImZpbmRCeVJvb21JZEFuZFVzZXJJZHNPckFsbE1lc3NhZ2VzIiwiZGlzYWJsZU5vdGlmaWNhdGlvbnMiLCJlbWFpbE5vdGlmaWNhdGlvbnMiLCJtZW50aW9uZWRVc2VyIiwidXNlcklkc1RvU2VuZEVtYWlsIiwiZGVmYXVsdExpbmsiLCJsaW5rQnlVc2VyIiwiZmluZEJ5Um9vbUlkQW5kVXNlcklkcyIsInVzZXJzT2ZNZW50aW9uIiwiZ2V0VXNlcnNUb1NlbmRPZmZsaW5lRW1haWwiLCJlbWFpbE5vdGlmaWNhdGlvbk1vZGUiLCJ1c2VyRW1haWxQcmVmZXJlbmNlSXNEaXNhYmxlZCIsImRpcmVjdE1lc3NhZ2VFbWFpbFByZWZlcmVuY2UiLCJlbWFpbFN1YmplY3QiLCJlbWFpbHMiLCJ2ZXJpZmllZCIsImFkZHJlc3MiLCJzdWJqZWN0IiwiRW1haWwiLCJDQVRFR09SWV9NRVNTQUdFIiwiQ0FURUdPUllfTUVTU0FHRV9OT1JFUExZIiwicmVwbGFjZU1lbnRpb25lZFVzZXJuYW1lc1dpdGhGdWxsTmFtZXMiLCJjYW5TZW5kTWVzc2FnZVRvUm9vbSIsInBhcnNlTWVzc2FnZVRleHQiLCJpbWFnZV90eXBlIiwibm90aWZ5RGVza3RvcFVzZXIiLCJkdXJhdGlvbiIsIlVJX1VzZV9SZWFsX05hbWUiLCJOb3RpZmljYXRpb25zIiwibm90aWZ5VXNlciIsInNlbmRlciIsIm5vdGlmeUF1ZGlvVXNlciIsImdldEJhZGdlQ291bnQiLCJzdWJzY3JpcHRpb25zIiwiZmluZFVucmVhZEJ5VXNlcklkIiwic2VuZFB1c2hOb3RpZmljYXRpb25zIiwidXNlcklkc1RvUHVzaE5vdGlmeSIsInB1c2hfcm9vbSIsInB1c2hfdXNlcm5hbWUiLCJwdXNoX21lc3NhZ2UiLCJwdXNoVXNlcm5hbWVzIiwiZW5hYmxlZCIsInVzZXJJZFRvTm90aWZ5IiwiY2FsbEpvaW4iLCJhY3RpdmUiLCJydW5Bc1VzZXIiLCJhbHdheXNOb3RpZnlEZXNrdG9wVXNlcnMiLCJkb250Tm90aWZ5RGVza3RvcFVzZXJzIiwiYWx3YXlzTm90aWZ5TW9iaWxlVXNlcnMiLCJkb250Tm90aWZ5TW9iaWxlVXNlcnMiLCJkZXNrdG9wTm90aWZpY2F0aW9uRHVyYXRpb25zIiwiYWx3YXlzTm90aWZ5QXVkaW9Vc2VycyIsImRvbnROb3RpZnlBdWRpb1VzZXJzIiwiYXVkaW9Ob3RpZmljYXRpb25WYWx1ZXMiLCJjYW5CZU5vdGlmaWVkIiwiZGVza3RvcCIsIm1vYmlsZSIsImF1ZGlvIiwiZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zIiwiZmluZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzQnlSb29tIiwidXNlcnMiLCJmaW5kVXNlcnNCeUlkcyIsImF1ZGlvTm90aWZpY2F0aW9ucyIsImRlc2t0b3BOb3RpZmljYXRpb25zIiwibW9iaWxlUHVzaE5vdGlmaWNhdGlvbnMiLCJhdWRpb05vdGlmaWNhdGlvblZhbHVlIiwiZGVza3RvcE5vdGlmaWNhdGlvbkR1cmF0aW9uIiwidXNlcklkc0ZvckF1ZGlvIiwidXNlcklkc1RvTm90aWZ5IiwiYWx3YXlzTm90aWZ5TW9iaWxlQm9vbGVhbiIsInVzZXJzV2l0aEhpZ2hsaWdodHMiLCJ1c2VyT2ZNZW50aW9uSWQiLCJ1c2VyT2ZNZW50aW9uIiwic3RhdHVzQ29ubmVjdGlvbiIsIlNhbmRzdG9ybSIsImRlc2t0b3BNZW50aW9uSWRzIiwidW5pb24iLCJkaWZmZXJlbmNlIiwidXNlcnNPZkRlc2t0b3BNZW50aW9ucyIsIiRpbiIsInVzZXJzT2ZNZW50aW9uSXRlbSIsInBsdWNrIiwibW9iaWxlTWVudGlvbklkcyIsInVzZXJzT2ZNb2JpbGVNZW50aW9uc1F1ZXJ5IiwiJG5lIiwidXNlcnNPZk1vYmlsZU1lbnRpb25zIiwidXNlck1vYmlsZSIsImF1ZGlvTWVudGlvbklkcyIsInVzZXJzT2ZBdWRpb01lbnRpb25zIiwiZSIsIndpdGhvdXQiLCJ1c2Vyc09mTWVudGlvbklkIiwiYWxsVXNlcklkc1RvTm90aWZ5IiwiZG5zIiwiTnBtIiwiZW1haWxEb21haW5CbGFja0xpc3QiLCJlbWFpbERvbWFpbldoaXRlTGlzdCIsInVzZURlZmF1bHRCbGFja0xpc3QiLCJ1c2VETlNEb21haW5DaGVjayIsImRvbWFpbiIsInZhbGlkYXRlRW1haWxEb21haW4iLCJlbWFpbFZhbGlkYXRpb24iLCJlbWFpbERvbWFpbiIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwid3JhcEFzeW5jIiwicmVzb2x2ZU14IiwiZnMiLCJoYXNEb2NrZXJFbnYiLCJzdGF0U3luYyIsImhhc0RvY2tlckNHcm91cCIsInJlYWRGaWxlU3luYyIsImlzRG9ja2VyIiwiYWRkVXNlclRvRGVmYXVsdENoYW5uZWxzIiwic2lsZW5jZWQiLCJkZWZhdWx0Um9vbXMiLCJmaW5kQnlEZWZhdWx0QW5kVHlwZXMiLCJybyIsImhhc1Blcm1pc3Npb24iLCJhZGRVc2VybmFtZUJ5SWQiLCJjcmVhdGVXaXRoUm9vbUFuZFVzZXIiLCJvcGVuIiwiYWxlcnQiLCJ1c2VyTWVudGlvbnMiLCJncm91cE1lbnRpb25zIiwiY3JlYXRlVXNlckpvaW5XaXRoUm9vbUlkQW5kVXNlciIsImFkZFVzZXJUb1Jvb20iLCJpbnZpdGVyIiwiY3JlYXRlVXNlckFkZGVkV2l0aFJvb21JZEFuZFVzZXIiLCJhcmNoaXZlUm9vbSIsImFyY2hpdmVCeUlkIiwiYXJjaGl2ZUJ5Um9vbUlkIiwiY2hlY2tVc2VybmFtZUF2YWlsYWJpbGl0eSIsInVzZXJuYW1lQmxhY2tMaXN0IiwiZXZlcnkiLCJyZXN0cmljdGVkVXNlcm5hbWUiLCIkcmVnZXgiLCJjaGVja0VtYWlsQXZhaWxhYmlsaXR5IiwiY3JlYXRlUm9vbSIsIm93bmVyIiwibWVtYmVycyIsInJlYWRPbmx5IiwiZXh0cmFEYXRhIiwiZmluZE9uZUJ5VXNlcm5hbWUiLCJzbHVnaWZpZWRSb29tTmFtZSIsInN5c01lcyIsImFzc2lnbiIsImNyZWF0ZVdpdGhUeXBlTmFtZVVzZXJBbmRVc2VybmFtZXMiLCJtZW1iZXIiLCJtdXRlVXNlcm5hbWVCeVJvb21JZCIsImV4dHJhIiwibHMiLCJhZGRVc2VyUm9sZXMiLCJkZWxldGVNZXNzYWdlIiwia2VlcEhpc3RvcnkiLCJzaG93RGVsZXRlZFN0YXR1cyIsImRlbGV0ZWRNc2ciLCJjbG9uZUFuZFNhdmVBc0hpc3RvcnlCeUlkIiwic2V0SGlkZGVuQnlJZCIsIlVwbG9hZHMiLCJ1cGRhdGUiLCIkc2V0IiwiX2hpZGRlbiIsInJlbW92ZUJ5SWQiLCJGaWxlVXBsb2FkIiwiZ2V0U3RvcmUiLCJkZWxldGVCeUlkIiwiZ2V0TGFzdFZpc2libGVNZXNzYWdlU2VudFdpdGhOb1R5cGVCeVJvb21JZCIsInNldEFzRGVsZXRlZEJ5SWRBbmRVc2VyIiwibm90aWZ5Um9vbSIsImRlbGV0ZVVzZXIiLCJyZW1vdmVCeVVzZXJJZCIsImZpbmRCeVVzZXJJZCIsInJlbW92ZUJ5Um9vbUlkIiwicmVtb3ZlQnlUeXBlQ29udGFpbmluZ1VzZXJuYW1lIiwicmVtb3ZlVXNlcm5hbWVGcm9tQWxsIiwiYXZhdGFyT3JpZ2luIiwiZGVsZXRlQnlOYW1lIiwiSW50ZWdyYXRpb25zIiwiZGlzYWJsZUJ5VXNlcklkIiwiZ2V0RnVsbFVzZXJEYXRhIiwibGltaXQiLCJ1dGNPZmZzZXQiLCJleHRlbmQiLCJwaG9uZSIsImNyZWF0ZWRBdCIsImxhc3RMb2dpbiIsInNlcnZpY2VzIiwicmVxdWlyZVBhc3N3b3JkQ2hhbmdlIiwicmVxdWlyZVBhc3N3b3JkQ2hhbmdlUmVhc29uIiwicm9sZXMiLCJjdXN0b21GaWVsZHMiLCJzb3J0IiwiZmluZEJ5VXNlcm5hbWUiLCJmaWx0ZXJSZWciLCJmaW5kQnlVc2VybmFtZU5hbWVPckVtYWlsQWRkcmVzcyIsImdldFJvb21CeU5hbWVPcklkV2l0aE9wdGlvblRvSm9pbiIsIl9nZXRSb29tQnlOYW1lT3JJZFdpdGhPcHRpb25Ub0pvaW4iLCJjdXJyZW50VXNlcklkIiwibmFtZU9ySWQiLCJ0cnlEaXJlY3RCeVVzZXJJZE9ubHkiLCJqb2luQ2hhbm5lbCIsImVycm9yT25FbXB0eSIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJmaW5kT25lQnlJZE9yTmFtZSIsInJvb21Vc2VyIiwiJG9yIiwiaXNPYmplY3QiLCJyZW1vdmVVc2VyRnJvbVJvb20iLCJyZW1vdmVVc2VybmFtZUJ5SWQiLCJyZW1vdmVkVXNlciIsImNyZWF0ZVVzZXJMZWF2ZVdpdGhSb29tSWRBbmRVc2VyIiwiY3JlYXRlQ29tbWFuZFdpdGhSb29tSWRBbmRVc2VyIiwicmVtb3ZlQnlSb29tSWRBbmRVc2VySWQiLCJzYXZlVXNlciIsInVzZXJEYXRhIiwiZXhpc3RpbmdSb2xlcyIsImdldFJvbGVzIiwiZmllbGQiLCJlc2NhcGUiLCJpbnB1dCIsImNyZWF0ZVVzZXIiLCJqb2luRGVmYXVsdENoYW5uZWxzIiwidXBkYXRlVXNlciIsInNlbmRXZWxjb21lRW1haWwiLCJncmF2YXRhclVybCIsIkdyYXZhdGFyIiwiaW1hZ2VVcmwiLCJzaXplIiwic2VjdXJlIiwic2V0VXNlckF2YXRhciIsInNldFVzZXJuYW1lIiwic2V0UmVhbE5hbWUiLCJzZXRFbWFpbCIsInNldFBhc3N3b3JkIiwic2F2ZUN1c3RvbUZpZWxkcyIsImZvcm1EYXRhIiwidmFsaWRhdGVDdXN0b21GaWVsZHMiLCJzYXZlQ3VzdG9tRmllbGRzV2l0aG91dFZhbGlkYXRpb24iLCJjdXN0b21GaWVsZHNNZXRhIiwiSlNPTiIsInNldEN1c3RvbUZpZWxkcyIsImZpZWxkTmFtZSIsIm1vZGlmeVJlY29yZEZpZWxkIiwiYXJyYXkiLCIkYWRkVG9TZXQiLCJ1cHNlcnQiLCJwaWNrIiwiTWF0Y2giLCJ1cGRhdGVkX3Jvb20iLCJwYXJzZVVybHMiLCJ1cmxzIiwic2FuZHN0b3JtU2Vzc2lvbklkIiwiaW5zZXJ0IiwiYmxvY2tlZFNldHRpbmdzIiwiU0VUVElOR1NfQkxPQ0tFRCIsInNldHRpbmdJZCIsImhpZGRlblNldHRpbmdzIiwiU0VUVElOR1NfSElEREVOIiwiX3NvcnRlciIsInBhY2thZ2VWYWx1ZSIsInZhbHVlU291cmNlIiwiaGlkZGVuIiwic29ydGVyIiwiZW5hYmxlUXVlcnkiLCJzdHJpbmdpZnkiLCJpMThuRGVmYXVsdFF1ZXJ5IiwidG9Mb3dlckNhc2UiLCJwcm9jZXNzRW52VmFsdWUiLCJtZXRlb3JTZXR0aW5nc1ZhbHVlIiwiaTE4bkxhYmVsIiwiaTE4bkRlc2NyaXB0aW9uIiwidXBkYXRlT3BlcmF0aW9ucyIsIiRzZXRPbkluc2VydCIsImZvcmNlIiwic2VjdGlvbiIsIiR1bnNldCIsIiRleGlzdHMiLCJleGlzdGFudFNldHRpbmciLCJTZXR0aW5ncyIsImRiIiwiYWRkR3JvdXAiLCJpc0Z1bmN0aW9uIiwidXBkYXRlQnlJZCIsInVwZGF0ZVZhbHVlQW5kRWRpdG9yQnlJZCIsInVwZGF0ZVZhbHVlQnlJZCIsInVwZGF0ZU9wdGlvbnNCeUlkIiwiY2xlYXJCeUlkIiwiaW5pdCIsIm9ic2VydmUiLCJhZGRlZCIsInJlY29yZCIsImNoYW5nZWQiLCJyZW1vdmVkIiwiYWZ0ZXJJbml0aWFsTG9hZCIsIm9uQWZ0ZXJJbml0aWFsTG9hZCIsImRhdGFVUkkiLCJjb250ZW50VHlwZSIsInNlcnZpY2UiLCJlbmNvZGluZyIsInNldEF2YXRhck9yaWdpbiIsIkhUVFAiLCJucG1SZXF1ZXN0T3B0aW9ucyIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsImZpbGVEYXRhIiwiUm9ja2V0Q2hhdEZpbGUiLCJkYXRhVVJJUGFyc2UiLCJidWZmZXIiLCJCdWZmZXIiLCJmaWxlU3RvcmUiLCJub3RpZnlMb2dnZWQiLCJfc2V0VXNlcm5hbWUiLCJwcmV2aW91c1VzZXJuYW1lIiwic2VuZEVucm9sbG1lbnRFbWFpbCIsImF2YXRhclN1Z2dlc3Rpb25zIiwiZ2V0QXZhdGFyU3VnZ2VzdGlvbkZvclVzZXIiLCJncmF2YXRhciIsImF2YXRhckRhdGEiLCJibG9iIiwidXBkYXRlQWxsVXNlcm5hbWVzQnlVc2VySWQiLCJ1cGRhdGVVc2VybmFtZU9mRWRpdEJ5VXNlcklkIiwiZmluZEJ5TWVudGlvbiIsInVwZGF0ZWRNc2ciLCJ1cGRhdGVVc2VybmFtZUFuZE1lc3NhZ2VPZk1lbnRpb25CeUlkQW5kT2xkVXNlcm5hbWUiLCJyZXBsYWNlVXNlcm5hbWUiLCJyZXBsYWNlTXV0ZWRVc2VybmFtZSIsInJlcGxhY2VVc2VybmFtZU9mVXNlckJ5VXNlcklkIiwic2V0VXNlclVzZXJuYW1lQnlVc2VySWQiLCJzZXROYW1lRm9yRGlyZWN0Um9vbXNXaXRoT2xkTmFtZSIsIm1vZGVsIiwidXBkYXRlRmlsZU5hbWVCeUlkIiwiX3NldFJlYWxOYW1lIiwic2V0TmFtZSIsIl9zZXRFbWFpbCIsInVuYXJjaGl2ZVJvb20iLCJ1bmFyY2hpdmVCeUlkIiwidW5hcmNoaXZlQnlSb29tSWQiLCJ1cGRhdGVNZXNzYWdlIiwiZWRpdGVkQnkiLCJ0ZW1waWQiLCJmaWVsZFZhbHVlIiwicmVxdWlyZWQiLCJtYXhMZW5ndGgiLCJtaW5MZW5ndGgiLCJzdHJlYW1BbGwiLCJTdHJlYW1lciIsInN0cmVhbUxvZ2dlZCIsInN0cmVhbVJvb20iLCJzdHJlYW1Sb29tVXNlcnMiLCJzdHJlYW1Vc2VyIiwiYWxsb3dXcml0ZSIsImV2ZW50TmFtZSIsImZpbmRCeVJvb21JZEFuZE5vdFVzZXJJZCIsImFsbG93UmVhZCIsIndhcm4iLCJub3RpZnlBbGwiLCJ1bnNoaWZ0IiwiZW1pdCIsIm5vdGlmeUFsbEluVGhpc0luc3RhbmNlIiwiZW1pdFdpdGhvdXRCcm9hZGNhc3QiLCJub3RpZnlMb2dnZWRJblRoaXNJbnN0YW5jZSIsIm5vdGlmeVJvb21JblRoaXNJbnN0YW5jZSIsIm5vdGlmeVVzZXJJblRoaXNJbnN0YW5jZSIsIk1vZGVsc0Jhc2VEYiIsIk1vZGVsc0Jhc2VDYWNoZSIsIl9DYWNoZUNvbnRyb2wiLCJFbnZpcm9ubWVudFZhcmlhYmxlIiwiTW9kZWxzQmFzZSIsIm5hbWVPck1vZGVsIiwidXNlQ2FjaGUiLCJfZGIiLCJjb2xsZWN0aW9uTmFtZSIsIl91c2VDYWNoZSIsImNhY2hlIiwiYmluZCIsImdldER5bmFtaWNWaWV3IiwicHJvY2Vzc1F1ZXJ5T3B0aW9uc09uUmVzdWx0Iiwib3JpZ2luIiwiYXJyYXlUb0N1cnNvciIsImNvdW50Iiwic2V0VXBkYXRlZEF0IiwiZmluZE9uZUJ5SWRzIiwiaWRzIiwiaW5zZXJ0T3JVcHNlcnQiLCJhbGxvdyIsImRlbnkiLCJlbnN1cmVJbmRleCIsImRyb3BJbmRleCIsInRyeUVuc3VyZUluZGV4IiwidHJ5RHJvcEluZGV4IiwidHJhc2hGaW5kIiwidHJhc2hGaW5kRGVsZXRlZEFmdGVyIiwiX0Jhc2UiLCJBdmF0YXJzIiwiYmVmb3JlIiwiZG9jIiwiaW5zdGFuY2VJZCIsImluc2VydEF2YXRhckZpbGVJbml0Iiwic3RvcmUiLCJjb21wbGV0ZSIsInVwbG9hZGluZyIsInByb2dyZXNzIiwiZXh0ZW5zaW9uIiwidXBsb2FkZWRBdCIsInVwZGF0ZUZpbGVDb21wbGV0ZSIsImZpbGVJZCIsImRpcmVjdCIsInVwZGF0ZUZpbGVDb21wbGV0ZUJ5TmFtZUFuZFVzZXJJZCIsImRlbGV0ZUZpbGUiLCJzcGFyc2UiLCJleHBpcmVBZnRlclNlY29uZHMiLCJmaW5kVmlzaWJsZUJ5TWVudGlvbkFuZFJvb21JZCIsImZpbmRWaXNpYmxlQnlSb29tSWQiLCJmaW5kVmlzaWJsZUJ5Um9vbUlkTm90Q29udGFpbmluZ1R5cGVzIiwiJG5pbiIsImZpbmRJbnZpc2libGVCeVJvb21JZCIsImZpbmRWaXNpYmxlQnlSb29tSWRBZnRlclRpbWVzdGFtcCIsInRpbWVzdGFtcCIsIiRndCIsImZpbmRGb3JVcGRhdGVzIiwiX3VwZGF0ZWRBdCIsImZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXAiLCIkbHQiLCJmaW5kVmlzaWJsZUJ5Um9vbUlkQmVmb3JlVGltZXN0YW1wSW5jbHVzaXZlIiwiJGx0ZSIsImZpbmRWaXNpYmxlQnlSb29tSWRCZXR3ZWVuVGltZXN0YW1wcyIsImFmdGVyVGltZXN0YW1wIiwiYmVmb3JlVGltZXN0YW1wIiwiZmluZFZpc2libGVCeVJvb21JZEJldHdlZW5UaW1lc3RhbXBzSW5jbHVzaXZlIiwiJGd0ZSIsImZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXBOb3RDb250YWluaW5nVHlwZXMiLCJmaW5kVmlzaWJsZUJ5Um9vbUlkQmV0d2VlblRpbWVzdGFtcHNOb3RDb250YWluaW5nVHlwZXMiLCJmaW5kVmlzaWJsZUNyZWF0ZWRPckVkaXRlZEFmdGVyVGltZXN0YW1wIiwiZmluZFN0YXJyZWRCeVVzZXJBdFJvb20iLCJmaW5kUGlubmVkQnlSb29tIiwicGlubmVkIiwiZmluZFNuaXBwZXRlZEJ5Um9vbSIsInNuaXBwZXRlZCIsImdldExhc3RUaW1lc3RhbXAiLCJmaW5kQnlSb29tSWRBbmRNZXNzYWdlSWRzIiwibWVzc2FnZUlkcyIsImZpbmRPbmVCeVNsYWNrQm90SWRBbmRTbGFja1RzIiwic2xhY2tCb3RJZCIsInNsYWNrVHMiLCJmaW5kT25lQnlTbGFja1RzIiwibWUiLCJwYXJlbnQiLCJyZWFjdGlvbnMiLCJzZXRQaW5uZWRCeUlkQW5kVXNlcklkIiwicGlubmVkQnkiLCJwaW5uZWRBdCIsInNldFNuaXBwZXRlZEJ5SWRBbmRVc2VySWQiLCJzbmlwcGV0TmFtZSIsInNuaXBwZXRlZEJ5Iiwic25pcHBldGVkQXQiLCJzZXRVcmxzQnlJZCIsIm11bHRpIiwib2xkVXNlcm5hbWUiLCJuZXdVc2VybmFtZSIsIm5ld01lc3NhZ2UiLCJ1cGRhdGVVc2VyU3RhckJ5SWQiLCJzdGFycmVkIiwiJHB1bGwiLCJ1cGdyYWRlRXRzVG9FZGl0QXQiLCJldHMiLCIkcmVuYW1lIiwic2V0TWVzc2FnZUF0dGFjaG1lbnRzIiwic2V0U2xhY2tCb3RJZEFuZFNsYWNrVHMiLCJjcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyIiwiY3JlYXRlVXNlclJlbW92ZWRXaXRoUm9vbUlkQW5kVXNlciIsImNyZWF0ZVVzZXJNdXRlZFdpdGhSb29tSWRBbmRVc2VyIiwiY3JlYXRlVXNlclVubXV0ZWRXaXRoUm9vbUlkQW5kVXNlciIsImNyZWF0ZU5ld01vZGVyYXRvcldpdGhSb29tSWRBbmRVc2VyIiwiY3JlYXRlTW9kZXJhdG9yUmVtb3ZlZFdpdGhSb29tSWRBbmRVc2VyIiwiY3JlYXRlTmV3T3duZXJXaXRoUm9vbUlkQW5kVXNlciIsImNyZWF0ZU93bmVyUmVtb3ZlZFdpdGhSb29tSWRBbmRVc2VyIiwiY3JlYXRlTmV3TGVhZGVyV2l0aFJvb21JZEFuZFVzZXIiLCJjcmVhdGVMZWFkZXJSZW1vdmVkV2l0aFJvb21JZEFuZFVzZXIiLCJjcmVhdGVTdWJzY3JpcHRpb25Sb2xlQWRkZWRXaXRoUm9vbUlkQW5kVXNlciIsImNyZWF0ZVN1YnNjcmlwdGlvblJvbGVSZW1vdmVkV2l0aFJvb21JZEFuZFVzZXIiLCJnZXRNZXNzYWdlQnlGaWxlSWQiLCJmaWxlSUQiLCJSZXBvcnRzIiwiY3JlYXRlV2l0aE1lc3NhZ2VEZXNjcmlwdGlvbkFuZFVzZXJJZCIsIk1vZGVsUm9vbXMiLCJpZ25vcmVVcGRhdGVkRmllbGRzIiwiX2lkT3JOYW1lIiwiZmluZE9uZUJ5SW1wb3J0SWQiLCJpbXBvcnRJZHMiLCJmaW5kT25lQnlOYW1lQW5kVHlwZSIsImZpbmRPbmVCeUlkQ29udGFpbmluZ1VzZXJuYW1lIiwiZmluZE9uZUJ5TmFtZUFuZFR5cGVOb3RDb250YWluaW5nVXNlcm5hbWUiLCJmaW5kQnlJZCIsImZpbmRCeUlkcyIsInJvb21JZHMiLCJmaW5kQnlUeXBlIiwiZmluZEJ5VHlwZXMiLCJmaW5kQnlTdWJzY3JpcHRpb25Vc2VySWQiLCJfcm9vbSIsImZpbmRCeVN1YnNjcmlwdGlvblVzZXJJZFVwZGF0ZWRBZnRlciIsImZpbmRCeU5hbWVDb250YWluaW5nIiwibmFtZVJlZ2V4IiwiZmluZEJ5TmFtZUNvbnRhaW5pbmdUeXBlc1dpdGhVc2VybmFtZSIsIm9iaiIsImZpbmRDb250YWluaW5nVHlwZXNXaXRoVXNlcm5hbWUiLCJmaW5kQnlOYW1lQ29udGFpbmluZ0FuZFR5cGVzIiwiZmluZEJ5TmFtZUFuZFR5cGVOb3REZWZhdWx0IiwiZmluZEJ5TmFtZUFuZFR5cGVzTm90Q29udGFpbmluZ1VzZXJuYW1lIiwiZmluZEJ5TmFtZVN0YXJ0aW5nQW5kVHlwZXMiLCJmaW5kQnlUeXBlQ29udGFpbmluZ1VzZXJuYW1lIiwiZmluZEJ5VHlwZUNvbnRhaW5pbmdVc2VybmFtZXMiLCIkYWxsIiwiZmluZEJ5VHlwZXNBbmROb3RVc2VySWRDb250YWluaW5nVXNlcm5hbWUiLCJ1aWQiLCJmaW5kQnlDb250YWluaW5nVXNlcm5hbWUiLCJmaW5kQnlUeXBlQW5kTmFtZSIsImZpbmRCeUluZGV4IiwiZmluZEJ5VHlwZUFuZE5hbWVDb250YWluaW5nVXNlcm5hbWUiLCJmaW5kQnlUeXBlQW5kQXJjaGl2YXRpb25TdGF0ZSIsImFyY2hpdmF0aW9uc3RhdGUiLCJhZGRJbXBvcnRJZHMiLCIkZWFjaCIsImFkZFVzZXJuYW1lc0J5SWQiLCJhZGRVc2VybmFtZUJ5TmFtZSIsInJlbW92ZVVzZXJuYW1lc0J5SWQiLCJyZW1vdmVVc2VybmFtZUJ5TmFtZSIsInNldE5hbWVCeUlkIiwiJGluYyIsIm1zZ3MiLCJsYXN0TWVzc2FnZVRpbWVzdGFtcCIsImxtIiwic2V0Sm9pbkNvZGVCeUlkIiwiam9pbkNvZGUiLCJqb2luQ29kZVJlcXVpcmVkIiwic2V0VXNlckJ5SWQiLCJzZXRUeXBlQnlJZCIsInNldFRvcGljQnlJZCIsInRvcGljIiwic2V0QW5ub3VuY2VtZW50QnlJZCIsImFubm91bmNlbWVudCIsInVubXV0ZVVzZXJuYW1lQnlSb29tSWQiLCJzYXZlRGVmYXVsdEJ5SWQiLCJzZXRUb3BpY0FuZFRhZ3NCeUlkIiwidGFncyIsInNldERhdGEiLCJ1bnNldERhdGEiLCJpc0VtcHR5IiwidGFnIiwiY3JlYXRlV2l0aElkVHlwZUFuZE5hbWUiLCJNb2RlbFNldHRpbmdzIiwiZmluZE9uZU5vdEhpZGRlbkJ5SWQiLCJmaW5kQnlSb2xlIiwiZmluZFB1YmxpYyIsInB1YmxpYyIsImZpbmROb3RIaWRkZW5QdWJsaWMiLCJmaW5kTm90SGlkZGVuUHVibGljVXBkYXRlZEFmdGVyIiwidXBkYXRlZEF0IiwiZmluZE5vdEhpZGRlblByaXZhdGUiLCJmaW5kTm90SGlkZGVuIiwiZmluZE5vdEhpZGRlblVwZGF0ZWRBZnRlciIsInVwZGF0ZVZhbHVlTm90SGlkZGVuQnlJZCIsImNyZWF0ZVdpdGhJZEFuZFZhbHVlIiwiX2NyZWF0ZWRBdCIsIk1vZGVsU3Vic2NyaXB0aW9ucyIsImZpbmRPbmVCeVJvb21OYW1lQW5kVXNlcklkIiwiZmluZEJ5VXNlcklkVXBkYXRlZEFmdGVyIiwiZmluZEJ5Um9vbUlkQW5kUm9sZXMiLCJmaW5kQnlUeXBlQW5kVXNlcklkIiwiZmluZEJ5VHlwZU5hbWVBbmRVc2VySWQiLCJnZXRMYXN0U2VlbiIsImhpZGVCeVJvb21JZEFuZFVzZXJJZCIsIm9wZW5CeVJvb21JZEFuZFVzZXJJZCIsInNldEFzUmVhZEJ5Um9vbUlkQW5kVXNlcklkIiwic2V0QXNVbnJlYWRCeVJvb21JZEFuZFVzZXJJZCIsImZpcnN0TWVzc2FnZVVucmVhZFRpbWVzdGFtcCIsInNldEZhdm9yaXRlQnlSb29tSWRBbmRVc2VySWQiLCJmYXZvcml0ZSIsInVwZGF0ZU5hbWVBbmRBbGVydEJ5Um9vbUlkIiwidXBkYXRlTmFtZUJ5Um9vbUlkIiwib2xkTmFtZSIsImluY0dyb3VwIiwiaW5jVXNlciIsInNldEJsb2NrZWRCeVJvb21JZCIsInF1ZXJ5MiIsInVwZGF0ZTIiLCJ1bnNldEJsb2NrZWRCeVJvb21JZCIsInVwZGF0ZVR5cGVCeVJvb21JZCIsImFkZFJvbGVCeUlkIiwicmVtb3ZlUm9sZUJ5SWQiLCJzZXRBcmNoaXZlZEJ5VXNlcm5hbWUiLCJmaW5kTm90SGlkZGVuRmlsZXNPZlJvb20iLCJmaWxlUXVlcnkiLCJmaWxlT3B0aW9ucyIsImluc2VydEZpbGVJbml0IiwiTW9kZWxVc2VycyIsImVtYWlsQWRkcmVzcyIsImZpbmRPbmVBZG1pbiIsImFkbWluIiwiZmluZE9uZUJ5SWRBbmRMb2dpblRva2VuIiwiX2hhc2hMb2dpblRva2VuIiwiZmluZFVzZXJzTm90T2ZmbGluZSIsImZpbmRBY3RpdmVCeVVzZXJuYW1lT3JOYW1lUmVnZXhXaXRoRXhjZXB0aW9ucyIsInNlYXJjaFRlcm0iLCJleGNlcHRpb25zIiwiaXNBcnJheSIsInRlcm1SZWdleCIsIiRhbmQiLCJmaW5kQnlBY3RpdmVVc2Vyc0V4Y2VwdCIsIm9yU3RtdCIsImFjYyIsImVsIiwiZmluZFVzZXJzQnlOYW1lT3JVc2VybmFtZSIsIm5hbWVPclVzZXJuYW1lIiwidXNlcm5hbWVOYW1lT3JFbWFpbEFkZHJlc3MiLCJmaW5kTERBUFVzZXJzIiwibGRhcCIsImZpbmRDcm93ZFVzZXJzIiwiY3Jvd2QiLCJnZXRMYXN0TG9naW4iLCJmaW5kVXNlcnNCeVVzZXJuYW1lcyIsInVwZGF0ZUxhc3RMb2dpbkJ5SWQiLCJzZXRTZXJ2aWNlSWQiLCJzZXJ2aWNlTmFtZSIsInNlcnZpY2VJZCIsInNlcnZpY2VJZEtleSIsInNldEVtYWlsVmVyaWZpZWQiLCIkZWxlbU1hdGNoIiwidmFsdWVzIiwidW5zZXRBdmF0YXJPcmlnaW4iLCJzZXRVc2VyQWN0aXZlIiwic2V0QWxsVXNlcnNBY3RpdmUiLCJ1bnNldExvZ2luVG9rZW5zIiwidW5zZXRSZXF1aXJlUGFzc3dvcmRDaGFuZ2UiLCJyZXNldFBhc3N3b3JkQW5kU2V0UmVxdWlyZVBhc3N3b3JkQ2hhbmdlIiwic2V0TGFuZ3VhZ2UiLCJzZXRQcm9maWxlIiwicHJvZmlsZSIsInNldFByZWZlcmVuY2VzIiwic2V0VXRjT2Zmc2V0Iiwic2F2ZVVzZXJCeUlkIiwicGhvbmVOdW1iZXIiLCJjcmVhdGUiLCJ1c2Vyc0lkcyIsImxva2kiLCJvYmplY3RQYXRoIiwibG9raUVxIiwiTG9raU9wcyIsIiRlcSIsImxva2lOZSIsImEiLCJiIiwibG9raUluIiwic3ViQSIsInN1YkIiLCJmaW5kV2hlcmUiLCJpZ25vcmUiLCJ0cmFjZU1ldGhvZENhbGxzIiwidGFyZ2V0IiwiX3N0YXRzIiwicHJvcGVydHkiLCJjYWxscyIsImF2ZyIsIm9yaWdNZXRob2QiLCJsb2FkZWQiLCJzdGFydFRpbWUiLCJyb3VuZCIsIl9nZXRTdGF0c0F2ZyIsInN0YXRzIiwiQWRhcHRlciIsImxvYWREYXRhYmFzZSIsInNhdmVEYXRhYmFzZSIsImRlbGV0ZURhdGFiYXNlIiwiYWRhcHRlciIsImluZGV4ZXMiLCJqb2lucyIsImNvbGxlY3Rpb24iLCJhZGRDb2xsZWN0aW9uIiwiaGFzT25lIiwiaGFzTWFueSIsInByb2Nlc3NSZW1vdGVKb2luSW5zZXJ0ZWQiLCJyZW1vdGUiLCJwcm9jZXNzUmVtb3RlSm9pblJlbW92ZWQiLCJsb2NhbFJlY29yZCIsInByb2Nlc3NMb2NhbEpvaW5JbnNlcnRlZCIsImxvY2FsIiwibG9jYWxSZWNvcmRzIiwiX2ZpbmRCeUluZGV4Iiwid2hlcmUiLCJtdXRhYmxlUmVjb3JkIiwidHJhbnNmb3JtIiwicmVjb3JkcyIsInNwbGljZSIsImFkZFRvQWxsSW5kZXhlcyIsImluZGV4TmFtZSIsImFkZFRvSW5kZXgiLCJpbmRleCIsInJlbW92ZUZyb21BbGxJbmRleGVzIiwicmVtb3ZlRnJvbUluZGV4Iiwic3RhcnRTeW5jIiwidXBkYXRlRGlmZkJ5SWQiLCJyIiwiZGlyZWN0aW9uIiwidmFsdWVBIiwidmFsdWVCIiwic2tpcCIsImZpZWxkc1RvUmVtb3ZlIiwiZmllbGRzVG9HZXQiLCJwaWNrRmllbGRzIiwicGlja2VkIiwib21pdCIsInByb2Nlc3NRdWVyeSIsInBhcmVudEZpZWxkIiwiYW5kIiwic3ViVmFsdWUiLCJvYnNlcnZlQ2hhbmdlcyIsIl9wdWJsaXNoQ3Vyc29yIiwiY3Vyc29yIiwiYWRkRHluYW1pY1ZpZXciLCJ1cGRhdGVkRmllbGRzIiwidXBkYXRlUmVjb3JkIiwidG9wTGV2ZWxGaWVsZHMiLCJkZWwiLCIkbWluIiwiY3VyVmFsdWUiLCIkbWF4IiwiJG11bCIsIiRwdWxsQWxsIiwiJHBvcCIsInNoaWZ0IiwicG9wIiwidmFsdWVJdGVtIiwicmVtb3ZlV2hlcmUiLCJleHBvcnREZWZhdWx0IiwiYmFzZU5hbWUiLCJ0cmFzaCIsIk1vbmdvIiwiQ29sbGVjdGlvbiIsIl9lbnN1cmVJbmRleCIsIl9kZWxldGVkQXQiLCJpc09wbG9nQXZhaWxhYmxlIiwiTW9uZ29JbnRlcm5hbHMiLCJkZWZhdWx0UmVtb3RlQ29sbGVjdGlvbkRyaXZlciIsIm1vbmdvIiwiX29wbG9nSGFuZGxlIiwib25PcGxvZ0VudHJ5IiwiaXNPcGxvZ0VuYWJsZWQiLCJiYXNlTW9kZWwiLCJ3cmFwTW9kZWwiLCJldmVudCIsInByb2Nlc3NPcGxvZ1JlY29yZCIsIl9kZWZpbmVUb29GYXJCZWhpbmQiLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwib3JpZ2luYWxzIiwic2VsZiIsImRlZmluZVN5bmNTdHJhdGVneSIsIm1vZGlmaWVyIiwiY2FjaGVBbGxvd2VkTW9kaWZpZXJzIiwibm90QWxsb3dlZE1vZGlmaWVycyIsInBsYWNlaG9sZGVyRmllbGRzIiwidXBkYXRlSGFzUG9zaXRpb25hbE9wZXJhdG9yIiwib3AiLCJvIiwib3Bsb2ciLCJsaXN0ZW5lckNvdW50Iiwic3RyYXRlZ3kiLCJmaW5kT3B0aW9ucyIsImluc2VydGVkSWQiLCJfcmV0dXJuT2JqZWN0IiwiX19jb2xsZWN0aW9uX18iLCJfZHJvcEluZGV4IiwiZGVsZXRlZEF0IiwiQWNjZXNzVG9rZW5TZXJ2aWNlcyIsInJlZ2lzdGVyQWNjZXNzVG9rZW5TZXJ2aWNlIiwiaGFuZGxlQWNjZXNzVG9rZW5SZXF1ZXN0IiwicmVnaXN0ZXJMb2dpbkhhbmRsZXIiLCJhY2Nlc3NUb2tlbiIsIk9iamVjdEluY2x1ZGluZyIsIlNlcnZpY2VDb25maWd1cmF0aW9uIiwiY29uZmlndXJhdGlvbnMiLCJDb25maWdFcnJvciIsIm9hdXRoIiwic2VydmljZU5hbWVzIiwiTG9naW5DYW5jZWxsZWRFcnJvciIsIm51bWVyaWNFcnJvciIsIm9hdXRoUmVzdWx0IiwidXBkYXRlT3JDcmVhdGVVc2VyRnJvbUV4dGVybmFsU2VydmljZSIsInNlcnZpY2VEYXRhIiwiZ2V0SWRlbnRpdHkiLCJhY2Nlc3NfdG9rZW4iLCJnZXRTY29wZXMiLCJpZFRva2VuIiwiZXhwaXJlc0luIiwiSW50ZWdlciIsIk1heWJlIiwiaWRlbnRpdHkiLCJleHBpcmVzQXQiLCJzY29wZXMiLCJHb29nbGUiLCJ3aGl0ZWxpc3RlZEZpZWxkcyIsInJlZnJlc2hUb2tlbiIsIk9BdXRoIiwiX3JlZGlyZWN0VXJpIiwicHJveHkiLCJTdGF0c1RyYWNrZXIiLCJTdGF0c0QiLCJkb2dzdGF0c2QiLCJ0cmFjayIsImhydGltZSIsImRlY3JlbWVudCIsImhpc3RvZ3JhbSIsImdhdWdlIiwiYXJyIiwiYXBwbHlGaW5kIiwiJHNpemUiLCJ0ZXN0V2ViQXBwSW50ZXJuYWxzIiwiaXNTdHJpbmciLCJzZXRCdW5kbGVkSnNDc3NQcmVmaXgiLCJzdGFydEVtYWlsSW50ZXJjZXB0ZXIiLCJkZWJvdW5jZSIsImJ1aWxkTWFpbFVSTCIsIk1BSUxfVVJMIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib2F1dGhfdXBkYXRlZCIsIl9PQXV0aFNlcnZpY2VzVXBkYXRlIiwiY2xpZW50SWQiLCJzZWNyZXQiLCJjdXN0b20iLCJzZXJ2ZXJVUkwiLCJ0b2tlblBhdGgiLCJpZGVudGl0eVBhdGgiLCJhdXRob3JpemVQYXRoIiwiYnV0dG9uTGFiZWxUZXh0IiwiYnV0dG9uTGFiZWxDb2xvciIsImxvZ2luU3R5bGUiLCJidXR0b25Db2xvciIsInRva2VuU2VudFZpYSIsImlkZW50aXR5VG9rZW5TZW50VmlhIiwidXNlcm5hbWVGaWVsZCIsIm1lcmdlVXNlcnMiLCJDdXN0b21PQXV0aCIsImFwcElkIiwiY29uc3VtZXJLZXkiLCJPQXV0aFNlcnZpY2VzVXBkYXRlIiwiT0F1dGhTZXJ2aWNlc1JlbW92ZSIsIkRFUExPWU1FTlRfSUQiLCJyZWFkb25seSIsImFjdGlvblRleHQiLCJjb2RlIiwibXVsdGlsaW5lIiwicGxhY2Vob2xkZXIiLCJ1bmJsb2NrIiwiYWRkT0F1dGhTZXJ2aWNlIiwiY2FwaXRhbGl6ZSIsInBlcnNpc3RlbnQiLCJyZWZyZXNoT0F1dGhTZXJ2aWNlIiwiYWRkVXNlcnNUb1Jvb20iLCJ1c2VySW5Sb29tIiwibmV3VXNlciIsImJsb2NrVXNlciIsInN1YnNjcmlwdGlvbjIiLCJjaGVja1JlZ2lzdHJhdGlvblNlY3JldFVSTCIsImNsZWFuQ2hhbm5lbEhpc3RvcnkiLCJsYXRlc3QiLCJvbGRlc3QiLCJpbmNsdXNpdmUiLCJCb29sZWFuIiwiY3JlYXRlQ2hhbm5lbCIsIk9wdGlvbmFsIiwiY3JlYXRlVG9rZW4iLCJfZ2VuZXJhdGVTdGFtcGVkTG9naW5Ub2tlbiIsIl9pbnNlcnRMb2dpblRva2VuIiwiYXV0aFRva2VuIiwiY3JlYXRlUHJpdmF0ZUdyb3VwIiwidG9rZW5wYXNzIiwiYmFsYW5jZSIsIm9yaWdpbmFsTWVzc2FnZSIsImZvcmNlRGVsZXRlIiwiZGVsZXRlQWxsb3dlZCIsImRlbGV0ZU93biIsImJsb2NrRGVsZXRlSW5NaW51dGVzIiwibXNnVHMiLCJjdXJyZW50VHNEaWZmIiwiZGVsZXRlVXNlck93bkFjY291bnQiLCJiY3J5cHQiLCJfY2hlY2tQYXNzd29yZCIsImRpZ2VzdCIsImFsZ29yaXRobSIsIkZpbHRlciIsImJhZFdvcmRzTGlzdCIsImNsZWFuIiwiZ2V0Q2hhbm5lbEhpc3RvcnkiLCJ1bnJlYWRzIiwiZnJvbVVzZXJJZCIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwibWVzc2FnZXMiLCJ1bnJlYWROb3RMb2FkZWQiLCJmaXJzdFVucmVhZCIsImZpcnN0TXNnIiwidW5yZWFkTWVzc2FnZXMiLCJnZXRSb29tSm9pbkNvZGUiLCJnZXRSb29tUm9sZXMiLCJSb2xlcyIsImdldFNlcnZlckluZm8iLCJnZXRTaW5nbGVNZXNzYWdlIiwibXNnSWQiLCJnZXRVc2VyUm9sZXMiLCJyb2xlSWRzIiwiZmluZFVzZXJzSW5Sb2xlcyIsImludGVyc2VjdGlvbiIsImluc2VydE9yVXBkYXRlVXNlciIsImpvaW5Sb29tIiwiYmFsYW5jZXMiLCJ1cGRhdGVVc2VyVG9rZW5wYXNzQmFsYW5jZXMiLCJUb2tlbnBhc3MiLCJ2YWxpZGF0ZUFjY2VzcyIsImxlYXZlUm9vbSIsImhhc1JvbGUiLCJudW1Pd25lcnMiLCJnZXRVc2Vyc0luUm9sZSIsInJlbW92ZU9BdXRoU2VydmljZSIsInJlc3RhcnRfc2VydmVyIiwiYWJvcnQiLCJleGl0IiwibSIsInNhdmVTZXR0aW5nIiwiT25lT2YiLCJzZW5kSW52aXRhdGlvbkVtYWlsIiwicmZjTWFpbFBhdHRlcm4iLCJ2YWxpZEVtYWlscyIsIm1lc3NhZ2VfdHMiLCJzZXJ2ZXJfdHMiLCJnZXRUaW1lIiwic2FuZHN0b3JtIiwiY29ubmVjdGlvbiIsInNlbmRTTVRQVGVzdEVtYWlsIiwic2V0QWRtaW5TdGF0dXMiLCJwYXJhbSIsImpvaW5EZWZhdWx0Q2hhbm5lbHNTaWxlbmNlZCIsInVuYmxvY2tVc2VyIiwiZWRpdEFsbG93ZWQiLCJlZGl0T3duIiwiYmxvY2tFZGl0SW5NaW51dGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLFlBQUo7QUFBaUJDLE9BQU9DLEtBQVAsQ0FBYUMsUUFBUSxzQkFBUixDQUFiLEVBQTZDO0FBQUNDLFVBQVFDLENBQVIsRUFBVTtBQUFDTCxtQkFBYUssQ0FBYjtBQUFlOztBQUEzQixDQUE3QyxFQUEwRSxDQUExRTtBQUNqQkMsYUFBYSxJQUFJTixZQUFKLEVBQWIsQyxDQUNBOzs7O0FBSUFNLFdBQVdDLE1BQVgsR0FBb0IsRUFBcEIsQzs7Ozs7Ozs7Ozs7QUNOQU4sT0FBT08sTUFBUCxDQUFjO0FBQUNDLG1CQUFpQixNQUFJQSxnQkFBdEI7QUFBdUNDLGdCQUFjLE1BQUlBLGFBQXpEO0FBQXVFQyxzQkFBb0IsTUFBSUEsbUJBQS9GO0FBQW1I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U0FBWCxDQUFxQnZFLEdBQXJCLENBQXlCLElBQUlsRSxlQUFKLEVBQXpCO0FBQ0FwRyxXQUFXNk8sU0FBWCxDQUFxQnZFLEdBQXJCLENBQXlCLElBQUloRyxxQkFBSixFQUF6QixFIiwiZmlsZSI6Ii9wYWNrYWdlcy9yb2NrZXRjaGF0X2xpYi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnd29sZnk4Ny1ldmVudGVtaXR0ZXInO1xuUm9ja2V0Q2hhdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbi8qXG4qIEtpY2sgb2ZmIHRoZSBnbG9iYWwgbmFtZXNwYWNlIGZvciBSb2NrZXRDaGF0LlxuKiBAbmFtZXNwYWNlIFJvY2tldENoYXRcbiovXG5Sb2NrZXRDaGF0Lm1vZGVscyA9IHt9O1xuIiwiZXhwb3J0IGNvbnN0IFJvb21TZXR0aW5nc0VudW0gPSB7XG5cdE5BTUU6ICdyb29tTmFtZScsXG5cdFRPUElDOiAncm9vbVRvcGljJyxcblx0QU5OT1VOQ0VNRU5UOiAncm9vbUFubm91bmNlbWVudCcsXG5cdERFU0NSSVBUSU9OOiAncm9vbURlc2NyaXB0aW9uJyxcblx0UkVBRF9PTkxZOiAncmVhZE9ubHknLFxuXHRSRUFDVF9XSEVOX1JFQURfT05MWTogJ3JlYWN0V2hlblJlYWRPbmx5Jyxcblx0QVJDSElWRV9PUl9VTkFSQ0hJVkU6ICdhcmNoaXZlT3JVbmFyY2hpdmUnLFxuXHRKT0lOX0NPREU6ICdqb2luQ29kZSdcbn07XG5cbmV4cG9ydCBjb25zdCBVaVRleHRDb250ZXh0ID0ge1xuXHRDTE9TRV9XQVJOSU5HOiAnY2xvc2VXYXJuaW5nJyxcblx0SElERV9XQVJOSU5HOiAnaGlkZVdhcm5pbmcnLFxuXHRMRUFWRV9XQVJOSU5HOiAnbGVhdmVXYXJuaW5nJyxcblx0Tk9fUk9PTVNfU1VCU0NSSUJFRDogJ25vUm9vbXNTdWJzY3JpYmVkJ1xufTtcblxuZXhwb3J0IGNsYXNzIFJvb21UeXBlUm91dGVDb25maWcge1xuXHRjb25zdHJ1Y3Rvcih7IG5hbWUsIHBhdGggfSkge1xuXHRcdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIG5hbWUgbXVzdCBiZSBhIHN0cmluZy4nKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHBhdGggIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgfHwgcGF0aC5sZW5ndGggPT09IDApKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcuJyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fbmFtZSA9IG5hbWU7XG5cdFx0dGhpcy5fcGF0aCA9IHBhdGg7XG5cdH1cblxuXHRnZXQgbmFtZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fbmFtZTtcblx0fVxuXG5cdGdldCBwYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLl9wYXRoO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBSb29tVHlwZUNvbmZpZyB7XG5cdGNvbnN0cnVjdG9yKHtcblx0XHRpZGVudGlmaWVyID0gUmFuZG9tLmlkKCksXG5cdFx0b3JkZXIsXG5cdFx0aWNvbixcblx0XHRoZWFkZXIsXG5cdFx0bGFiZWwsXG5cdFx0cm91dGVcblx0fSkge1xuXHRcdGlmICh0eXBlb2YgaWRlbnRpZmllciAhPT0gJ3N0cmluZycgfHwgaWRlbnRpZmllci5sZW5ndGggPT09IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIGlkZW50aWZpZXIgbXVzdCBiZSBhIHN0cmluZy4nKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIG9yZGVyICE9PSAnbnVtYmVyJykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgb3JkZXIgbXVzdCBiZSBhIG51bWJlci4nKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIGljb24gIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2YgaWNvbiAhPT0gJ3N0cmluZycgfHwgaWNvbi5sZW5ndGggPT09IDApKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBpY29uIG11c3QgYmUgYSBzdHJpbmcuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiBoZWFkZXIgIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2YgaGVhZGVyICE9PSAnc3RyaW5nJyB8fCBoZWFkZXIubGVuZ3RoID09PSAwKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgaGVhZGVyIG11c3QgYmUgYSBzdHJpbmcuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiBsYWJlbCAhPT0gJ3VuZGVmaW5lZCcgJiYgKHR5cGVvZiBsYWJlbCAhPT0gJ3N0cmluZycgfHwgbGFiZWwubGVuZ3RoID09PSAwKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgbGFiZWwgbXVzdCBiZSBhIHN0cmluZy4nKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHJvdXRlICE9PSAndW5kZWZpbmVkJyAmJiAhKHJvdXRlIGluc3RhbmNlb2YgUm9vbVR5cGVSb3V0ZUNvbmZpZykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignUm9vbVxcJ3Mgcm91dGUgaXMgbm90IGEgdmFsaWQgcm91dGUgY29uZmlndXJhdGlvbi4gTXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBcIlJvb21UeXBlUm91dGVDb25maWdcIi4nKTtcblx0XHR9XG5cblx0XHR0aGlzLl9pZGVudGlmaWVyID0gaWRlbnRpZmllcjtcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xuXHRcdHRoaXMuX2ljb24gPSBpY29uO1xuXHRcdHRoaXMuX2hlYWRlciA9IGhlYWRlcjtcblx0XHR0aGlzLl9sYWJlbCA9IGxhYmVsO1xuXHRcdHRoaXMuX3JvdXRlID0gcm91dGU7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIHJvb20gdHlwZSdzIGludGVybmFsIGlkZW50aWZpZXIuXG5cdCAqL1xuXHRnZXQgaWRlbnRpZmllcigpIHtcblx0XHRyZXR1cm4gdGhpcy5faWRlbnRpZmllcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgb3JkZXIgb2YgdGhpcyByb29tIHR5cGUgZm9yIHRoZSBkaXNwbGF5LlxuXHQgKi9cblx0Z2V0IG9yZGVyKCkge1xuXHRcdHJldHVybiB0aGlzLl9vcmRlcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBvcmRlciBvZiB0aGlzIHJvb20gdHlwZSBmb3IgdGhlIGRpc3BsYXkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBvcmRlciB0aGUgbnVtYmVyIHZhbHVlIGZvciB0aGUgb3JkZXJcblx0ICovXG5cdHNldCBvcmRlcihvcmRlcikge1xuXHRcdGlmICh0eXBlb2Ygb3JkZXIgIT09ICdudW1iZXInKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBvcmRlciBtdXN0IGJlIGEgbnVtYmVyLicpO1xuXHRcdH1cblxuXHRcdHRoaXMuX29yZGVyID0gb3JkZXI7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGljb24gY2xhc3MsIGNzcywgdG8gdXNlIGFzIHRoZSB2aXN1YWwgYWlkLlxuXHQgKi9cblx0Z2V0IGljb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2ljb247XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGhlYWRlciBuYW1lIG9mIHRoaXMgdHlwZS5cblx0ICovXG5cdGdldCBoZWFkZXIoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2hlYWRlcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgaTE4biBsYWJlbCBmb3IgdGhpcyByb29tIHR5cGUuXG5cdCAqL1xuXHRnZXQgbGFiZWwoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2xhYmVsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSByb3V0ZSBjb25maWcgZm9yIHRoaXMgcm9vbSB0eXBlLlxuXHQgKi9cblx0Z2V0IHJvdXRlKCkge1xuXHRcdHJldHVybiB0aGlzLl9yb3V0ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSByb29tJ3MgbmFtZSB0byBkaXNwbGF5IGluIHRoZSBVSS5cblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IHJvb21cblx0ICovXG5cdGdldERpc3BsYXlOYW1lKHJvb20pIHtcblx0XHRyZXR1cm4gcm9vbS5uYW1lO1xuXHR9XG5cblx0YWxsb3dSb29tU2V0dGluZ0NoYW5nZSgvKiByb29tLCBzZXR0aW5nICovKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRjYW5CZUNyZWF0ZWQoKSB7XG5cdFx0cmV0dXJuIE1ldGVvci5pc1NlcnZlciA/XG5cdFx0XHRSb2NrZXRDaGF0LmF1dGh6Lmhhc0F0TGVhc3RPbmVQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgW2BjcmVhdGUtJHsgdGhpcy5faWRlbnRpZmllciB9YF0pIDpcblx0XHRcdFJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oW2BjcmVhdGUtJHsgdGhpcy5faWRlbnRpZmllciB9YF0pO1xuXHR9XG5cblx0Y2FuQmVEZWxldGVkKHJvb20pIHtcblx0XHRyZXR1cm4gTWV0ZW9yLmlzU2VydmVyID9cblx0XHRcdFJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCBbYGRlbGV0ZS0keyByb29tLnQgfWBdLCByb29tLl9pZCkgOlxuXHRcdFx0Um9ja2V0Q2hhdC5hdXRoei5oYXNBdExlYXN0T25lUGVybWlzc2lvbihbYGRlbGV0ZS0keyByb29tLnQgfWBdLCByb29tLl9pZCk7XG5cdH1cblxuXHRzdXBwb3J0TWVtYmVyc0xpc3QoLyogcm9vbSAqLykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aXNHcm91cENoYXQoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Y2FuQWRkVXNlcigvKiB1c2VySWQsIHJvb20gKi8pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR1c2VyRGV0YWlsU2hvd0FsbCgvKiByb29tICovKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHR1c2VyRGV0YWlsU2hvd0FkbWluKC8qIHJvb20gKi8pIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHByZXZlbnRSZW5hbWluZygvKiByb29tICovKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aW5jbHVkZUluUm9vbVNlYXJjaCgpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRlbmFibGVNZW1iZXJzTGlzdFByb2ZpbGUoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB0ZXh0IHdoaWNoIGNhbiBiZSB1c2VkIGluIGdlbmVyaWMgVUlzLlxuXHQgKiBAcGFyYW0gY29udGV4dCBUaGUgcm9sZSBvZiB0aGUgdGV4dCBpbiB0aGUgVUktRWxlbWVudFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEEgdGV4dCBvciBhIHRyYW5zbGF0aW9uIGtleSAtIHRoZSBjb25zdW1lcnMgb2YgdGhpcyBtZXRob2Qgd2lsbCBwYXNzIHRoZVxuXHQgKiByZXR1cm5lZCB2YWx1ZSB0byBhbiBpbnRlcm5hdGlvbmFsaXphdGlvbiBsaWJyYXJ5XG5cdCAqL1xuXHRnZXRVaVRleHQoLyogY29udGV4dCAqLykge1xuXHRcdHJldHVybiAnJztcblx0fVxufVxuIiwiaW1wb3J0IHsgUm9vbVR5cGVDb25maWcgfSBmcm9tICcuLi9Sb29tVHlwZUNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBDaGFubmVsc1Jvb21UeXBlIGV4dGVuZHMgUm9vbVR5cGVDb25maWcge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRpZGVudGlmaWVyOiAnY2hhbm5lbHMnLFxuXHRcdFx0b3JkZXI6IDMwLFxuXHRcdFx0bGFiZWw6ICdDaGFubmVscydcblx0XHR9KTtcblx0fVxuXG5cdGNvbmRpdGlvbigpIHtcblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXIoKTtcblx0XHRjb25zdCByb29tc0xpc3RFeGhpYml0aW9uTW9kZSA9IFJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UodXNlciwgJ3Jvb21zTGlzdEV4aGliaXRpb25Nb2RlJyk7XG5cdFx0Y29uc3QgbWVyZ2VDaGFubmVscyA9IFJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UodXNlciwgJ21lcmdlQ2hhbm5lbHMnKTtcblx0XHRyZXR1cm4gWyd1bnJlYWQnLCAnY2F0ZWdvcnknXS5pbmNsdWRlcyhyb29tc0xpc3RFeGhpYml0aW9uTW9kZSkgJiYgbWVyZ2VDaGFubmVscztcblx0fVxufVxuIiwiaW1wb3J0IHsgUm9vbVR5cGVDb25maWcgfSBmcm9tICcuLi9Sb29tVHlwZUNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBDb252ZXJzYXRpb25Sb29tVHlwZSBleHRlbmRzIFJvb21UeXBlQ29uZmlnIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0aWRlbnRpZmllcjogJ2FjdGl2aXR5Jyxcblx0XHRcdG9yZGVyOiAzMCxcblx0XHRcdGxhYmVsOiAnQ29udmVyc2F0aW9ucydcblx0XHR9KTtcblx0fVxuXG5cdGNvbmRpdGlvbigpIHtcblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXIoKTtcblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5nZXRVc2VyUHJlZmVyZW5jZSh1c2VyLCAncm9vbXNMaXN0RXhoaWJpdGlvbk1vZGUnKSA9PT0gJ2FjdGl2aXR5Jztcblx0fVxufVxuIiwiLyogZ2xvYmFscyBvcGVuUm9vbSAqL1xuaW1wb3J0IHtSb29tVHlwZUNvbmZpZywgUm9vbVR5cGVSb3V0ZUNvbmZpZywgUm9vbVNldHRpbmdzRW51bSwgVWlUZXh0Q29udGV4dH0gZnJvbSAnLi4vUm9vbVR5cGVDb25maWcnO1xuXG5leHBvcnQgY2xhc3MgRGlyZWN0TWVzc2FnZVJvb21Sb3V0ZSBleHRlbmRzIFJvb21UeXBlUm91dGVDb25maWcge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRuYW1lOiAnZGlyZWN0Jyxcblx0XHRcdHBhdGg6ICcvZGlyZWN0Lzp1c2VybmFtZSdcblx0XHR9KTtcblx0fVxuXG5cdGFjdGlvbihwYXJhbXMpIHtcblx0XHRyZXR1cm4gb3BlblJvb20oJ2QnLCBwYXJhbXMudXNlcm5hbWUpO1xuXHR9XG5cblx0bGluayhzdWIpIHtcblx0XHRyZXR1cm4ge3VzZXJuYW1lOiBzdWIubmFtZX07XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIERpcmVjdE1lc3NhZ2VSb29tVHlwZSBleHRlbmRzIFJvb21UeXBlQ29uZmlnIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0aWRlbnRpZmllcjogJ2QnLFxuXHRcdFx0b3JkZXI6IDUwLFxuXHRcdFx0bGFiZWw6ICdEaXJlY3RfTWVzc2FnZXMnLFxuXHRcdFx0cm91dGU6IG5ldyBEaXJlY3RNZXNzYWdlUm9vbVJvdXRlKClcblx0XHR9KTtcblx0fVxuXG5cdGZpbmRSb29tKGlkZW50aWZpZXIpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHQ6ICdkJyxcblx0XHRcdG5hbWU6IGlkZW50aWZpZXJcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gQ2hhdFN1YnNjcmlwdGlvbi5maW5kT25lKHF1ZXJ5KTtcblx0XHRpZiAoc3Vic2NyaXB0aW9uICYmIHN1YnNjcmlwdGlvbi5yaWQpIHtcblx0XHRcdHJldHVybiBDaGF0Um9vbS5maW5kT25lKHN1YnNjcmlwdGlvbi5yaWQpO1xuXHRcdH1cblx0fVxuXG5cdHJvb21OYW1lKHJvb21EYXRhKSB7XG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gQ2hhdFN1YnNjcmlwdGlvbi5maW5kT25lKHtyaWQ6IHJvb21EYXRhLl9pZH0sIHtmaWVsZHM6IHtuYW1lOiAxLCBmbmFtZTogMX19KTtcblx0XHRpZiAoIXN1YnNjcmlwdGlvbikge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpICYmIHN1YnNjcmlwdGlvbi5mbmFtZSkge1xuXHRcdFx0cmV0dXJuIHN1YnNjcmlwdGlvbi5mbmFtZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc3Vic2NyaXB0aW9uLm5hbWU7XG5cdH1cblxuXHRzZWNvbmRhcnlSb29tTmFtZShyb29tRGF0YSkge1xuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpKSB7XG5cdFx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSBDaGF0U3Vic2NyaXB0aW9uLmZpbmRPbmUoe3JpZDogcm9vbURhdGEuX2lkfSwge2ZpZWxkczoge25hbWU6IDF9fSk7XG5cdFx0XHRyZXR1cm4gc3Vic2NyaXB0aW9uICYmIHN1YnNjcmlwdGlvbi5uYW1lO1xuXHRcdH1cblx0fVxuXG5cdGNvbmRpdGlvbigpIHtcblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXIoKTtcblx0XHRjb25zdCByb29tc0xpc3RFeGhpYml0aW9uTW9kZSA9IFJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UodXNlciwgJ3Jvb21zTGlzdEV4aGliaXRpb25Nb2RlJyk7XG5cdFx0cmV0dXJuICFyb29tc0xpc3RFeGhpYml0aW9uTW9kZSB8fCBbJ3VucmVhZCcsICdjYXRlZ29yeSddLmluY2x1ZGVzKHJvb21zTGlzdEV4aGliaXRpb25Nb2RlKSAmJiBSb2NrZXRDaGF0LmF1dGh6Lmhhc0F0TGVhc3RPbmVQZXJtaXNzaW9uKFsndmlldy1kLXJvb20nLCAndmlldy1qb2luZWQtcm9vbSddKTtcblx0fVxuXG5cdGdldFVzZXJTdGF0dXMocm9vbUlkKSB7XG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lKHtyaWQ6IHJvb21JZH0pO1xuXHRcdGlmIChzdWJzY3JpcHRpb24gPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHJldHVybiBTZXNzaW9uLmdldChgdXNlcl8keyBzdWJzY3JpcHRpb24ubmFtZSB9X3N0YXR1c2ApO1xuXHR9XG5cblx0Z2V0RGlzcGxheU5hbWUocm9vbSkge1xuXHRcdHJldHVybiByb29tLnVzZXJuYW1lcy5qb2luKCcgeCAnKTtcblx0fVxuXG5cdGFsbG93Um9vbVNldHRpbmdDaGFuZ2Uocm9vbSwgc2V0dGluZykge1xuXHRcdHN3aXRjaCAoc2V0dGluZykge1xuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLk5BTUU6XG5cdFx0XHRjYXNlIFJvb21TZXR0aW5nc0VudW0uREVTQ1JJUFRJT046XG5cdFx0XHRjYXNlIFJvb21TZXR0aW5nc0VudW0uUkVBRF9PTkxZOlxuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLlJFQUNUX1dIRU5fUkVBRF9PTkxZOlxuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLkFSQ0hJVkVfT1JfVU5BUkNISVZFOlxuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLkpPSU5fQ09ERTpcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cblx0ZW5hYmxlTWVtYmVyc0xpc3RQcm9maWxlKCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Z2V0VWlUZXh0KGNvbnRleHQpIHtcblx0XHRzd2l0Y2ggKGNvbnRleHQpIHtcblx0XHRcdGNhc2UgVWlUZXh0Q29udGV4dC5ISURFX1dBUk5JTkc6XG5cdFx0XHRcdHJldHVybiAnSGlkZV9Qcml2YXRlX1dhcm5pbmcnO1xuXHRcdFx0Y2FzZSBVaVRleHRDb250ZXh0LkxFQVZFX1dBUk5JTkc6XG5cdFx0XHRcdHJldHVybiAnTGVhdmVfUHJpdmF0ZV9XYXJuaW5nJztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn1cbiIsImltcG9ydCB7IFJvb21UeXBlQ29uZmlnIH0gZnJvbSAnLi4vUm9vbVR5cGVDb25maWcnO1xuXG5leHBvcnQgY2xhc3MgRmF2b3JpdGVSb29tVHlwZSBleHRlbmRzIFJvb21UeXBlQ29uZmlnIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0aWRlbnRpZmllcjogJ2YnLFxuXHRcdFx0b3JkZXI6IDIwLFxuXHRcdFx0aGVhZGVyOiAnZmF2b3JpdGUnLFxuXHRcdFx0aWNvbjogJ3N0YXInLFxuXHRcdFx0bGFiZWw6ICdGYXZvcml0ZXMnXG5cdFx0fSk7XG5cdH1cbn1cbiIsImltcG9ydCB7IENoYW5uZWxzUm9vbVR5cGUgfSBmcm9tICcuL2NoYW5uZWxzJztcbmltcG9ydCB7IENvbnZlcnNhdGlvblJvb21UeXBlIH0gZnJvbSAnLi9jb252ZXJzYXRpb24nO1xuaW1wb3J0IHsgRGlyZWN0TWVzc2FnZVJvb21UeXBlIH0gZnJvbSAnLi9kaXJlY3QnO1xuaW1wb3J0IHsgRmF2b3JpdGVSb29tVHlwZSB9IGZyb20gJy4vZmF2b3JpdGUnO1xuaW1wb3J0IHsgUHJpdmF0ZVJvb21UeXBlIH0gZnJvbSAnLi9wcml2YXRlJztcbmltcG9ydCB7IFB1YmxpY1Jvb21UeXBlIH0gZnJvbSAnLi9wdWJsaWMnO1xuaW1wb3J0IHsgVW5yZWFkUm9vbVR5cGUgfSBmcm9tICcuL3VucmVhZCc7XG5cbmV4cG9ydCB7XG5cdENoYW5uZWxzUm9vbVR5cGUsXG5cdENvbnZlcnNhdGlvblJvb21UeXBlLFxuXHREaXJlY3RNZXNzYWdlUm9vbVR5cGUsXG5cdEZhdm9yaXRlUm9vbVR5cGUsXG5cdFByaXZhdGVSb29tVHlwZSxcblx0UHVibGljUm9vbVR5cGUsXG5cdFVucmVhZFJvb21UeXBlXG59O1xuIiwiLyogZ2xvYmFscyBvcGVuUm9vbSAqL1xuaW1wb3J0IHtSb29tU2V0dGluZ3NFbnVtLCBSb29tVHlwZUNvbmZpZywgUm9vbVR5cGVSb3V0ZUNvbmZpZywgVWlUZXh0Q29udGV4dH0gZnJvbSAnLi4vUm9vbVR5cGVDb25maWcnO1xuXG5leHBvcnQgY2xhc3MgUHJpdmF0ZVJvb21Sb3V0ZSBleHRlbmRzIFJvb21UeXBlUm91dGVDb25maWcge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRuYW1lOiAnZ3JvdXAnLFxuXHRcdFx0cGF0aDogJy9ncm91cC86bmFtZSdcblx0XHR9KTtcblx0fVxuXG5cdGFjdGlvbihwYXJhbXMpIHtcblx0XHRyZXR1cm4gb3BlblJvb20oJ3AnLCBwYXJhbXMubmFtZSk7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFByaXZhdGVSb29tVHlwZSBleHRlbmRzIFJvb21UeXBlQ29uZmlnIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0aWRlbnRpZmllcjogJ3AnLFxuXHRcdFx0b3JkZXI6IDQwLFxuXHRcdFx0aWNvbjogJ2xvY2snLFxuXHRcdFx0bGFiZWw6ICdQcml2YXRlX0dyb3VwcycsXG5cdFx0XHRyb3V0ZTogbmV3IFByaXZhdGVSb29tUm91dGUoKVxuXHRcdH0pO1xuXHR9XG5cblx0ZmluZFJvb20oaWRlbnRpZmllcikge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDogJ3AnLFxuXHRcdFx0bmFtZTogaWRlbnRpZmllclxuXHRcdH07XG5cblx0XHRyZXR1cm4gQ2hhdFJvb20uZmluZE9uZShxdWVyeSk7XG5cdH1cblxuXHRyb29tTmFtZShyb29tRGF0YSkge1xuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfQWxsb3dfcm9vbV9uYW1lc193aXRoX3NwZWNpYWxfY2hhcnMnKSkge1xuXHRcdFx0cmV0dXJuIHJvb21EYXRhLmZuYW1lIHx8IHJvb21EYXRhLm5hbWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJvb21EYXRhLm5hbWU7XG5cdH1cblxuXHRjb25kaXRpb24oKSB7XG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2VyKCk7XG5cdFx0Y29uc3Qgcm9vbXNMaXN0RXhoaWJpdGlvbk1vZGUgPSBSb2NrZXRDaGF0LmdldFVzZXJQcmVmZXJlbmNlKHVzZXIsICdyb29tc0xpc3RFeGhpYml0aW9uTW9kZScpO1xuXHRcdGNvbnN0IG1lcmdlQ2hhbm5lbHMgPSBSb2NrZXRDaGF0LmdldFVzZXJQcmVmZXJlbmNlKHVzZXIsICdtZXJnZUNoYW5uZWxzJyk7XG5cdFx0cmV0dXJuICFyb29tc0xpc3RFeGhpYml0aW9uTW9kZSB8fCBbJ3VucmVhZCcsICdjYXRlZ29yeSddLmluY2x1ZGVzKHJvb21zTGlzdEV4aGliaXRpb25Nb2RlKSAmJiAhbWVyZ2VDaGFubmVscyAmJiBSb2NrZXRDaGF0LmF1dGh6Lmhhc0FsbFBlcm1pc3Npb24oJ3ZpZXctcC1yb29tJyk7XG5cdH1cblxuXHRpc0dyb3VwQ2hhdCgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGNhbkFkZFVzZXIocm9vbSkge1xuXHRcdHJldHVybiBSb2NrZXRDaGF0LmF1dGh6Lmhhc0F0TGVhc3RPbmVQZXJtaXNzaW9uKFsnYWRkLXVzZXItdG8tYW55LXAtcm9vbScsICdhZGQtdXNlci10by1qb2luZWQtcm9vbSddLCByb29tLl9pZCk7XG5cdH1cblxuXHRhbGxvd1Jvb21TZXR0aW5nQ2hhbmdlKHJvb20sIHNldHRpbmcpIHtcblx0XHRzd2l0Y2ggKHNldHRpbmcpIHtcblx0XHRcdGNhc2UgUm9vbVNldHRpbmdzRW51bS5KT0lOX0NPREU6XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdGVuYWJsZU1lbWJlcnNMaXN0UHJvZmlsZSgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGdldFVpVGV4dChjb250ZXh0KSB7XG5cdFx0c3dpdGNoIChjb250ZXh0KSB7XG5cdFx0XHRjYXNlIFVpVGV4dENvbnRleHQuSElERV9XQVJOSU5HOlxuXHRcdFx0XHRyZXR1cm4gJ0hpZGVfR3JvdXBfV2FybmluZyc7XG5cdFx0XHRjYXNlIFVpVGV4dENvbnRleHQuTEVBVkVfV0FSTklORzpcblx0XHRcdFx0cmV0dXJuICdMZWF2ZV9Hcm91cF9XYXJuaW5nJztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn1cbiIsIi8qIGdsb2JhbHMgb3BlblJvb20gKi9cbmltcG9ydCB7Um9vbVR5cGVDb25maWcsIFJvb21UeXBlUm91dGVDb25maWcsIFVpVGV4dENvbnRleHR9IGZyb20gJy4uL1Jvb21UeXBlQ29uZmlnJztcblxuZXhwb3J0IGNsYXNzIFB1YmxpY1Jvb21Sb3V0ZSBleHRlbmRzIFJvb21UeXBlUm91dGVDb25maWcge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRuYW1lOiAnY2hhbm5lbCcsXG5cdFx0XHRwYXRoOiAnL2NoYW5uZWwvOm5hbWUnXG5cdFx0fSk7XG5cdH1cblxuXHRhY3Rpb24ocGFyYW1zKSB7XG5cdFx0cmV0dXJuIG9wZW5Sb29tKCdjJywgcGFyYW1zLm5hbWUpO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBQdWJsaWNSb29tVHlwZSBleHRlbmRzIFJvb21UeXBlQ29uZmlnIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0aWRlbnRpZmllcjogJ2MnLFxuXHRcdFx0b3JkZXI6IDMwLFxuXHRcdFx0aWNvbjogJ2hhc2h0YWcnLFxuXHRcdFx0bGFiZWw6ICdDaGFubmVscycsXG5cdFx0XHRyb3V0ZTogbmV3IFB1YmxpY1Jvb21Sb3V0ZSgpXG5cdFx0fSk7XG5cdH1cblxuXHRmaW5kUm9vbShpZGVudGlmaWVyKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiAnYycsXG5cdFx0XHRuYW1lOiBpZGVudGlmaWVyXG5cdFx0fTtcblx0XHRyZXR1cm4gQ2hhdFJvb20uZmluZE9uZShxdWVyeSk7XG5cdH1cblxuXHRyb29tTmFtZShyb29tRGF0YSkge1xuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfQWxsb3dfcm9vbV9uYW1lc193aXRoX3NwZWNpYWxfY2hhcnMnKSkge1xuXHRcdFx0cmV0dXJuIHJvb21EYXRhLmZuYW1lIHx8IHJvb21EYXRhLm5hbWU7XG5cdFx0fVxuXHRcdHJldHVybiByb29tRGF0YS5uYW1lO1xuXHR9XG5cblx0Y29uZGl0aW9uKCkge1xuXHRcdGNvbnN0IHVzZXIgPSBNZXRlb3IudXNlcigpO1xuXHRcdGNvbnN0IHJvb21zTGlzdEV4aGliaXRpb25Nb2RlID0gUm9ja2V0Q2hhdC5nZXRVc2VyUHJlZmVyZW5jZSh1c2VyLCAncm9vbXNMaXN0RXhoaWJpdGlvbk1vZGUnKTtcblx0XHRjb25zdCBtZXJnZUNoYW5uZWxzID0gUm9ja2V0Q2hhdC5nZXRVc2VyUHJlZmVyZW5jZSh1c2VyLCAnbWVyZ2VDaGFubmVscycpO1xuXHRcdHJldHVybiAhcm9vbXNMaXN0RXhoaWJpdGlvbk1vZGUgfHwgWyd1bnJlYWQnLCAnY2F0ZWdvcnknXS5pbmNsdWRlcyhyb29tc0xpc3RFeGhpYml0aW9uTW9kZSkgJiYgIW1lcmdlQ2hhbm5lbHMgJiYgKFJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oWyd2aWV3LWMtcm9vbScsICd2aWV3LWpvaW5lZC1yb29tJ10pIHx8IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19BbGxvd0Fub255bW91c1JlYWQnKSA9PT0gdHJ1ZSk7XG5cdH1cblxuXHRzaG93Sm9pbkxpbmsocm9vbUlkKSB7XG5cdFx0cmV0dXJuICEhQ2hhdFJvb20uZmluZE9uZSh7X2lkOiByb29tSWQsIHQ6ICdjJ30pO1xuXHR9XG5cblx0aW5jbHVkZUluUm9vbVNlYXJjaCgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlzR3JvdXBDaGF0KCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Y2FuQWRkVXNlcihyb29tKSB7XG5cdFx0cmV0dXJuIFJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oWydhZGQtdXNlci10by1hbnktYy1yb29tJywgJ2FkZC11c2VyLXRvLWpvaW5lZC1yb29tJ10sIHJvb20uX2lkKTtcblx0fVxuXG5cdGFsbG93Um9vbVNldHRpbmdDaGFuZ2UoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRlbmFibGVNZW1iZXJzTGlzdFByb2ZpbGUoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRnZXRVaVRleHQoY29udGV4dCkge1xuXHRcdHN3aXRjaCAoY29udGV4dCkge1xuXHRcdFx0Y2FzZSBVaVRleHRDb250ZXh0LkhJREVfV0FSTklORzpcblx0XHRcdFx0cmV0dXJuICdIaWRlX1Jvb21fV2FybmluZyc7XG5cdFx0XHRjYXNlIFVpVGV4dENvbnRleHQuTEVBVkVfV0FSTklORzpcblx0XHRcdFx0cmV0dXJuICdMZWF2ZV9Sb29tX1dhcm5pbmcnO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0fVxufVxuIiwiaW1wb3J0IHsgUm9vbVR5cGVDb25maWcgfSBmcm9tICcuLi9Sb29tVHlwZUNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBVbnJlYWRSb29tVHlwZSBleHRlbmRzIFJvb21UeXBlQ29uZmlnIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0aWRlbnRpZmllcjogJ3VucmVhZCcsXG5cdFx0XHRvcmRlcjogMTAsXG5cdFx0XHRsYWJlbDogJ1VucmVhZCdcblx0XHR9KTtcblxuXHRcdHRoaXMudW5yZWFkID0gdHJ1ZTtcblx0fVxuXG5cdGNvbmRpdGlvbigpIHtcblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXIoKTtcblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5nZXRVc2VyUHJlZmVyZW5jZSh1c2VyLCAncm9vbXNMaXN0RXhoaWJpdGlvbk1vZGUnKSA9PT0gJ3VucmVhZCc7XG5cdH1cbn1cbiIsImltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuUm9ja2V0Q2hhdC5nZXRVUkwgPSAocGF0aCwgeyBjZG4gPSB0cnVlLCBmdWxsID0gZmFsc2UgfSA9IHt9KSA9PiB7XG5cdGNvbnN0IGNkblByZWZpeCA9IHMucnRyaW0ocy50cmltKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdDRE5fUFJFRklYJykgfHwgJycpLCAnLycpO1xuXHRjb25zdCBwYXRoUHJlZml4ID0gcy5ydHJpbShzLnRyaW0oX19tZXRlb3JfcnVudGltZV9jb25maWdfXy5ST09UX1VSTF9QQVRIX1BSRUZJWCB8fCAnJyksICcvJyk7XG5cblx0bGV0IGJhc2VQYXRoO1xuXG5cdGNvbnN0IGZpbmFsUGF0aCA9IHMubHRyaW0ocy50cmltKHBhdGgpLCAnLycpO1xuXG5cdGlmIChjZG4gJiYgY2RuUHJlZml4ICE9PSAnJykge1xuXHRcdGJhc2VQYXRoID0gY2RuUHJlZml4ICsgcGF0aFByZWZpeDtcblx0fSBlbHNlIGlmIChmdWxsIHx8IE1ldGVvci5pc0NvcmRvdmEpIHtcblx0XHRyZXR1cm4gTWV0ZW9yLmFic29sdXRlVXJsKGZpbmFsUGF0aCk7XG5cdH0gZWxzZSB7XG5cdFx0YmFzZVBhdGggPSBwYXRoUHJlZml4O1xuXHR9XG5cblx0cmV0dXJuIGAkeyBiYXNlUGF0aCB9LyR7IGZpbmFsUGF0aCB9YDtcbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuLypcbiogUm9ja2V0Q2hhdC5zZXR0aW5ncyBob2xkcyBhbGwgcGFja2FnZXMgc2V0dGluZ3NcbiogQG5hbWVzcGFjZSBSb2NrZXRDaGF0LnNldHRpbmdzXG4qL1xuUm9ja2V0Q2hhdC5zZXR0aW5ncyA9IHtcblx0Y2FsbGJhY2tzOiB7fSxcblx0cmVnZXhDYWxsYmFja3M6IHt9LFxuXHR0czogbmV3IERhdGUsXG5cdGdldChfaWQsIGNhbGxiYWNrKSB7XG5cdFx0aWYgKGNhbGxiYWNrICE9IG51bGwpIHtcblx0XHRcdFJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKF9pZCwgY2FsbGJhY2spO1xuXHRcdFx0aWYgKCFNZXRlb3Iuc2V0dGluZ3MpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKF9pZCA9PT0gJyonKSB7XG5cdFx0XHRcdHJldHVybiBPYmplY3Qua2V5cyhNZXRlb3Iuc2V0dGluZ3MpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IE1ldGVvci5zZXR0aW5nc1trZXldO1xuXHRcdFx0XHRcdGNhbGxiYWNrKGtleSwgdmFsdWUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdGlmIChfLmlzUmVnRXhwKF9pZCkgJiYgTWV0ZW9yLnNldHRpbmdzKSB7XG5cdFx0XHRcdHJldHVybiBPYmplY3Qua2V5cyhNZXRlb3Iuc2V0dGluZ3MpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdFx0XHRpZiAoIV9pZC50ZXN0KGtleSkpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSBNZXRlb3Iuc2V0dGluZ3Nba2V5XTtcblx0XHRcdFx0XHRjYWxsYmFjayhrZXksIHZhbHVlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gTWV0ZW9yLnNldHRpbmdzW19pZF0gIT0gbnVsbCAmJiBjYWxsYmFjayhfaWQsIE1ldGVvci5zZXR0aW5nc1tfaWRdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCFNZXRlb3Iuc2V0dGluZ3MpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKF8uaXNSZWdFeHAoX2lkKSkge1xuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmtleXMoTWV0ZW9yLnNldHRpbmdzKS5yZWR1Y2UoKGl0ZW1zLCBrZXkpID0+IHtcblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IE1ldGVvci5zZXR0aW5nc1trZXldO1xuXHRcdFx0XHRcdGlmIChfaWQudGVzdChrZXkpKSB7XG5cdFx0XHRcdFx0XHRpdGVtcy5wdXNoKHtcblx0XHRcdFx0XHRcdFx0a2V5LFxuXHRcdFx0XHRcdFx0XHR2YWx1ZVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBpdGVtcztcblx0XHRcdFx0fSwgW10pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIE1ldGVvci5zZXR0aW5ncyAmJiBNZXRlb3Iuc2V0dGluZ3NbX2lkXTtcblx0XHR9XG5cdH0sXG5cdHNldChfaWQsIHZhbHVlLCBjYWxsYmFjaykge1xuXHRcdHJldHVybiBNZXRlb3IuY2FsbCgnc2F2ZVNldHRpbmcnLCBfaWQsIHZhbHVlLCBjYWxsYmFjayk7XG5cdH0sXG5cdGJhdGNoU2V0KHNldHRpbmdzLCBjYWxsYmFjaykge1xuXHRcdC8vIGFzeW5jIC0+IHN5bmNcblx0XHQvLyBodHRwOi8vZGFlbW9uLmNvLnphLzIwMTIvMDQvc2ltcGxlLWFzeW5jLXdpdGgtb25seS11bmRlcnNjb3JlL1xuXHRcdGNvbnN0IHNhdmUgPSBmdW5jdGlvbihzZXR0aW5nKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHRcdFx0cmV0dXJuIE1ldGVvci5jYWxsKCdzYXZlU2V0dGluZycsIHNldHRpbmcuX2lkLCBzZXR0aW5nLnZhbHVlLCBzZXR0aW5nLmVkaXRvciwgY2FsbGJhY2spO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdGNvbnN0IGFjdGlvbnMgPSBfLm1hcChzZXR0aW5ncywgKHNldHRpbmcpID0+IHNhdmUoc2V0dGluZykpO1xuXHRcdHJldHVybiBfKGFjdGlvbnMpLnJlZHVjZVJpZ2h0KF8ud3JhcCwgKGVyciwgc3VjY2VzcykgPT4gY2FsbGJhY2soZXJyLCBzdWNjZXNzKSkoKTtcblx0fSxcblx0bG9hZChrZXksIHZhbHVlLCBpbml0aWFsTG9hZCkge1xuXHRcdFsnKicsIGtleV0uZm9yRWFjaChpdGVtID0+IHtcblx0XHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmNhbGxiYWNrc1tpdGVtXSkge1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmNhbGxiYWNrc1tpdGVtXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKGtleSwgdmFsdWUsIGluaXRpYWxMb2FkKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmtleXMoUm9ja2V0Q2hhdC5zZXR0aW5ncy5yZWdleENhbGxiYWNrcykuZm9yRWFjaChjYktleSA9PiB7XG5cdFx0XHRjb25zdCBjYlZhbHVlID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5yZWdleENhbGxiYWNrc1tjYktleV07XG5cdFx0XHRpZiAoIWNiVmFsdWUucmVnZXgudGVzdChrZXkpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNiVmFsdWUuY2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soa2V5LCB2YWx1ZSwgaW5pdGlhbExvYWQpKTtcblx0XHR9KTtcblx0fSxcblx0b25sb2FkKGtleSwgY2FsbGJhY2spIHtcblx0XHQvLyBpZiBrZXkgaXMgJyonXG5cdFx0Ly8gXHRmb3Iga2V5LCB2YWx1ZSBpbiBNZXRlb3Iuc2V0dGluZ3Ncblx0XHQvLyBcdFx0Y2FsbGJhY2sga2V5LCB2YWx1ZSwgZmFsc2Vcblx0XHQvLyBlbHNlIGlmIE1ldGVvci5zZXR0aW5ncz9bX2lkXT9cblx0XHQvLyBcdGNhbGxiYWNrIGtleSwgTWV0ZW9yLnNldHRpbmdzW19pZF0sIGZhbHNlXG5cdFx0Y29uc3Qga2V5cyA9IFtdLmNvbmNhdChrZXkpO1xuXHRcdGtleXMuZm9yRWFjaChrID0+IHtcblx0XHRcdGlmIChfLmlzUmVnRXhwKGspKSB7XG5cdFx0XHRcdFJvY2tldENoYXQuc2V0dGluZ3MucmVnZXhDYWxsYmFja3NbbmFtZSA9IGsuc291cmNlXSA9IFJvY2tldENoYXQuc2V0dGluZ3MucmVnZXhDYWxsYmFja3NbbmFtZSA9IGsuc291cmNlXSB8fCB7XG5cdFx0XHRcdFx0cmVnZXg6IGssXG5cdFx0XHRcdFx0Y2FsbGJhY2tzOiBbXVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlZ2V4Q2FsbGJhY2tzW2suc291cmNlXS5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmNhbGxiYWNrc1trXSA9IFJvY2tldENoYXQuc2V0dGluZ3MuY2FsbGJhY2tzW2tdIHx8IFtdO1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmNhbGxiYWNrc1trXS5wdXNoKGNhbGxiYWNrKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG4vKlxuKiBDYWxsYmFjayBob29rcyBwcm92aWRlIGFuIGVhc3kgd2F5IHRvIGFkZCBleHRyYSBzdGVwcyB0byBjb21tb24gb3BlcmF0aW9ucy5cbiogQG5hbWVzcGFjZSBSb2NrZXRDaGF0LmNhbGxiYWNrc1xuKi9cblxuUm9ja2V0Q2hhdC5jYWxsYmFja3MgPSB7fTtcblxuaWYgKE1ldGVvci5pc1NlcnZlcikge1xuXHRSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VGltZSA9IHRydWU7XG5cdFJvY2tldENoYXQuY2FsbGJhY2tzLnNob3dUb3RhbFRpbWUgPSB0cnVlO1xufSBlbHNlIHtcblx0Um9ja2V0Q2hhdC5jYWxsYmFja3Muc2hvd1RpbWUgPSBmYWxzZTtcblx0Um9ja2V0Q2hhdC5jYWxsYmFja3Muc2hvd1RvdGFsVGltZSA9IGZhbHNlO1xufVxuXG5cbi8qXG4qIENhbGxiYWNrIHByaW9yaXRpZXNcbiovXG5cblJvY2tldENoYXQuY2FsbGJhY2tzLnByaW9yaXR5ID0ge1xuXHRISUdIOiAtMTAwMCxcblx0TUVESVVNOiAwLFxuXHRMT1c6IDEwMDBcbn07XG5cblxuLypcbiogQWRkIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYSBob29rXG4qIEBwYXJhbSB7U3RyaW5nfSBob29rIC0gVGhlIG5hbWUgb2YgdGhlIGhvb2tcbiogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb25cbiovXG5cblJvY2tldENoYXQuY2FsbGJhY2tzLmFkZCA9IGZ1bmN0aW9uKGhvb2ssIGNhbGxiYWNrLCBwcmlvcml0eSwgaWQpIHtcblx0aWYgKHByaW9yaXR5ID09IG51bGwpIHtcblx0XHRwcmlvcml0eSA9IFJvY2tldENoYXQuY2FsbGJhY2tzLnByaW9yaXR5Lk1FRElVTTtcblx0fVxuXHRpZiAoIV8uaXNOdW1iZXIocHJpb3JpdHkpKSB7XG5cdFx0cHJpb3JpdHkgPSBSb2NrZXRDaGF0LmNhbGxiYWNrcy5wcmlvcml0eS5NRURJVU07XG5cdH1cblx0Y2FsbGJhY2sucHJpb3JpdHkgPSBwcmlvcml0eTtcblx0Y2FsbGJhY2suaWQgPSBpZCB8fCBSYW5kb20uaWQoKTtcblx0Um9ja2V0Q2hhdC5jYWxsYmFja3NbaG9va10gPSBSb2NrZXRDaGF0LmNhbGxiYWNrc1tob29rXSB8fCBbXTtcblx0aWYgKFJvY2tldENoYXQuY2FsbGJhY2tzLnNob3dUaW1lID09PSB0cnVlKSB7XG5cdFx0Y29uc3QgZXJyID0gbmV3IEVycm9yO1xuXHRcdGNhbGxiYWNrLnN0YWNrID0gZXJyLnN0YWNrO1xuXHR9XG5cdGlmIChSb2NrZXRDaGF0LmNhbGxiYWNrc1tob29rXS5maW5kKChjYikgPT4gY2IuaWQgPT09IGNhbGxiYWNrLmlkKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRSb2NrZXRDaGF0LmNhbGxiYWNrc1tob29rXS5wdXNoKGNhbGxiYWNrKTtcbn07XG5cblxuLypcbiogUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSBhIGhvb2tcbiogQHBhcmFtIHtzdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgaG9va1xuKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBUaGUgY2FsbGJhY2sncyBpZFxuKi9cblxuUm9ja2V0Q2hhdC5jYWxsYmFja3MucmVtb3ZlID0gZnVuY3Rpb24oaG9va05hbWUsIGlkKSB7XG5cdFJvY2tldENoYXQuY2FsbGJhY2tzW2hvb2tOYW1lXSA9IF8ucmVqZWN0KFJvY2tldENoYXQuY2FsbGJhY2tzW2hvb2tOYW1lXSwgKGNhbGxiYWNrKSA9PiBjYWxsYmFjay5pZCA9PT0gaWQpO1xufTtcblxuXG4vKlxuKiBTdWNjZXNzaXZlbHkgcnVuIGFsbCBvZiBhIGhvb2sncyBjYWxsYmFja3Mgb24gYW4gaXRlbVxuKiBAcGFyYW0ge1N0cmluZ30gaG9vayAtIFRoZSBuYW1lIG9mIHRoZSBob29rXG4qIEBwYXJhbSB7T2JqZWN0fSBpdGVtIC0gVGhlIHBvc3QsIGNvbW1lbnQsIG1vZGlmaWVyLCBldGMuIG9uIHdoaWNoIHRvIHJ1biB0aGUgY2FsbGJhY2tzXG4qIEBwYXJhbSB7T2JqZWN0fSBbY29uc3RhbnRdIC0gQW4gb3B0aW9uYWwgY29uc3RhbnQgdGhhdCB3aWxsIGJlIHBhc3NlZCBhbG9uZyB0byBlYWNoIGNhbGxiYWNrXG4qIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGl0ZW0gYWZ0ZXIgaXQncyBiZWVuIHRocm91Z2ggYWxsIHRoZSBjYWxsYmFja3MgZm9yIHRoaXMgaG9va1xuKi9cblxuUm9ja2V0Q2hhdC5jYWxsYmFja3MucnVuID0gZnVuY3Rpb24oaG9vaywgaXRlbSwgY29uc3RhbnQpIHtcblx0Y29uc3QgY2FsbGJhY2tzID0gUm9ja2V0Q2hhdC5jYWxsYmFja3NbaG9va107XG5cdGlmIChjYWxsYmFja3MgJiYgY2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdGxldCB0b3RhbFRpbWUgPSAwO1xuXHRcdGNvbnN0IHJlc3VsdCA9IF8uc29ydEJ5KGNhbGxiYWNrcywgZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5wcmlvcml0eSB8fCBSb2NrZXRDaGF0LmNhbGxiYWNrcy5wcmlvcml0eS5NRURJVU07XG5cdFx0fSkucmVkdWNlKGZ1bmN0aW9uKHJlc3VsdCwgY2FsbGJhY2spIHtcblx0XHRcdGxldCB0aW1lID0gMDtcblx0XHRcdGlmIChSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VGltZSA9PT0gdHJ1ZSB8fCBSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VG90YWxUaW1lID09PSB0cnVlKSB7XG5cdFx0XHRcdHRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgY2FsbGJhY2tSZXN1bHQgPSBjYWxsYmFjayhyZXN1bHQsIGNvbnN0YW50KTtcblx0XHRcdGlmIChSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VGltZSA9PT0gdHJ1ZSB8fCBSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VG90YWxUaW1lID09PSB0cnVlKSB7XG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKSAtIHRpbWU7XG5cdFx0XHRcdHRvdGFsVGltZSArPSBjdXJyZW50VGltZTtcblx0XHRcdFx0aWYgKFJvY2tldENoYXQuY2FsbGJhY2tzLnNob3dUaW1lID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0aWYgKE1ldGVvci5pc1NlcnZlcikge1xuXHRcdFx0XHRcdFx0Um9ja2V0Q2hhdC5zdGF0c1RyYWNrZXIudGltaW5nKCdjYWxsYmFja3MudGltZScsIGN1cnJlbnRUaW1lLCBbYGhvb2s6JHsgaG9vayB9YCwgYGNhbGxiYWNrOiR7IGNhbGxiYWNrLmlkIH1gXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGxldCBzdGFjayA9IGNhbGxiYWNrLnN0YWNrICYmIHR5cGVvZiBjYWxsYmFjay5zdGFjay5zcGxpdCA9PT0gJ2Z1bmN0aW9uJyAmJiBjYWxsYmFjay5zdGFjay5zcGxpdCgnXFxuJyk7XG5cdFx0XHRcdFx0XHRzdGFjayA9IHN0YWNrICYmIHN0YWNrWzJdICYmIChzdGFja1syXS5tYXRjaCgvXFwoLitcXCkvKXx8W10pWzBdO1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coU3RyaW5nKGN1cnJlbnRUaW1lKSwgaG9vaywgY2FsbGJhY2suaWQsIHN0YWNrKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiAodHlwZW9mIGNhbGxiYWNrUmVzdWx0ID09PSAndW5kZWZpbmVkJykgPyByZXN1bHQgOiBjYWxsYmFja1Jlc3VsdDtcblx0XHR9LCBpdGVtKTtcblx0XHRpZiAoUm9ja2V0Q2hhdC5jYWxsYmFja3Muc2hvd1RvdGFsVGltZSA9PT0gdHJ1ZSkge1xuXHRcdFx0aWYgKE1ldGVvci5pc1NlcnZlcikge1xuXHRcdFx0XHRSb2NrZXRDaGF0LnN0YXRzVHJhY2tlci50aW1pbmcoJ2NhbGxiYWNrcy50b3RhbFRpbWUnLCB0b3RhbFRpbWUsIFtgaG9vazokeyBob29rIH1gXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhgJHsgaG9vayB9OmAsIHRvdGFsVGltZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGl0ZW07XG5cdH1cbn07XG5cblxuLypcbiogU3VjY2Vzc2l2ZWx5IHJ1biBhbGwgb2YgYSBob29rJ3MgY2FsbGJhY2tzIG9uIGFuIGl0ZW0sIGluIGFzeW5jIG1vZGUgKG9ubHkgd29ya3Mgb24gc2VydmVyKVxuKiBAcGFyYW0ge1N0cmluZ30gaG9vayAtIFRoZSBuYW1lIG9mIHRoZSBob29rXG4qIEBwYXJhbSB7T2JqZWN0fSBpdGVtIC0gVGhlIHBvc3QsIGNvbW1lbnQsIG1vZGlmaWVyLCBldGMuIG9uIHdoaWNoIHRvIHJ1biB0aGUgY2FsbGJhY2tzXG4qIEBwYXJhbSB7T2JqZWN0fSBbY29uc3RhbnRdIC0gQW4gb3B0aW9uYWwgY29uc3RhbnQgdGhhdCB3aWxsIGJlIHBhc3NlZCBhbG9uZyB0byBlYWNoIGNhbGxiYWNrXG4qL1xuXG5Sb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW5Bc3luYyA9IGZ1bmN0aW9uKGhvb2ssIGl0ZW0sIGNvbnN0YW50KSB7XG5cdGNvbnN0IGNhbGxiYWNrcyA9IFJvY2tldENoYXQuY2FsbGJhY2tzW2hvb2tdO1xuXHRpZiAoTWV0ZW9yLmlzU2VydmVyICYmIGNhbGxiYWNrcyAmJiBjYWxsYmFja3MubGVuZ3RoKSB7XG5cdFx0TWV0ZW9yLmRlZmVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0Xy5zb3J0QnkoY2FsbGJhY2tzLCAoY2FsbGJhY2spID0+IGNhbGxiYWNrLnByaW9yaXR5IHx8IFJvY2tldENoYXQuY2FsbGJhY2tzLnByaW9yaXR5Lk1FRElVTSkuZm9yRWFjaCgoY2FsbGJhY2spID0+IGNhbGxiYWNrKGl0ZW0sIGNvbnN0YW50KSk7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGl0ZW07XG5cdH1cbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuUm9ja2V0Q2hhdC5maWxlVXBsb2FkTWVkaWFXaGl0ZUxpc3QgPSBmdW5jdGlvbigpIHtcblx0Y29uc3QgbWVkaWFUeXBlV2hpdGVMaXN0ID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0ZpbGVVcGxvYWRfTWVkaWFUeXBlV2hpdGVMaXN0Jyk7XG5cblx0aWYgKCFtZWRpYVR5cGVXaGl0ZUxpc3QgfHwgbWVkaWFUeXBlV2hpdGVMaXN0ID09PSAnKicpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0cmV0dXJuIF8ubWFwKG1lZGlhVHlwZVdoaXRlTGlzdC5zcGxpdCgnLCcpLCBmdW5jdGlvbihpdGVtKSB7XG5cdFx0cmV0dXJuIGl0ZW0udHJpbSgpO1xuXHR9KTtcbn07XG5cblJvY2tldENoYXQuZmlsZVVwbG9hZElzVmFsaWRDb250ZW50VHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0Y29uc3QgbGlzdCA9IFJvY2tldENoYXQuZmlsZVVwbG9hZE1lZGlhV2hpdGVMaXN0KCk7XG5cdGlmICghbGlzdCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCF0eXBlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKF8uY29udGFpbnMobGlzdCwgdHlwZSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBlbHNlIHtcblx0XHRjb25zdCB3aWxkQ2FyZEdsb2IgPSAnLyonO1xuXHRcdGNvbnN0IHdpbGRjYXJkcyA9IF8uZmlsdGVyKGxpc3QsIGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdHJldHVybiBpdGVtLmluZGV4T2Yod2lsZENhcmRHbG9iKSA+IDA7XG5cdFx0fSk7XG5cdFx0aWYgKF8uY29udGFpbnMod2lsZGNhcmRzLCB0eXBlLnJlcGxhY2UoLyhcXC8uKikkLywgd2lsZENhcmRHbG9iKSkpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuIiwiY29uc3QgY29sb3JzID0gWycjRjQ0MzM2JywgJyNFOTFFNjMnLCAnIzlDMjdCMCcsICcjNjczQUI3JywgJyMzRjUxQjUnLCAnIzIxOTZGMycsICcjMDNBOUY0JywgJyMwMEJDRDQnLCAnIzAwOTY4OCcsICcjNENBRjUwJywgJyM4QkMzNEEnLCAnI0NEREMzOScsICcjRkZDMTA3JywgJyNGRjk4MDAnLCAnI0ZGNTcyMicsICcjNzk1NTQ4JywgJyM5RTlFOUUnLCAnIzYwN0Q4QiddO1xuXG5Sb2NrZXRDaGF0LmdldEF2YXRhckNvbG9yID0gZnVuY3Rpb24obmFtZSkge1xuXHRyZXR1cm4gY29sb3JzW25hbWUubGVuZ3RoICUgY29sb3JzLmxlbmd0aF07XG59O1xuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0LmdldFZhbGlkUm9vbU5hbWUgPSBmdW5jdGlvbiBnZXRWYWxpZFJvb21OYW1lKGRpc3BsYXlOYW1lLCByaWQgPSAnJykge1xuXHRsZXQgc2x1Z2lmaWVkTmFtZSA9IGRpc3BsYXlOYW1lO1xuXG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfQWxsb3dfcm9vbV9uYW1lc193aXRoX3NwZWNpYWxfY2hhcnMnKSkge1xuXHRcdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlEaXNwbGF5TmFtZShkaXNwbGF5TmFtZSk7XG5cdFx0aWYgKHJvb20gJiYgcm9vbS5faWQgIT09IHJpZCkge1xuXHRcdFx0aWYgKHJvb20uYXJjaGl2ZWQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYXJjaGl2ZWQtZHVwbGljYXRlLW5hbWUnLCBgVGhlcmUncyBhbiBhcmNoaXZlZCBjaGFubmVsIHdpdGggbmFtZSAkeyBkaXNwbGF5TmFtZSB9YCwgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQuZ2V0VmFsaWRSb29tTmFtZScsIGNoYW5uZWxfbmFtZTogZGlzcGxheU5hbWUgfSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1kdXBsaWNhdGUtY2hhbm5lbC1uYW1lJywgYEEgY2hhbm5lbCB3aXRoIG5hbWUgJyR7IGRpc3BsYXlOYW1lIH0nIGV4aXN0c2AsIHsgZnVuY3Rpb246ICdSb2NrZXRDaGF0LmdldFZhbGlkUm9vbU5hbWUnLCBjaGFubmVsX25hbWU6IGRpc3BsYXlOYW1lIH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRzbHVnaWZpZWROYW1lID0gcy5zbHVnaWZ5KGRpc3BsYXlOYW1lKTtcblx0fVxuXG5cdGxldCBuYW1lVmFsaWRhdGlvbjtcblx0dHJ5IHtcblx0XHRuYW1lVmFsaWRhdGlvbiA9IG5ldyBSZWdFeHAoYF4keyBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVVRGOF9OYW1lc19WYWxpZGF0aW9uJykgfSRgKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRuYW1lVmFsaWRhdGlvbiA9IG5ldyBSZWdFeHAoJ15bMC05YS16QS1aLV8uXSskJyk7XG5cdH1cblx0aWYgKCFuYW1lVmFsaWRhdGlvbi50ZXN0KHNsdWdpZmllZE5hbWUpKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1yb29tLW5hbWUnLCBgJHsgc2x1Z2lmaWVkTmFtZSB9IGlzIG5vdCBhIHZhbGlkIHJvb20gbmFtZS5gLCB7XG5cdFx0XHQnZnVuY3Rpb24nOiAnUm9ja2V0Q2hhdC5nZXRWYWxpZFJvb21OYW1lJyxcblx0XHRcdGNoYW5uZWxfbmFtZTogc2x1Z2lmaWVkTmFtZVxuXHRcdH0pO1xuXHR9XG5cblx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeU5hbWUoc2x1Z2lmaWVkTmFtZSk7XG5cdGlmIChyb29tICYmIHJvb20uX2lkICE9PSByaWQpIHtcblx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VJX0FsbG93X3Jvb21fbmFtZXNfd2l0aF9zcGVjaWFsX2NoYXJzJykpIHtcblx0XHRcdGxldCB0bXBOYW1lID0gc2x1Z2lmaWVkTmFtZTtcblx0XHRcdGxldCBuZXh0ID0gMDtcblx0XHRcdHdoaWxlIChSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlOYW1lQW5kTm90SWQodG1wTmFtZSwgcmlkKSkge1xuXHRcdFx0XHR0bXBOYW1lID0gYCR7IHNsdWdpZmllZE5hbWUgfS0keyArK25leHQgfWA7XG5cdFx0XHR9XG5cdFx0XHRzbHVnaWZpZWROYW1lID0gdG1wTmFtZTtcblx0XHR9IGVsc2UgaWYgKHJvb20uYXJjaGl2ZWQpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFyY2hpdmVkLWR1cGxpY2F0ZS1uYW1lJywgYFRoZXJlJ3MgYW4gYXJjaGl2ZWQgY2hhbm5lbCB3aXRoIG5hbWUgJHsgc2x1Z2lmaWVkTmFtZSB9YCwgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQuZ2V0VmFsaWRSb29tTmFtZScsIGNoYW5uZWxfbmFtZTogc2x1Z2lmaWVkTmFtZSB9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItZHVwbGljYXRlLWNoYW5uZWwtbmFtZScsIGBBIGNoYW5uZWwgd2l0aCBuYW1lICckeyBzbHVnaWZpZWROYW1lIH0nIGV4aXN0c2AsIHsgZnVuY3Rpb246ICdSb2NrZXRDaGF0LmdldFZhbGlkUm9vbU5hbWUnLCBjaGFubmVsX25hbWU6IHNsdWdpZmllZE5hbWUgfSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHNsdWdpZmllZE5hbWU7XG59O1xuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0LnBsYWNlaG9sZGVycyA9IHt9O1xuXG5Sb2NrZXRDaGF0LnBsYWNlaG9sZGVycy5yZXBsYWNlID0gZnVuY3Rpb24oc3RyLCBkYXRhKSB7XG5cdGlmICghc3RyKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW1NpdGVfTmFtZVxcXS9nLCBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU2l0ZV9OYW1lJykgfHwgJycpO1xuXHRzdHIgPSBzdHIucmVwbGFjZSgvXFxbU2l0ZV9VUkxcXF0vZywgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NpdGVfVXJsJykgfHwgJycpO1xuXG5cdGlmIChkYXRhKSB7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW25hbWVcXF0vZywgZGF0YS5uYW1lIHx8ICcnKTtcblx0XHRzdHIgPSBzdHIucmVwbGFjZSgvXFxbZm5hbWVcXF0vZywgcy5zdHJMZWZ0KGRhdGEubmFtZSwgJyAnKSB8fCAnJyk7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW2xuYW1lXFxdL2csIHMuc3RyUmlnaHRCYWNrKGRhdGEubmFtZSwgJyAnKSB8fCAnJyk7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW2VtYWlsXFxdL2csIGRhdGEuZW1haWwgfHwgJycpO1xuXHRcdHN0ciA9IHN0ci5yZXBsYWNlKC9cXFtwYXNzd29yZFxcXS9nLCBkYXRhLnBhc3N3b3JkIHx8ICcnKTtcblx0XHRzdHIgPSBzdHIucmVwbGFjZSgvXFxbVXNlclxcXS9nLCBkYXRhLnVzZXIgfHwgJycpO1xuXHRcdHN0ciA9IHN0ci5yZXBsYWNlKC9cXFtSb29tXFxdL2csIGRhdGEucm9vbSB8fCAnJyk7XG5cblx0XHRpZiAoZGF0YS51bnN1YnNjcmliZSkge1xuXHRcdFx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW3Vuc3Vic2NyaWJlXFxdL2csIGRhdGEudW5zdWJzY3JpYmUpO1xuXHRcdH1cblx0fVxuXG5cdHN0ciA9IHN0ci5yZXBsYWNlKC8oW14+XFxyXFxuXT8pKFxcclxcbnxcXG5cXHJ8XFxyfFxcbikvZywgJyQxJyArICc8YnI+JyArICckMicpO1xuXG5cblx0cmV0dXJuIHN0cjtcbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuLypcbiogQ2FsbGJhY2sgaG9va3MgcHJvdmlkZSBhbiBlYXN5IHdheSB0byBhZGQgZXh0cmEgc3RlcHMgdG8gY29tbW9uIG9wZXJhdGlvbnMuXG4qIEBuYW1lc3BhY2UgUm9ja2V0Q2hhdC5wcm9taXNlc1xuKi9cblxuUm9ja2V0Q2hhdC5wcm9taXNlcyA9IHt9O1xuXG5cbi8qXG4qIENhbGxiYWNrIHByaW9yaXRpZXNcbiovXG5cblJvY2tldENoYXQucHJvbWlzZXMucHJpb3JpdHkgPSB7XG5cdEhJR0g6IC0xMDAwLFxuXHRNRURJVU06IDAsXG5cdExPVzogMTAwMFxufTtcblxuXG4vKlxuKiBBZGQgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBhIGhvb2tcbiogQHBhcmFtIHtTdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgaG9va1xuKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayBmdW5jdGlvblxuKi9cblxuUm9ja2V0Q2hhdC5wcm9taXNlcy5hZGQgPSBmdW5jdGlvbihob29rLCBjYWxsYmFjaywgcCA9IFJvY2tldENoYXQucHJvbWlzZXMucHJpb3JpdHkuTUVESVVNLCBpZCkge1xuXHRjb25zdCBwcmlvcml0eSA9ICFfLmlzTnVtYmVyKHApID8gUm9ja2V0Q2hhdC5wcm9taXNlcy5wcmlvcml0eS5NRURJVU0gOiBwO1xuXHRjYWxsYmFjay5wcmlvcml0eSA9IHByaW9yaXR5O1xuXHRjYWxsYmFjay5pZCA9IGlkIHx8IFJhbmRvbS5pZCgpO1xuXHRSb2NrZXRDaGF0LnByb21pc2VzW2hvb2tdID0gUm9ja2V0Q2hhdC5wcm9taXNlc1tob29rXSB8fCBbXTtcblx0aWYgKFJvY2tldENoYXQucHJvbWlzZXNbaG9va10uZmluZChjYiA9PiBjYi5pZCA9PT0gY2FsbGJhY2suaWQpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdFJvY2tldENoYXQucHJvbWlzZXNbaG9va10ucHVzaChjYWxsYmFjayk7XG59O1xuXG5cbi8qXG4qIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gYSBob29rXG4qIEBwYXJhbSB7c3RyaW5nfSBob29rIC0gVGhlIG5hbWUgb2YgdGhlIGhvb2tcbiogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIGNhbGxiYWNrJ3MgaWRcbiovXG5cblJvY2tldENoYXQucHJvbWlzZXMucmVtb3ZlID0gZnVuY3Rpb24oaG9va05hbWUsIGlkKSB7XG5cdFJvY2tldENoYXQucHJvbWlzZXNbaG9va05hbWVdID0gXy5yZWplY3QoUm9ja2V0Q2hhdC5wcm9taXNlc1tob29rTmFtZV0sIChjYWxsYmFjaykgPT4gY2FsbGJhY2suaWQgPT09IGlkKTtcbn07XG5cblxuLypcbiogU3VjY2Vzc2l2ZWx5IHJ1biBhbGwgb2YgYSBob29rJ3MgY2FsbGJhY2tzIG9uIGFuIGl0ZW1cbiogQHBhcmFtIHtTdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgaG9va1xuKiBAcGFyYW0ge09iamVjdH0gaXRlbSAtIFRoZSBwb3N0LCBjb21tZW50LCBtb2RpZmllciwgZXRjLiBvbiB3aGljaCB0byBydW4gdGhlIGNhbGxiYWNrc1xuKiBAcGFyYW0ge09iamVjdH0gW2NvbnN0YW50XSAtIEFuIG9wdGlvbmFsIGNvbnN0YW50IHRoYXQgd2lsbCBiZSBwYXNzZWQgYWxvbmcgdG8gZWFjaCBjYWxsYmFja1xuKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpdGVtIGFmdGVyIGl0J3MgYmVlbiB0aHJvdWdoIGFsbCB0aGUgY2FsbGJhY2tzIGZvciB0aGlzIGhvb2tcbiovXG5cblJvY2tldENoYXQucHJvbWlzZXMucnVuID0gZnVuY3Rpb24oaG9vaywgaXRlbSwgY29uc3RhbnQpIHtcblx0bGV0IGNhbGxiYWNrcyA9IFJvY2tldENoYXQucHJvbWlzZXNbaG9va107XG5cdGlmIChjYWxsYmFja3MgPT0gbnVsbCB8fCBjYWxsYmFja3MubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShpdGVtKTtcblx0fVxuXHRjYWxsYmFja3MgPSBfLnNvcnRCeShjYWxsYmFja3MsIChjYWxsYmFjaykgPT4gY2FsbGJhY2sucHJpb3JpdHkgfHwgUm9ja2V0Q2hhdC5wcm9taXNlcy5wcmlvcml0eS5NRURJVU0pO1xuXHRyZXR1cm4gY2FsbGJhY2tzLnJlZHVjZShmdW5jdGlvbihwcmV2aW91c1Byb21pc2UsIGNhbGxiYWNrKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0cmV0dXJuIHByZXZpb3VzUHJvbWlzZS50aGVuKChyZXN1bHQpID0+IGNhbGxiYWNrKHJlc3VsdCwgY29uc3RhbnQpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KSk7XG5cdFx0fSk7XG5cdH0sIFByb21pc2UucmVzb2x2ZShpdGVtKSk7XG59O1xuXG5cbi8qXG4qIFN1Y2Nlc3NpdmVseSBydW4gYWxsIG9mIGEgaG9vaydzIGNhbGxiYWNrcyBvbiBhbiBpdGVtLCBpbiBhc3luYyBtb2RlIChvbmx5IHdvcmtzIG9uIHNlcnZlcilcbiogQHBhcmFtIHtTdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgaG9va1xuKiBAcGFyYW0ge09iamVjdH0gaXRlbSAtIFRoZSBwb3N0LCBjb21tZW50LCBtb2RpZmllciwgZXRjLiBvbiB3aGljaCB0byBydW4gdGhlIGNhbGxiYWNrc1xuKiBAcGFyYW0ge09iamVjdH0gW2NvbnN0YW50XSAtIEFuIG9wdGlvbmFsIGNvbnN0YW50IHRoYXQgd2lsbCBiZSBwYXNzZWQgYWxvbmcgdG8gZWFjaCBjYWxsYmFja1xuKi9cblxuUm9ja2V0Q2hhdC5wcm9taXNlcy5ydW5Bc3luYyA9IGZ1bmN0aW9uKGhvb2ssIGl0ZW0sIGNvbnN0YW50KSB7XG5cdGNvbnN0IGNhbGxiYWNrcyA9IFJvY2tldENoYXQucHJvbWlzZXNbaG9va107XG5cdGlmICghTWV0ZW9yLmlzU2VydmVyIHx8IGNhbGxiYWNrcyA9PSBudWxsIHx8IGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gaXRlbTtcblx0fVxuXHRNZXRlb3IuZGVmZXIoKCkgPT4ge1xuXHRcdF8uc29ydEJ5KGNhbGxiYWNrcywgKGNhbGxiYWNrKSA9PiBjYWxsYmFjay5wcmlvcml0eSB8fCBSb2NrZXRDaGF0LnByb21pc2VzLnByaW9yaXR5Lk1FRElVTSkuZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdFx0Y2FsbGJhY2soaXRlbSwgY29uc3RhbnQpO1xuXHRcdH0pO1xuXHR9KTtcbn07XG4iLCIvKiBnbG9iYWxzIHJvb21FeGl0ICovXG5pbXBvcnQgeyBSb29tVHlwZUNvbmZpZyB9IGZyb20gJy4vUm9vbVR5cGVDb25maWcnO1xuXG5leHBvcnQgY2xhc3MgUm9vbVR5cGVzQ29tbW9uIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5yb29tVHlwZXMgPSB7fTtcblx0XHR0aGlzLnJvb21UeXBlc09yZGVyID0gW107XG5cdFx0dGhpcy5tYWluT3JkZXIgPSAxO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSByb29tIHR5cGUgdG8gdGhlIGFwcGxpY2F0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1Jvb21UeXBlQ29uZmlnfSByb29tQ29uZmlnXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0YWRkKHJvb21Db25maWcpIHtcblx0XHRpZiAoIShyb29tQ29uZmlnIGluc3RhbmNlb2YgUm9vbVR5cGVDb25maWcpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgUm9vbSBDb25maWd1cmF0aW9uIG9iamVjdCwgaXQgbXVzdCBleHRlbmQgXCJSb29tVHlwZUNvbmZpZ1wiJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucm9vbVR5cGVzW3Jvb21Db25maWcuaWRlbnRpZmllcl0pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIXJvb21Db25maWcub3JkZXIpIHtcblx0XHRcdHJvb21Db25maWcub3JkZXIgPSB0aGlzLm1haW5PcmRlciArIDEwO1xuXHRcdFx0dGhpcy5tYWluT3JkZXIgKz0gMTA7XG5cdFx0fVxuXG5cdFx0dGhpcy5yb29tVHlwZXNPcmRlci5wdXNoKHtcblx0XHRcdGlkZW50aWZpZXI6IHJvb21Db25maWcuaWRlbnRpZmllcixcblx0XHRcdG9yZGVyOiByb29tQ29uZmlnLm9yZGVyXG5cdFx0fSk7XG5cblx0XHR0aGlzLnJvb21UeXBlc1tyb29tQ29uZmlnLmlkZW50aWZpZXJdID0gcm9vbUNvbmZpZztcblxuXHRcdGlmIChyb29tQ29uZmlnLnJvdXRlICYmIHJvb21Db25maWcucm91dGUucGF0aCAmJiByb29tQ29uZmlnLnJvdXRlLm5hbWUgJiYgcm9vbUNvbmZpZy5yb3V0ZS5hY3Rpb24pIHtcblx0XHRcdGNvbnN0IHJvdXRlQ29uZmlnID0ge1xuXHRcdFx0XHRuYW1lOiByb29tQ29uZmlnLnJvdXRlLm5hbWUsXG5cdFx0XHRcdGFjdGlvbjogcm9vbUNvbmZpZy5yb3V0ZS5hY3Rpb25cblx0XHRcdH07XG5cblx0XHRcdGlmIChNZXRlb3IuaXNDbGllbnQpIHtcblx0XHRcdFx0cm91dGVDb25maWcudHJpZ2dlcnNFeGl0ID0gW3Jvb21FeGl0XTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIEZsb3dSb3V0ZXIucm91dGUocm9vbUNvbmZpZy5yb3V0ZS5wYXRoLCByb3V0ZUNvbmZpZyk7XG5cdFx0fVxuXHR9XG5cblx0aGFzQ3VzdG9tTGluayhyb29tVHlwZSkge1xuXHRcdHJldHVybiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0gJiYgdGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdLnJvdXRlICYmIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXS5yb3V0ZS5saW5rICE9IG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IHJvb21UeXBlIHJvb20gdHlwZSAoZS5nLjogYyAoZm9yIGNoYW5uZWxzKSwgZCAoZm9yIGRpcmVjdCBjaGFubmVscykpXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBzdWJEYXRhIHRoZSB1c2VyJ3Mgc3Vic2NyaXB0aW9uIGRhdGFcblx0ICovXG5cdGdldFJvdXRlTGluayhyb29tVHlwZSwgc3ViRGF0YSkge1xuXHRcdGlmICghdGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0bGV0IHJvdXRlRGF0YSA9IHt9O1xuXHRcdGlmICh0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0gJiYgdGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdLnJvdXRlICYmIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXS5yb3V0ZS5saW5rKSB7XG5cdFx0XHRyb3V0ZURhdGEgPSB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm91dGUubGluayhzdWJEYXRhKTtcblx0XHR9IGVsc2UgaWYgKHN1YkRhdGEgJiYgc3ViRGF0YS5uYW1lKSB7XG5cdFx0XHRyb3V0ZURhdGEgPSB7XG5cdFx0XHRcdG5hbWU6IHN1YkRhdGEubmFtZVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gRmxvd1JvdXRlci5wYXRoKHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXS5yb3V0ZS5uYW1lLCByb3V0ZURhdGEpO1xuXHR9XG5cblx0b3BlblJvdXRlTGluayhyb29tVHlwZSwgc3ViRGF0YSwgcXVlcnlQYXJhbXMpIHtcblx0XHRpZiAoIXRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGxldCByb3V0ZURhdGEgPSB7fTtcblx0XHRpZiAodGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdICYmIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXS5yb3V0ZSAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm91dGUubGluaykge1xuXHRcdFx0cm91dGVEYXRhID0gdGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdLnJvdXRlLmxpbmsoc3ViRGF0YSk7XG5cdFx0fSBlbHNlIGlmIChzdWJEYXRhICYmIHN1YkRhdGEubmFtZSkge1xuXHRcdFx0cm91dGVEYXRhID0ge1xuXHRcdFx0XHRuYW1lOiBzdWJEYXRhLm5hbWVcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIEZsb3dSb3V0ZXIuZ28odGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdLnJvdXRlLm5hbWUsIHJvdXRlRGF0YSwgcXVlcnlQYXJhbXMpO1xuXHR9XG59XG4iLCJSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMgPSB7XG5cdGNvbW1hbmRzOiB7fVxufTtcblxuUm9ja2V0Q2hhdC5zbGFzaENvbW1hbmRzLmFkZCA9IGZ1bmN0aW9uKGNvbW1hbmQsIGNhbGxiYWNrLCBvcHRpb25zID0ge30sIHJlc3VsdCkge1xuXHRSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMuY29tbWFuZHNbY29tbWFuZF0gPSB7XG5cdFx0Y29tbWFuZCxcblx0XHRjYWxsYmFjayxcblx0XHRwYXJhbXM6IG9wdGlvbnMucGFyYW1zLFxuXHRcdGRlc2NyaXB0aW9uOiBvcHRpb25zLmRlc2NyaXB0aW9uLFxuXHRcdGNsaWVudE9ubHk6IG9wdGlvbnMuY2xpZW50T25seSB8fCBmYWxzZSxcblx0XHRyZXN1bHRcblx0fTtcbn07XG5cblJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5ydW4gPSBmdW5jdGlvbihjb21tYW5kLCBwYXJhbXMsIGl0ZW0pIHtcblx0aWYgKFJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5jb21tYW5kc1tjb21tYW5kXSAmJiBSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMuY29tbWFuZHNbY29tbWFuZF0uY2FsbGJhY2spIHtcblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zbGFzaENvbW1hbmRzLmNvbW1hbmRzW2NvbW1hbmRdLmNhbGxiYWNrKGNvbW1hbmQsIHBhcmFtcywgaXRlbSk7XG5cdH1cbn07XG5cbk1ldGVvci5tZXRob2RzKHtcblx0c2xhc2hDb21tYW5kKGNvbW1hbmQpIHtcblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHtcblx0XHRcdFx0bWV0aG9kOiAnc2xhc2hDb21tYW5kJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiBSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMucnVuKGNvbW1hbmQuY21kLCBjb21tYW5kLnBhcmFtcywgY29tbWFuZC5tc2cpO1xuXHR9XG59KTtcbiIsImltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuUm9ja2V0Q2hhdC5NZXNzYWdlID0ge1xuXHRwYXJzZShtc2csIGxhbmd1YWdlKSB7XG5cdFx0Y29uc3QgbWVzc2FnZVR5cGUgPSBSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5nZXRUeXBlKG1zZyk7XG5cdFx0aWYgKG1lc3NhZ2VUeXBlKSB7XG5cdFx0XHRpZiAobWVzc2FnZVR5cGUucmVuZGVyKSB7XG5cdFx0XHRcdHJldHVybiBtZXNzYWdlVHlwZS5yZW5kZXIobXNnKTtcblx0XHRcdH0gZWxzZSBpZiAobWVzc2FnZVR5cGUudGVtcGxhdGUpIHtcblx0XHRcdFx0Ly8gUmVuZGVyIG1lc3NhZ2Vcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmIChtZXNzYWdlVHlwZS5tZXNzYWdlKSB7XG5cdFx0XHRcdGlmICghbGFuZ3VhZ2UgJiYgdHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRsYW5ndWFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyTGFuZ3VhZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBkYXRhID0gKHR5cGVvZiBtZXNzYWdlVHlwZS5kYXRhID09PSAnZnVuY3Rpb24nICYmIG1lc3NhZ2VUeXBlLmRhdGEobXNnKSkgfHwge307XG5cdFx0XHRcdHJldHVybiBUQVBpMThuLl9fKG1lc3NhZ2VUeXBlLm1lc3NhZ2UsIGRhdGEsIGxhbmd1YWdlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKG1zZy51ICYmIG1zZy51LnVzZXJuYW1lID09PSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQ2hhdG9wc19Vc2VybmFtZScpKSB7XG5cdFx0XHRtc2cuaHRtbCA9IG1zZy5tc2c7XG5cdFx0XHRyZXR1cm4gbXNnLmh0bWw7XG5cdFx0fVxuXHRcdG1zZy5odG1sID0gbXNnLm1zZztcblx0XHRpZiAocy50cmltKG1zZy5odG1sKSAhPT0gJycpIHtcblx0XHRcdG1zZy5odG1sID0gcy5lc2NhcGVIVE1MKG1zZy5odG1sKTtcblx0XHR9XG5cdFx0bXNnLmh0bWwgPSBtc2cuaHRtbC5yZXBsYWNlKC9cXG4vZ20sICc8YnIvPicpO1xuXHRcdHJldHVybiBtc2cuaHRtbDtcblx0fVxufTtcbiIsIlJvY2tldENoYXQubWVzc2FnZUJveCA9IHt9O1xuXG5Sb2NrZXRDaGF0Lm1lc3NhZ2VCb3guYWN0aW9ucyA9IG5ldyBjbGFzcyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuYWN0aW9ucyA9IHt9O1xuXHR9XG5cblx0LyogQWRkIGEgYWN0aW9uIHRvIG1lc3NhZ2Vib3hcblx0QHBhcmFtIGdyb3VwXG5cdEBwYXJhbSBsYWJlbFxuXHRAcGFyYW0gY29uZmlnXG5cdGljb246IGljb24gY2xhc3Ncblx0YWN0aW9uOiBhY3Rpb24gZnVuY3Rpb25cblx0Y29uZGl0aW9uOiBjb25kaXRpb24gdG8gZGlzcGxheSB0aGUgYWN0aW9uXG5cdCovXG5cblx0YWRkKGdyb3VwLCBsYWJlbCwgY29uZmlnKSB7XG5cdFx0aWYgKCFncm91cCAmJiAhbGFiZWwgJiYgIWNvbmZpZykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5hY3Rpb25zW2dyb3VwXSkge1xuXHRcdFx0dGhpcy5hY3Rpb25zW2dyb3VwXSA9IFtdO1xuXHRcdH1cblxuXHRcdGNvbnN0IGFjdGlvbkV4aXN0cyA9IHRoaXMuYWN0aW9uc1tncm91cF0uZmluZCgoYWN0aW9uKSA9PiB7XG5cdFx0XHRyZXR1cm4gYWN0aW9uLmxhYmVsID09PSBsYWJlbDtcblx0XHR9KTtcblxuXHRcdGlmIChhY3Rpb25FeGlzdHMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmFjdGlvbnNbZ3JvdXBdLnB1c2goey4uLmNvbmZpZywgbGFiZWx9KTtcblx0fVxuXG5cdGdldChncm91cCkge1xuXHRcdGlmICghZ3JvdXApIHtcblx0XHRcdHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmFjdGlvbnMpLnJlZHVjZSgocmV0LCBrZXkpID0+IHtcblx0XHRcdFx0Y29uc3QgYWN0aW9ucyA9IHRoaXMuYWN0aW9uc1trZXldLmZpbHRlcihhY3Rpb24gPT4gIWFjdGlvbi5jb25kaXRpb24gfHwgYWN0aW9uLmNvbmRpdGlvbigpKTtcblx0XHRcdFx0aWYgKGFjdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0cmV0W2tleV0gPSBhY3Rpb25zO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9LCB7fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYWN0aW9uc1tncm91cF0uZmlsdGVyKGFjdGlvbiA9PiAhYWN0aW9uLmNvbmRpdGlvbiB8fCBhY3Rpb24uY29uZGl0aW9uKCkpO1xuXHR9XG5cblx0Z2V0QnlJZChpZCkge1xuXHRcdGNvbnN0IG1lc3NhZ2VBY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuXHRcdGxldCBhY3Rpb25zID0gW107XG5cdFx0T2JqZWN0LmtleXMobWVzc2FnZUFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oYWN0aW9uKSB7XG5cdFx0XHRhY3Rpb25zID0gYWN0aW9ucy5jb25jYXQobWVzc2FnZUFjdGlvbnNbYWN0aW9uXSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gYWN0aW9ucy5maWx0ZXIoYWN0aW9uID0+IGFjdGlvbi5pZCA9PT0gaWQpO1xuXHR9XG59O1xuIiwiUm9ja2V0Q2hhdC5NZXNzYWdlVHlwZXMgPSBuZXcgY2xhc3Mge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLnR5cGVzID0ge307XG5cdH1cblxuXHRyZWdpc3RlclR5cGUob3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLnR5cGVzW29wdGlvbnMuaWRdID0gb3B0aW9ucztcblx0fVxuXG5cdGdldFR5cGUobWVzc2FnZSkge1xuXHRcdHJldHVybiB0aGlzLnR5cGVzW21lc3NhZ2UgJiYgbWVzc2FnZS50XTtcblx0fVxuXG5cdGlzU3lzdGVtTWVzc2FnZShtZXNzYWdlKSB7XG5cdFx0Y29uc3QgdHlwZSA9IHRoaXMudHlwZXNbbWVzc2FnZSAmJiBtZXNzYWdlLnRdO1xuXHRcdHJldHVybiB0eXBlICYmIHR5cGUuc3lzdGVtO1xuXHR9XG5cbn07XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAncicsXG5cdFx0c3lzdGVtOiB0cnVlLFxuXHRcdG1lc3NhZ2U6ICdSb29tX25hbWVfY2hhbmdlZCcsXG5cdFx0ZGF0YShtZXNzYWdlKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRyb29tX25hbWU6IG1lc3NhZ2UubXNnLFxuXHRcdFx0XHR1c2VyX2J5OiBtZXNzYWdlLnUudXNlcm5hbWVcblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblx0Um9ja2V0Q2hhdC5NZXNzYWdlVHlwZXMucmVnaXN0ZXJUeXBlKHtcblx0XHRpZDogJ2F1Jyxcblx0XHRzeXN0ZW06IHRydWUsXG5cdFx0bWVzc2FnZTogJ1VzZXJfYWRkZWRfYnknLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcl9hZGRlZDogbWVzc2FnZS5tc2csXG5cdFx0XHRcdHVzZXJfYnk6IG1lc3NhZ2UudS51c2VybmFtZVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAncnUnLFxuXHRcdHN5c3RlbTogdHJ1ZSxcblx0XHRtZXNzYWdlOiAnVXNlcl9yZW1vdmVkX2J5Jyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXJfcmVtb3ZlZDogbWVzc2FnZS5tc2csXG5cdFx0XHRcdHVzZXJfYnk6IG1lc3NhZ2UudS51c2VybmFtZVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAndWwnLFxuXHRcdHN5c3RlbTogdHJ1ZSxcblx0XHRtZXNzYWdlOiAnVXNlcl9sZWZ0Jyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXJfbGVmdDogbWVzc2FnZS51LnVzZXJuYW1lXG5cdFx0XHR9O1xuXHRcdH1cblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICd1aicsXG5cdFx0c3lzdGVtOiB0cnVlLFxuXHRcdG1lc3NhZ2U6ICdVc2VyX2pvaW5lZF9jaGFubmVsJyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXI6IG1lc3NhZ2UudS51c2VybmFtZVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAnd20nLFxuXHRcdHN5c3RlbTogdHJ1ZSxcblx0XHRtZXNzYWdlOiAnV2VsY29tZScsXG5cdFx0ZGF0YShtZXNzYWdlKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR1c2VyOiBtZXNzYWdlLnUudXNlcm5hbWVcblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblx0Um9ja2V0Q2hhdC5NZXNzYWdlVHlwZXMucmVnaXN0ZXJUeXBlKHtcblx0XHRpZDogJ3JtJyxcblx0XHRzeXN0ZW06IHRydWUsXG5cdFx0bWVzc2FnZTogJ01lc3NhZ2VfcmVtb3ZlZCcsXG5cdFx0ZGF0YShtZXNzYWdlKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR1c2VyOiBtZXNzYWdlLnUudXNlcm5hbWVcblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblx0Um9ja2V0Q2hhdC5NZXNzYWdlVHlwZXMucmVnaXN0ZXJUeXBlKHtcblx0XHRpZDogJ3J0YycsXG5cdFx0cmVuZGVyKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiBSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ3JlbmRlclJ0Y01lc3NhZ2UnLCBtZXNzYWdlKTtcblx0XHR9XG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAndXNlci1tdXRlZCcsXG5cdFx0c3lzdGVtOiB0cnVlLFxuXHRcdG1lc3NhZ2U6ICdVc2VyX211dGVkX2J5Jyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXJfbXV0ZWQ6IG1lc3NhZ2UubXNnLFxuXHRcdFx0XHR1c2VyX2J5OiBtZXNzYWdlLnUudXNlcm5hbWVcblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblx0Um9ja2V0Q2hhdC5NZXNzYWdlVHlwZXMucmVnaXN0ZXJUeXBlKHtcblx0XHRpZDogJ3VzZXItdW5tdXRlZCcsXG5cdFx0c3lzdGVtOiB0cnVlLFxuXHRcdG1lc3NhZ2U6ICdVc2VyX3VubXV0ZWRfYnknLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcl91bm11dGVkOiBtZXNzYWdlLm1zZyxcblx0XHRcdFx0dXNlcl9ieTogbWVzc2FnZS51LnVzZXJuYW1lXG5cdFx0XHR9O1xuXHRcdH1cblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICdzdWJzY3JpcHRpb24tcm9sZS1hZGRlZCcsXG5cdFx0c3lzdGVtOiB0cnVlLFxuXHRcdG1lc3NhZ2U6ICdfX3VzZXJuYW1lX193YXNfc2V0X19yb2xlX19ieV9fdXNlcl9ieV8nLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcm5hbWU6IG1lc3NhZ2UubXNnLFxuXHRcdFx0XHRyb2xlOiBtZXNzYWdlLnJvbGUsXG5cdFx0XHRcdHVzZXJfYnk6IG1lc3NhZ2UudS51c2VybmFtZVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAnc3Vic2NyaXB0aW9uLXJvbGUtcmVtb3ZlZCcsXG5cdFx0c3lzdGVtOiB0cnVlLFxuXHRcdG1lc3NhZ2U6ICdfX3VzZXJuYW1lX19pc19ub19sb25nZXJfX3JvbGVfX2RlZmluZWRfYnlfX3VzZXJfYnlfJyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXJuYW1lOiBtZXNzYWdlLm1zZyxcblx0XHRcdFx0cm9sZTogbWVzc2FnZS5yb2xlLFxuXHRcdFx0XHR1c2VyX2J5OiBtZXNzYWdlLnUudXNlcm5hbWVcblx0XHRcdH07XG5cdFx0fVxuXHR9KTtcblx0Um9ja2V0Q2hhdC5NZXNzYWdlVHlwZXMucmVnaXN0ZXJUeXBlKHtcblx0XHRpZDogJ3Jvb20tYXJjaGl2ZWQnLFxuXHRcdHN5c3RlbTogdHJ1ZSxcblx0XHRtZXNzYWdlOiAnVGhpc19yb29tX2hhc19iZWVuX2FyY2hpdmVkX2J5X191c2VybmFtZV8nLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcm5hbWU6IG1lc3NhZ2UudS51c2VybmFtZVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAncm9vbS11bmFyY2hpdmVkJyxcblx0XHRzeXN0ZW06IHRydWUsXG5cdFx0bWVzc2FnZTogJ1RoaXNfcm9vbV9oYXNfYmVlbl91bmFyY2hpdmVkX2J5X191c2VybmFtZV8nLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcm5hbWU6IG1lc3NhZ2UudS51c2VybmFtZVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xufSk7XG4iLCJsZXQgbG9nZ2VyO1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG5cdGxvZ2dlciA9IG5ldyBMb2dnZXIoJ1RlbXBsYXRlVmFySGFuZGxlcicsIHt9KTtcbn1cblxuUm9ja2V0Q2hhdC50ZW1wbGF0ZVZhckhhbmRsZXIgPSBmdW5jdGlvbih2YXJpYWJsZSwgb2JqZWN0KSB7XG5cblx0Y29uc3QgdGVtcGxhdGVSZWdleCA9IC8jeyhbXFx3XFwtXSspfS9naTtcblx0bGV0IG1hdGNoID0gdGVtcGxhdGVSZWdleC5leGVjKHZhcmlhYmxlKTtcblx0bGV0IHRtcFZhcmlhYmxlID0gdmFyaWFibGU7XG5cblx0aWYgKG1hdGNoID09IG51bGwpIHtcblx0XHRpZiAoIW9iamVjdC5oYXNPd25Qcm9wZXJ0eSh2YXJpYWJsZSkpIHtcblx0XHRcdGxvZ2dlciAmJiBsb2dnZXIuZGVidWcoYHVzZXIgZG9lcyBub3QgaGF2ZSBhdHRyaWJ1dGU6ICR7IHZhcmlhYmxlIH1gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0cmV0dXJuIG9iamVjdFt2YXJpYWJsZV07XG5cdH0gZWxzZSB7XG5cdFx0bG9nZ2VyICYmIGxvZ2dlci5kZWJ1ZygndGVtcGxhdGUgZm91bmQuIHJlcGxhY2luZyB2YWx1ZXMnKTtcblx0XHR3aGlsZSAobWF0Y2ggIT0gbnVsbCkge1xuXHRcdFx0Y29uc3QgdG1wbFZhciA9IG1hdGNoWzBdO1xuXHRcdFx0Y29uc3QgdG1wbEF0dHJOYW1lID0gbWF0Y2hbMV07XG5cblx0XHRcdGlmICghb2JqZWN0Lmhhc093blByb3BlcnR5KHRtcGxBdHRyTmFtZSkpIHtcblx0XHRcdFx0bG9nZ2VyICYmIGxvZ2dlci5kZWJ1ZyhgdXNlciBkb2VzIG5vdCBoYXZlIGF0dHJpYnV0ZTogJHsgdG1wbEF0dHJOYW1lIH1gKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBhdHRyVmFsID0gb2JqZWN0W3RtcGxBdHRyTmFtZV07XG5cdFx0XHRsb2dnZXIgJiYgbG9nZ2VyLmRlYnVnKGByZXBsYWNpbmcgdGVtcGxhdGUgdmFyOiAkeyB0bXBsVmFyIH0gd2l0aCB2YWx1ZTogJHsgYXR0clZhbCB9YCk7XG5cdFx0XHR0bXBWYXJpYWJsZSA9IHRtcFZhcmlhYmxlLnJlcGxhY2UodG1wbFZhciwgYXR0clZhbCk7XG5cdFx0XHRtYXRjaCA9IHRlbXBsYXRlUmVnZXguZXhlYyh2YXJpYWJsZSk7XG5cdFx0fVxuXHRcdHJldHVybiB0bXBWYXJpYWJsZTtcblx0fVxufTtcbiIsIi8qKlxuICogVHJpZXMgdG8gcmV0cmlldmUgdGhlIHVzZXIgcHJlZmVyZW5jZSBmYWxsaW5nIGJhY2sgdG8gYSBkZWZhdWx0IHN5c3RlbVxuICogdmFsdWUgb3IgdG8gYSBkZWZhdWx0IHZhbHVlIGlmIGl0IGlzIHBhc3NlZCBhcyBhcmd1bWVudFxuKi9cblJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UgPSBmdW5jdGlvbih1c2VyLCBrZXksIGRlZmF1bHRWYWx1ZT11bmRlZmluZWQpIHtcblx0bGV0IHByZWZlcmVuY2U7XG5cblx0aWYgKHVzZXIgJiYgdXNlci5zZXR0aW5ncyAmJiB1c2VyLnNldHRpbmdzLnByZWZlcmVuY2VzICYmXG5cdFx0dXNlci5zZXR0aW5ncy5wcmVmZXJlbmNlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0cHJlZmVyZW5jZSA9IHVzZXIuc2V0dGluZ3MucHJlZmVyZW5jZXNba2V5XTtcblx0fSBlbHNlIGlmIChkZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdHByZWZlcmVuY2UgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzXyR7IGtleSB9YCk7XG5cdH1cblxuXHRyZXR1cm4gcHJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkID8gcHJlZmVyZW5jZSA6IGRlZmF1bHRWYWx1ZTtcbn07XG4iLCIvKiBnbG9iYWxzIFdlYkFwcEludGVybmFscyAqL1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NpdGVfVXJsJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZS50cmltKCkgPT09ICcnKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGxldCBob3N0ID0gdmFsdWUucmVwbGFjZSgvXFwvJC8sICcnKTtcblx0Ly8gbGV0IHByZWZpeCA9ICcnO1xuXHRjb25zdCBtYXRjaCA9IHZhbHVlLm1hdGNoKC8oW15cXC9dK1xcL3syfVteXFwvXSspKFxcLy4rKS8pO1xuXHRpZiAobWF0Y2ggIT0gbnVsbCkge1xuXHRcdGhvc3QgPSBtYXRjaFsxXTtcblx0XHQvLyBwcmVmaXggPSBtYXRjaFsyXS5yZXBsYWNlKC9cXC8kLywgJycpO1xuXHR9XG5cdF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkwgPSB2YWx1ZTtcblxuXHRpZiAoTWV0ZW9yLmFic29sdXRlVXJsLmRlZmF1bHRPcHRpb25zICYmIE1ldGVvci5hYnNvbHV0ZVVybC5kZWZhdWx0T3B0aW9ucy5yb290VXJsKSB7XG5cdFx0TWV0ZW9yLmFic29sdXRlVXJsLmRlZmF1bHRPcHRpb25zLnJvb3RVcmwgPSB2YWx1ZTtcblx0fVxuXHRpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG5cdFx0Um9ja2V0Q2hhdC5ob3N0bmFtZSA9IGhvc3QucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC8vLCAnJyk7XG5cdFx0cHJvY2Vzcy5lbnYuTU9CSUxFX1JPT1RfVVJMID0gaG9zdDtcblx0XHRwcm9jZXNzLmVudi5NT0JJTEVfRERQX1VSTCA9IGhvc3Q7XG5cdFx0aWYgKHR5cGVvZiBXZWJBcHBJbnRlcm5hbHMgIT09ICd1bmRlZmluZWQnICYmIFdlYkFwcEludGVybmFscy5nZW5lcmF0ZUJvaWxlcnBsYXRlKSB7XG5cdFx0XHRyZXR1cm4gV2ViQXBwSW50ZXJuYWxzLmdlbmVyYXRlQm9pbGVycGxhdGUoKTtcblx0XHR9XG5cdH1cbn0pO1xuIiwiLyogZ2xvYmFsIEluc3RhbmNlU3RhdHVzICovXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignTWV0ZW9yJywge1xuXHRtZXRob2RzOiB7XG5cdFx0bWV0aG9kOiB7XG5cdFx0XHR0eXBlOiAnZGVidWcnXG5cdFx0fSxcblx0XHRwdWJsaXNoOiB7XG5cdFx0XHR0eXBlOiAnZGVidWcnXG5cdFx0fVxuXHR9XG59KTtcblxuY29uc3Qgd3JhcE1ldGhvZHMgPSBmdW5jdGlvbihuYW1lLCBvcmlnaW5hbEhhbmRsZXIsIG1ldGhvZHNNYXApIHtcblx0bWV0aG9kc01hcFtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IGFyZ3MgPSBuYW1lID09PSAndWZzV3JpdGUnID8gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IGFyZ3VtZW50cztcblx0XHRsb2dnZXIubWV0aG9kKG5hbWUsICctPiB1c2VySWQ6JywgTWV0ZW9yLnVzZXJJZCgpLCAnLCBhcmd1bWVudHM6ICcsIGFyZ3MpO1xuXG5cdFx0cmV0dXJuIG9yaWdpbmFsSGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHR9O1xufTtcblxuY29uc3Qgb3JpZ2luYWxNZXRlb3JNZXRob2RzID0gTWV0ZW9yLm1ldGhvZHM7XG5cbk1ldGVvci5tZXRob2RzID0gZnVuY3Rpb24obWV0aG9kTWFwKSB7XG5cdF8uZWFjaChtZXRob2RNYXAsIGZ1bmN0aW9uKGhhbmRsZXIsIG5hbWUpIHtcblx0XHR3cmFwTWV0aG9kcyhuYW1lLCBoYW5kbGVyLCBtZXRob2RNYXApO1xuXHR9KTtcblx0b3JpZ2luYWxNZXRlb3JNZXRob2RzKG1ldGhvZE1hcCk7XG59O1xuXG5jb25zdCBvcmlnaW5hbE1ldGVvclB1Ymxpc2ggPSBNZXRlb3IucHVibGlzaDtcblxuTWV0ZW9yLnB1Ymxpc2ggPSBmdW5jdGlvbihuYW1lLCBmdW5jKSB7XG5cdHJldHVybiBvcmlnaW5hbE1ldGVvclB1Ymxpc2gobmFtZSwgZnVuY3Rpb24oKSB7XG5cdFx0bG9nZ2VyLnB1Ymxpc2gobmFtZSwgJy0+IHVzZXJJZDonLCB0aGlzLnVzZXJJZCwgJywgYXJndW1lbnRzOiAnLCBhcmd1bWVudHMpO1xuXG5cdFx0cmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0fSk7XG59O1xuXG5XZWJBcHAucmF3Q29ubmVjdEhhbmRsZXJzLnVzZShmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xuXHRyZXMuc2V0SGVhZGVyKCdYLUluc3RhbmNlLUlEJywgSW5zdGFuY2VTdGF0dXMuaWQoKSk7XG5cdHJldHVybiBuZXh0KCk7XG59KTtcbiIsImltcG9ydCBidWdzbmFnIGZyb20gJ2J1Z3NuYWcnO1xuXG5Sb2NrZXRDaGF0LmJ1Z3NuYWcgPSBidWdzbmFnO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQnVnc25hZ19hcGlfa2V5JywgKGtleSwgdmFsdWUpID0+IHtcblx0aWYgKHZhbHVlKSB7XG5cdFx0YnVnc25hZy5yZWdpc3Rlcih2YWx1ZSk7XG5cdH1cbn0pO1xuXG5jb25zdCBub3RpZnkgPSBmdW5jdGlvbihtZXNzYWdlLCBzdGFjaykge1xuXHRpZiAodHlwZW9mIHN0YWNrID09PSAnc3RyaW5nJykge1xuXHRcdG1lc3NhZ2UgKz0gYCAkeyBzdGFjayB9YDtcblx0fVxuXHRsZXQgb3B0aW9ucyA9IHt9O1xuXHRpZiAoUm9ja2V0Q2hhdC5JbmZvKSB7XG5cdFx0b3B0aW9ucyA9IHsgYXBwOiB7IHZlcnNpb246IFJvY2tldENoYXQuSW5mby52ZXJzaW9uLCBpbmZvOiBSb2NrZXRDaGF0LkluZm8gfSB9O1xuXHR9XG5cdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuXHRlcnJvci5zdGFjayA9IHN0YWNrO1xuXHRSb2NrZXRDaGF0LmJ1Z3NuYWcubm90aWZ5KGVycm9yLCBvcHRpb25zKTtcbn07XG5cbnByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoZXJyb3IpID0+IHtcblx0bm90aWZ5KGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrKTtcblx0dGhyb3cgZXJyb3I7XG59KSk7XG5cbmNvbnN0IG9yaWdpbmFsTWV0ZW9yRGVidWcgPSBNZXRlb3IuX2RlYnVnO1xuTWV0ZW9yLl9kZWJ1ZyA9IGZ1bmN0aW9uKCkge1xuXHRub3RpZnkoLi4uYXJndW1lbnRzKTtcblx0cmV0dXJuIG9yaWdpbmFsTWV0ZW9yRGVidWcoLi4uYXJndW1lbnRzKTtcbn07XG4iLCJjb25zdCBjbGllbnQgPSByZXF1aXJlKCdwcm9tLWNsaWVudCcpO1xuXG5Sb2NrZXRDaGF0LnByb21jbGllbnQgPSBjbGllbnQ7XG5cblJvY2tldENoYXQubWV0cmljcyA9IHt9O1xuXG4vLyBvbmUgc2FtcGxlIG1ldHJpY3Mgb25seSAtIGEgY291bnRlclxuXG5Sb2NrZXRDaGF0Lm1ldHJpY3MubWVzc2FnZXNTZW50ID0gbmV3IGNsaWVudC5Db3VudGVyKCdtZXNzYWdlc19zZW50JywgJ2N1bXVsYXRlZCBudW1iZXIgb2YgbWVzc2FnZXMgc2VudCcpO1xuIiwiLyogZ2xvYmFscyBSYXRlTGltaXRlciAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cblJvY2tldENoYXQuUmF0ZUxpbWl0ZXIgPSBuZXcgY2xhc3Mge1xuXHRsaW1pdEZ1bmN0aW9uKGZuLCBudW1SZXF1ZXN0cywgdGltZUludGVydmFsLCBtYXRjaGVycykge1xuXHRcdGlmIChwcm9jZXNzLmVudi5URVNUX01PREUgPT09ICd0cnVlJykge1xuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0XHRjb25zdCByYXRlTGltaXRlciA9IG5ldyBSYXRlTGltaXRlcigpO1xuXHRcdHJhdGVMaW1pdGVyLmFkZFJ1bGUobWF0Y2hlcnMsIG51bVJlcXVlc3RzLCB0aW1lSW50ZXJ2YWwpO1xuXHRcdHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG5cdFx0XHRjb25zdCBtYXRjaCA9IHt9O1xuXHRcdFx0Xy5lYWNoKG1hdGNoZXJzLCBmdW5jdGlvbihtYXRjaGVyLCBrZXkpIHtcblx0XHRcdFx0cmV0dXJuIG1hdGNoW2tleV0gPSBhcmdzW2tleV07XG5cdFx0XHR9KTtcblx0XHRcdHJhdGVMaW1pdGVyLmluY3JlbWVudChtYXRjaCk7XG5cdFx0XHRjb25zdCByYXRlTGltaXRSZXN1bHQgPSByYXRlTGltaXRlci5jaGVjayhtYXRjaCk7XG5cdFx0XHRpZiAocmF0ZUxpbWl0UmVzdWx0LmFsbG93ZWQpIHtcblx0XHRcdFx0cmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci10b28tbWFueS1yZXF1ZXN0cycsIGBFcnJvciwgdG9vIG1hbnkgcmVxdWVzdHMuIFBsZWFzZSBzbG93IGRvd24uIFlvdSBtdXN0IHdhaXQgJHsgTWF0aC5jZWlsKHJhdGVMaW1pdFJlc3VsdC50aW1lVG9SZXNldCAvIDEwMDApIH0gc2Vjb25kcyBiZWZvcmUgdHJ5aW5nIGFnYWluLmAsIHtcblx0XHRcdFx0XHR0aW1lVG9SZXNldDogcmF0ZUxpbWl0UmVzdWx0LnRpbWVUb1Jlc2V0LFxuXHRcdFx0XHRcdHNlY29uZHM6IE1hdGguY2VpbChyYXRlTGltaXRSZXN1bHQudGltZVRvUmVzZXQgLyAxMDAwKVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0bGltaXRNZXRob2QobWV0aG9kTmFtZSwgbnVtUmVxdWVzdHMsIHRpbWVJbnRlcnZhbCwgbWF0Y2hlcnMpIHtcblx0XHRpZiAocHJvY2Vzcy5lbnYuVEVTVF9NT0RFID09PSAndHJ1ZScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgbWF0Y2ggPSB7XG5cdFx0XHR0eXBlOiAnbWV0aG9kJyxcblx0XHRcdG5hbWU6IG1ldGhvZE5hbWVcblx0XHR9O1xuXHRcdF8uZWFjaChtYXRjaGVycywgZnVuY3Rpb24obWF0Y2hlciwga2V5KSB7XG5cdFx0XHRyZXR1cm4gbWF0Y2hba2V5XSA9IG1hdGNoZXJzW2tleV07XG5cdFx0fSk7XG5cdFx0cmV0dXJuIEREUFJhdGVMaW1pdGVyLmFkZFJ1bGUobWF0Y2gsIG51bVJlcXVlc3RzLCB0aW1lSW50ZXJ2YWwpO1xuXHR9XG5cbn07XG4iLCIvKiBnbG9iYWxzIExvZ2dlck1hbmFnZXIgKi9cblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdMb2dfUGFja2FnZScsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0cmV0dXJuIExvZ2dlck1hbmFnZXIuc2hvd1BhY2thZ2UgPSB2YWx1ZTtcbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTG9nX0ZpbGUnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdHJldHVybiBMb2dnZXJNYW5hZ2VyLnNob3dGaWxlQW5kTGluZSA9IHZhbHVlO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdMb2dfTGV2ZWwnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0TG9nZ2VyTWFuYWdlci5sb2dMZXZlbCA9IHBhcnNlSW50KHZhbHVlKTtcblx0XHRNZXRlb3Iuc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRyZXR1cm4gTG9nZ2VyTWFuYWdlci5lbmFibGUodHJ1ZSk7XG5cdFx0fSwgMjAwKTtcblx0fVxufSk7XG4iLCIvKiBnbG9iYWxzIFB1c2ggKi9cbmNsYXNzIFB1c2hOb3RpZmljYXRpb24ge1xuXHRnZXROb3RpZmljYXRpb25JZChyb29tSWQpIHtcblx0XHRjb25zdCBzZXJ2ZXJJZCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCd1bmlxdWVJRCcpO1xuXHRcdHJldHVybiB0aGlzLmhhc2goYCR7IHNlcnZlcklkIH18JHsgcm9vbUlkIH1gKTsgLy8gaGFzaFxuXHR9XG5cblx0aGFzaChzdHIpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cdFx0bGV0IGkgPSBzdHIubGVuZ3RoO1xuXG5cdFx0d2hpbGUgKGkpIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIHN0ci5jaGFyQ29kZUF0KC0taSk7XG5cdFx0XHRoYXNoID0gaGFzaCAmIGhhc2g7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblx0XHRyZXR1cm4gaGFzaDtcblx0fVxuXG5cdHNlbmQoeyByb29tTmFtZSwgcm9vbUlkLCB1c2VybmFtZSwgbWVzc2FnZSwgdXNlcnNUbywgcGF5bG9hZCwgYmFkZ2UgPSAxLCBjYXRlZ29yeSB9KSB7XG5cdFx0bGV0IHRpdGxlO1xuXHRcdGlmIChyb29tTmFtZSAmJiByb29tTmFtZSAhPT0gJycpIHtcblx0XHRcdHRpdGxlID0gYCR7IHJvb21OYW1lIH1gO1xuXHRcdFx0bWVzc2FnZSA9IGAkeyB1c2VybmFtZSB9OiAkeyBtZXNzYWdlIH1gO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aXRsZSA9IGAkeyB1c2VybmFtZSB9YDtcblx0XHR9XG5cdFx0Y29uc3QgaWNvbiA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBc3NldHNfZmF2aWNvbl8xOTInKS51cmwgfHwgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0Fzc2V0c19mYXZpY29uXzE5MicpLmRlZmF1bHRVcmw7XG5cdFx0Y29uc3QgY29uZmlnID0ge1xuXHRcdFx0ZnJvbTogJ3B1c2gnLFxuXHRcdFx0YmFkZ2UsXG5cdFx0XHRzb3VuZDogJ2RlZmF1bHQnLFxuXHRcdFx0dGl0bGUsXG5cdFx0XHR0ZXh0OiBtZXNzYWdlLFxuXHRcdFx0cGF5bG9hZCxcblx0XHRcdHF1ZXJ5OiB1c2Vyc1RvLFxuXHRcdFx0bm90SWQ6IHRoaXMuZ2V0Tm90aWZpY2F0aW9uSWQocm9vbUlkKSxcblx0XHRcdGdjbToge1xuXHRcdFx0XHRzdHlsZTogJ2luYm94Jyxcblx0XHRcdFx0c3VtbWFyeVRleHQ6ICclbiUgbmV3IG1lc3NhZ2VzJyxcblx0XHRcdFx0aW1hZ2U6IFJvY2tldENoYXQuZ2V0VVJMKGljb24sIHsgZnVsbDogdHJ1ZSB9KVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRpZiAoY2F0ZWdvcnkgIT09ICcnKSB7XG5cdFx0XHRjb25maWcuYXBuID0ge1xuXHRcdFx0XHRjYXRlZ29yeVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUHVzaC5zZW5kKGNvbmZpZyk7XG5cdH1cbn1cblxuUm9ja2V0Q2hhdC5QdXNoTm90aWZpY2F0aW9uID0gbmV3IFB1c2hOb3RpZmljYXRpb24oKTtcbiIsIlJvY2tldENoYXQuZW1haWxEb21haW5EZWZhdWx0QmxhY2tMaXN0ID0gW1xuXHQnMC1tYWlsLmNvbScsXG5cdCcwODE1LnJ1Jyxcblx0JzA4MTUuc3UnLFxuXHQnMGNsaWNrZW1haWwuY29tJyxcblx0JzB3bmQubmV0Jyxcblx0JzB3bmQub3JnJyxcblx0JzEwbWFpbC5vcmcnLFxuXHQnMTBtaW51dC5jb20ucGwnLFxuXHQnMTBtaW51dGVtYWlsLmNvLnphJyxcblx0JzEwbWludXRlbWFpbC5jb20nLFxuXHQnMTBtaW51dGVtYWlsLmRlJyxcblx0JzEyMy1tLmNvbScsXG5cdCcxY2h1YW4uY29tJyxcblx0JzFmc2RmZHNmc2RmLnRrJyxcblx0JzFwYWQuZGUnLFxuXHQnMXpodWFuLmNvbScsXG5cdCcyMGVtYWlsLmV1Jyxcblx0JzIwbWFpbC5ldScsXG5cdCcyMG1haWwuaXQnLFxuXHQnMjBtaW51dGVtYWlsLmNvbScsXG5cdCcyMWNuLmNvbScsXG5cdCcyZmRnZGZnZGZnZGYudGsnLFxuXHQnMnByb25nLmNvbScsXG5cdCczMG1pbnV0ZW1haWwuY29tJyxcblx0JzMzbWFpbC5jb20nLFxuXHQnM2QtcGFpbnRpbmcuY29tJyxcblx0JzN0cnRyZXRnZnJmZS50aycsXG5cdCc0Z2Zkc2dmZGdmZC50aycsXG5cdCc0d2FyZGluZy5jb20nLFxuXHQnNHdhcmRpbmcubmV0Jyxcblx0JzR3YXJkaW5nLm9yZycsXG5cdCc1Z2hnZmhmZ2hmZ2gudGsnLFxuXHQnNjBtaW51dGVtYWlsLmNvbScsXG5cdCc2NzVob3N0aW5nLmNvbScsXG5cdCc2NzVob3N0aW5nLm5ldCcsXG5cdCc2NzVob3N0aW5nLm9yZycsXG5cdCc2aGpnamhna2lsa2oudGsnLFxuXHQnNmlwLnVzJyxcblx0JzZwYXEuY29tJyxcblx0JzZ1cmwuY29tJyxcblx0Jzc1aG9zdGluZy5jb20nLFxuXHQnNzVob3N0aW5nLm5ldCcsXG5cdCc3NWhvc3Rpbmcub3JnJyxcblx0JzdkYXlzLXByaW50aW5nLmNvbScsXG5cdCc3dGFncy5jb20nLFxuXHQnOTlleHBlcnRzLmNvbScsXG5cdCc5b3gubmV0Jyxcblx0J2EtYmMubmV0Jyxcblx0J2E0NS5pbicsXG5cdCdhYmNtYWlsLmVtYWlsJyxcblx0J2FieXNzbWFpbC5jb20nLFxuXHQnYWNlbnRyaS5jb20nLFxuXHQnYWR2YW50aW1vLmNvbScsXG5cdCdhZnJvYmFjb24uY29tJyxcblx0J2FnLnVzLnRvJyxcblx0J2FnZWRtYWlsLmNvbScsXG5cdCdhaGsuanAnLFxuXHQnYWpheGFwcC5uZXQnLFxuXHQnYWxpdmFuY2UuY29tJyxcblx0J2FtYS10cmFkZS5kZScsXG5cdCdhbWFpbC5jb20nLFxuXHQnYW1pbGVnaXQuY29tJyxcblx0J2FtaXJpLm5ldCcsXG5cdCdhbWlyaWluZHVzdHJpZXMuY29tJyxcblx0J2FuYXBwdGhhdC5jb20nLFxuXHQnYW5vLW1haWwubmV0Jyxcblx0J2Fub25ib3gubmV0Jyxcblx0J2Fub25tYWlscy5kZScsXG5cdCdhbm9ueW1haWwuZGsnLFxuXHQnYW5vbnltYm94LmNvbScsXG5cdCdhbnRpY2hlZi5jb20nLFxuXHQnYW50aWNoZWYubmV0Jyxcblx0J2FudGlyZWcucnUnLFxuXHQnYW50aXNwYW0uZGUnLFxuXHQnYW50aXNwYW1tYWlsLmRlJyxcblx0J2FwcGl4aWUuY29tJyxcblx0J2FybXlzcHkuY29tJyxcblx0J2FydG1hbi1jb25jZXB0aW9uLmNvbScsXG5cdCdhdmVyLmNvbScsXG5cdCdhem1laWwudGsnLFxuXHQnYmF4b21hbGUuaHQuY3gnLFxuXHQnYmVkZGx5LmNvbScsXG5cdCdiZWVmbWlsay5jb20nLFxuXHQnYmlncHJvZmVzc29yLnNvJyxcblx0J2JpZ3N0cmluZy5jb20nLFxuXHQnYmlua21haWwuY29tJyxcblx0J2Jpby1tdWVzbGkubmV0Jyxcblx0J2Jsb2dteXdheS5vcmcnLFxuXHQnYm9ibWFpbC5pbmZvJyxcblx0J2JvZnRoZXcuY29tJyxcblx0J2Jvb3R5YmF5LmRlJyxcblx0J2JvdW4uY3InLFxuXHQnYm91bmNyLmNvbScsXG5cdCdib3hmb3JtYWlsLmluJyxcblx0J2JyZWFrdGhydS5jb20nLFxuXHQnYnJlZm1haWwuY29tJyxcblx0J2JyZW5uZW5kZXNyZWljaC5kZScsXG5cdCdicm9hZGJhbmRuaW5qYS5jb20nLFxuXHQnYnNub3cubmV0Jyxcblx0J2JzcGFtZnJlZS5vcmcnLFxuXHQnYnUubWludGVtYWlsLmNvbScsXG5cdCdidWZmZW1haWwuY29tJyxcblx0J2J1Z21lbm90LmNvbScsXG5cdCdidW1weW1haWwuY29tJyxcblx0J2J1bmQudXMnLFxuXHQnYnVuZGVzLWxpLmdhJyxcblx0J2J1cm50aGVzcGFtLmluZm8nLFxuXHQnYnVyc3RtYWlsLmluZm8nLFxuXHQnYnV5bW9yZXBsYXlzLmNvbScsXG5cdCdidXl1c2VkbGlicmFyeWJvb2tzLm9yZycsXG5cdCdieW9tLmRlJyxcblx0J2MyLmh1Jyxcblx0J2NhY2hlZG90Lm5ldCcsXG5cdCdjYXJkLnpwLnVhJyxcblx0J2Nhc3VhbGR4LmNvbScsXG5cdCdjYmFpci5jb20nLFxuXHQnY2VrLnBtJyxcblx0J2NlbGx1cmwuY29tJyxcblx0J2NlbnRlcm1haWwuY29tJyxcblx0J2NlbnRlcm1haWwubmV0Jyxcblx0J2NoYW1teS5pbmZvJyxcblx0J2NoZWF0bWFpbC5kZScsXG5cdCdjaGlsZHNhdmV0cnVzdC5vcmcnLFxuXHQnY2hvZ21haWwuY29tJyxcblx0J2Nob2ljZW1haWwxLmNvbScsXG5cdCdjaG9uZy1tYWlsLmNvbScsXG5cdCdjaG9uZy1tYWlsLm5ldCcsXG5cdCdjaG9uZy1tYWlsLm9yZycsXG5cdCdjbGl4c2VyLmNvbScsXG5cdCdjbWFpbC5jb20nLFxuXHQnY21haWwubmV0Jyxcblx0J2NtYWlsLm9yZycsXG5cdCdjb2xkZW1haWwuaW5mbycsXG5cdCdjb25zdW1lcnJpb3QuY29tJyxcblx0J2Nvb2wuZnIubmYnLFxuXHQnY29ycmVvLmJsb2dvcy5uZXQnLFxuXHQnY29zbW9ycGguY29tJyxcblx0J2NvdXJyaWVsLmZyLm5mJyxcblx0J2NvdXJyaWVsdGVtcG9yYWlyZS5jb20nLFxuXHQnY3JhcG1haWwub3JnJyxcblx0J2NyYXp5bWFpbGluZy5jb20nLFxuXHQnY3ViaWNsaW5rLmNvbScsXG5cdCdjdXJyeXdvcmxkLmRlJyxcblx0J2N1c3QuaW4nLFxuXHQnY3V2b3guZGUnLFxuXHQnZDNwLmRrJyxcblx0J2RhY29vbGVzdC5jb20nLFxuXHQnZGFpbnRseS5jb20nLFxuXHQnZGFuZGlrbWFpbC5jb20nLFxuXHQnZGF5cmVwLmNvbScsXG5cdCdkYnVua2VyLmNvbScsXG5cdCdkY2VtYWlsLmNvbScsXG5cdCdkZWFkYWRkcmVzcy5jb20nLFxuXHQnZGVhZHNwYW0uY29tJyxcblx0J2RlYWdvdC5jb20nLFxuXHQnZGVhbGphLmNvbScsXG5cdCdkZWxpa2t0LmRlJyxcblx0J2Rlc3BhbS5pdCcsXG5cdCdkZXNwYW1tZWQuY29tJyxcblx0J2Rldm51bGxtYWlsLmNvbScsXG5cdCdkZmdoLm5ldCcsXG5cdCdkaWdpdGFsc2FuY3R1YXJ5LmNvbScsXG5cdCdkaW5nYm9uZS5jb20nLFxuXHQnZGlzY2FyZC5lbWFpbCcsXG5cdCdkaXNjYXJkbWFpbC5jb20nLFxuXHQnZGlzY2FyZG1haWwuZGUnLFxuXHQnZGlzcG9zYWJsZWFkZHJlc3MuY29tJyxcblx0J2Rpc3Bvc2FibGVlbWFpbGFkZHJlc3Nlcy5jb20nLFxuXHQnZGlzcG9zYWJsZWVtYWlsYWRkcmVzc2VzLmVtYWlsbWlzZXIuY29tJyxcblx0J2Rpc3Bvc2FibGVpbmJveC5jb20nLFxuXHQnZGlzcG9zZS5pdCcsXG5cdCdkaXNwb3NlYW1haWwuY29tJyxcblx0J2Rpc3Bvc2VtYWlsLmNvbScsXG5cdCdkaXNwb3N0YWJsZS5jb20nLFxuXHQnZGxlbWFpbC5ydScsXG5cdCdkbS53M2ludGVybmV0LmNvLnVrJyxcblx0J2RtLnczaW50ZXJuZXQuY28udWtleGFtcGxlLmNvbScsXG5cdCdkb2RnZWl0LmNvbScsXG5cdCdkb2RnaXQuY29tJyxcblx0J2RvZGdpdC5vcmcnLFxuXHQnZG9pZWEuY29tJyxcblx0J2RvbW96bWFpbC5jb20nLFxuXHQnZG9uZW1haWwucnUnLFxuXHQnZG9udHJlZy5jb20nLFxuXHQnZG9udHNlbmRtZXNwYW0uZGUnLFxuXHQnZG90bXNnLmNvbScsXG5cdCdkcmRyYi5jb20nLFxuXHQnZHJkcmIubmV0Jyxcblx0J2Ryb3BsYXIuY29tJyxcblx0J2Ryb3BtYWlsLm1lJyxcblx0J2R0LmNvbScsXG5cdCdkdWFtLm5ldCcsXG5cdCdkdWRtYWlsLmNvbScsXG5cdCdkdW1wLWVtYWlsLmluZm8nLFxuXHQnZHVtcGFuZGp1bmsuY29tJyxcblx0J2R1bXBtYWlsLmRlJyxcblx0J2R1bXB5ZW1haWwuY29tJyxcblx0J2R1c2ttYWlsLmNvbScsXG5cdCdlLW1haWwuY29tJyxcblx0J2UtbWFpbC5vcmcnLFxuXHQnZTR3YXJkLmNvbScsXG5cdCdlYXN5dHJhc2htYWlsLmNvbScsXG5cdCdlaW5tYWxtYWlsLmRlJyxcblx0J2VpbnJvdC5jb20nLFxuXHQnZWlucm90LmRlJyxcblx0J2VpbnRhZ3NtYWlsLmRlJyxcblx0J2VtYWlsNjAuY29tJyxcblx0J2VtYWlsZGllbnN0LmRlJyxcblx0J2VtYWlsZ28uZGUnLFxuXHQnZW1haWxpYXMuY29tJyxcblx0J2VtYWlsaWdvLmRlJyxcblx0J2VtYWlsaW5maXZlLmNvbScsXG5cdCdlbWFpbGxpbWUuY29tJyxcblx0J2VtYWlsbWlzZXIuY29tJyxcblx0J2VtYWlscHJveHN5LmNvbScsXG5cdCdlbWFpbHNlbnNlaS5jb20nLFxuXHQnZW1haWx0ZW1wb3JhbmVhLmNvbScsXG5cdCdlbWFpbHRlbXBvcmFuZWEubmV0Jyxcblx0J2VtYWlsdGVtcG9yYXIucm8nLFxuXHQnZW1haWx0ZW1wb3JhcmlvLmNvbS5icicsXG5cdCdlbWFpbHRoZS5uZXQnLFxuXHQnZW1haWx0bXAuY29tJyxcblx0J2VtYWlsdG8uZGUnLFxuXHQnZW1haWx3YXJkZW4uY29tJyxcblx0J2VtYWlseC5hdC5obScsXG5cdCdlbWFpbHhmZXIuY29tJyxcblx0J2VtZWlsLmluJyxcblx0J2VtZWlsLmlyJyxcblx0J2VtaWwuY29tJyxcblx0J2Vtei5uZXQnLFxuXHQnZW50ZXJ0by5jb20nLFxuXHQnZXBoZW1haWwubmV0Jyxcblx0J2Vyby10dWJlLm9yZycsXG5cdCdldHJhbnF1aWwuY29tJyxcblx0J2V0cmFucXVpbC5uZXQnLFxuXHQnZXRyYW5xdWlsLm9yZycsXG5cdCdldm9wby5jb20nLFxuXHQnZXhwbG9kZW1haWwuY29tJyxcblx0J2V4cHJlc3MubmV0LnVhJyxcblx0J2V5ZXBhc3RlLmNvbScsXG5cdCdmYWtlaW5ib3guY29tJyxcblx0J2Zha2VpbmZvcm1hdGlvbi5jb20nLFxuXHQnZmFrZW1haWwuZnInLFxuXHQnZmFrZW1haWx6LmNvbScsXG5cdCdmYW1taXguY29tJyxcblx0J2ZhbnN3b3JsZHdpZGUuZGUnLFxuXHQnZmFudGFzeW1haWwuZGUnLFxuXHQnZmFzdGFjdXJhLmNvbScsXG5cdCdmYXN0Y2hldnkuY29tJyxcblx0J2Zhc3RjaHJ5c2xlci5jb20nLFxuXHQnZmFzdGthd2FzYWtpLmNvbScsXG5cdCdmYXN0bWF6ZGEuY29tJyxcblx0J2Zhc3RtaXRzdWJpc2hpLmNvbScsXG5cdCdmYXN0bmlzc2FuLmNvbScsXG5cdCdmYXN0c3ViYXJ1LmNvbScsXG5cdCdmYXN0c3V6dWtpLmNvbScsXG5cdCdmYXN0dG95b3RhLmNvbScsXG5cdCdmYXN0eWFtYWhhLmNvbScsXG5cdCdmYXRmbGFwLmNvbScsXG5cdCdmZGZkc2Zkcy5jb20nLFxuXHQnZmlnaHRhbGxzcGFtLmNvbScsXG5cdCdmaWdqcy5jb20nLFxuXHQnZmlpZmtlLmRlJyxcblx0J2ZpbHptYWlsLmNvbScsXG5cdCdmaXZlbWFpbC5kZScsXG5cdCdmaXhtYWlsLnRrJyxcblx0J2Zpem1haWwuY29tJyxcblx0J2ZsZWNrZW5zLmh1Jyxcblx0J2ZsZW1haWwucnUnLFxuXHQnZmx5c3BhbS5jb20nLFxuXHQnZm9vdGFyZC5jb20nLFxuXHQnZm9yZ2V0bWFpbC5jb20nLFxuXHQnZnIzM21haWwuaW5mbycsXG5cdCdmcmFwbWFpbC5jb20nLFxuXHQnZnJldW5kaW4ucnUnLFxuXHQnZnJpZW5kbHltYWlsLmNvLnVrJyxcblx0J2Zyb250MTQub3JnJyxcblx0J2Z1Y2tpbmdkdWguY29tJyxcblx0J2Z1ZGdlcnViLmNvbScsXG5cdCdmdXgwcmluZ2R1aC5jb20nLFxuXHQnZnlpaS5kZScsXG5cdCdnYXJsaWNsaWZlLmNvbScsXG5cdCdnZWhlbnNpZW1pcm5pY2h0YXVmZGVuc2Fjay5kZScsXG5cdCdnZWxpdGlrLmluJyxcblx0J2dldDFtYWlsLmNvbScsXG5cdCdnZXQybWFpbC5mcicsXG5cdCdnZXRhaXJtYWlsLmNvbScsXG5cdCdnZXRtYWlscy5ldScsXG5cdCdnZXRvbmVtYWlsLmNvbScsXG5cdCdnZXRvbmVtYWlsLm5ldCcsXG5cdCdnaG9zdHRleHRlci5kZScsXG5cdCdnaWFudG1haWwuZGUnLFxuXHQnZ2lybHN1bmRlcnRoZWluZmx1ZW5jZS5jb20nLFxuXHQnZ2lzaHB1cHB5LmNvbScsXG5cdCdnbWlhbC5jb20nLFxuXHQnZ29lbWFpbGdvLmNvbScsXG5cdCdnb3JpbGxhc3dpdGhkaXJ0eWFybXBpdHMuY29tJyxcblx0J2dvdG1haWwuY29tJyxcblx0J2dvdG1haWwubmV0Jyxcblx0J2dvdG1haWwub3JnJyxcblx0J2dvdHRpLm90aGVyaW5ib3guY29tJyxcblx0J2dvd2lraWJvb2tzLmNvbScsXG5cdCdnb3dpa2ljYW1wdXMuY29tJyxcblx0J2dvd2lraWNhcnMuY29tJyxcblx0J2dvd2lraWZpbG1zLmNvbScsXG5cdCdnb3dpa2lnYW1lcy5jb20nLFxuXHQnZ293aWtpbXVzaWMuY29tJyxcblx0J2dvd2lraW11c2ljLmdyZWF0LWhvc3QuaW4nLFxuXHQnZ293aWtpbmV0d29yay5jb20nLFxuXHQnZ293aWtpdHJhdmVsLmNvbScsXG5cdCdnb3dpa2l0di5jb20nLFxuXHQnZ3JhbmRtYW1haWwuY29tJyxcblx0J2dyYW5kbWFzbWFpbC5jb20nLFxuXHQnZ3JlYXQtaG9zdC5pbicsXG5cdCdncmVlbnNsb3RoLmNvbScsXG5cdCdncnIubGEnLFxuXHQnZ3Nydi5jby51aycsXG5cdCdndWVyaWxsYW1haWwuYml6Jyxcblx0J2d1ZXJpbGxhbWFpbC5jb20nLFxuXHQnZ3VlcmlsbGFtYWlsLm5ldCcsXG5cdCdndWVyaWxsYW1haWwub3JnJyxcblx0J2d1ZXJyaWxsYW1haWwuYml6Jyxcblx0J2d1ZXJyaWxsYW1haWwuY29tJyxcblx0J2d1ZXJyaWxsYW1haWwuZGUnLFxuXHQnZ3VlcnJpbGxhbWFpbC5pbmZvJyxcblx0J2d1ZXJyaWxsYW1haWwubmV0Jyxcblx0J2d1ZXJyaWxsYW1haWwub3JnJyxcblx0J2d1ZXJyaWxsYW1haWxibG9jay5jb20nLFxuXHQnZ3VzdHIuY29tJyxcblx0J2gubWludGVtYWlsLmNvbScsXG5cdCdoOHMub3JnJyxcblx0J2hhY2NjYy5jb20nLFxuXHQnaGFsdG9zcGFtLmNvbScsXG5cdCdoYXJha2lyaW1haWwuY29tJyxcblx0J2hhcnRib3QuZGUnLFxuXHQnaGF0LWdlbGQuZGUnLFxuXHQnaGF0ZXNwYW0ub3JnJyxcblx0J2hlbGxvZHJlYW0ubW9iaScsXG5cdCdoZXJwLmluJyxcblx0J2hpZGVtYWlsLmRlJyxcblx0J2hpZHp6LmNvbScsXG5cdCdobWFtYWlsLmNvbScsXG5cdCdob2Noc2l0emUuY29tJyxcblx0J2hvcGVtYWlsLmJpeicsXG5cdCdob3Rwb3AuY29tJyxcblx0J2h1bGFwbGEuZGUnLFxuXHQnaWFvc3MuY29tJyxcblx0J2llYXRzcGFtLmV1Jyxcblx0J2llYXRzcGFtLmluZm8nLFxuXHQnaWVoLW1haWwuZGUnLFxuXHQnaWhhdGV5b3VhbG90LmluZm8nLFxuXHQnaWhlYXJ0c3BhbS5vcmcnLFxuXHQnaWtiZW5zcGFtdnJpai5ubCcsXG5cdCdpbWFpbHMuaW5mbycsXG5cdCdpbWdvZi5jb20nLFxuXHQnaW1zdGF0aW9ucy5jb20nLFxuXHQnaW5iYXgudGsnLFxuXHQnaW5ib3guc2knLFxuXHQnaW5ib3hhbGlhcy5jb20nLFxuXHQnaW5ib3hjbGVhbi5jb20nLFxuXHQnaW5ib3hjbGVhbi5vcmcnLFxuXHQnaW5ib3hwcm94eS5jb20nLFxuXHQnaW5jb2duaXRvbWFpbC5jb20nLFxuXHQnaW5jb2duaXRvbWFpbC5uZXQnLFxuXHQnaW5jb2duaXRvbWFpbC5vcmcnLFxuXHQnaW5mb2NvbS56cC51YScsXG5cdCdpbm91dG1haWwuZGUnLFxuXHQnaW5vdXRtYWlsLmV1Jyxcblx0J2lub3V0bWFpbC5pbmZvJyxcblx0J2lub3V0bWFpbC5uZXQnLFxuXHQnaW5zb3JnLW1haWwuaW5mbycsXG5cdCdpbnN0YW50LW1haWwuZGUnLFxuXHQnaXA2LmxpJyxcblx0J2lwb28ub3JnJyxcblx0J2lyaXNoMm1lLmNvbScsXG5cdCdpd2kubmV0Jyxcblx0J2phbWl0LmNvbS5hdScsXG5cdCdqZXRhYmxlLmNvbScsXG5cdCdqZXRhYmxlLmZyLm5mJyxcblx0J2pldGFibGUubmV0Jyxcblx0J2pldGFibGUub3JnJyxcblx0J2pueGpuLmNvbScsXG5cdCdqb3VycmFwaWRlLmNvbScsXG5cdCdqc3Jzb2x1dGlvbnMuY29tJyxcblx0J2p1bmsxZS5jb20nLFxuXHQna2FzbWFpbC5jb20nLFxuXHQna2FzcG9wLmNvbScsXG5cdCdrZWVwbXltYWlsLmNvbScsXG5cdCdraWxsbWFpbC5jb20nLFxuXHQna2lsbG1haWwubmV0Jyxcblx0J2tpbXNkaXNrLmNvbScsXG5cdCdraW5nc3EuZ2EnLFxuXHQna2lyLmNoLnRjJyxcblx0J2tsYXNzbWFzdGVyLmNvbScsXG5cdCdrbGFzc21hc3Rlci5uZXQnLFxuXHQna2x6bGsuY29tJyxcblx0J2tvb2subWwnLFxuXHQna29zem1haWwucGwnLFxuXHQna3VsdHVyYmV0cmllYi5pbmZvJyxcblx0J2t1cnplcG9zdC5kZScsXG5cdCdsMzNyLmV1Jyxcblx0J2xhY2ttYWlsLm5ldCcsXG5cdCdsYWdzLnVzJyxcblx0J2xhd2xpdGEuY29tJyxcblx0J2xhenlpbmJveC5jb20nLFxuXHQnbGV0dGhlbWVhdHNwYW0uY29tJyxcblx0J2xoc2R2LmNvbScsXG5cdCdsaWZlYnlmb29kLmNvbScsXG5cdCdsaW5rMm1haWwubmV0Jyxcblx0J2xpdGVkcm9wLmNvbScsXG5cdCdsb2FkYnkudXMnLFxuXHQnbG9naW4tZW1haWwubWwnLFxuXHQnbG9sLm92cG4udG8nLFxuXHQnbG9sZnJlYWsubmV0Jyxcblx0J2xvb2t1Z2x5LmNvbScsXG5cdCdsb3BsLmNvLmNjJyxcblx0J2xvcnRlbWFpbC5kaycsXG5cdCdsb3ZlbWVsZWF2ZW1lLmNvbScsXG5cdCdscjc4LmNvbScsXG5cdCdscm9pZC5jb20nLFxuXHQnbHVrb3AuZGsnLFxuXHQnbTIxLmNjJyxcblx0J200aWx3ZWIuaW5mbycsXG5cdCdtYWJvYXJkLmNvbScsXG5cdCdtYWlsLWZpbHRlci5jb20nLFxuXHQnbWFpbC10ZW1wb3JhaXJlLmZyJyxcblx0J21haWwuYnknLFxuXHQnbWFpbC5tZXppbWFnZXMubmV0Jyxcblx0J21haWwuenAudWEnLFxuXHQnbWFpbDExNC5uZXQnLFxuXHQnbWFpbDFhLmRlJyxcblx0J21haWwyMS5jYycsXG5cdCdtYWlsMnJzcy5vcmcnLFxuXHQnbWFpbDMzMy5jb20nLFxuXHQnbWFpbDR0cmFzaC5jb20nLFxuXHQnbWFpbGJpZG9uLmNvbScsXG5cdCdtYWlsYml6LmJpeicsXG5cdCdtYWlsYmxvY2tzLmNvbScsXG5cdCdtYWlsYnVja2V0Lm9yZycsXG5cdCdtYWlsY2F0LmJpeicsXG5cdCdtYWlsY2F0Y2guY29tJyxcblx0J21haWxkZS5kZScsXG5cdCdtYWlsZGUuaW5mbycsXG5cdCdtYWlsZHJvcC5jYycsXG5cdCdtYWlsZHguY29tJyxcblx0J21haWxlYXRlci5jb20nLFxuXHQnbWFpbGVkLnJvJyxcblx0J21haWxlaW1lci5kZScsXG5cdCdtYWlsZXhwaXJlLmNvbScsXG5cdCdtYWlsZmEudGsnLFxuXHQnbWFpbGZvcnNwYW0uY29tJyxcblx0J21haWxmcmVlb25saW5lLmNvbScsXG5cdCdtYWlsZnMuY29tJyxcblx0J21haWxndWFyZC5tZScsXG5cdCdtYWlsaW1hdGUuY29tJyxcblx0J21haWxpbjhyLmNvbScsXG5cdCdtYWlsaW5hdGVyLmNvbScsXG5cdCdtYWlsaW5hdG9yLmNvbScsXG5cdCdtYWlsaW5hdG9yLm5ldCcsXG5cdCdtYWlsaW5hdG9yLm9yZycsXG5cdCdtYWlsaW5hdG9yLnVzJyxcblx0J21haWxpbmF0b3IyLmNvbScsXG5cdCdtYWlsaW5jdWJhdG9yLmNvbScsXG5cdCdtYWlsaXNtYWdpYy5jb20nLFxuXHQnbWFpbG1hdGUuY29tJyxcblx0J21haWxtZS5pcicsXG5cdCdtYWlsbWUubHYnLFxuXHQnbWFpbG1lMjQuY29tJyxcblx0J21haWxtZXRyYXNoLmNvbScsXG5cdCdtYWlsbWV0cmFzaC5jb21pbHppbGxhLm9yZycsXG5cdCdtYWlsbW9hdC5jb20nLFxuXHQnbWFpbG1zLmNvbScsXG5cdCdtYWlsbmF0b3IuY29tJyxcblx0J21haWxuZXNpYS5jb20nLFxuXHQnbWFpbG51bGwuY29tJyxcblx0J21haWxvcmcub3JnJyxcblx0J21haWxwaWNrLmJpeicsXG5cdCdtYWlscHJveHN5LmNvbScsXG5cdCdtYWlscXVhY2suY29tJyxcblx0J21haWxyb2NrLmJpeicsXG5cdCdtYWlsc2NyYXAuY29tJyxcblx0J21haWxzaGVsbC5jb20nLFxuXHQnbWFpbHNpcGhvbi5jb20nLFxuXHQnbWFpbHNsYXBwaW5nLmNvbScsXG5cdCdtYWlsc2xpdGUuY29tJyxcblx0J21haWx0ZW1wLmluZm8nLFxuXHQnbWFpbHRvbWUuZGUnLFxuXHQnbWFpbHRvdGhpcy5jb20nLFxuXHQnbWFpbHRyYXNoLm5ldCcsXG5cdCdtYWlsdHYubmV0Jyxcblx0J21haWx0di50dicsXG5cdCdtYWlsemlsbGEuY29tJyxcblx0J21haWx6aWxsYS5vcmcnLFxuXHQnbWFpbHppbGxhLm9yZ21ieC5jYycsXG5cdCdtYWtlbWV0aGVraW5nLmNvbScsXG5cdCdtYW5pZmVzdGdlbmVyYXRvci5jb20nLFxuXHQnbWFueWJyYWluLmNvbScsXG5cdCdtYnguY2MnLFxuXHQnbWVnYS56aWsuZGonLFxuXHQnbWVpbnNwYW1zY2h1dHouZGUnLFxuXHQnbWVsdG1haWwuY29tJyxcblx0J21lc3NhZ2ViZWFtZXIuZGUnLFxuXHQnbWV6aW1hZ2VzLm5ldCcsXG5cdCdtaWVyZGFtYWlsLmNvbScsXG5cdCdtaWd1bWFpbC5jb20nLFxuXHQnbWluaXN0cnktb2Ytc2lsbHktd2Fsa3MuZGUnLFxuXHQnbWludGVtYWlsLmNvbScsXG5cdCdtaXN0ZXJwaW5iYWxsLmRlJyxcblx0J21qdWtnbGFzcy5udScsXG5cdCdtbWFpbGluYXRlci5jb20nLFxuXHQnbW9ha3QuY29tJyxcblx0J21vYmkud2ViLmlkJyxcblx0J21vYmlsZW5pbmphLmNvLnVrJyxcblx0J21vYnVybC5jb20nLFxuXHQnbW9obWFsLmNvbScsXG5cdCdtb25jb3Vycmllci5mci5uZicsXG5cdCdtb25lbWFpbC5mci5uZicsXG5cdCdtb25tYWlsLmZyLm5mJyxcblx0J21vbnVtZW50bWFpbC5jb20nLFxuXHQnbXNhLm1pbnNtYWlsLmNvbScsXG5cdCdtdDIwMDkuY29tJyxcblx0J210MjAxNC5jb20nLFxuXHQnbXgwLnd3d25ldy5ldScsXG5cdCdteTEwbWludXRlbWFpbC5jb20nLFxuXHQnbXljYXJkLm5ldC51YScsXG5cdCdteWNsZWFuaW5ib3gubmV0Jyxcblx0J215ZW1haWxib3h5LmNvbScsXG5cdCdteW1haWwtaW4ubmV0Jyxcblx0J215bWFpbG9hc2lzLmNvbScsXG5cdCdteW5ldHN0b3JlLmRlJyxcblx0J215cGFja3MubmV0Jyxcblx0J215cGFydHljbGlwLmRlJyxcblx0J215cGhhbnRvbWVtYWlsLmNvbScsXG5cdCdteXNhbXAuZGUnLFxuXHQnbXlzcGFjZWluYy5jb20nLFxuXHQnbXlzcGFjZWluYy5uZXQnLFxuXHQnbXlzcGFjZWluYy5vcmcnLFxuXHQnbXlzcGFjZXBpbXBlZHVwLmNvbScsXG5cdCdteXNwYW1sZXNzLmNvbScsXG5cdCdteXRlbXAuZW1haWwnLFxuXHQnbXl0ZW1wZW1haWwuY29tJyxcblx0J215dGVtcG1haWwuY29tJyxcblx0J215dHJhc2htYWlsLmNvbScsXG5cdCduYWJ1bWEuY29tJyxcblx0J25lb21haWxib3guY29tJyxcblx0J25lcHdrLmNvbScsXG5cdCduZXJ2bWljaC5uZXQnLFxuXHQnbmVydnRtaWNoLm5ldCcsXG5cdCduZXRtYWlscy5jb20nLFxuXHQnbmV0bWFpbHMubmV0Jyxcblx0J25ldHppZGlvdC5kZScsXG5cdCduZXZlcmJveC5jb20nLFxuXHQnbmljZS00dS5jb20nLFxuXHQnbmluY3NtYWlsLmNvbScsXG5cdCduaW5jc21haWwuaHUnLFxuXHQnbm5oLmNvbScsXG5cdCduby1zcGFtLndzJyxcblx0J25vYmxlcGlvbmVlci5jb20nLFxuXHQnbm9idWxrLmNvbScsXG5cdCdub2NsaWNrZW1haWwuY29tJyxcblx0J25vZ21haWxzcGFtLmluZm8nLFxuXHQnbm9tYWlsLnB3Jyxcblx0J25vbWFpbC54bC5jeCcsXG5cdCdub21haWwybWUuY29tJyxcblx0J25vbW9yZXNwYW1lbWFpbHMuY29tJyxcblx0J25vbnNwYW0uZXUnLFxuXHQnbm9uc3BhbW1lci5kZScsXG5cdCdub3JlZi5pbicsXG5cdCdub3NwYW0uemUudGMnLFxuXHQnbm9zcGFtNC51cycsXG5cdCdub3NwYW1mb3IudXMnLFxuXHQnbm9zcGFtbWFpbC5uZXQnLFxuXHQnbm9zcGFtdGhhbmtzLmluZm8nLFxuXHQnbm90bWFpbGluYXRvci5jb20nLFxuXHQnbm90c2hhcmluZ215LmluZm8nLFxuXHQnbm93aGVyZS5vcmcnLFxuXHQnbm93bXltYWlsLmNvbScsXG5cdCdudXJmdWVyc3BhbS5kZScsXG5cdCdudXMuZWR1LnNnJyxcblx0J253bGR4LmNvbScsXG5cdCdvYmplY3RtYWlsLmNvbScsXG5cdCdvYm9iYm8uY29tJyxcblx0J29kYXltYWlsLmNvbScsXG5cdCdvZG5vcmF6b3ZvZS5ydScsXG5cdCdvbmUtdGltZS5lbWFpbCcsXG5cdCdvbmVvZmZlbWFpbC5jb20nLFxuXHQnb25lb2ZmbWFpbC5jb20nLFxuXHQnb25ld2F5bWFpbC5jb20nLFxuXHQnb25sYXRlZG90Y29tLmluZm8nLFxuXHQnb25saW5lLm1zJyxcblx0J29vcGkub3JnJyxcblx0J29wYXlxLmNvbScsXG5cdCdvcmRpbmFyeWFtZXJpY2FuLm5ldCcsXG5cdCdvdGhlcmluYm94LmNvZHVwbXlzcGFjZS5jb20nLFxuXHQnb3RoZXJpbmJveC5jb20nLFxuXHQnb3Vya2xpcHMuY29tJyxcblx0J291dGxhd3NwYW0uY29tJyxcblx0J292cG4udG8nLFxuXHQnb3dscGljLmNvbScsXG5cdCdwYW5jYWtlbWFpbC5jb20nLFxuXHQncGFwbGVhc2UuY29tJyxcblx0J3BjdXNlcnMub3RoZXJpbmJveC5jb20nLFxuXHQncGVwYm90LmNvbScsXG5cdCdwZnVpLnJ1Jyxcblx0J3BpbXBlZHVwbXlzcGFjZS5jb20nLFxuXHQncGpqa3AuY29tJyxcblx0J3BsZXhvbGFuLmRlJyxcblx0J3BvY3p0YS5vbmV0LnBsJyxcblx0J3BvbGl0aWtlcmNsdWIuZGUnLFxuXHQncG9vYWUuY29tJyxcblx0J3Bvb2Z5Lm9yZycsXG5cdCdwb29rbWFpbC5jb20nLFxuXHQncHJpdmFjeS5uZXQnLFxuXHQncHJpdmF0ZGVtYWlsLm5ldCcsXG5cdCdwcml2eS1tYWlsLmNvbScsXG5cdCdwcml2eW1haWwuZGUnLFxuXHQncHJveHltYWlsLmV1Jyxcblx0J3BydG54LmNvbScsXG5cdCdwcnR6LmV1Jyxcblx0J3B1bmthc3MuY29tJyxcblx0J3B1dHRoaXNpbnlvdXJzcGFtZGF0YWJhc2UuY29tJyxcblx0J3B3cmJ5LmNvbScsXG5cdCdxdWlja2luYm94LmNvbScsXG5cdCdxdWlja21haWwubmwnLFxuXHQncmNwdC5hdCcsXG5cdCdyZWFsbHlteW1haWwuY29tJyxcblx0J3JlYWx0eWFsZXJ0cy5jYScsXG5cdCdyZWNvZGUubWUnLFxuXHQncmVjdXJzb3IubmV0Jyxcblx0J3JlY3ljbGVtYWlsLmRrJyxcblx0J3JlZ2J5cGFzcy5jb20nLFxuXHQncmVnYnlwYXNzLmNvbXNhZmUtbWFpbC5uZXQnLFxuXHQncmVqZWN0bWFpbC5jb20nLFxuXHQncmVsaWFibGUtbWFpbC5jb20nLFxuXHQncmh5dGEuY29tJyxcblx0J3JrbGlwcy5jb20nLFxuXHQncm1xa3IubmV0Jyxcblx0J3JveWFsLm5ldCcsXG5cdCdycHBrbi5jb20nLFxuXHQncnRydHIuY29tJyxcblx0J3MwbnkubmV0Jyxcblx0J3NhZmUtbWFpbC5uZXQnLFxuXHQnc2FmZXJzaWdudXAuZGUnLFxuXHQnc2FmZXR5bWFpbC5pbmZvJyxcblx0J3NhZmV0eXBvc3QuZGUnLFxuXHQnc2FuZGVsZi5kZScsXG5cdCdzYXlub3Rvc3BhbXMuY29tJyxcblx0J3NjaGFmbWFpbC5kZScsXG5cdCdzY2hyb3R0LWVtYWlsLmRlJyxcblx0J3NlY3JldGVtYWlsLmRlJyxcblx0J3NlY3VyZS1tYWlsLmJpeicsXG5cdCdzZWxmZGVzdHJ1Y3RpbmdtYWlsLmNvbScsXG5cdCdzZWxmZGVzdHJ1Y3RpbmdtYWlsLm9yZycsXG5cdCdzZW5kc3BhbWhlcmUuY29tJyxcblx0J3NlbmRzcGFtaGVyZS5jb20nLFxuXHQnc2Vuc2VsZXNzLWVudGVydGFpbm1lbnQuY29tJyxcblx0J3NlcnZpY2VzMzkxLmNvbScsXG5cdCdzaGFyZWRtYWlsYm94Lm9yZycsXG5cdCdzaGFya2xhc2Vycy5jb20nLFxuXHQnc2hpZWxkZWRtYWlsLmNvbScsXG5cdCdzaGllbGRlbWFpbC5jb20nLFxuXHQnc2hpZnRtYWlsLmNvbScsXG5cdCdzaGl0bWFpbC5tZScsXG5cdCdzaGl0bWFpbC5vcmcnLFxuXHQnc2hpdHdhcmUubmwnLFxuXHQnc2htZXJpb3VzbHkuY29tJyxcblx0J3Nob3J0bWFpbC5uZXQnLFxuXHQnc2hvdG1haWwucnUnLFxuXHQnc2hvd3Nsb3cuZGUnLFxuXHQnc2libWFpbC5jb20nLFxuXHQnc2lubmxvcy1tYWlsLmRlJyxcblx0J3NpdGVwb3N0ZXIubmV0Jyxcblx0J3NrZWVmbWFpbC5jb20nLFxuXHQnc2xhcHNmcm9tbGFzdG5pZ2h0LmNvbScsXG5cdCdzbGFza3Bvc3Quc2UnLFxuXHQnc2xpcHJ5Lm5ldCcsXG5cdCdzbG9wc2JveC5jb20nLFxuXHQnc2x1c2htYWlsLmNvbScsXG5cdCdzbWFzaG1haWwuZGUnLFxuXHQnc21lbGxmZWFyLmNvbScsXG5cdCdzbWVsbHJlYXIuY29tJyxcblx0J3NuYWtlbWFpbC5jb20nLFxuXHQnc25lYWtlbWFpbC5jb20nLFxuXHQnc25lYWttYWlsLmRlJyxcblx0J3Nua21haWwuY29tJyxcblx0J3NvZmltYWlsLmNvbScsXG5cdCdzb2ZvcnQtbWFpbC5kZScsXG5cdCdzb2Z0cGxzLmFzaWEnLFxuXHQnc29nZXR0aGlzLmNvbScsXG5cdCdzb2h1LmNvbScsXG5cdCdzb2x2ZW1haWwuaW5mbycsXG5cdCdzb29kb25pbXMuY29tJyxcblx0J3NwYS5jb20nLFxuXHQnc3BhZXJlcGxlYXNlLmNvbScsXG5cdCdzcGFtLmxhJyxcblx0J3NwYW0uc3UnLFxuXHQnc3BhbTQubWUnLFxuXHQnc3BhbWFpbC5kZScsXG5cdCdzcGFtYXJyZXN0LmNvbScsXG5cdCdzcGFtYXZlcnQuY29tJyxcblx0J3NwYW1ib2IuY29tJyxcblx0J3NwYW1ib2IubmV0Jyxcblx0J3NwYW1ib2Iub3JnJyxcblx0J3NwYW1ib2cuY29tJyxcblx0J3NwYW1ib2cuZGUnLFxuXHQnc3BhbWJvZy5uZXQnLFxuXHQnc3BhbWJvZy5ydScsXG5cdCdzcGFtYm94LmluZm8nLFxuXHQnc3BhbWJveC5pcmlzaHNwcmluZ3JlYWx0eS5jb20nLFxuXHQnc3BhbWJveC51cycsXG5cdCdzcGFtY2Fubm9uLmNvbScsXG5cdCdzcGFtY2Fubm9uLm5ldCcsXG5cdCdzcGFtY2Vyby5jb20nLFxuXHQnc3BhbWNvbi5vcmcnLFxuXHQnc3BhbWNvcnB0YXN0aWMuY29tJyxcblx0J3NwYW1jb3dib3kuY29tJyxcblx0J3NwYW1jb3dib3kubmV0Jyxcblx0J3NwYW1jb3dib3kub3JnJyxcblx0J3NwYW1kYXkuY29tJyxcblx0J3NwYW1leC5jb20nLFxuXHQnc3BhbWZyZWUuZXUnLFxuXHQnc3BhbWZyZWUyNC5jb20nLFxuXHQnc3BhbWZyZWUyNC5kZScsXG5cdCdzcGFtZnJlZTI0LmV1Jyxcblx0J3NwYW1mcmVlMjQuaW5mbycsXG5cdCdzcGFtZnJlZTI0Lm5ldCcsXG5cdCdzcGFtZnJlZTI0Lm9yZycsXG5cdCdzcGFtZ29lcy5pbicsXG5cdCdzcGFtZ291cm1ldC5jb20nLFxuXHQnc3BhbWdvdXJtZXQubmV0Jyxcblx0J3NwYW1nb3VybWV0Lm9yZycsXG5cdCdzcGFtaGVyZWxvdHMuY29tJyxcblx0J3NwYW1oZXJlcGxlYXNlLmNvbScsXG5cdCdzcGFtaG9sZS5jb20nLFxuXHQnc3BhbWlmeS5jb20nLFxuXHQnc3BhbWluYXRvci5kZScsXG5cdCdzcGFta2lsbC5pbmZvJyxcblx0J3NwYW1sLmNvbScsXG5cdCdzcGFtbC5kZScsXG5cdCdzcGFtbW90ZWwuY29tJyxcblx0J3NwYW1vYm94LmNvbScsXG5cdCdzcGFtb2ZmLmRlJyxcblx0J3NwYW1zYWxhZC5pbicsXG5cdCdzcGFtc2xpY2VyLmNvbScsXG5cdCdzcGFtc3BvdC5jb20nLFxuXHQnc3BhbXN0YWNrLm5ldCcsXG5cdCdzcGFtdGhpcy5jby51aycsXG5cdCdzcGFtdGhpc3BsZWFzZS5jb20nLFxuXHQnc3BhbXRyYWlsLmNvbScsXG5cdCdzcGFtdHJvbGwubmV0Jyxcblx0J3NwZWVkLjFzLmZyJyxcblx0J3NwaWtpby5jb20nLFxuXHQnc3Bvb2ZtYWlsLmRlJyxcblx0J3NxdWl6enkuZGUnLFxuXHQnc3NvaWEuY29tJyxcblx0J3N0YXJ0a2V5cy5jb20nLFxuXHQnc3RpbmtlZmluZ2VyLm5ldCcsXG5cdCdzdG9wLW15LXNwYW0uY29tJyxcblx0J3N0dWZmbWFpbC5kZScsXG5cdCdzdXBlci1hdXN3YWhsLmRlJyxcblx0J3N1cGVyZ3JlYXRtYWlsLmNvbScsXG5cdCdzdXBlcm1haWxlci5qcCcsXG5cdCdzdXBlcnJpdG8uY29tJyxcblx0J3N1cGVyc3RhY2hlbC5kZScsXG5cdCdzdXJlbWFpbC5pbmZvJyxcblx0J3N2ay5qcCcsXG5cdCdzd2VldHh4eC5kZScsXG5cdCd0YWd5b3Vyc2VsZi5jb20nLFxuXHQndGFsa2luYXRvci5jb20nLFxuXHQndGFwY2hpY3VvaWhvaS5jb20nLFxuXHQndGVld2Fycy5vcmcnLFxuXHQndGVsZW9zYXVycy54eXonLFxuXHQndGVsZXdvcm0uY29tJyxcblx0J3RlbGV3b3JtLnVzJyxcblx0J3RlbXAtbWFpbC5vcmcnLFxuXHQndGVtcC1tYWlsLnJ1Jyxcblx0J3RlbXAuZW1lcmFsZHdlYm1haWwuY29tJyxcblx0J3RlbXAuaGVhZHN0cm9uZy5kZScsXG5cdCd0ZW1wYWxpYXMuY29tJyxcblx0J3RlbXBlLW1haWwuY29tJyxcblx0J3RlbXBlbWFpbC5iaXonLFxuXHQndGVtcGVtYWlsLmNvLnphJyxcblx0J3RlbXBlbWFpbC5jb20nLFxuXHQndGVtcGVtYWlsLm5ldCcsXG5cdCd0ZW1wZW1haWwubmV0Jyxcblx0J3RlbXBpbmJveC5jby51aycsXG5cdCd0ZW1waW5ib3guY29tJyxcblx0J3RlbXBtYWlsLmV1Jyxcblx0J3RlbXBtYWlsLml0Jyxcblx0J3RlbXBtYWlsMi5jb20nLFxuXHQndGVtcG1haWxkZW1vLmNvbScsXG5cdCd0ZW1wbWFpbGVyLmNvbScsXG5cdCd0ZW1wbWFpbGVyLmRlJyxcblx0J3RlbXBvbWFpbC5mcicsXG5cdCd0ZW1wb3JhcmlseS5kZScsXG5cdCd0ZW1wb3JhcmlvZW1haWwuY29tLmJyJyxcblx0J3RlbXBvcmFyeWVtYWlsLm5ldCcsXG5cdCd0ZW1wb3JhcnllbWFpbC51cycsXG5cdCd0ZW1wb3Jhcnlmb3J3YXJkaW5nLmNvbScsXG5cdCd0ZW1wb3JhcnlpbmJveC5jb20nLFxuXHQndGVtcG9yYXJ5bWFpbGFkZHJlc3MuY29tJyxcblx0J3RlbXBza3kuY29tJyxcblx0J3RlbXB0aGUubmV0Jyxcblx0J3RlbXB5bWFpbC5jb20nLFxuXHQndGhhbmtzbm9zcGFtLmluZm8nLFxuXHQndGhhbmt5b3UyMDEwLmNvbScsXG5cdCd0aGMuc3QnLFxuXHQndGhlY2xvdWRpbmRleC5jb20nLFxuXHQndGhlbGltZXN0b25lcy5jb20nLFxuXHQndGhpc2lzbm90bXlyZWFsZW1haWwuY29tJyxcblx0J3RoaXNtYWlsLm5ldCcsXG5cdCd0aHJtYS5jb20nLFxuXHQndGhyb3dhd2F5ZW1haWxhZGRyZXNzLmNvbScsXG5cdCd0aWxpZW4uY29tJyxcblx0J3RpdHRiaXQuaW4nLFxuXHQndGl6aS5jb20nLFxuXHQndG1haWwud3MnLFxuXHQndG1haWxpbmF0b3IuY29tJyxcblx0J3RvaWVhLmNvbScsXG5cdCd0b29tYWlsLmJpeicsXG5cdCd0b3ByYW5rbGlzdC5kZScsXG5cdCd0cmFkZXJtYWlsLmluZm8nLFxuXHQndHJhc2gtYW1pbC5jb20nLFxuXHQndHJhc2gtbWFpbC5hdCcsXG5cdCd0cmFzaC1tYWlsLmNvbScsXG5cdCd0cmFzaC1tYWlsLmRlJyxcblx0J3RyYXNoMjAwOS5jb20nLFxuXHQndHJhc2gyMDEwLmNvbScsXG5cdCd0cmFzaDIwMTEuY29tJyxcblx0J3RyYXNoZGV2aWwuY29tJyxcblx0J3RyYXNoZGV2aWwuZGUnLFxuXHQndHJhc2hlbWFpbC5kZScsXG5cdCd0cmFzaG1haWwuYXQnLFxuXHQndHJhc2htYWlsLmNvbScsXG5cdCd0cmFzaG1haWwuZGUnLFxuXHQndHJhc2htYWlsLm1lJyxcblx0J3RyYXNobWFpbC5uZXQnLFxuXHQndHJhc2htYWlsLm9yZycsXG5cdCd0cmFzaG1haWwud3MnLFxuXHQndHJhc2htYWlsZXIuY29tJyxcblx0J3RyYXNoeW1haWwuY29tJyxcblx0J3RyYXNoeW1haWwubmV0Jyxcblx0J3RyYnZtLmNvbScsXG5cdCd0cmJ2bi5jb20nLFxuXHQndHJpYWxtYWlsLmRlJyxcblx0J3RyaWxsaWFucHJvLmNvbScsXG5cdCd0cnlhbGVydC5jb20nLFxuXHQndHVydWFsLmNvbScsXG5cdCd0d2lubWFpbC5kZScsXG5cdCd0d293ZWlyZHRyaWNrcy5jb20nLFxuXHQndHlsZGQuY29tJyxcblx0J3VnZ3Nyb2NrLmNvbScsXG5cdCd1bWFpbC5uZXQnLFxuXHQndXBsaWZ0bm93LmNvbScsXG5cdCd1cGxpcGh0LmNvbScsXG5cdCd1cm9pZC5jb20nLFxuXHQndXMuYWYnLFxuXHQndXNlcm5hbWUuZTR3YXJkLmNvbScsXG5cdCd2ZW5vbXBlbi5jb20nLFxuXHQndmVyeXJlYWxlbWFpbC5jb20nLFxuXHQndmlkY2hhcnQuY29tJyxcblx0J3ZpZGl0YWcuY29tJyxcblx0J3ZpZXdjYXN0bWVkaWEuY29tJyxcblx0J3ZpZXdjYXN0bWVkaWEubmV0Jyxcblx0J3ZpZXdjYXN0bWVkaWEub3JnJyxcblx0J3ZpZXdjYXN0bWVkaWFlJyxcblx0J3ZpcmFscGxheXMuY29tJyxcblx0J3ZrY29kZS5ydScsXG5cdCd2b21vdG8uY29tJyxcblx0J3Zwbi5zdCcsXG5cdCd2c2ltY2FyZC5jb20nLFxuXHQndnViYnkuY29tJyxcblx0J3dhbGFsYS5vcmcnLFxuXHQnd2Fsa21haWwubmV0Jyxcblx0J3dhbGttYWlsLnJ1Jyxcblx0J3dhc3RlbGFuZC5yZmM4MjIub3JnJyxcblx0J3dlYmVtYWlsLm1lJyxcblx0J3dlYm00aWwuaW5mbycsXG5cdCd3ZWJ1c2VyLmluJyxcblx0J3dlZS5teScsXG5cdCd3ZWctd2VyZi1lbWFpbC5kZScsXG5cdCd3ZWd3ZXJmLWVtYWlsLWFkZHJlc3Nlbi5kZScsXG5cdCd3ZWd3ZXJmLWVtYWlscy5kZScsXG5cdCd3ZWd3ZXJmYWRyZXNzZS5kZScsXG5cdCd3ZWd3ZXJmZW1haWwuY29tJyxcblx0J3dlZ3dlcmZlbWFpbC5kZScsXG5cdCd3ZWd3ZXJmbWFpbC5kZScsXG5cdCd3ZWd3ZXJmbWFpbC5pbmZvJyxcblx0J3dlZ3dlcmZtYWlsLm5ldCcsXG5cdCd3ZWd3ZXJmbWFpbC5vcmcnLFxuXHQnd2V0cmFpbmJheWFyZWEuY29tJyxcblx0J3dldHJhaW5iYXlhcmVhLm9yZycsXG5cdCd3aDRmLm9yZycsXG5cdCd3aGF0aWFhcy5jb20nLFxuXHQnd2hhdHBhYXMuY29tJyxcblx0J3doYXRzYWFzLmNvbScsXG5cdCd3aG9weS5jb20nLFxuXHQnd2h0amRkbi4zM21haWwuY29tJyxcblx0J3doeXNwYW0ubWUnLFxuXHQnd2lsZW1haWwuY29tJyxcblx0J3dpbGxoYWNrZm9yZm9vZC5iaXonLFxuXHQnd2lsbHNlbGZkZXN0cnVjdC5jb20nLFxuXHQnd2luZW1hdmVuLmluZm8nLFxuXHQnd3JvbmdoZWFkLmNvbScsXG5cdCd3dXp1cC5uZXQnLFxuXHQnd3V6dXBtYWlsLm5ldCcsXG5cdCd3d3cuZTR3YXJkLmNvbScsXG5cdCd3d3cuZ2lzaHB1cHB5LmNvbScsXG5cdCd3d3cubWFpbGluYXRvci5jb20nLFxuXHQnd3d3bmV3LmV1Jyxcblx0J3guaXA2LmxpJyxcblx0J3hhZ2xvby5jb20nLFxuXHQneGVtYXBzLmNvbScsXG5cdCd4ZW50cy5jb20nLFxuXHQneG1haWx5LmNvbScsXG5cdCd4b3h5Lm5ldCcsXG5cdCd4eXpmcmVlLm5ldCcsXG5cdCd5YXBwZWQubmV0Jyxcblx0J3llYWgubmV0Jyxcblx0J3llcC5pdCcsXG5cdCd5b2dhbWF2ZW4uY29tJyxcblx0J3lvbWFpbC5pbmZvJyxcblx0J3lvcG1haWwuY29tJyxcblx0J3lvcG1haWwuZnInLFxuXHQneW9wbWFpbC5uZXQnLFxuXHQneW91cmRvbWFpbi5jb20nLFxuXHQneXBtYWlsLndlYmFybmFrLmZyLmV1Lm9yZycsXG5cdCd5dXVyb2suY29tJyxcblx0J3oxcC5iaXonLFxuXHQnemEuY29tJyxcblx0J3plaG5taW51dGVuLmRlJyxcblx0J3plaG5taW51dGVubWFpbC5kZScsXG5cdCd6ZXRtYWlsLmNvbScsXG5cdCd6aXBweW1haWwuaW5mbycsXG5cdCd6b2F4ZS5jb20nLFxuXHQnem9lbWFpbC5jb20nLFxuXHQnem9lbWFpbC5uZXQnLFxuXHQnem9lbWFpbC5vcmcnLFxuXHQnem9tZy5pbmZvJyxcblx0J3p4Y3YuY29tJyxcblx0J3p4Y3Zibm0uY29tJyxcblx0J3p6ei5jb20nXG5dO1xuXG4iLCJpbXBvcnQgSU1BUCBmcm9tICdpbWFwJztcbmltcG9ydCBQT1AzIGZyb20gJ3BvcGxpYic7XG5pbXBvcnQgeyBzaW1wbGVQYXJzZXIgfSBmcm9tICdtYWlscGFyc2VyLW5vZGU0JztcblxuZXhwb3J0IGNsYXNzIElNQVBJbnRlcmNlcHRlciB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuaW1hcCA9IG5ldyBJTUFQKHtcblx0XHRcdHVzZXI6IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfVXNlcm5hbWUnKSxcblx0XHRcdHBhc3N3b3JkOiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1Bhc3N3b3JkJyksXG5cdFx0XHRob3N0OiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0hvc3QnKSxcblx0XHRcdHBvcnQ6IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfUG9ydCcpLFxuXHRcdFx0ZGVidWc6IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfRGVidWcnKSA/IGNvbnNvbGUubG9nIDogZmFsc2UsXG5cdFx0XHR0bHM6ICFSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0lnbm9yZVRMUycpLFxuXHRcdFx0Y29ublRpbWVvdXQ6IDMwMDAwLFxuXHRcdFx0a2VlcGFsaXZlOiB0cnVlXG5cdFx0fSk7XG5cblx0XHR0aGlzLmRlbGV0ZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfRGVsZXRlJykgPyBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0RlbGV0ZScpIDogdHJ1ZTtcblxuXHRcdC8vIE9uIHN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQuXG5cdFx0dGhpcy5pbWFwLm9uKCdyZWFkeScsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKCkgPT4ge1xuXHRcdFx0aWYgKHRoaXMuaW1hcC5zdGF0ZSAhPT0gJ2Rpc2Nvbm5lY3RlZCcpIHtcblx0XHRcdFx0dGhpcy5vcGVuSW5ib3goTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoZXJyKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdFx0dGhyb3cgZXJyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBmZXRjaCBuZXcgZW1haWxzICYgd2FpdCBbSURMRV1cblx0XHRcdFx0XHR0aGlzLmdldEVtYWlscygpO1xuXG5cdFx0XHRcdFx0Ly8gSWYgbmV3IG1lc3NhZ2UgYXJyaXZlZCwgZmV0Y2ggdGhlbVxuXHRcdFx0XHRcdHRoaXMuaW1hcC5vbignbWFpbCcsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5nZXRFbWFpbHMoKTtcblx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdH0pKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdJTUFQIGRpZG5vdCBjb25uZWN0ZWQuJyk7XG5cdFx0XHRcdHRoaXMuaW1hcC5lbmQoKTtcblx0XHRcdH1cblx0XHR9KSk7XG5cblx0XHR0aGlzLmltYXAub24oJ2Vycm9yJywgKGVycikgPT4ge1xuXHRcdFx0Y29uc29sZS5sb2coJ0Vycm9yIG9jY3VycmVkIC4uLicpO1xuXHRcdFx0dGhyb3cgZXJyO1xuXHRcdH0pO1xuXHR9XG5cblx0b3BlbkluYm94KGNiKSB7XG5cdFx0dGhpcy5pbWFwLm9wZW5Cb3goJ0lOQk9YJywgZmFsc2UsIGNiKTtcblx0fVxuXG5cdHN0YXJ0KCkge1xuXHRcdHRoaXMuaW1hcC5jb25uZWN0KCk7XG5cdH1cblxuXHRpc0FjdGl2ZSgpIHtcblx0XHRpZiAodGhpcy5pbWFwICYmIHRoaXMuaW1hcC5zdGF0ZSAmJiB0aGlzLmltYXAuc3RhdGUgPT09ICdkaXNjb25uZWN0ZWQnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRzdG9wKGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKSB7XG5cdFx0dGhpcy5pbWFwLmVuZCgpO1xuXHRcdHRoaXMuaW1hcC5vbmNlKCdlbmQnLCBjYWxsYmFjayk7XG5cdH1cblxuXHRyZXN0YXJ0KCkge1xuXHRcdHRoaXMuc3RvcCgoKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZygnUmVzdGFydGluZyBJTUFQIC4uLi4nKTtcblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIEZldGNoIGFsbCBVTlNFRU4gbWVzc2FnZXMgYW5kIHBhc3MgdGhlbSBmb3IgZnVydGhlciBwcm9jZXNzaW5nXG5cdGdldEVtYWlscygpIHtcblx0XHR0aGlzLmltYXAuc2VhcmNoKFsnVU5TRUVOJ10sIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKGVyciwgbmV3RW1haWxzKSA9PiB7XG5cdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycik7XG5cdFx0XHRcdHRocm93IGVycjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gbmV3RW1haWxzID0+IGFycmF5IGNvbnRhaW5pbmcgc2VyaWFscyBvZiB1bnNlZW4gbWVzc2FnZXNcblx0XHRcdGlmIChuZXdFbWFpbHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRjb25zdCBmID0gdGhpcy5pbWFwLmZldGNoKG5ld0VtYWlscywge1xuXHRcdFx0XHRcdC8vIGZldGNoIGhlYWRlcnMgJiBmaXJzdCBib2R5IHBhcnQuXG5cdFx0XHRcdFx0Ym9kaWVzOiBbJ0hFQURFUi5GSUVMRFMgKEZST00gVE8gREFURSBNRVNTQUdFLUlEKScsICcxJ10sXG5cdFx0XHRcdFx0c3RydWN0OiB0cnVlLFxuXHRcdFx0XHRcdG1hcmtTZWVuOiB0cnVlXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGYub24oJ21lc3NhZ2UnLCBNZXRlb3IuYmluZEVudmlyb25tZW50KChtc2csIHNlcW5vKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgZW1haWwgPSB7fTtcblxuXHRcdFx0XHRcdG1zZy5vbignYm9keScsIChzdHJlYW0sIGluZm8pID0+IHtcblx0XHRcdFx0XHRcdGxldCBoZWFkZXJCdWZmZXIgPSAnJztcblx0XHRcdFx0XHRcdGxldCBib2R5QnVmZmVyID0gJyc7XG5cblx0XHRcdFx0XHRcdHN0cmVhbS5vbignZGF0YScsIChjaHVuaykgPT4ge1xuXHRcdFx0XHRcdFx0XHRpZiAoaW5mby53aGljaCA9PT0gJzEnKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ym9keUJ1ZmZlciArPSBjaHVuay50b1N0cmluZygndXRmOCcpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGhlYWRlckJ1ZmZlciArPSBjaHVuay50b1N0cmluZygndXRmOCcpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0c3RyZWFtLm9uY2UoJ2VuZCcsICgpID0+IHtcblx0XHRcdFx0XHRcdFx0aWYgKGluZm8ud2hpY2ggPT09ICcxJykge1xuXHRcdFx0XHRcdFx0XHRcdGVtYWlsLmJvZHkgPSBib2R5QnVmZmVyO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdC8vIHBhcnNlIGhlYWRlcnNcblx0XHRcdFx0XHRcdFx0XHRlbWFpbC5oZWFkZXJzID0gSU1BUC5wYXJzZUhlYWRlcihoZWFkZXJCdWZmZXIpO1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW1haWwuaGVhZGVycy50byA9IGVtYWlsLmhlYWRlcnMudG9bMF07XG5cdFx0XHRcdFx0XHRcdFx0ZW1haWwuaGVhZGVycy5kYXRlID0gZW1haWwuaGVhZGVycy5kYXRlWzBdO1xuXHRcdFx0XHRcdFx0XHRcdGVtYWlsLmhlYWRlcnMuZnJvbSA9IGVtYWlsLmhlYWRlcnMuZnJvbVswXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQvLyBPbiBmZXRjaGVkIGVhY2ggbWVzc2FnZSwgcGFzcyBpdCBmdXJ0aGVyXG5cdFx0XHRcdFx0bXNnLm9uY2UoJ2VuZCcsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gZGVsZXRlIG1lc3NhZ2UgZnJvbSBpbmJveFxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuZGVsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuaW1hcC5zZXEuYWRkRmxhZ3Moc2Vxbm8sICdEZWxldGVkJywgKGVycikgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChlcnIpIHsgY29uc29sZS5sb2coYE1hcmsgZGVsZXRlZCBlcnJvcjogJHsgZXJyIH1gKTsgfVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFJvY2tldENoYXQucHJvY2Vzc0RpcmVjdEVtYWlsKGVtYWlsKTtcblx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdH0pKTtcblx0XHRcdFx0Zi5vbmNlKCdlcnJvcicsIChlcnIpID0+IHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhgRmV0Y2ggZXJyb3I6ICR7IGVyciB9YCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgUE9QM0ludGVyY2VwdGVyIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5wb3AzID0gbmV3IFBPUDMoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9Qb3J0JyksIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfSG9zdCcpLCB7XG5cdFx0XHRlbmFibGV0bHM6ICFSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0lnbm9yZVRMUycpLFxuXHRcdFx0ZGVidWc6IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfRGVidWcnKSA/IGNvbnNvbGUubG9nIDogZmFsc2Vcblx0XHR9KTtcblxuXHRcdHRoaXMudG90YWxNc2dDb3VudCA9IDA7XG5cdFx0dGhpcy5jdXJyZW50TXNnQ291bnQgPSAwO1xuXG5cdFx0dGhpcy5wb3AzLm9uKCdjb25uZWN0JywgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoKSA9PiB7XG5cdFx0XHR0aGlzLnBvcDMubG9naW4oUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9Vc2VybmFtZScpLCBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1Bhc3N3b3JkJykpO1xuXHRcdH0pKTtcblxuXHRcdHRoaXMucG9wMy5vbignbG9naW4nLCBNZXRlb3IuYmluZEVudmlyb25tZW50KChzdGF0dXMpID0+IHtcblx0XHRcdGlmIChzdGF0dXMpIHtcblx0XHRcdFx0Ly8gcnVuIG9uIHN0YXJ0XG5cdFx0XHRcdHRoaXMucG9wMy5saXN0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnVW5hYmxlIHRvIExvZy1pbiAuLi4uJyk7XG5cdFx0XHR9XG5cdFx0fSkpO1xuXG5cdFx0Ly8gb24gZ2V0dGluZyBsaXN0IG9mIGFsbCBlbWFpbHNcblx0XHR0aGlzLnBvcDMub24oJ2xpc3QnLCBNZXRlb3IuYmluZEVudmlyb25tZW50KChzdGF0dXMsIG1zZ2NvdW50KSA9PiB7XG5cdFx0XHRpZiAoc3RhdHVzKSB7XG5cdFx0XHRcdGlmIChtc2djb3VudCA+IDApIHtcblx0XHRcdFx0XHR0aGlzLnRvdGFsTXNnQ291bnQgPSBtc2djb3VudDtcblx0XHRcdFx0XHR0aGlzLmN1cnJlbnRNc2dDb3VudCA9IDE7XG5cdFx0XHRcdFx0Ly8gUmV0cmlldmUgZW1haWxcblx0XHRcdFx0XHR0aGlzLnBvcDMucmV0cih0aGlzLmN1cnJlbnRNc2dDb3VudCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5wb3AzLnF1aXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0Nhbm5vdCBHZXQgRW1haWxzIC4uLi4nKTtcblx0XHRcdH1cblx0XHR9KSk7XG5cblx0XHQvLyBvbiByZXRyaWV2ZWQgZW1haWxcblx0XHR0aGlzLnBvcDMub24oJ3JldHInLCBNZXRlb3IuYmluZEVudmlyb25tZW50KChzdGF0dXMsIG1zZ251bWJlciwgZGF0YSkgPT4ge1xuXHRcdFx0aWYgKHN0YXR1cykge1xuXHRcdFx0XHQvLyBwYXJzZSByYXcgZW1haWwgZGF0YSB0byAgSlNPTiBvYmplY3Rcblx0XHRcdFx0c2ltcGxlUGFyc2VyKGRhdGEsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKGVyciwgbWFpbCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMuaW5pdGlhbFByb2Nlc3MobWFpbCk7XG5cdFx0XHRcdH0pKTtcblxuXHRcdFx0XHR0aGlzLmN1cnJlbnRNc2dDb3VudCArPSAxO1xuXG5cdFx0XHRcdC8vIGRlbGV0ZSBlbWFpbFxuXHRcdFx0XHR0aGlzLnBvcDMuZGVsZShtc2dudW1iZXIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0Nhbm5vdCBSZXRyaWV2ZSBNZXNzYWdlIC4uLi4nKTtcblx0XHRcdH1cblx0XHR9KSk7XG5cblx0XHQvLyBvbiBlbWFpbCBkZWxldGVkXG5cdFx0dGhpcy5wb3AzLm9uKCdkZWxlJywgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoc3RhdHVzKSA9PiB7XG5cdFx0XHRpZiAoc3RhdHVzKSB7XG5cdFx0XHRcdC8vIGdldCBuZXh0IGVtYWlsXG5cdFx0XHRcdGlmICh0aGlzLmN1cnJlbnRNc2dDb3VudCA8PSB0aGlzLnRvdGFsTXNnQ291bnQpIHtcblx0XHRcdFx0XHR0aGlzLnBvcDMucmV0cih0aGlzLmN1cnJlbnRNc2dDb3VudCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gcGFyc2VkIGFsbCBtZXNzYWdlcy4uIHNvIHF1aXR0aW5nXG5cdFx0XHRcdFx0dGhpcy5wb3AzLnF1aXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0Nhbm5vdCBEZWxldGUgTWVzc2FnZS4uLi4nKTtcblx0XHRcdH1cblx0XHR9KSk7XG5cblx0XHQvLyBpbnZhbGlkIHNlcnZlciBzdGF0ZVxuXHRcdHRoaXMucG9wMy5vbignaW52YWxpZC1zdGF0ZScsIGZ1bmN0aW9uKGNtZCkge1xuXHRcdFx0Y29uc29sZS5sb2coYEludmFsaWQgc3RhdGUuIFlvdSB0cmllZCBjYWxsaW5nICR7IGNtZCB9YCk7XG5cdFx0fSk7XG5cblx0XHQvLyBsb2NrZWQgPT4gY29tbWFuZCBhbHJlYWR5IHJ1bm5pbmcsIG5vdCBmaW5pc2hlZCB5ZXRcblx0XHR0aGlzLnBvcDMub24oJ2xvY2tlZCcsIGZ1bmN0aW9uKGNtZCkge1xuXHRcdFx0Y29uc29sZS5sb2coYEN1cnJlbnQgY29tbWFuZCBoYXMgbm90IGZpbmlzaGVkIHlldC4gWW91IHRyaWVkIGNhbGxpbmcgJHsgY21kIH1gKTtcblx0XHR9KTtcblx0fVxuXG5cdGluaXRpYWxQcm9jZXNzKG1haWwpIHtcblx0XHRjb25zdCBlbWFpbCA9IHtcblx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0ZnJvbTogbWFpbC5mcm9tLnRleHQsXG5cdFx0XHRcdHRvOiBtYWlsLnRvLnRleHQsXG5cdFx0XHRcdGRhdGU6IG1haWwuZGF0ZSxcblx0XHRcdFx0J21lc3NhZ2UtaWQnOiBtYWlsLm1lc3NhZ2VJZFxuXHRcdFx0fSxcblx0XHRcdGJvZHk6IG1haWwudGV4dFxuXHRcdH07XG5cblx0XHRSb2NrZXRDaGF0LnByb2Nlc3NEaXJlY3RFbWFpbChlbWFpbCk7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFBPUDNIZWxwZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblx0fVxuXG5cdHN0YXJ0KCkge1xuXHRcdC8vIHJ1biBldmVyeSB4LW1pbnV0ZXNcblx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9GcmVxdWVuY3knKSkge1xuXHRcdFx0Um9ja2V0Q2hhdC5QT1AzID0gbmV3IFBPUDNJbnRlcmNlcHRlcigpO1xuXG5cdFx0XHR0aGlzLnJ1bm5pbmcgPSBNZXRlb3Iuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHQvLyBnZXQgbmV3IGVtYWlscyBhbmQgcHJvY2Vzc1xuXHRcdFx0XHRSb2NrZXRDaGF0LlBPUDMgPSBuZXcgUE9QM0ludGVyY2VwdGVyKCk7XG5cdFx0XHR9LCBNYXRoLm1heChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0ZyZXF1ZW5jeScpKjYwKjEwMDAsIDIqNjAqMTAwMCkpO1xuXHRcdH1cblx0fVxuXG5cdGlzQWN0aXZlKCkge1xuXHRcdHJldHVybiB0aGlzLnJ1bm5pbmc7XG5cdH1cblxuXHRzdG9wKGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKSB7XG5cdFx0aWYgKHRoaXMuaXNBY3RpdmUoKSkge1xuXHRcdFx0TWV0ZW9yLmNsZWFySW50ZXJ2YWwodGhpcy5ydW5uaW5nKTtcblx0XHR9XG5cdFx0Y2FsbGJhY2soKTtcblx0fVxufVxuIiwiLy8gRG8gbm90IGRpc2Nsb3NlIGlmIHVzZXIgZXhpc3RzIHdoZW4gcGFzc3dvcmQgaXMgaW52YWxpZFxuY29uc3QgX3J1bkxvZ2luSGFuZGxlcnMgPSBBY2NvdW50cy5fcnVuTG9naW5IYW5kbGVycztcbkFjY291bnRzLl9ydW5Mb2dpbkhhbmRsZXJzID0gZnVuY3Rpb24obWV0aG9kSW52b2NhdGlvbiwgb3B0aW9ucykge1xuXHRjb25zdCByZXN1bHQgPSBfcnVuTG9naW5IYW5kbGVycy5jYWxsKEFjY291bnRzLCBtZXRob2RJbnZvY2F0aW9uLCBvcHRpb25zKTtcblxuXHRpZiAocmVzdWx0LmVycm9yICYmIHJlc3VsdC5lcnJvci5yZWFzb24gPT09ICdJbmNvcnJlY3QgcGFzc3dvcmQnKSB7XG5cdFx0cmVzdWx0LmVycm9yID0gbmV3IE1ldGVvci5FcnJvcig0MDMsICdVc2VyIG5vdCBmb3VuZCcpO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuUm9ja2V0Q2hhdC5jYWxsYmFja3MuYWRkKCdhZnRlclNhdmVNZXNzYWdlJywgZnVuY3Rpb24obWVzc2FnZSwgcm9vbSkge1xuXHQvLyBza2lwcyB0aGlzIGNhbGxiYWNrIGlmIHRoZSBtZXNzYWdlIHdhcyBlZGl0ZWQgYW5kIGluY3JlbWVudHMgaXQgaWYgdGhlIGVkaXQgd2FzIHdheSBpbiB0aGUgcGFzdCAoYWthIGltcG9ydGVkKVxuXHRpZiAobWVzc2FnZS5lZGl0ZWRBdCAmJiBNYXRoLmFicyhtb21lbnQobWVzc2FnZS5lZGl0ZWRBdCkuZGlmZigpKSA+IDYwMDAwKSB7XG5cdFx0Ly9UT0RPOiBSZXZpZXcgYXMgSSBhbSBub3Qgc3VyZSBob3cgZWxzZSB0byBnZXQgYXJvdW5kIHRoaXMgYXMgdGhlIGluY3JlbWVudGluZyBvZiB0aGUgbXNncyBjb3VudCBzaG91bGRuJ3QgYmUgaW4gdGhpcyBjYWxsYmFja1xuXHRcdFJvY2tldENoYXQubW9kZWxzLlJvb21zLmluY01zZ0NvdW50QnlJZChtZXNzYWdlLnJpZCwgMSk7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH0gZWxzZSBpZiAobWVzc2FnZS5lZGl0ZWRBdCkge1xuXG5cdFx0Ly8gb25seSB1cGRhdGVzIGxhc3QgbWVzc2FnZSBpZiBpdCB3YXMgZWRpdGVkIChza2lwIHJlc3Qgb2YgY2FsbGJhY2spXG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTdG9yZV9MYXN0X01lc3NhZ2UnKSAmJiAoIXJvb20ubGFzdE1lc3NhZ2UgfHwgcm9vbS5sYXN0TWVzc2FnZS5faWQgPT09IG1lc3NhZ2UuX2lkKSkge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuc2V0TGFzdE1lc3NhZ2VCeUlkKG1lc3NhZ2UucmlkLCBtZXNzYWdlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH1cblxuXHRpZiAobWVzc2FnZS50cyAmJiBNYXRoLmFicyhtb21lbnQobWVzc2FnZS50cykuZGlmZigpKSA+IDYwMDAwKSB7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuaW5jTXNnQ291bnRCeUlkKG1lc3NhZ2UucmlkLCAxKTtcblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVjaHMgaWYgYSBtZXNzYWdlcyBjb250YWlucyBhIHVzZXIgaGlnaGxpZ2h0XG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG5cdCAqIEBwYXJhbSB7YXJyYXl8dW5kZWZpbmVkfSBoaWdobGlnaHRzXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuXHRmdW5jdGlvbiBtZXNzYWdlQ29udGFpbnNIaWdobGlnaHQobWVzc2FnZSwgaGlnaGxpZ2h0cykge1xuXHRcdGlmICghIGhpZ2hsaWdodHMgfHwgaGlnaGxpZ2h0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0XHRsZXQgaGFzID0gZmFsc2U7XG5cdFx0aGlnaGxpZ2h0cy5zb21lKGZ1bmN0aW9uKGhpZ2hsaWdodCkge1xuXHRcdFx0Y29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cChzLmVzY2FwZVJlZ0V4cChoaWdobGlnaHQpLCAnaScpO1xuXHRcdFx0aWYgKHJlZ2V4cC50ZXN0KG1lc3NhZ2UubXNnKSkge1xuXHRcdFx0XHRoYXMgPSB0cnVlO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBoYXM7XG5cdH1cblxuXHRpZiAocm9vbSAhPSBudWxsKSB7XG5cdFx0bGV0IHRvQWxsID0gZmFsc2U7XG5cdFx0bGV0IHRvSGVyZSA9IGZhbHNlO1xuXHRcdGNvbnN0IG1lbnRpb25JZHMgPSBbXTtcblx0XHRjb25zdCBoaWdobGlnaHRzSWRzID0gW107XG5cdFx0Y29uc3QgaGlnaGxpZ2h0cyA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRVc2Vyc0J5VXNlcm5hbWVzV2l0aEhpZ2hsaWdodHMocm9vbS51c2VybmFtZXMsIHsgZmllbGRzOiB7ICdfaWQnOiAxLCAnc2V0dGluZ3MucHJlZmVyZW5jZXMuaGlnaGxpZ2h0cyc6IDEgfX0pLmZldGNoKCk7XG5cblx0XHRpZiAobWVzc2FnZS5tZW50aW9ucyAhPSBudWxsKSB7XG5cdFx0XHRtZXNzYWdlLm1lbnRpb25zLmZvckVhY2goZnVuY3Rpb24obWVudGlvbikge1xuXHRcdFx0XHRpZiAoIXRvQWxsICYmIG1lbnRpb24uX2lkID09PSAnYWxsJykge1xuXHRcdFx0XHRcdHRvQWxsID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXRvSGVyZSAmJiBtZW50aW9uLl9pZCA9PT0gJ2hlcmUnKSB7XG5cdFx0XHRcdFx0dG9IZXJlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobWVudGlvbi5faWQgIT09IG1lc3NhZ2UudS5faWQpIHtcblx0XHRcdFx0XHRtZW50aW9uSWRzLnB1c2gobWVudGlvbi5faWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRoaWdobGlnaHRzLmZvckVhY2goZnVuY3Rpb24odXNlcikge1xuXHRcdFx0Y29uc3QgdXNlckhpZ2hsaWdodHMgPSBSb2NrZXRDaGF0LmdldFVzZXJQcmVmZXJlbmNlKHVzZXIsICdoaWdobGlnaHRzJyk7XG5cdFx0XHRpZiAodXNlckhpZ2hsaWdodHMgJiYgbWVzc2FnZUNvbnRhaW5zSGlnaGxpZ2h0KG1lc3NhZ2UsIHVzZXJIaWdobGlnaHRzKSkge1xuXHRcdFx0XHRpZiAodXNlci5faWQgIT09IG1lc3NhZ2UudS5faWQpIHtcblx0XHRcdFx0XHRoaWdobGlnaHRzSWRzLnB1c2godXNlci5faWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZiAocm9vbS50ID09PSAnZCcpIHtcblx0XHRcdGNvbnN0IHVucmVhZENvdW50RE0gPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVW5yZWFkX0NvdW50X0RNJyk7XG5cblx0XHRcdGlmICh1bnJlYWRDb3VudERNID09PSAnYWxsX21lc3NhZ2VzJykge1xuXHRcdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmluY1VucmVhZEZvclJvb21JZEV4Y2x1ZGluZ1VzZXJJZChyb29tLl9pZCwgbWVzc2FnZS51Ll9pZCk7XG5cdFx0XHR9IGVsc2UgaWYgKHRvQWxsIHx8IHRvSGVyZSkge1xuXHRcdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmluY0dyb3VwTWVudGlvbnNBbmRVbnJlYWRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQocm9vbS5faWQsIG1lc3NhZ2UudS5faWQsIDEsIDEpO1xuXHRcdFx0fSBlbHNlIGlmICgobWVudGlvbklkcyAmJiBtZW50aW9uSWRzLmxlbmd0aCA+IDApIHx8IChoaWdobGlnaHRzSWRzICYmIGhpZ2hsaWdodHNJZHMubGVuZ3RoID4gMCkpIHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5pbmNVc2VyTWVudGlvbnNBbmRVbnJlYWRGb3JSb29tSWRBbmRVc2VySWRzKHJvb20uX2lkLCBfLmNvbXBhY3QoXy51bmlxdWUobWVudGlvbklkcy5jb25jYXQoaGlnaGxpZ2h0c0lkcykpKSwgMSwgMSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnN0IHVucmVhZENvdW50ID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VucmVhZF9Db3VudCcpO1xuXG5cdFx0XHRpZiAodG9BbGwgfHwgdG9IZXJlKSB7XG5cdFx0XHRcdGxldCBpbmNVbnJlYWQgPSAwO1xuXHRcdFx0XHRpZiAoWydhbGxfbWVzc2FnZXMnLCAnZ3JvdXBfbWVudGlvbnNfb25seScsICd1c2VyX2FuZF9ncm91cF9tZW50aW9uc19vbmx5J10uaW5jbHVkZXModW5yZWFkQ291bnQpKSB7XG5cdFx0XHRcdFx0aW5jVW5yZWFkID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmluY0dyb3VwTWVudGlvbnNBbmRVbnJlYWRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQocm9vbS5faWQsIG1lc3NhZ2UudS5faWQsIDEsIGluY1VucmVhZCk7XG5cdFx0XHR9IGVsc2UgaWYgKChtZW50aW9uSWRzICYmIG1lbnRpb25JZHMubGVuZ3RoID4gMCkgfHwgKGhpZ2hsaWdodHNJZHMgJiYgaGlnaGxpZ2h0c0lkcy5sZW5ndGggPiAwKSkge1xuXHRcdFx0XHRsZXQgaW5jVW5yZWFkID0gMDtcblx0XHRcdFx0aWYgKFsnYWxsX21lc3NhZ2VzJywgJ3VzZXJfbWVudGlvbnNfb25seScsICd1c2VyX2FuZF9ncm91cF9tZW50aW9uc19vbmx5J10uaW5jbHVkZXModW5yZWFkQ291bnQpKSB7XG5cdFx0XHRcdFx0aW5jVW5yZWFkID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmluY1VzZXJNZW50aW9uc0FuZFVucmVhZEZvclJvb21JZEFuZFVzZXJJZHMocm9vbS5faWQsIF8uY29tcGFjdChfLnVuaXF1ZShtZW50aW9uSWRzLmNvbmNhdChoaWdobGlnaHRzSWRzKSkpLCAxLCBpbmNVbnJlYWQpO1xuXHRcdFx0fSBlbHNlIGlmICh1bnJlYWRDb3VudCA9PT0gJ2FsbF9tZXNzYWdlcycpIHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5pbmNVbnJlYWRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQocm9vbS5faWQsIG1lc3NhZ2UudS5faWQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFVwZGF0ZSBhbGwgdGhlIHJvb20gYWN0aXZpdHkgdHJhY2tlciBmaWVsZHNcblx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuaW5jTXNnQ291bnRBbmRTZXRMYXN0TWVzc2FnZUJ5SWQobWVzc2FnZS5yaWQsIDEsIG1lc3NhZ2UudHMsIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTdG9yZV9MYXN0X01lc3NhZ2UnKSAmJiBtZXNzYWdlKTtcblxuXHQvLyBVcGRhdGUgYWxsIG90aGVyIHN1YnNjcmlwdGlvbnMgdG8gYWxlcnQgdGhlaXIgb3duZXJzIGJ1dCB3aXRvdXQgaW5jcmVtZW50aW5nXG5cdC8vIHRoZSB1bnJlYWQgY291bnRlciwgYXMgaXQgaXMgb25seSBmb3IgbWVudGlvbnMgYW5kIGRpcmVjdCBtZXNzYWdlc1xuXHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLnNldEFsZXJ0Rm9yUm9vbUlkRXhjbHVkaW5nVXNlcklkKG1lc3NhZ2UucmlkLCBtZXNzYWdlLnUuX2lkKTtcblxuXHRyZXR1cm4gbWVzc2FnZTtcblxufSwgUm9ja2V0Q2hhdC5jYWxsYmFja3MucHJpb3JpdHkuTE9XLCAnbm90aWZ5VXNlcnNPbk1lc3NhZ2UnKTtcbiIsImltcG9ydCB7RW1haWxSZXBseVBhcnNlciBhcyByZXBseX0gZnJvbSAnZW1haWxyZXBseXBhcnNlcic7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cblJvY2tldENoYXQucHJvY2Vzc0RpcmVjdEVtYWlsID0gZnVuY3Rpb24oZW1haWwpIHtcblx0ZnVuY3Rpb24gc2VuZE1lc3NhZ2UoZW1haWwpIHtcblx0XHRjb25zdCBtZXNzYWdlID0ge1xuXHRcdFx0dHM6IG5ldyBEYXRlKGVtYWlsLmhlYWRlcnMuZGF0ZSksXG5cdFx0XHRtc2c6IGVtYWlsLmJvZHksXG5cdFx0XHRzZW50QnlFbWFpbDogdHJ1ZSxcblx0XHRcdGdyb3VwYWJsZTogZmFsc2Vcblx0XHR9O1xuXG5cdFx0aWYgKG1lc3NhZ2UudHMpIHtcblx0XHRcdGNvbnN0IHRzRGlmZiA9IE1hdGguYWJzKG1vbWVudChtZXNzYWdlLnRzKS5kaWZmKCkpO1xuXHRcdFx0aWYgKHRzRGlmZiA+IDEwMDAwKSB7XG5cdFx0XHRcdG1lc3NhZ2UudHMgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZXNzYWdlLnRzID0gbmV3IERhdGUoKTtcblx0XHR9XG5cblx0XHRpZiAobWVzc2FnZS5tc2cgJiYgbWVzc2FnZS5tc2cubGVuZ3RoID4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ01lc3NhZ2VfTWF4QWxsb3dlZFNpemUnKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIHJlZHVjZSBuZXcgbGluZXMgaW4gbXVsdGlsaW5lIG1lc3NhZ2Vcblx0XHRtZXNzYWdlLm1zZyA9IG1lc3NhZ2UubXNnLnNwbGl0KCdcXG5cXG4nKS5qb2luKCdcXG4nKTtcblxuXHRcdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlFbWFpbEFkZHJlc3MoZW1haWwuaGVhZGVycy5mcm9tLCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0dXNlcm5hbWU6IDEsXG5cdFx0XHRcdG5hbWU6IDFcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpZiAoIXVzZXIpIHtcblx0XHRcdC8vIHVzZXIgbm90IGZvdW5kXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcHJldk1lc3NhZ2UgPSBSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5maW5kT25lQnlJZChlbWFpbC5oZWFkZXJzLm1pZCwge1xuXHRcdFx0cmlkOiAxLFxuXHRcdFx0dTogMVxuXHRcdH0pO1xuXHRcdGlmICghcHJldk1lc3NhZ2UpIHtcblx0XHRcdC8vIG1lc3NhZ2UgZG9lc24ndCBleGlzdCBhbnltb3JlXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdG1lc3NhZ2UucmlkID0gcHJldk1lc3NhZ2UucmlkO1xuXG5cdFx0Y29uc3Qgcm9vbSA9IE1ldGVvci5jYWxsKCdjYW5BY2Nlc3NSb29tJywgbWVzc2FnZS5yaWQsIHVzZXIuX2lkKTtcblx0XHRpZiAoIXJvb20pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRjb25zdCByb29tSW5mbyA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKG1lc3NhZ2UucmlkLCB7XG5cdFx0XHR0OiAxLFxuXHRcdFx0bmFtZTogMVxuXHRcdH0pO1xuXG5cdFx0Ly8gY2hlY2sgbWVudGlvblxuXHRcdGlmIChtZXNzYWdlLm1zZy5pbmRleE9mKGBAJHsgcHJldk1lc3NhZ2UudS51c2VybmFtZSB9YCkgPT09IC0xICYmIHJvb21JbmZvLnQgIT09ICdkJykge1xuXHRcdFx0bWVzc2FnZS5tc2cgPSBgQCR7IHByZXZNZXNzYWdlLnUudXNlcm5hbWUgfSAkeyBtZXNzYWdlLm1zZyB9YDtcblx0XHR9XG5cblx0XHQvLyByZXBseSBtZXNzYWdlIGxpbmtcblx0XHRsZXQgcHJldk1lc3NhZ2VMaW5rID0gYFsgXSgkeyBNZXRlb3IuYWJzb2x1dGVVcmwoKS5yZXBsYWNlKC9cXC8kLywgJycpIH1gO1xuXHRcdGlmIChyb29tSW5mby50ID09PSAnYycpIHtcblx0XHRcdHByZXZNZXNzYWdlTGluayArPSBgL2NoYW5uZWwvJHsgcm9vbUluZm8ubmFtZSB9P21zZz0keyBlbWFpbC5oZWFkZXJzLm1pZCB9KSBgO1xuXHRcdH0gZWxzZSBpZiAocm9vbUluZm8udCA9PT0gJ2QnKSB7XG5cdFx0XHRwcmV2TWVzc2FnZUxpbmsgKz0gYC9kaXJlY3QvJHsgcHJldk1lc3NhZ2UudS51c2VybmFtZSB9P21zZz0keyBlbWFpbC5oZWFkZXJzLm1pZCB9KSBgO1xuXHRcdH0gZWxzZSBpZiAocm9vbUluZm8udCA9PT0gJ3AnKSB7XG5cdFx0XHRwcmV2TWVzc2FnZUxpbmsgKz0gYC9ncm91cC8keyByb29tSW5mby5uYW1lIH0/bXNnPSR7IGVtYWlsLmhlYWRlcnMubWlkIH0pIGA7XG5cdFx0fVxuXHRcdC8vIGFkZCByZXBseSBtZXNzYWdlIGxpbmtcblx0XHRtZXNzYWdlLm1zZyA9IHByZXZNZXNzYWdlTGluayArIG1lc3NhZ2UubXNnO1xuXG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lQnlSb29tSWRBbmRVc2VySWQobWVzc2FnZS5yaWQsIHVzZXIuX2lkKTtcblx0XHRpZiAoc3Vic2NyaXB0aW9uICYmIHN1YnNjcmlwdGlvbi5ibG9ja2VkIHx8IHN1YnNjcmlwdGlvbi5ibG9ja2VyKSB7XG5cdFx0XHQvLyByb29tIGlzIGJsb2NrZWRcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoKHJvb20ubXV0ZWQgfHwgW10pLmluY2x1ZGVzKHVzZXIudXNlcm5hbWUpKSB7XG5cdFx0XHQvLyByb29tIGlzIG11dGVkXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKG1lc3NhZ2UuYWxpYXMgPT0gbnVsbCAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9TZXROYW1lVG9BbGlhc0VuYWJsZWQnKSkge1xuXHRcdFx0bWVzc2FnZS5hbGlhcyA9IHVzZXIubmFtZTtcblx0XHR9XG5cblx0XHRSb2NrZXRDaGF0Lm1ldHJpY3MubWVzc2FnZXNTZW50LmluYygpOyAvLyBUT0RPIFRoaXMgbGluZSBuZWVkcyB0byBiZSBtb3ZlZCB0byBpdCdzIHByb3BlciBwbGFjZS4gU2VlIHRoZSBjb21tZW50cyBvbjogaHR0cHM6Ly9naXRodWIuY29tL1JvY2tldENoYXQvUm9ja2V0LkNoYXQvcHVsbC81NzM2XG5cblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zZW5kTWVzc2FnZSh1c2VyLCBtZXNzYWdlLCByb29tKTtcblx0fVxuXG5cdC8vIEV4dHJhY3QvcGFyc2UgcmVwbHkgZnJvbSBlbWFpbCBib2R5XG5cdGVtYWlsLmJvZHkgPSByZXBseS5wYXJzZV9yZXBseShlbWFpbC5ib2R5KTtcblxuXHQvLyBpZiAnVG8nIGVtYWlsIGZvcm1hdCBpcyBcIk5hbWUgPHVzZXJuYW1lQGRvbWFpbj5cIlxuXHRpZiAoZW1haWwuaGVhZGVycy50by5pbmRleE9mKCc8JykgPj0gMCAmJiBlbWFpbC5oZWFkZXJzLnRvLmluZGV4T2YoJz4nKSA+PSAwKSB7XG5cdFx0ZW1haWwuaGVhZGVycy50byA9IGVtYWlsLmhlYWRlcnMudG8uc3BsaXQoJzwnKVsxXS5zcGxpdCgnPicpWzBdO1xuXHR9XG5cblx0Ly8gaWYgJ0Zyb20nIGVtYWlsIGZvcm1hdCBpcyBcIk5hbWUgPHVzZXJuYW1lQGRvbWFpbj5cIlxuXHRpZiAoZW1haWwuaGVhZGVycy5mcm9tLmluZGV4T2YoJzwnKSA+PSAwICYmIGVtYWlsLmhlYWRlcnMuZnJvbS5pbmRleE9mKCc+JykgPj0gMCkge1xuXHRcdGVtYWlsLmhlYWRlcnMuZnJvbSA9IGVtYWlsLmhlYWRlcnMuZnJvbS5zcGxpdCgnPCcpWzFdLnNwbGl0KCc+JylbMF07XG5cdH1cblxuXHQvLyAnVG8nIGVtYWlsIGZvcm1hdCBcInVzZXJuYW1lK21lc3NhZ2VJZEBkb21haW5cIlxuXHRpZiAoZW1haWwuaGVhZGVycy50by5pbmRleE9mKCcrJykgPj0gMCkge1xuXHRcdC8vIFZhbGlkICdUbycgZm9ybWF0XG5cdFx0ZW1haWwuaGVhZGVycy5taWQgPSBlbWFpbC5oZWFkZXJzLnRvLnNwbGl0KCdAJylbMF0uc3BsaXQoJysnKVsxXTtcblx0XHRzZW5kTWVzc2FnZShlbWFpbCk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS5sb2coJ0ludmFsaWQgRW1haWwuLi4uSWYgbm90LiBQbGVhc2UgcmVwb3J0IGl0LicpO1xuXHR9XG59O1xuIiwiaW1wb3J0IHsgUm9vbVR5cGVzQ29tbW9uIH0gZnJvbSAnLi4vLi4vbGliL1Jvb21UeXBlc0NvbW1vbic7XG5cblJvY2tldENoYXQucm9vbVR5cGVzID0gbmV3IGNsYXNzIHJvb21UeXBlc1NlcnZlciBleHRlbmRzIFJvb21UeXBlc0NvbW1vbiB7XG5cdC8qKlxuXHQgKiBBZGQgYSBwdWJsaXNoIGZvciBhIHJvb20gdHlwZVxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcm9vbVR5cGUgcm9vbSB0eXBlIChlLmcuOiBjIChmb3IgY2hhbm5lbHMpLCBkIChmb3IgZGlyZWN0IGNoYW5uZWxzKSlcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIHJldHVybiB0aGUgcHVibGlzaCdzIGRhdGFcblx0Ki9cblx0c2V0UHVibGlzaChyb29tVHlwZSwgY2FsbGJhY2spIHtcblx0XHRpZiAodGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdICYmIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXS5wdWJsaXNoICE9IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3JvdXRlLXB1Ymxpc2gtZXhpc3RzJywgJ1B1Ymxpc2ggZm9yIHRoZSBnaXZlbiB0eXBlIGFscmVhZHkgZXhpc3RzJyk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0gPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdID0ge307XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucHVibGlzaCA9IGNhbGxiYWNrO1xuXHR9XG5cblx0c2V0Um9vbUZpbmQocm9vbVR5cGUsIGNhbGxiYWNrKSB7XG5cdFx0aWYgKHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXSAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm9vbUZpbmQgIT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcigncm9vbS1maW5kLWV4aXN0cycsICdSb29tIGZpbmQgZm9yIHRoZSBnaXZlbiB0eXBlIGFscmVhZHkgZXhpc3RzJyk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0gPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdID0ge307XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm9vbUZpbmQgPSBjYWxsYmFjaztcblx0fVxuXG5cdGdldFJvb21GaW5kKHJvb21UeXBlKSB7XG5cdFx0cmV0dXJuIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXSAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm9vbUZpbmQ7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBSdW4gdGhlIHB1Ymxpc2ggZm9yIGEgcm9vbSB0eXBlXG5cdCAqXG5cdCAqIEBwYXJhbSBzY29wZSBNZXRlb3IgcHVibGlzaCBzY29wZVxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcm9vbVR5cGUgcm9vbSB0eXBlIChlLmcuOiBjIChmb3IgY2hhbm5lbHMpLCBkIChmb3IgZGlyZWN0IGNoYW5uZWxzKSlcblx0ICogQHBhcmFtIGlkZW50aWZpZXIgaWRlbnRpZmllciBvZiB0aGUgcm9vbVxuXHQqL1xuXHRydW5QdWJsaXNoKHNjb3BlLCByb29tVHlwZSwgaWRlbnRpZmllcikge1xuXHRcdHJldHVybiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0gJiYgdGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdLnB1Ymxpc2ggJiYgdGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdLnB1Ymxpc2guY2FsbChzY29wZSwgaWRlbnRpZmllcik7XG5cdH1cblxufTtcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuZnVuY3Rpb24gZ2V0RW1haWxDb250ZW50KHsgbWVzc2FnZUNvbnRlbnQsIG1lc3NhZ2UsIHVzZXIsIHJvb20gfSkge1xuXHRjb25zdCBsbmcgPSB1c2VyICYmIHVzZXIubGFuZ3VhZ2UgfHwgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ2xhbmd1YWdlJykgfHwgJ2VuJztcblxuXHRjb25zdCByb29tTmFtZSA9IGAjJHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VJX0FsbG93X3Jvb21fbmFtZXNfd2l0aF9zcGVjaWFsX2NoYXJzJykgPyByb29tLmZuYW1lIHx8IHJvb20ubmFtZSA6IHJvb20ubmFtZSB9YDtcblxuXHRjb25zdCB1c2VyTmFtZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9Vc2VfUmVhbF9OYW1lJykgPyBtZXNzYWdlLnUubmFtZSB8fCBtZXNzYWdlLnUudXNlcm5hbWUgOiBtZXNzYWdlLnUudXNlcm5hbWU7XG5cblx0Y29uc3QgaGVhZGVyID0gVEFQaTE4bi5fXyhyb29tLnQgPT09ICdkJyA/ICdVc2VyX3NlbnRfYV9tZXNzYWdlX3RvX3lvdScgOiAnVXNlcl9zZW50X2FfbWVzc2FnZV9vbl9jaGFubmVsJywge1xuXHRcdHVzZXJuYW1lOiB1c2VyTmFtZSxcblx0XHRjaGFubmVsOiByb29tTmFtZSxcblx0XHRsbmdcblx0fSk7XG5cblx0aWYgKG1lc3NhZ2VDb250ZW50KSB7XG5cdFx0cmV0dXJuIGAkeyBoZWFkZXIgfTxici8+PGJyLz4keyBtZXNzYWdlQ29udGVudCB9YDtcblx0fVxuXG5cdGlmIChtZXNzYWdlLmZpbGUpIHtcblx0XHRjb25zdCBmaWxlSGVhZGVyID0gVEFQaTE4bi5fXyhyb29tLnQgPT09ICdkJyA/ICdVc2VyX3VwbG9hZGVkX2FfZmlsZV90b195b3UnIDogJ1VzZXJfdXBsb2FkZWRfYV9maWxlX29uX2NoYW5uZWwnLCB7XG5cdFx0XHR1c2VybmFtZTogdXNlck5hbWUsXG5cdFx0XHRjaGFubmVsOiByb29tTmFtZSxcblx0XHRcdGxuZ1xuXHRcdH0pO1xuXG5cdFx0bGV0IGNvbnRlbnQgPSBgJHsgVEFQaTE4bi5fXygnQXR0YWNobWVudF9GaWxlX1VwbG9hZGVkJykgfTogJHsgbWVzc2FnZS5maWxlLm5hbWUgfWA7XG5cblx0XHRpZiAobWVzc2FnZS5hdHRhY2htZW50cyAmJiBtZXNzYWdlLmF0dGFjaG1lbnRzLmxlbmd0aCA9PT0gMSAmJiBtZXNzYWdlLmF0dGFjaG1lbnRzWzBdLmRlc2NyaXB0aW9uICE9PSAnJykge1xuXHRcdFx0Y29udGVudCArPSBgPGJyLz48YnIvPiR7IG1lc3NhZ2UuYXR0YWNobWVudHNbMF0uZGVzY3JpcHRpb24gfWA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGAkeyBmaWxlSGVhZGVyIH08YnIvPjxici8+JHsgY29udGVudCB9YDtcblx0fVxuXG5cdGlmIChtZXNzYWdlLmF0dGFjaG1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRjb25zdCBbIGF0dGFjaG1lbnQgXSA9IG1lc3NhZ2UuYXR0YWNobWVudHM7XG5cblx0XHRsZXQgY29udGVudCA9ICcnO1xuXG5cdFx0aWYgKGF0dGFjaG1lbnQudGl0bGUpIHtcblx0XHRcdGNvbnRlbnQgKz0gYCR7IGF0dGFjaG1lbnQudGl0bGUgfTxici8+YDtcblx0XHR9XG5cdFx0aWYgKGF0dGFjaG1lbnQudGV4dCkge1xuXHRcdFx0Y29udGVudCArPSBgJHsgYXR0YWNobWVudC50ZXh0IH08YnIvPmA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGAkeyBoZWFkZXIgfTxici8+PGJyLz4keyBjb250ZW50IH1gO1xuXHR9XG5cblx0cmV0dXJuIGhlYWRlcjtcbn1cblxuUm9ja2V0Q2hhdC5jYWxsYmFja3MuYWRkKCdhZnRlclNhdmVNZXNzYWdlJywgZnVuY3Rpb24obWVzc2FnZSwgcm9vbSkge1xuXHQvLyBza2lwcyB0aGlzIGNhbGxiYWNrIGlmIHRoZSBtZXNzYWdlIHdhcyBlZGl0ZWRcblx0aWYgKG1lc3NhZ2UuZWRpdGVkQXQpIHtcblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fVxuXG5cdGlmIChtZXNzYWdlLnRzICYmIE1hdGguYWJzKG1vbWVudChtZXNzYWdlLnRzKS5kaWZmKCkpID4gNjAwMDApIHtcblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fVxuXG5cdGNvbnN0IGdldE1lc3NhZ2VMaW5rID0gKHJvb20sIHN1YikgPT4ge1xuXHRcdGNvbnN0IHJvb21QYXRoID0gUm9ja2V0Q2hhdC5yb29tVHlwZXMuZ2V0Um91dGVMaW5rKHJvb20udCwgc3ViKTtcblx0XHRjb25zdCBwYXRoID0gTWV0ZW9yLmFic29sdXRlVXJsKHJvb21QYXRoID8gcm9vbVBhdGgucmVwbGFjZSgvXlxcLy8sICcnKSA6ICcnKTtcblx0XHRjb25zdCBzdHlsZSA9IFtcblx0XHRcdCdjb2xvcjogI2ZmZjsnLFxuXHRcdFx0J3BhZGRpbmc6IDlweCAxMnB4OycsXG5cdFx0XHQnYm9yZGVyLXJhZGl1czogNHB4OycsXG5cdFx0XHQnYmFja2dyb3VuZC1jb2xvcjogIzA0NDM2YTsnLFxuXHRcdFx0J3RleHQtZGVjb3JhdGlvbjogbm9uZTsnXG5cdFx0XS5qb2luKCcgJyk7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IFRBUGkxOG4uX18oJ09mZmxpbmVfTGlua19NZXNzYWdlJyk7XG5cdFx0cmV0dXJuIGA8cCBzdHlsZT1cInRleHQtYWxpZ246Y2VudGVyO21hcmdpbi1ib3R0b206OHB4O1wiPjxhIHN0eWxlPVwiJHsgc3R5bGUgfVwiIGhyZWY9XCIkeyBwYXRoIH1cIj4keyBtZXNzYWdlIH08L2E+YDtcblx0fTtcblxuXHRjb25zdCBkaXZpc29yTWVzc2FnZSA9ICc8aHIgc3R5bGU9XCJtYXJnaW46IDIwcHggYXV0bzsgYm9yZGVyOiBub25lOyBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZGRkZDtcIj4nO1xuXG5cdGxldCBtZXNzYWdlSFRNTDtcblxuXHRpZiAobWVzc2FnZS5tc2cgIT09ICcnKSB7XG5cdFx0bWVzc2FnZUhUTUwgPSBzLmVzY2FwZUhUTUwobWVzc2FnZS5tc2cpO1xuXHRcdG1lc3NhZ2UgPSBSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ3JlbmRlck1lc3NhZ2UnLCBtZXNzYWdlKTtcblx0XHRpZiAobWVzc2FnZS50b2tlbnMgJiYgbWVzc2FnZS50b2tlbnMubGVuZ3RoID4gMCkge1xuXHRcdFx0bWVzc2FnZS50b2tlbnMuZm9yRWFjaCgodG9rZW4pID0+IHtcblx0XHRcdFx0dG9rZW4udGV4dCA9IHRva2VuLnRleHQucmVwbGFjZSgvKFteXFwkXSkoXFwkW15cXCRdKS9nbSwgJyQxJCQkMicpO1xuXHRcdFx0XHRtZXNzYWdlSFRNTCA9IG1lc3NhZ2VIVE1MLnJlcGxhY2UodG9rZW4udG9rZW4sIHRva2VuLnRleHQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdG1lc3NhZ2VIVE1MID0gbWVzc2FnZUhUTUwucmVwbGFjZSgvXFxuL2dtLCAnPGJyLz4nKTtcblx0fVxuXG5cdGNvbnN0IGhlYWRlciA9IFJvY2tldENoYXQucGxhY2Vob2xkZXJzLnJlcGxhY2UoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0VtYWlsX0hlYWRlcicpIHx8ICcnKTtcblx0bGV0IGZvb3RlciA9IFJvY2tldENoYXQucGxhY2Vob2xkZXJzLnJlcGxhY2UoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0VtYWlsX0Zvb3RlcicpIHx8ICcnKTtcblxuXHRjb25zdCB1c2Vyc1RvU2VuZEVtYWlsID0ge307XG5cdGlmIChyb29tLnQgPT09ICdkJykge1xuXHRcdHVzZXJzVG9TZW5kRW1haWxbbWVzc2FnZS5yaWQucmVwbGFjZShtZXNzYWdlLnUuX2lkLCAnJyldID0gJ2RpcmVjdCc7XG5cdH0gZWxzZSB7XG5cdFx0bGV0IGlzTWVudGlvbkFsbCA9IG1lc3NhZ2UubWVudGlvbnMuZmluZChtZW50aW9uID0+IG1lbnRpb24uX2lkID09PSAnYWxsJyk7XG5cblx0XHRpZiAoaXNNZW50aW9uQWxsKSB7XG5cdFx0XHRjb25zdCBtYXhNZW1iZXJzRm9yTm90aWZpY2F0aW9uID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ05vdGlmaWNhdGlvbnNfTWF4X1Jvb21fTWVtYmVycycpO1xuXHRcdFx0aWYgKG1heE1lbWJlcnNGb3JOb3RpZmljYXRpb24gIT09IDAgJiYgcm9vbS51c2VybmFtZXMubGVuZ3RoID4gbWF4TWVtYmVyc0Zvck5vdGlmaWNhdGlvbikge1xuXHRcdFx0XHRpc01lbnRpb25BbGwgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IHF1ZXJ5O1xuXHRcdGlmIChpc01lbnRpb25BbGwpIHtcblx0XHRcdC8vIFF1ZXJ5IGFsbCB1c2VycyBpbiByb29tIGxpbWl0ZWQgYnkgdGhlIG1heCByb29tIG1lbWJlcnMgc2V0dGluZ1xuXHRcdFx0cXVlcnkgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRCeVJvb21JZChyb29tLl9pZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFF1ZXJ5IG9ubHkgbWVudGlvbmVkIHVzZXJzLCB3aWxsIGJlIGFsd2F5cyBhIGZldyB1c2Vyc1xuXHRcdFx0Y29uc3QgdXNlcklkcyA9IG1lc3NhZ2UubWVudGlvbnMubWFwKG1lbnRpb24gPT4gbWVudGlvbi5faWQpO1xuXHRcdFx0cXVlcnkgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRCeVJvb21JZEFuZFVzZXJJZHNPckFsbE1lc3NhZ2VzKHJvb20uX2lkLCB1c2VySWRzKTtcblx0XHR9XG5cblx0XHRxdWVyeS5mb3JFYWNoKChzdWIpID0+IHtcblx0XHRcdGlmIChzdWIuZGlzYWJsZU5vdGlmaWNhdGlvbnMpIHtcblx0XHRcdFx0cmV0dXJuIGRlbGV0ZSB1c2Vyc1RvU2VuZEVtYWlsW3N1Yi51Ll9pZF07XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGVtYWlsTm90aWZpY2F0aW9ucyA9IHN1Yi5lbWFpbE5vdGlmaWNhdGlvbnM7XG5cblx0XHRcdGlmIChlbWFpbE5vdGlmaWNhdGlvbnMgPT09ICdub3RoaW5nJykge1xuXHRcdFx0XHRyZXR1cm4gZGVsZXRlIHVzZXJzVG9TZW5kRW1haWxbc3ViLnUuX2lkXTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbWVudGlvbmVkVXNlciA9IGlzTWVudGlvbkFsbCB8fCBtZXNzYWdlLm1lbnRpb25zLmZpbmQobWVudGlvbiA9PiBtZW50aW9uLl9pZCA9PT0gc3ViLnUuX2lkKTtcblxuXHRcdFx0aWYgKGVtYWlsTm90aWZpY2F0aW9ucyA9PT0gJ2RlZmF1bHQnIHx8IGVtYWlsTm90aWZpY2F0aW9ucyA9PSBudWxsKSB7XG5cdFx0XHRcdGlmIChtZW50aW9uZWRVc2VyKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHVzZXJzVG9TZW5kRW1haWxbc3ViLnUuX2lkXSA9ICdkZWZhdWx0Jztcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZGVsZXRlIHVzZXJzVG9TZW5kRW1haWxbc3ViLnUuX2lkXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGVtYWlsTm90aWZpY2F0aW9ucyA9PT0gJ21lbnRpb25zJyAmJiBtZW50aW9uZWRVc2VyKSB7XG5cdFx0XHRcdHJldHVybiB1c2Vyc1RvU2VuZEVtYWlsW3N1Yi51Ll9pZF0gPSAnbWVudGlvbic7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChlbWFpbE5vdGlmaWNhdGlvbnMgPT09ICdhbGwnKSB7XG5cdFx0XHRcdHJldHVybiB1c2Vyc1RvU2VuZEVtYWlsW3N1Yi51Ll9pZF0gPSAnYWxsJztcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHRjb25zdCB1c2VySWRzVG9TZW5kRW1haWwgPSBPYmplY3Qua2V5cyh1c2Vyc1RvU2VuZEVtYWlsKTtcblxuXHRsZXQgZGVmYXVsdExpbms7XG5cblx0Y29uc3QgbGlua0J5VXNlciA9IHt9O1xuXHRpZiAoUm9ja2V0Q2hhdC5yb29tVHlwZXMuaGFzQ3VzdG9tTGluayhyb29tLnQpKSB7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kQnlSb29tSWRBbmRVc2VySWRzKHJvb20uX2lkLCB1c2VySWRzVG9TZW5kRW1haWwpLmZvckVhY2goKHN1YikgPT4ge1xuXHRcdFx0bGlua0J5VXNlcltzdWIudS5faWRdID0gZ2V0TWVzc2FnZUxpbmsocm9vbSwgc3ViKTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRkZWZhdWx0TGluayA9IGdldE1lc3NhZ2VMaW5rKHJvb20sIHtcblx0XHRcdG5hbWU6IHJvb20ubmFtZVxuXHRcdH0pO1xuXHR9XG5cblx0aWYgKHVzZXJJZHNUb1NlbmRFbWFpbC5sZW5ndGggPiAwKSB7XG5cdFx0Y29uc3QgdXNlcnNPZk1lbnRpb24gPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5nZXRVc2Vyc1RvU2VuZE9mZmxpbmVFbWFpbCh1c2VySWRzVG9TZW5kRW1haWwpLmZldGNoKCk7XG5cblx0XHRpZiAodXNlcnNPZk1lbnRpb24gJiYgdXNlcnNPZk1lbnRpb24ubGVuZ3RoID4gMCkge1xuXHRcdFx0dXNlcnNPZk1lbnRpb24uZm9yRWFjaCgodXNlcikgPT4ge1xuXHRcdFx0XHRjb25zdCBlbWFpbE5vdGlmaWNhdGlvbk1vZGUgPSBSb2NrZXRDaGF0LmdldFVzZXJQcmVmZXJlbmNlKHVzZXIsICdlbWFpbE5vdGlmaWNhdGlvbk1vZGUnKTtcblx0XHRcdFx0aWYgKHVzZXJzVG9TZW5kRW1haWxbdXNlci5faWRdID09PSAnZGVmYXVsdCcpIHtcblx0XHRcdFx0XHRpZiAoZW1haWxOb3RpZmljYXRpb25Nb2RlID09PSAnYWxsJykgeyAvL01lbnRpb24vRE1cblx0XHRcdFx0XHRcdHVzZXJzVG9TZW5kRW1haWxbdXNlci5faWRdID0gJ21lbnRpb24nO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHVzZXJzVG9TZW5kRW1haWxbdXNlci5faWRdID09PSAnZGlyZWN0Jykge1xuXHRcdFx0XHRcdGNvbnN0IHVzZXJFbWFpbFByZWZlcmVuY2VJc0Rpc2FibGVkID0gZW1haWxOb3RpZmljYXRpb25Nb2RlID09PSAnZGlzYWJsZWQnO1xuXHRcdFx0XHRcdGNvbnN0IGRpcmVjdE1lc3NhZ2VFbWFpbFByZWZlcmVuY2UgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChtZXNzYWdlLnJpZCwgbWVzc2FnZS5yaWQucmVwbGFjZShtZXNzYWdlLnUuX2lkLCAnJykpLmVtYWlsTm90aWZpY2F0aW9ucztcblxuXHRcdFx0XHRcdGlmIChkaXJlY3RNZXNzYWdlRW1haWxQcmVmZXJlbmNlID09PSAnbm90aGluZycpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoKGRpcmVjdE1lc3NhZ2VFbWFpbFByZWZlcmVuY2UgPT09ICdkZWZhdWx0JyB8fCBkaXJlY3RNZXNzYWdlRW1haWxQcmVmZXJlbmNlID09IG51bGwpICYmIHVzZXJFbWFpbFByZWZlcmVuY2VJc0Rpc2FibGVkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2hlY2tzIGlmIHVzZXIgaXMgaW4gdGhlIHJvb20gaGUvc2hlIGlzIG1lbnRpb25lZCAodW5sZXNzIGl0J3MgcHVibGljIGNoYW5uZWwpXG5cdFx0XHRcdGlmIChyb29tLnQgIT09ICdjJyAmJiByb29tLnVzZXJuYW1lcy5pbmRleE9mKHVzZXIudXNlcm5hbWUpID09PSAtMSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvb3RlciBpbiBjYXNlIGRpcmVjdCByZXBseSBpcyBlbmFibGVkLlxuXHRcdFx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9FbmFibGUnKSkge1xuXHRcdFx0XHRcdGZvb3RlciA9IFJvY2tldENoYXQucGxhY2Vob2xkZXJzLnJlcGxhY2UoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0VtYWlsX0Zvb3Rlcl9EaXJlY3RfUmVwbHknKSB8fCAnJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgZW1haWxTdWJqZWN0O1xuXHRcdFx0XHRjb25zdCB1c2VybmFtZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9Vc2VfUmVhbF9OYW1lJykgPyBtZXNzYWdlLnUubmFtZSA6IG1lc3NhZ2UudS51c2VybmFtZTtcblx0XHRcdFx0Y29uc3Qgcm9vbU5hbWUgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfQWxsb3dfcm9vbV9uYW1lc193aXRoX3NwZWNpYWxfY2hhcnMnKSA/IHJvb20uZm5hbWUgOiByb29tLm5hbWU7XG5cdFx0XHRcdHN3aXRjaCAodXNlcnNUb1NlbmRFbWFpbFt1c2VyLl9pZF0pIHtcblx0XHRcdFx0XHRjYXNlICdhbGwnOlxuXHRcdFx0XHRcdFx0ZW1haWxTdWJqZWN0ID0gUm9ja2V0Q2hhdC5wbGFjZWhvbGRlcnMucmVwbGFjZShSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnT2ZmbGluZV9NZW50aW9uX0FsbF9FbWFpbCcpLCB7XG5cdFx0XHRcdFx0XHRcdHVzZXI6IHVzZXJuYW1lLFxuXHRcdFx0XHRcdFx0XHRyb29tOiByb29tTmFtZSB8fCByb29tLmxhYmVsXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2RpcmVjdCc6XG5cdFx0XHRcdFx0XHRlbWFpbFN1YmplY3QgPSBSb2NrZXRDaGF0LnBsYWNlaG9sZGVycy5yZXBsYWNlKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdPZmZsaW5lX0RNX0VtYWlsJyksIHtcblx0XHRcdFx0XHRcdFx0dXNlcjogdXNlcm5hbWUsXG5cdFx0XHRcdFx0XHRcdHJvb206IHJvb21OYW1lXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ21lbnRpb24nOlxuXHRcdFx0XHRcdFx0ZW1haWxTdWJqZWN0ID0gUm9ja2V0Q2hhdC5wbGFjZWhvbGRlcnMucmVwbGFjZShSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnT2ZmbGluZV9NZW50aW9uX0VtYWlsJyksIHtcblx0XHRcdFx0XHRcdFx0dXNlcjogdXNlcm5hbWUsXG5cdFx0XHRcdFx0XHRcdHJvb206IHJvb21OYW1lXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHVzZXIuZW1haWxzLnNvbWUoKGVtYWlsKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGVtYWlsLnZlcmlmaWVkKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBjb250ZW50ID0gZ2V0RW1haWxDb250ZW50KHtcblx0XHRcdFx0XHRcdFx0bWVzc2FnZUNvbnRlbnQ6IG1lc3NhZ2VIVE1MLFxuXHRcdFx0XHRcdFx0XHRtZXNzYWdlLFxuXHRcdFx0XHRcdFx0XHR1c2VyLFxuXHRcdFx0XHRcdFx0XHRyb29tXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGVtYWlsID0ge1xuXHRcdFx0XHRcdFx0XHR0bzogZW1haWwuYWRkcmVzcyxcblx0XHRcdFx0XHRcdFx0c3ViamVjdDogZW1haWxTdWJqZWN0LFxuXHRcdFx0XHRcdFx0XHRodG1sOiBoZWFkZXIgKyBjb250ZW50ICsgZGl2aXNvck1lc3NhZ2UgKyAobGlua0J5VXNlclt1c2VyLl9pZF0gfHwgZGVmYXVsdExpbmspICsgZm9vdGVyXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0Ly8gdXNpbmcgdXNlciBmdWxsLW5hbWUvY2hhbm5lbCBuYW1lIGluIGZyb20gYWRkcmVzc1xuXHRcdFx0XHRcdFx0aWYgKHJvb20udCA9PT0gJ2QnKSB7XG5cdFx0XHRcdFx0XHRcdGVtYWlsLmZyb20gPSBgJHsgbWVzc2FnZS51Lm5hbWUgfSA8JHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0Zyb21fRW1haWwnKSB9PmA7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlbWFpbC5mcm9tID0gYCR7IHJvb20ubmFtZSB9IDwkeyBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRnJvbV9FbWFpbCcpIH0+YDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIElmIGRpcmVjdCByZXBseSBlbmFibGVkLCBlbWFpbCBjb250ZW50IHdpdGggaGVhZGVyc1xuXHRcdFx0XHRcdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfRW5hYmxlJykpIHtcblx0XHRcdFx0XHRcdFx0ZW1haWwuaGVhZGVycyA9IHtcblx0XHRcdFx0XHRcdFx0XHQvLyBSZXBseS1UbyBoZWFkZXIgd2l0aCBmb3JtYXQgXCJ1c2VybmFtZSttZXNzYWdlSWRAZG9tYWluXCJcblx0XHRcdFx0XHRcdFx0XHQnUmVwbHktVG8nOiBgJHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9Vc2VybmFtZScpLnNwbGl0KCdAJylbMF0uc3BsaXQoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9TZXBhcmF0b3InKSlbMF0gfSR7IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfU2VwYXJhdG9yJykgfSR7IG1lc3NhZ2UuX2lkIH1AJHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9Vc2VybmFtZScpLnNwbGl0KCdAJylbMV0gfWBcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0TWV0ZW9yLmRlZmVyKCgpID0+IHtcblx0XHRcdFx0XHRcdFx0RW1haWwuc2VuZChlbWFpbCk7XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtZXNzYWdlO1xuXG59LCBSb2NrZXRDaGF0LmNhbGxiYWNrcy5wcmlvcml0eS5MT1csICdzZW5kRW1haWxPbk1lc3NhZ2UnKTtcbiIsIi8qIGdsb2JhbHMgUHVzaCAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmNvbnN0IENBVEVHT1JZX01FU1NBR0UgPSAnTUVTU0FHRSc7XG5jb25zdCBDQVRFR09SWV9NRVNTQUdFX05PUkVQTFkgPSAnTUVTU0FHRV9OT1JFUExZJztcblxuLyoqXG4gKiBSZXBsYWNlcyBAdXNlcm5hbWUgd2l0aCBmdWxsIG5hbWVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byByZXBsYWNlXG4gKiBAcGFyYW0ge29iamVjdFtdfSBtZW50aW9ucyBBcnJheSBvZiBtZW50aW9ucyB1c2VkIHRvIG1ha2UgcmVwbGFjZW1lbnRzXG4gKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcmVwbGFjZU1lbnRpb25lZFVzZXJuYW1lc1dpdGhGdWxsTmFtZXMobWVzc2FnZSwgbWVudGlvbnMpIHtcblx0aWYgKCFtZW50aW9ucyB8fCAhbWVudGlvbnMubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH1cblx0bWVudGlvbnMuZm9yRWFjaCgobWVudGlvbikgPT4ge1xuXHRcdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZChtZW50aW9uLl9pZCk7XG5cdFx0aWYgKHVzZXIgJiYgdXNlci5uYW1lKSB7XG5cdFx0XHRtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKGBAJHsgbWVudGlvbi51c2VybmFtZSB9YCwgdXNlci5uYW1lKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbWVzc2FnZTtcbn1cblxuZnVuY3Rpb24gY2FuU2VuZE1lc3NhZ2VUb1Jvb20ocm9vbSwgdXNlcm5hbWUpIHtcblx0cmV0dXJuICEoKHJvb20ubXV0ZWQgfHwgW10pLmluY2x1ZGVzKHVzZXJuYW1lKSk7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgc3RyaW5nIHJlYWR5IHRvIGJlIHNob3duIGluIHRoZSBub3RpZmljYXRpb25cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbWVzc2FnZSB0aGUgbWVzc2FnZSB0byBiZSBwYXJzZWRcbiAqL1xuZnVuY3Rpb24gcGFyc2VNZXNzYWdlVGV4dChtZXNzYWdlLCB1c2VySWQpIHtcblx0Y29uc3QgdXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeUlkKHVzZXJJZCk7XG5cdGNvbnN0IGxuZyA9IHVzZXIgJiYgdXNlci5sYW5ndWFnZSB8fCBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnbGFuZ3VhZ2UnKSB8fCAnZW4nO1xuXG5cdGlmICghbWVzc2FnZS5tc2cgJiYgbWVzc2FnZS5hdHRhY2htZW50cyAmJiBtZXNzYWdlLmF0dGFjaG1lbnRzWzBdKSB7XG5cdFx0bWVzc2FnZS5tc2cgPSBtZXNzYWdlLmF0dGFjaG1lbnRzWzBdLmltYWdlX3R5cGUgPyBUQVBpMThuLl9fKCdVc2VyX3VwbG9hZGVkX2ltYWdlJywge2xuZ30pIDogVEFQaTE4bi5fXygnVXNlcl91cGxvYWRlZF9maWxlJywge2xuZ30pO1xuXHR9XG5cdG1lc3NhZ2UubXNnID0gUm9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdiZWZvcmVOb3RpZnlVc2VyJywgbWVzc2FnZS5tc2cpO1xuXG5cdHJldHVybiBtZXNzYWdlLm1zZztcbn1cbi8qKlxuICogU2VuZCBub3RpZmljYXRpb24gdG8gdXNlclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgVGhlIHVzZXIgdG8gbm90aWZ5XG4gKiBAcGFyYW0ge29iamVjdH0gdXNlciBUaGUgc2VuZGVyXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vbSBUaGUgcm9vbSBzZW5kIGZyb21cbiAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBEdXJhdGlvbiBvZiBub3RpZmljYXRpb25cbiAqL1xuZnVuY3Rpb24gbm90aWZ5RGVza3RvcFVzZXIodXNlcklkLCB1c2VyLCBtZXNzYWdlLCByb29tLCBkdXJhdGlvbikge1xuXG5cdGNvbnN0IFVJX1VzZV9SZWFsX05hbWUgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpID09PSB0cnVlO1xuXHRtZXNzYWdlLm1zZyA9IHBhcnNlTWVzc2FnZVRleHQobWVzc2FnZSwgdXNlcklkKTtcblxuXHRpZiAoVUlfVXNlX1JlYWxfTmFtZSkge1xuXHRcdG1lc3NhZ2UubXNnID0gcmVwbGFjZU1lbnRpb25lZFVzZXJuYW1lc1dpdGhGdWxsTmFtZXMobWVzc2FnZS5tc2csIG1lc3NhZ2UubWVudGlvbnMpO1xuXHR9XG5cdGxldCB0aXRsZSA9IFVJX1VzZV9SZWFsX05hbWUgPyB1c2VyLm5hbWUgOiBgQCR7IHVzZXIudXNlcm5hbWUgfWA7XG5cdGlmIChyb29tLnQgIT09ICdkJyAmJiByb29tLm5hbWUpIHtcblx0XHR0aXRsZSArPSBgIEAgIyR7IHJvb20ubmFtZSB9YDtcblx0fVxuXHRSb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMubm90aWZ5VXNlcih1c2VySWQsICdub3RpZmljYXRpb24nLCB7XG5cdFx0dGl0bGUsXG5cdFx0dGV4dDogbWVzc2FnZS5tc2csXG5cdFx0ZHVyYXRpb24sXG5cdFx0cGF5bG9hZDoge1xuXHRcdFx0X2lkOiBtZXNzYWdlLl9pZCxcblx0XHRcdHJpZDogbWVzc2FnZS5yaWQsXG5cdFx0XHRzZW5kZXI6IG1lc3NhZ2UudSxcblx0XHRcdHR5cGU6IHJvb20udCxcblx0XHRcdG5hbWU6IHJvb20ubmFtZVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG5vdGlmeUF1ZGlvVXNlcih1c2VySWQsIG1lc3NhZ2UsIHJvb20pIHtcblx0Um9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeVVzZXIodXNlcklkLCAnYXVkaW9Ob3RpZmljYXRpb24nLCB7XG5cdFx0cGF5bG9hZDoge1xuXHRcdFx0X2lkOiBtZXNzYWdlLl9pZCxcblx0XHRcdHJpZDogbWVzc2FnZS5yaWQsXG5cdFx0XHRzZW5kZXI6IG1lc3NhZ2UudSxcblx0XHRcdHR5cGU6IHJvb20udCxcblx0XHRcdG5hbWU6IHJvb20ubmFtZVxuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWVzc2FnZSBjb250YWlucyBhIHVzZXIgaGlnaGxpZ2h0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7YXJyYXl8dW5kZWZpbmVkfSBoaWdobGlnaHRzXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIG1lc3NhZ2VDb250YWluc0hpZ2hsaWdodChtZXNzYWdlLCBoaWdobGlnaHRzKSB7XG5cdGlmICghIGhpZ2hsaWdodHMgfHwgaGlnaGxpZ2h0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0bGV0IGhhcyA9IGZhbHNlO1xuXHRoaWdobGlnaHRzLnNvbWUoZnVuY3Rpb24oaGlnaGxpZ2h0KSB7XG5cdFx0Y29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cChzLmVzY2FwZVJlZ0V4cChoaWdobGlnaHQpLCAnaScpO1xuXHRcdGlmIChyZWdleHAudGVzdChtZXNzYWdlLm1zZykpIHtcblx0XHRcdGhhcyA9IHRydWU7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBoYXM7XG59XG5cbmZ1bmN0aW9uIGdldEJhZGdlQ291bnQodXNlcklkKSB7XG5cdGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRVbnJlYWRCeVVzZXJJZCh1c2VySWQpLmZldGNoKCk7XG5cblx0cmV0dXJuIHN1YnNjcmlwdGlvbnMucmVkdWNlKCh1bnJlYWQsIHN1YikgPT4ge1xuXHRcdHJldHVybiBzdWIudW5yZWFkICsgdW5yZWFkO1xuXHR9LCAwKTtcbn1cblxuY29uc3Qgc2VuZFB1c2hOb3RpZmljYXRpb25zID0gKHVzZXJJZHNUb1B1c2hOb3RpZnkgPSBbXSwgbWVzc2FnZSwgcm9vbSwgcHVzaF9yb29tLCBwdXNoX3VzZXJuYW1lLCBwdXNoX21lc3NhZ2UsIHB1c2hVc2VybmFtZXMpID0+IHtcblx0aWYgKHVzZXJJZHNUb1B1c2hOb3RpZnkubGVuZ3RoID4gMCAmJiBQdXNoLmVuYWJsZWQgPT09IHRydWUpIHtcblx0XHQvLyBzZW5kIGEgcHVzaCBub3RpZmljYXRpb24gZm9yIGVhY2ggdXNlciBpbmRpdmlkdWFsbHkgKHRvIGdldCBoaXMvaGVyIGJhZGdlIGNvdW50KVxuXHRcdHVzZXJJZHNUb1B1c2hOb3RpZnkuZm9yRWFjaCgodXNlcklkVG9Ob3RpZnkpID0+IHtcblx0XHRcdFJvY2tldENoYXQuUHVzaE5vdGlmaWNhdGlvbi5zZW5kKHtcblx0XHRcdFx0cm9vbUlkOiBtZXNzYWdlLnJpZCxcblx0XHRcdFx0cm9vbU5hbWU6IHB1c2hfcm9vbSxcblx0XHRcdFx0dXNlcm5hbWU6IHB1c2hfdXNlcm5hbWUsXG5cdFx0XHRcdG1lc3NhZ2U6IHB1c2hfbWVzc2FnZSxcblx0XHRcdFx0YmFkZ2U6IGdldEJhZGdlQ291bnQodXNlcklkVG9Ob3RpZnkpLFxuXHRcdFx0XHRwYXlsb2FkOiB7XG5cdFx0XHRcdFx0aG9zdDogTWV0ZW9yLmFic29sdXRlVXJsKCksXG5cdFx0XHRcdFx0cmlkOiBtZXNzYWdlLnJpZCxcblx0XHRcdFx0XHRzZW5kZXI6IG1lc3NhZ2UudSxcblx0XHRcdFx0XHR0eXBlOiByb29tLnQsXG5cdFx0XHRcdFx0bmFtZTogcm9vbS5uYW1lXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHVzZXJzVG86IHtcblx0XHRcdFx0XHR1c2VySWQ6IHVzZXJJZFRvTm90aWZ5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNhdGVnb3J5OiBjYW5TZW5kTWVzc2FnZVRvUm9vbShyb29tLCBwdXNoVXNlcm5hbWVzW3VzZXJJZFRvTm90aWZ5XSkgPyBDQVRFR09SWV9NRVNTQUdFIDogQ0FURUdPUllfTUVTU0FHRV9OT1JFUExZXG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxufTtcblxuY29uc3QgY2FsbEpvaW4gPSAodXNlciwgcmlkKSA9PiB1c2VyLmFjdGl2ZSAmJiBNZXRlb3IucnVuQXNVc2VyKHVzZXIuX2lkLCAoKSA9PiBNZXRlb3IuY2FsbCgnam9pblJvb20nLCByaWQpKTtcblJvY2tldENoYXQuY2FsbGJhY2tzLmFkZCgnYWZ0ZXJTYXZlTWVzc2FnZScsIGZ1bmN0aW9uKG1lc3NhZ2UsIHJvb20sIHVzZXJJZCkge1xuXG5cdC8vIHNraXBzIHRoaXMgY2FsbGJhY2sgaWYgdGhlIG1lc3NhZ2Ugd2FzIGVkaXRlZFxuXHRpZiAobWVzc2FnZS5lZGl0ZWRBdCkge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9XG5cblx0aWYgKG1lc3NhZ2UudHMgJiYgTWF0aC5hYnMobW9tZW50KG1lc3NhZ2UudHMpLmRpZmYoKSkgPiA2MDAwMCkge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9XG5cblx0Y29uc3QgcHVzaFVzZXJuYW1lcyA9IHt9O1xuXG5cdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZChtZXNzYWdlLnUuX2lkKTtcblxuXHQvKlxuXHRJbmNyZW1lbnQgdW5yZWFkIGNvdXRlciBpZiBkaXJlY3QgbWVzc2FnZXNcblx0ICovXG5cdGNvbnN0IHNldHRpbmdzID0ge1xuXHRcdGFsd2F5c05vdGlmeURlc2t0b3BVc2VyczogW10sXG5cdFx0ZG9udE5vdGlmeURlc2t0b3BVc2VyczogW10sXG5cdFx0YWx3YXlzTm90aWZ5TW9iaWxlVXNlcnM6IFtdLFxuXHRcdGRvbnROb3RpZnlNb2JpbGVVc2VyczogW10sXG5cdFx0ZGVza3RvcE5vdGlmaWNhdGlvbkR1cmF0aW9uczoge30sXG5cdFx0YWx3YXlzTm90aWZ5QXVkaW9Vc2VyczogW10sXG5cdFx0ZG9udE5vdGlmeUF1ZGlvVXNlcnM6IFtdLFxuXHRcdGF1ZGlvTm90aWZpY2F0aW9uVmFsdWVzOiB7fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgYSBnaXZlbiB1c2VyIGNhbiBiZSBub3RpZmllZFxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaWRcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBtb2JpbGV8ZGVza3RvcFxuXHQgKlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cblx0ZnVuY3Rpb24gY2FuQmVOb3RpZmllZChpZCwgdHlwZSkge1xuXHRcdGNvbnN0IHR5cGVzID0ge1xuXHRcdFx0ZGVza3RvcDogWyAnZG9udE5vdGlmeURlc2t0b3BVc2VycycsICdhbHdheXNOb3RpZnlEZXNrdG9wVXNlcnMnIF0sXG5cdFx0XHRtb2JpbGU6IFsgJ2RvbnROb3RpZnlNb2JpbGVVc2VycycsICdhbHdheXNOb3RpZnlNb2JpbGVVc2VycycgXSxcblx0XHRcdGF1ZGlvOiBbICdkb250Tm90aWZ5QXVkaW9Vc2VycycsICdhbHdheXNOb3RpZnlBdWRpb1VzZXJzJyBdXG5cdFx0fTtcblxuXHRcdHJldHVybiAoc2V0dGluZ3NbdHlwZXNbdHlwZV1bMF1dLmluZGV4T2YoaWQpID09PSAtMSB8fCBzZXR0aW5nc1t0eXBlc1t0eXBlXVsxXV0uaW5kZXhPZihpZCkgIT09IC0xKTtcblx0fVxuXG5cdC8vIERvbid0IGZldGNoIGFsbCB1c2VycyBpZiByb29tIGV4Y2VlZHMgbWF4IG1lbWJlcnNcblx0Y29uc3QgbWF4TWVtYmVyc0Zvck5vdGlmaWNhdGlvbiA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdOb3RpZmljYXRpb25zX01heF9Sb29tX01lbWJlcnMnKTtcblx0Y29uc3QgZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zID0gcm9vbS51c2VybmFtZXMubGVuZ3RoID4gbWF4TWVtYmVyc0Zvck5vdGlmaWNhdGlvbiAmJiBtYXhNZW1iZXJzRm9yTm90aWZpY2F0aW9uICE9PSAwO1xuXHRjb25zdCBzdWJzY3JpcHRpb25zID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kTm90aWZpY2F0aW9uUHJlZmVyZW5jZXNCeVJvb20ocm9vbS5faWQsIGRpc2FibGVBbGxNZXNzYWdlTm90aWZpY2F0aW9ucyk7XG5cdGNvbnN0IHVzZXJJZHMgPSBbXTtcblx0c3Vic2NyaXB0aW9ucy5mb3JFYWNoKChzKSA9PiB7XG5cdFx0dXNlcklkcy5wdXNoKHMudS5faWQpO1xuXHR9KTtcblx0Y29uc3QgdXNlcnMgPSB7fTtcblx0Um9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZFVzZXJzQnlJZHModXNlcklkcywgeyBmaWVsZHM6IHsgJ3NldHRpbmdzLnByZWZlcmVuY2VzJzogMSB9IH0pLmZvckVhY2goKHVzZXIpID0+IHtcblx0XHR1c2Vyc1t1c2VyLl9pZF0gPSB1c2VyO1xuXHR9KTtcblxuXHRzdWJzY3JpcHRpb25zLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHtcblx0XHRpZiAoc3Vic2NyaXB0aW9uLmRpc2FibGVOb3RpZmljYXRpb25zKSB7XG5cdFx0XHRzZXR0aW5ncy5kb250Tm90aWZ5RGVza3RvcFVzZXJzLnB1c2goc3Vic2NyaXB0aW9uLnUuX2lkKTtcblx0XHRcdHNldHRpbmdzLmRvbnROb3RpZnlNb2JpbGVVc2Vycy5wdXNoKHN1YnNjcmlwdGlvbi51Ll9pZCk7XG5cdFx0XHRzZXR0aW5ncy5kb250Tm90aWZ5QXVkaW9Vc2Vycy5wdXNoKHN1YnNjcmlwdGlvbi51Ll9pZCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3Qge1xuXHRcdFx0YXVkaW9Ob3RpZmljYXRpb25zID0gUm9ja2V0Q2hhdC5nZXRVc2VyUHJlZmVyZW5jZSh1c2Vyc1tzdWJzY3JpcHRpb24udS5faWRdLCAnYXVkaW9Ob3RpZmljYXRpb25zJyksXG5cdFx0XHRkZXNrdG9wTm90aWZpY2F0aW9ucyA9IFJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UodXNlcnNbc3Vic2NyaXB0aW9uLnUuX2lkXSwgJ2Rlc2t0b3BOb3RpZmljYXRpb25zJyksXG5cdFx0XHRtb2JpbGVQdXNoTm90aWZpY2F0aW9ucyA9IFJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UodXNlcnNbc3Vic2NyaXB0aW9uLnUuX2lkXSwgJ21vYmlsZU5vdGlmaWNhdGlvbnMnKVxuXHRcdH0gPSBzdWJzY3JpcHRpb247XG5cblx0XHRpZiAoYXVkaW9Ob3RpZmljYXRpb25zID09PSAnYWxsJyAmJiAhZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zKSB7XG5cdFx0XHRzZXR0aW5ncy5hbHdheXNOb3RpZnlBdWRpb1VzZXJzLnB1c2goc3Vic2NyaXB0aW9uLnUuX2lkKTtcblx0XHR9XG5cdFx0aWYgKGRlc2t0b3BOb3RpZmljYXRpb25zID09PSAnYWxsJyAmJiAhZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zKSB7XG5cdFx0XHRzZXR0aW5ncy5hbHdheXNOb3RpZnlEZXNrdG9wVXNlcnMucHVzaChzdWJzY3JpcHRpb24udS5faWQpO1xuXHRcdH0gZWxzZSBpZiAoZGVza3RvcE5vdGlmaWNhdGlvbnMgPT09ICdub3RoaW5nJykge1xuXHRcdFx0c2V0dGluZ3MuZG9udE5vdGlmeURlc2t0b3BVc2Vycy5wdXNoKHN1YnNjcmlwdGlvbi51Ll9pZCk7XG5cdFx0fVxuXHRcdGlmIChtb2JpbGVQdXNoTm90aWZpY2F0aW9ucyA9PT0gJ2FsbCcgJiYgIWRpc2FibGVBbGxNZXNzYWdlTm90aWZpY2F0aW9ucykge1xuXHRcdFx0c2V0dGluZ3MuYWx3YXlzTm90aWZ5TW9iaWxlVXNlcnMucHVzaChzdWJzY3JpcHRpb24udS5faWQpO1xuXHRcdH0gZWxzZSBpZiAobW9iaWxlUHVzaE5vdGlmaWNhdGlvbnMgPT09ICdub3RoaW5nJykge1xuXHRcdFx0c2V0dGluZ3MuZG9udE5vdGlmeU1vYmlsZVVzZXJzLnB1c2goc3Vic2NyaXB0aW9uLnUuX2lkKTtcblx0XHR9XG5cblx0XHRzZXR0aW5ncy5hdWRpb05vdGlmaWNhdGlvblZhbHVlc1tzdWJzY3JpcHRpb24udS5faWRdID0gc3Vic2NyaXB0aW9uLmF1ZGlvTm90aWZpY2F0aW9uVmFsdWU7XG5cdFx0c2V0dGluZ3MuZGVza3RvcE5vdGlmaWNhdGlvbkR1cmF0aW9uc1tzdWJzY3JpcHRpb24udS5faWRdID0gc3Vic2NyaXB0aW9uLmRlc2t0b3BOb3RpZmljYXRpb25EdXJhdGlvbjtcblx0fSk7XG5cdGxldCB1c2VySWRzRm9yQXVkaW8gPSBbXTtcblx0bGV0IHVzZXJJZHNUb05vdGlmeSA9IFtdO1xuXHRsZXQgdXNlcklkc1RvUHVzaE5vdGlmeSA9IFtdO1xuXHRjb25zdCBtZW50aW9ucyA9IFtdO1xuXHRjb25zdCBhbHdheXNOb3RpZnlNb2JpbGVCb29sZWFuID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ05vdGlmaWNhdGlvbnNfQWx3YXlzX05vdGlmeV9Nb2JpbGUnKTtcblxuXHRjb25zdCB1c2Vyc1dpdGhIaWdobGlnaHRzID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZFVzZXJzQnlVc2VybmFtZXNXaXRoSGlnaGxpZ2h0cyhyb29tLnVzZXJuYW1lcywgeyBmaWVsZHM6IHsgJ19pZCc6IDEsICdzZXR0aW5ncy5wcmVmZXJlbmNlcy5oaWdobGlnaHRzJzogMSB9fSkuZmV0Y2goKVxuXHRcdC5maWx0ZXIodXNlciA9PiBtZXNzYWdlQ29udGFpbnNIaWdobGlnaHQobWVzc2FnZSwgdXNlci5zZXR0aW5ncy5wcmVmZXJlbmNlcy5oaWdobGlnaHRzKSk7XG5cblx0bGV0IHB1c2hfbWVzc2FnZSA9ICcgJztcblx0Ly9TZXQgdmFyaWFibGVzIGRlcGVuZGluZyBvbiBQdXNoIE5vdGlmaWNhdGlvbiBzZXR0aW5nc1xuXHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1B1c2hfc2hvd19tZXNzYWdlJykpIHtcblx0XHRwdXNoX21lc3NhZ2UgPSBwYXJzZU1lc3NhZ2VUZXh0KG1lc3NhZ2UsIHVzZXJJZCk7XG5cdH1cblxuXHRsZXQgcHVzaF91c2VybmFtZSA9ICcnO1xuXHRsZXQgcHVzaF9yb29tID0gJyc7XG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnUHVzaF9zaG93X3VzZXJuYW1lX3Jvb20nKSkge1xuXHRcdHB1c2hfdXNlcm5hbWUgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHB1c2hfcm9vbSA9IGAjJHsgcm9vbS5uYW1lIH1gO1xuXHR9XG5cblx0aWYgKHJvb20udCA9PSBudWxsIHx8IHJvb20udCA9PT0gJ2QnKSB7XG5cdFx0Y29uc3QgdXNlck9mTWVudGlvbklkID0gbWVzc2FnZS5yaWQucmVwbGFjZShtZXNzYWdlLnUuX2lkLCAnJyk7XG5cdFx0Y29uc3QgdXNlck9mTWVudGlvbiA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmUoe1xuXHRcdFx0X2lkOiB1c2VyT2ZNZW50aW9uSWRcblx0XHR9LCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0dXNlcm5hbWU6IDEsXG5cdFx0XHRcdHN0YXR1c0Nvbm5lY3Rpb246IDFcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEFsd2F5cyBub3RpZnkgU2FuZHN0b3JtXG5cdFx0aWYgKHVzZXJPZk1lbnRpb24gIT0gbnVsbCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5TYW5kc3Rvcm0ubm90aWZ5KG1lc3NhZ2UsIFt1c2VyT2ZNZW50aW9uLl9pZF0sXG5cdFx0XHRcdGBAJHsgdXNlci51c2VybmFtZSB9OiAkeyBtZXNzYWdlLm1zZyB9YCwgJ3ByaXZhdGVNZXNzYWdlJyk7XG5cblx0XHRcdGlmIChjYW5CZU5vdGlmaWVkKHVzZXJPZk1lbnRpb25JZCwgJ2Rlc2t0b3AnKSkge1xuXHRcdFx0XHRjb25zdCBkdXJhdGlvbiA9IHNldHRpbmdzLmRlc2t0b3BOb3RpZmljYXRpb25EdXJhdGlvbnNbdXNlck9mTWVudGlvbi5faWRdO1xuXHRcdFx0XHRub3RpZnlEZXNrdG9wVXNlcih1c2VyT2ZNZW50aW9uLl9pZCwgdXNlciwgbWVzc2FnZSwgcm9vbSwgZHVyYXRpb24pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY2FuQmVOb3RpZmllZCh1c2VyT2ZNZW50aW9uSWQsICdtb2JpbGUnKSkge1xuXHRcdFx0XHRpZiAoUHVzaC5lbmFibGVkID09PSB0cnVlICYmICh1c2VyT2ZNZW50aW9uLnN0YXR1c0Nvbm5lY3Rpb24gIT09ICdvbmxpbmUnIHx8IGFsd2F5c05vdGlmeU1vYmlsZUJvb2xlYW4gPT09IHRydWUpKSB7XG5cdFx0XHRcdFx0Um9ja2V0Q2hhdC5QdXNoTm90aWZpY2F0aW9uLnNlbmQoe1xuXHRcdFx0XHRcdFx0cm9vbUlkOiBtZXNzYWdlLnJpZCxcblx0XHRcdFx0XHRcdHVzZXJuYW1lOiBwdXNoX3VzZXJuYW1lLFxuXHRcdFx0XHRcdFx0bWVzc2FnZTogcHVzaF9tZXNzYWdlLFxuXHRcdFx0XHRcdFx0YmFkZ2U6IGdldEJhZGdlQ291bnQodXNlck9mTWVudGlvbi5faWQpLFxuXHRcdFx0XHRcdFx0cGF5bG9hZDoge1xuXHRcdFx0XHRcdFx0XHRob3N0OiBNZXRlb3IuYWJzb2x1dGVVcmwoKSxcblx0XHRcdFx0XHRcdFx0cmlkOiBtZXNzYWdlLnJpZCxcblx0XHRcdFx0XHRcdFx0c2VuZGVyOiBtZXNzYWdlLnUsXG5cdFx0XHRcdFx0XHRcdHR5cGU6IHJvb20udCxcblx0XHRcdFx0XHRcdFx0bmFtZTogcm9vbS5uYW1lXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dXNlcnNUbzoge1xuXHRcdFx0XHRcdFx0XHR1c2VySWQ6IHVzZXJPZk1lbnRpb24uX2lkXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0Y2F0ZWdvcnk6IGNhblNlbmRNZXNzYWdlVG9Sb29tKHJvb20sIHVzZXJPZk1lbnRpb24udXNlcm5hbWUpID8gQ0FURUdPUllfTUVTU0FHRSA6IENBVEVHT1JZX01FU1NBR0VfTk9SRVBMWVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHJldHVybiBtZXNzYWdlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cdFx0Y29uc3QgbWVudGlvbklkcyA9IChtZXNzYWdlLm1lbnRpb25zIHx8IFtdKS5tYXAoKHtfaWR9KSA9PiBfaWQpO1xuXHRcdGNvbnN0IHRvQWxsID0gbWVudGlvbklkcy5pbmNsdWRlcygnYWxsJyk7XG5cdFx0Y29uc3QgdG9IZXJlID0gbWVudGlvbklkcy5pbmNsdWRlcygnaGVyZScpO1xuXG5cdFx0aWYgKG1lbnRpb25JZHMubGVuZ3RoICsgc2V0dGluZ3MuYWx3YXlzTm90aWZ5RGVza3RvcFVzZXJzLmxlbmd0aCA+IDApIHtcblx0XHRcdGxldCBkZXNrdG9wTWVudGlvbklkcyA9IF8udW5pb24obWVudGlvbklkcywgc2V0dGluZ3MuYWx3YXlzTm90aWZ5RGVza3RvcFVzZXJzKTtcblx0XHRcdGRlc2t0b3BNZW50aW9uSWRzID0gXy5kaWZmZXJlbmNlKGRlc2t0b3BNZW50aW9uSWRzLCBzZXR0aW5ncy5kb250Tm90aWZ5RGVza3RvcFVzZXJzKTtcblxuXHRcdFx0bGV0IHVzZXJzT2ZEZXNrdG9wTWVudGlvbnMgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kKHtcblx0XHRcdFx0X2lkOiB7XG5cdFx0XHRcdFx0JGluOiBkZXNrdG9wTWVudGlvbklkc1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB7XG5cdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdF9pZDogMSxcblx0XHRcdFx0XHR1c2VybmFtZTogMSxcblx0XHRcdFx0XHRhY3RpdmU6IDFcblx0XHRcdFx0fVxuXHRcdFx0fSkuZmV0Y2goKTtcblx0XHRcdG1lbnRpb25zLnB1c2goLi4udXNlcnNPZkRlc2t0b3BNZW50aW9ucyk7XG5cdFx0XHRpZiAocm9vbS50ICE9PSAnYycpIHtcblx0XHRcdFx0dXNlcnNPZkRlc2t0b3BNZW50aW9ucyA9IF8ucmVqZWN0KHVzZXJzT2ZEZXNrdG9wTWVudGlvbnMsICh1c2Vyc09mTWVudGlvbkl0ZW0pID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gcm9vbS51c2VybmFtZXMuaW5kZXhPZih1c2Vyc09mTWVudGlvbkl0ZW0udXNlcm5hbWUpID09PSAtMTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdHVzZXJJZHNUb05vdGlmeSA9IF8ucGx1Y2sodXNlcnNPZkRlc2t0b3BNZW50aW9ucywgJ19pZCcpO1xuXHRcdH1cblxuXHRcdGlmIChtZW50aW9uSWRzLmxlbmd0aCArIHNldHRpbmdzLmFsd2F5c05vdGlmeU1vYmlsZVVzZXJzLmxlbmd0aCA+IDApIHtcblx0XHRcdGxldCBtb2JpbGVNZW50aW9uSWRzID0gXy51bmlvbihtZW50aW9uSWRzLCBzZXR0aW5ncy5hbHdheXNOb3RpZnlNb2JpbGVVc2Vycyk7XG5cdFx0XHRtb2JpbGVNZW50aW9uSWRzID0gXy5kaWZmZXJlbmNlKG1vYmlsZU1lbnRpb25JZHMsIHNldHRpbmdzLmRvbnROb3RpZnlNb2JpbGVVc2Vycyk7XG5cblx0XHRcdGNvbnN0IHVzZXJzT2ZNb2JpbGVNZW50aW9uc1F1ZXJ5ID0ge1xuXHRcdFx0XHRfaWQ6IHtcblx0XHRcdFx0XHQkaW46IG1vYmlsZU1lbnRpb25JZHNcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKGFsd2F5c05vdGlmeU1vYmlsZUJvb2xlYW4gIT09IHRydWUpIHtcblx0XHRcdFx0dXNlcnNPZk1vYmlsZU1lbnRpb25zUXVlcnkuc3RhdHVzQ29ubmVjdGlvbiA9IHsgJG5lOiAnb25saW5lJyB9O1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgdXNlcnNPZk1vYmlsZU1lbnRpb25zID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZCh1c2Vyc09mTW9iaWxlTWVudGlvbnNRdWVyeSwge1xuXHRcdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0XHRfaWQ6IDEsXG5cdFx0XHRcdFx0dXNlcm5hbWU6IDEsXG5cdFx0XHRcdFx0c3RhdHVzQ29ubmVjdGlvbjogMSxcblx0XHRcdFx0XHRhY3RpdmU6IDFcblx0XHRcdFx0fVxuXHRcdFx0fSkuZmV0Y2goKTtcblxuXHRcdFx0bWVudGlvbnMucHVzaCguLi51c2Vyc09mTW9iaWxlTWVudGlvbnMpO1xuXHRcdFx0aWYgKHJvb20udCAhPT0gJ2MnKSB7XG5cdFx0XHRcdHVzZXJzT2ZNb2JpbGVNZW50aW9ucyA9IF8ucmVqZWN0KHVzZXJzT2ZNb2JpbGVNZW50aW9ucywgdXNlcnNPZk1lbnRpb25JdGVtID0+ICFyb29tLnVzZXJuYW1lcy5pbmNsdWRlcyh1c2Vyc09mTWVudGlvbkl0ZW0udXNlcm5hbWUpKTtcblx0XHRcdH1cblxuXHRcdFx0dXNlcklkc1RvUHVzaE5vdGlmeSA9IHVzZXJzT2ZNb2JpbGVNZW50aW9ucy5tYXAodXNlck1vYmlsZSA9PiB7XG5cdFx0XHRcdHB1c2hVc2VybmFtZXNbdXNlck1vYmlsZS5faWRdID0gdXNlck1vYmlsZS51c2VybmFtZTtcblx0XHRcdFx0cmV0dXJuIHVzZXJNb2JpbGUuX2lkO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKG1lbnRpb25JZHMubGVuZ3RoICsgc2V0dGluZ3MuYWx3YXlzTm90aWZ5QXVkaW9Vc2Vycy5sZW5ndGggPiAwKSB7XG5cdFx0XHRsZXQgYXVkaW9NZW50aW9uSWRzID0gXy51bmlvbihtZW50aW9uSWRzLCBzZXR0aW5ncy5hbHdheXNOb3RpZnlBdWRpb1VzZXJzKTtcblx0XHRcdGF1ZGlvTWVudGlvbklkcyA9IF8uZGlmZmVyZW5jZShhdWRpb01lbnRpb25JZHMsIHVzZXJJZHNUb05vdGlmeSk7XG5cblx0XHRcdGxldCB1c2Vyc09mQXVkaW9NZW50aW9ucyA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmQoeyBfaWQ6IHsgJGluOiBhdWRpb01lbnRpb25JZHMgfSwgc3RhdHVzQ29ubmVjdGlvbjoge1xuXHRcdFx0XHQkbmU6J29mZmxpbmUnXG5cdFx0XHR9IH0sIHtcblx0XHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdFx0X2lkOiAxLFxuXHRcdFx0XHRcdHVzZXJuYW1lOiAxLFxuXHRcdFx0XHRcdGFjdGl2ZTogMVxuXHRcdFx0XHR9XG5cdFx0XHR9KS5mZXRjaCgpO1xuXHRcdFx0bWVudGlvbnMucHVzaCguLi51c2Vyc09mQXVkaW9NZW50aW9ucyk7XG5cdFx0XHRpZiAocm9vbS50ICE9PSAnYycpIHtcblx0XHRcdFx0dXNlcnNPZkF1ZGlvTWVudGlvbnMgPSBfLnJlamVjdCh1c2Vyc09mQXVkaW9NZW50aW9ucywgKHVzZXJzT2ZNZW50aW9uSXRlbSkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiByb29tLnVzZXJuYW1lcy5pbmRleE9mKHVzZXJzT2ZNZW50aW9uSXRlbS51c2VybmFtZSkgPT09IC0xO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0dXNlcklkc0ZvckF1ZGlvID0gXy5wbHVjayh1c2Vyc09mQXVkaW9NZW50aW9ucywgJ19pZCcpO1xuXHRcdH1cblxuXHRcdGlmIChyb29tLnQgPT09ICdjJykge1xuXHRcdFx0bWVudGlvbnMuZmlsdGVyKHVzZXIgPT4gIXJvb20udXNlcm5hbWVzLmluY2x1ZGVzKHVzZXIudXNlcm5hbWUpKVxuXHRcdFx0XHQuZm9yRWFjaCh1c2VyID0+Y2FsbEpvaW4odXNlciwgcm9vbS5faWQpKTtcblx0XHR9XG5cblx0XHRpZiAoW3RvQWxsLCB0b0hlcmVdLnNvbWUoZSA9PiBlKSAmJiByb29tLnVzZXJuYW1lcyAmJiByb29tLnVzZXJuYW1lcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kKHtcblx0XHRcdFx0dXNlcm5hbWU6IHsgJGluOiByb29tLnVzZXJuYW1lcyB9LFxuXHRcdFx0XHRfaWQ6IHsgJG5lOiB1c2VyLl9pZCB9XG5cdFx0XHR9LCB7XG5cdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdF9pZDogMSxcblx0XHRcdFx0XHR1c2VybmFtZTogMSxcblx0XHRcdFx0XHRzdGF0dXM6IDEsXG5cdFx0XHRcdFx0c3RhdHVzQ29ubmVjdGlvbjogMVxuXHRcdFx0XHR9XG5cdFx0XHR9KS5mb3JFYWNoKGZ1bmN0aW9uKHVzZXIpIHtcblx0XHRcdFx0aWYgKFsnb25saW5lJywgJ2F3YXknLCAnYnVzeSddLmluY2x1ZGVzKHVzZXIuc3RhdHVzKSAmJiAhKHNldHRpbmdzLmRvbnROb3RpZnlEZXNrdG9wVXNlcnMgfHwgW10pLmluY2x1ZGVzKHVzZXIuX2lkKSkge1xuXHRcdFx0XHRcdHVzZXJJZHNUb05vdGlmeS5wdXNoKHVzZXIuX2lkKTtcblx0XHRcdFx0XHR1c2VySWRzRm9yQXVkaW8ucHVzaCh1c2VyLl9pZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRvQWxsICYmIHVzZXIuc3RhdHVzQ29ubmVjdGlvbiAhPT0gJ29ubGluZScgJiYgIShzZXR0aW5ncy5kb250Tm90aWZ5TW9iaWxlVXNlcnMgfHwgW10pLmluY2x1ZGVzKHVzZXIuX2lkKSkge1xuXHRcdFx0XHRcdHB1c2hVc2VybmFtZXNbdXNlci5faWRdID0gdXNlci51c2VybmFtZTtcblx0XHRcdFx0XHRyZXR1cm4gdXNlcklkc1RvUHVzaE5vdGlmeS5wdXNoKHVzZXIuX2lkKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodG9BbGwgJiYgdXNlci5zdGF0dXNDb25uZWN0aW9uICE9PSAnb25saW5lJykge1xuXHRcdFx0XHRcdHVzZXJJZHNGb3JBdWRpby5wdXNoKHVzZXIuX2lkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHVzZXJzV2l0aEhpZ2hsaWdodHMubGVuZ3RoID4gMCkge1xuXHRcdFx0Y29uc3QgaGlnaGxpZ2h0c0lkcyA9IF8ucGx1Y2sodXNlcnNXaXRoSGlnaGxpZ2h0cywgJ19pZCcpO1xuXHRcdFx0dXNlcklkc0ZvckF1ZGlvID0gdXNlcklkc0ZvckF1ZGlvLmNvbmNhdChoaWdobGlnaHRzSWRzKTtcblx0XHRcdHVzZXJJZHNUb05vdGlmeSA9IHVzZXJJZHNUb05vdGlmeS5jb25jYXQoaGlnaGxpZ2h0c0lkcyk7XG5cdFx0XHR1c2VySWRzVG9QdXNoTm90aWZ5ID0gdXNlcklkc1RvUHVzaE5vdGlmeS5jb25jYXQoaGlnaGxpZ2h0c0lkcyk7XG5cdFx0fVxuXG5cdFx0dXNlcklkc1RvTm90aWZ5ID0gXy53aXRob3V0KF8uY29tcGFjdChfLnVuaXF1ZSh1c2VySWRzVG9Ob3RpZnkpKSwgbWVzc2FnZS51Ll9pZCk7XG5cdFx0dXNlcklkc1RvUHVzaE5vdGlmeSA9IF8ud2l0aG91dChfLmNvbXBhY3QoXy51bmlxdWUodXNlcklkc1RvUHVzaE5vdGlmeSkpLCBtZXNzYWdlLnUuX2lkKTtcblx0XHR1c2VySWRzRm9yQXVkaW8gPSBfLndpdGhvdXQoXy5jb21wYWN0KF8udW5pcXVlKHVzZXJJZHNGb3JBdWRpbykpLCBtZXNzYWdlLnUuX2lkKTtcblxuXHRcdGZvciAoY29uc3QgdXNlcnNPZk1lbnRpb25JZCBvZiB1c2VySWRzVG9Ob3RpZnkpIHtcblx0XHRcdGNvbnN0IGR1cmF0aW9uID0gc2V0dGluZ3MuZGVza3RvcE5vdGlmaWNhdGlvbkR1cmF0aW9uc1t1c2Vyc09mTWVudGlvbklkXTtcblx0XHRcdG5vdGlmeURlc2t0b3BVc2VyKHVzZXJzT2ZNZW50aW9uSWQsIHVzZXIsIG1lc3NhZ2UsIHJvb20sIGR1cmF0aW9uKTtcblx0XHR9XG5cdFx0Zm9yIChjb25zdCB1c2Vyc09mTWVudGlvbklkIG9mIHVzZXJJZHNGb3JBdWRpbykge1xuXHRcdFx0bm90aWZ5QXVkaW9Vc2VyKHVzZXJzT2ZNZW50aW9uSWQsIG1lc3NhZ2UsIHJvb20pO1xuXHRcdH1cblx0XHRzZW5kUHVzaE5vdGlmaWNhdGlvbnModXNlcklkc1RvUHVzaE5vdGlmeSwgbWVzc2FnZSwgcm9vbSwgcHVzaF9yb29tLCBwdXNoX3VzZXJuYW1lLCBwdXNoX21lc3NhZ2UsIHB1c2hVc2VybmFtZXMpO1xuXG5cdFx0Y29uc3QgYWxsVXNlcklkc1RvTm90aWZ5ID0gXy51bmlxdWUodXNlcklkc1RvTm90aWZ5LmNvbmNhdCh1c2VySWRzVG9QdXNoTm90aWZ5KSk7XG5cdFx0Um9ja2V0Q2hhdC5TYW5kc3Rvcm0ubm90aWZ5KG1lc3NhZ2UsIGFsbFVzZXJJZHNUb05vdGlmeSxcblx0XHRcdGBAJHsgdXNlci51c2VybmFtZSB9OiAkeyBtZXNzYWdlLm1zZyB9YCwgcm9vbS50ID09PSAncCcgPyAncHJpdmF0ZU1lc3NhZ2UnIDogJ21lc3NhZ2UnKTtcblx0fVxuXG5cdHJldHVybiBtZXNzYWdlO1xuXG59LCBSb2NrZXRDaGF0LmNhbGxiYWNrcy5wcmlvcml0eS5MT1csICdzZW5kTm90aWZpY2F0aW9uT25NZXNzYWdlJyk7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmNvbnN0IGRucyA9IE5wbS5yZXF1aXJlKCdkbnMnKTtcblxubGV0IGVtYWlsRG9tYWluQmxhY2tMaXN0ID0gW107XG5sZXQgZW1haWxEb21haW5XaGl0ZUxpc3QgPSBbXTtcbmxldCB1c2VEZWZhdWx0QmxhY2tMaXN0ID0gZmFsc2U7XG5sZXQgdXNlRE5TRG9tYWluQ2hlY2sgPSBmYWxzZTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0Jsb2NrZWREb21haW5zTGlzdCcsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0ZW1haWxEb21haW5CbGFja0xpc3QgPSBfLm1hcCh2YWx1ZS5zcGxpdCgnLCcpLCAoZG9tYWluKSA9PiBkb21haW4udHJpbSgpKTtcbn0pO1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0FsbG93ZWREb21haW5zTGlzdCcsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0ZW1haWxEb21haW5XaGl0ZUxpc3QgPSBfLm1hcCh2YWx1ZS5zcGxpdCgnLCcpLCAoZG9tYWluKSA9PiBkb21haW4udHJpbSgpKTtcbn0pO1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX1VzZURlZmF1bHRCbG9ja2VkRG9tYWluc0xpc3QnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdHVzZURlZmF1bHRCbGFja0xpc3QgPSB2YWx1ZTtcbn0pO1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX1VzZUROU0RvbWFpbkNoZWNrJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHR1c2VETlNEb21haW5DaGVjayA9IHZhbHVlO1xufSk7XG5cblJvY2tldENoYXQudmFsaWRhdGVFbWFpbERvbWFpbiA9IGZ1bmN0aW9uKGVtYWlsKSB7XG5cdGNvbnN0IGVtYWlsVmFsaWRhdGlvbiA9IC9eW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvO1xuXHRpZiAoIWVtYWlsVmFsaWRhdGlvbi50ZXN0KGVtYWlsKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtZW1haWwnLCBgSW52YWxpZCBlbWFpbCAkeyBlbWFpbCB9YCwgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQudmFsaWRhdGVFbWFpbERvbWFpbicsIGVtYWlsIH0pO1xuXHR9XG5cblx0Y29uc3QgZW1haWxEb21haW4gPSBlbWFpbC5zdWJzdHIoZW1haWwubGFzdEluZGV4T2YoJ0AnKSArIDEpO1xuXG5cdC8vIGlmIG5vdCBpbiB3aGl0ZWxpc3Rcblx0aWYgKGVtYWlsRG9tYWluV2hpdGVMaXN0LmluZGV4T2YoZW1haWxEb21haW4pID09PSAtMSkge1xuXHRcdGlmIChlbWFpbERvbWFpbkJsYWNrTGlzdC5pbmRleE9mKGVtYWlsRG9tYWluKSAhPT0gLTEgfHwgKHVzZURlZmF1bHRCbGFja0xpc3QgJiYgUm9ja2V0Q2hhdC5lbWFpbERvbWFpbkRlZmF1bHRCbGFja0xpc3QuaW5kZXhPZihlbWFpbERvbWFpbikgIT09IC0xKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItZW1haWwtZG9tYWluLWJsYWNrbGlzdGVkJywgJ1RoZSBlbWFpbCBkb21haW4gaXMgYmxhY2tsaXN0ZWQnLCB7IGZ1bmN0aW9uOiAnUm9ja2V0Q2hhdC52YWxpZGF0ZUVtYWlsRG9tYWluJyB9KTtcblx0XHR9XG5cdH1cblxuXHRpZiAodXNlRE5TRG9tYWluQ2hlY2spIHtcblx0XHR0cnkge1xuXHRcdFx0TWV0ZW9yLndyYXBBc3luYyhkbnMucmVzb2x2ZU14KShlbWFpbERvbWFpbik7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1kb21haW4nLCAnSW52YWxpZCBkb21haW4nLCB7IGZ1bmN0aW9uOiAnUm9ja2V0Q2hhdC52YWxpZGF0ZUVtYWlsRG9tYWluJyB9KTtcblx0XHR9XG5cdH1cbn07XG4iLCIvKlxuXHRXaGF0IGlzIHRoaXMgZmlsZT8gR3JlYXQgcXVlc3Rpb24hIFRvIG1ha2UgUm9ja2V0LkNoYXQgbW9yZSBcIm1vZHVsYXJcIlxuXHRhbmQgdG8gbWFrZSB0aGUgXCJyb2NrZXRjaGF0OmxpYlwiIHBhY2thZ2UgbW9yZSBvZiBhIGNvcmUgcGFja2FnZVxuXHR3aXRoIHRoZSBsaWJyYXJpZXMsIHRoaXMgaW5kZXggZmlsZSBjb250YWlucyB0aGUgZXhwb3J0ZWQgbWVtYmVyc1xuXHRmb3IgdGhlICpzZXJ2ZXIqIHBpZWNlcyBvZiBjb2RlIHdoaWNoIGRvZXMgaW5jbHVkZSB0aGUgc2hhcmVkXG5cdGxpYnJhcnkgZmlsZXMuXG4qL1xuXG5pbXBvcnQgeyBSb29tU2V0dGluZ3NFbnVtLCBSb29tVHlwZUNvbmZpZywgUm9vbVR5cGVSb3V0ZUNvbmZpZyB9IGZyb20gJy4uLy4uL2xpYi9Sb29tVHlwZUNvbmZpZyc7XG5cbmV4cG9ydCB7XG5cdFJvb21TZXR0aW5nc0VudW0sXG5cdFJvb21UeXBlQ29uZmlnLFxuXHRSb29tVHlwZVJvdXRlQ29uZmlnXG59O1xuIiwiaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuZnVuY3Rpb24gaGFzRG9ja2VyRW52KCkge1xuXHR0cnkge1xuXHRcdGZzLnN0YXRTeW5jKCcvLmRvY2tlcmVudicpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGFzRG9ja2VyQ0dyb3VwKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBmcy5yZWFkRmlsZVN5bmMoJy9wcm9jL3NlbGYvY2dyb3VwJywgJ3V0ZjgnKS5pbmRleE9mKCdkb2NrZXInKSAhPT0gLTE7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5mdW5jdGlvbiBjaGVjaygpIHtcblx0cmV0dXJuIGhhc0RvY2tlckVudigpIHx8IGhhc0RvY2tlckNHcm91cCgpO1xufVxuXG5sZXQgaXNEb2NrZXI7XG5Sb2NrZXRDaGF0LmlzRG9ja2VyID0gZnVuY3Rpb24oKSB7XG5cdGlmIChpc0RvY2tlciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0aXNEb2NrZXIgPSBjaGVjaygpO1xuXHR9XG5cblx0cmV0dXJuIGlzRG9ja2VyO1xufTtcbiIsIlJvY2tldENoYXQuYWRkVXNlclRvRGVmYXVsdENoYW5uZWxzID0gZnVuY3Rpb24odXNlciwgc2lsZW5jZWQpIHtcblx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdiZWZvcmVKb2luRGVmYXVsdENoYW5uZWxzJywgdXNlcik7XG5cdGNvbnN0IGRlZmF1bHRSb29tcyA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRCeURlZmF1bHRBbmRUeXBlcyh0cnVlLCBbJ2MnLCAncCddLCB7ZmllbGRzOiB7dXNlcm5hbWVzOiAwfX0pLmZldGNoKCk7XG5cdGRlZmF1bHRSb29tcy5mb3JFYWNoKChyb29tKSA9PiB7XG5cblx0XHQvLyBwdXQgdXNlciBpbiBkZWZhdWx0IHJvb21zXG5cdFx0Y29uc3QgbXV0ZWQgPSByb29tLnJvICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlci5faWQsICdwb3N0LXJlYWRvbmx5Jyk7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuYWRkVXNlcm5hbWVCeUlkKHJvb20uX2lkLCB1c2VyLnVzZXJuYW1lLCBtdXRlZCk7XG5cblx0XHRpZiAoIVJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKHJvb20uX2lkLCB1c2VyLl9pZCkpIHtcblxuXHRcdFx0Ly8gQWRkIGEgc3Vic2NyaXB0aW9uIHRvIHRoaXMgdXNlclxuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5jcmVhdGVXaXRoUm9vbUFuZFVzZXIocm9vbSwgdXNlciwge1xuXHRcdFx0XHR0czogbmV3IERhdGUoKSxcblx0XHRcdFx0b3BlbjogdHJ1ZSxcblx0XHRcdFx0YWxlcnQ6IHRydWUsXG5cdFx0XHRcdHVucmVhZDogMSxcblx0XHRcdFx0dXNlck1lbnRpb25zOiAxLFxuXHRcdFx0XHRncm91cE1lbnRpb25zOiAwXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSW5zZXJ0IHVzZXIgam9pbmVkIG1lc3NhZ2Vcblx0XHRcdGlmICghc2lsZW5jZWQpIHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuY3JlYXRlVXNlckpvaW5XaXRoUm9vbUlkQW5kVXNlcihyb29tLl9pZCwgdXNlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn07XG4iLCJSb2NrZXRDaGF0LmFkZFVzZXJUb1Jvb20gPSBmdW5jdGlvbihyaWQsIHVzZXIsIGludml0ZXIsIHNpbGVuY2VkKSB7XG5cdGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChyaWQpO1xuXG5cdC8vIENoZWNrIGlmIHVzZXIgaXMgYWxyZWFkeSBpbiByb29tXG5cdGNvbnN0IHN1YnNjcmlwdGlvbiA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKHJpZCwgdXNlci5faWQpO1xuXHRpZiAoc3Vic2NyaXB0aW9uKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKHJvb20udCA9PT0gJ2MnIHx8IHJvb20udCA9PT0gJ3AnKSB7XG5cdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdiZWZvcmVKb2luUm9vbScsIHVzZXIsIHJvb20pO1xuXHR9XG5cblx0Y29uc3QgbXV0ZWQgPSByb29tLnJvICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlci5faWQsICdwb3N0LXJlYWRvbmx5Jyk7XG5cdFJvY2tldENoYXQubW9kZWxzLlJvb21zLmFkZFVzZXJuYW1lQnlJZChyaWQsIHVzZXIudXNlcm5hbWUsIG11dGVkKTtcblx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5jcmVhdGVXaXRoUm9vbUFuZFVzZXIocm9vbSwgdXNlciwge1xuXHRcdHRzOiBub3csXG5cdFx0b3BlbjogdHJ1ZSxcblx0XHRhbGVydDogdHJ1ZSxcblx0XHR1bnJlYWQ6IDEsXG5cdFx0dXNlck1lbnRpb25zOiAxLFxuXHRcdGdyb3VwTWVudGlvbnM6IDBcblx0fSk7XG5cblx0aWYgKCFzaWxlbmNlZCkge1xuXHRcdGlmIChpbnZpdGVyKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5jcmVhdGVVc2VyQWRkZWRXaXRoUm9vbUlkQW5kVXNlcihyaWQsIHVzZXIsIHtcblx0XHRcdFx0dHM6IG5vdyxcblx0XHRcdFx0dToge1xuXHRcdFx0XHRcdF9pZDogaW52aXRlci5faWQsXG5cdFx0XHRcdFx0dXNlcm5hbWU6IGludml0ZXIudXNlcm5hbWVcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmNyZWF0ZVVzZXJKb2luV2l0aFJvb21JZEFuZFVzZXIocmlkLCB1c2VyLCB7IHRzOiBub3cgfSk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHJvb20udCA9PT0gJ2MnIHx8IHJvb20udCA9PT0gJ3AnKSB7XG5cdFx0TWV0ZW9yLmRlZmVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdhZnRlckpvaW5Sb29tJywgdXNlciwgcm9vbSk7XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCJSb2NrZXRDaGF0LmFyY2hpdmVSb29tID0gZnVuY3Rpb24ocmlkKSB7XG5cdFJvY2tldENoYXQubW9kZWxzLlJvb21zLmFyY2hpdmVCeUlkKHJpZCk7XG5cdFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuYXJjaGl2ZUJ5Um9vbUlkKHJpZCk7XG5cblx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdhZnRlclJvb21BcmNoaXZlZCcsIFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKHJpZCksIE1ldGVvci51c2VyKCkpO1xufTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0LmNoZWNrVXNlcm5hbWVBdmFpbGFiaWxpdHkgPSBmdW5jdGlvbih1c2VybmFtZSkge1xuXHRyZXR1cm4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0Jsb2NrZWRVc2VybmFtZUxpc3QnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0Y29uc3QgdXNlcm5hbWVCbGFja0xpc3QgPSBfLm1hcCh2YWx1ZS5zcGxpdCgnLCcpLCBmdW5jdGlvbih1c2VybmFtZSkge1xuXHRcdFx0cmV0dXJuIHVzZXJuYW1lLnRyaW0oKTtcblx0XHR9KTtcblx0XHRpZiAodXNlcm5hbWVCbGFja0xpc3QubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRpZiAodXNlcm5hbWVCbGFja0xpc3QuZXZlcnkocmVzdHJpY3RlZFVzZXJuYW1lID0+IHtcblx0XHRcdFx0Y29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBeJHsgcy5lc2NhcGVSZWdFeHAocmVzdHJpY3RlZFVzZXJuYW1lKSB9JGAsICdpJyk7XG5cdFx0XHRcdHJldHVybiAhcmVnZXgudGVzdChzLnRyaW0ocy5lc2NhcGVSZWdFeHAodXNlcm5hbWUpKSk7XG5cdFx0XHR9KSkge1xuXHRcdFx0XHRyZXR1cm4gIU1ldGVvci51c2Vycy5maW5kT25lKHtcblx0XHRcdFx0XHR1c2VybmFtZToge1xuXHRcdFx0XHRcdFx0JHJlZ2V4OiBuZXcgUmVnRXhwKGBeJHsgcy50cmltKHMuZXNjYXBlUmVnRXhwKHVzZXJuYW1lKSkgfSRgLCAnaScpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0pO1xufTtcbiIsImltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuUm9ja2V0Q2hhdC5jaGVja0VtYWlsQXZhaWxhYmlsaXR5ID0gZnVuY3Rpb24oZW1haWwpIHtcblx0cmV0dXJuICFNZXRlb3IudXNlcnMuZmluZE9uZSh7ICdlbWFpbHMuYWRkcmVzcyc6IHsgJHJlZ2V4IDogbmV3IFJlZ0V4cChgXiR7IHMudHJpbShzLmVzY2FwZVJlZ0V4cChlbWFpbCkpIH0kYCwgJ2knKSB9IH0pO1xufTtcbiIsIi8qIGdsb2JhbHMgUm9ja2V0Q2hhdCAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQuY3JlYXRlUm9vbSA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIG93bmVyLCBtZW1iZXJzLCByZWFkT25seSwgZXh0cmFEYXRhPXt9KSB7XG5cdG5hbWUgPSBzLnRyaW0obmFtZSk7XG5cdG93bmVyID0gcy50cmltKG93bmVyKTtcblx0bWVtYmVycyA9IFtdLmNvbmNhdChtZW1iZXJzKTtcblxuXHRpZiAoIW5hbWUpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLW5hbWUnLCAnSW52YWxpZCBuYW1lJywgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQuY3JlYXRlUm9vbScgfSk7XG5cdH1cblxuXHRvd25lciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeVVzZXJuYW1lKG93bmVyLCB7IGZpZWxkczogeyB1c2VybmFtZTogMSB9fSk7XG5cdGlmICghb3duZXIpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQuY3JlYXRlUm9vbScgfSk7XG5cdH1cblxuXHRjb25zdCBzbHVnaWZpZWRSb29tTmFtZSA9IFJvY2tldENoYXQuZ2V0VmFsaWRSb29tTmFtZShuYW1lKTtcblxuXHRjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXHRpZiAoIV8uY29udGFpbnMobWVtYmVycywgb3duZXIudXNlcm5hbWUpKSB7XG5cdFx0bWVtYmVycy5wdXNoKG93bmVyLnVzZXJuYW1lKTtcblx0fVxuXG5cdGlmICh0eXBlID09PSAnYycpIHtcblx0XHRSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ2JlZm9yZUNyZWF0ZUNoYW5uZWwnLCBvd25lciwge1xuXHRcdFx0dDogJ2MnLFxuXHRcdFx0bmFtZTogc2x1Z2lmaWVkUm9vbU5hbWUsXG5cdFx0XHRmbmFtZTogbmFtZSxcblx0XHRcdHRzOiBub3csXG5cdFx0XHRybzogcmVhZE9ubHkgPT09IHRydWUsXG5cdFx0XHRzeXNNZXM6IHJlYWRPbmx5ICE9PSB0cnVlLFxuXHRcdFx0dXNlcm5hbWVzOiBtZW1iZXJzLFxuXHRcdFx0dToge1xuXHRcdFx0XHRfaWQ6IG93bmVyLl9pZCxcblx0XHRcdFx0dXNlcm5hbWU6IG93bmVyLnVzZXJuYW1lXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRleHRyYURhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBleHRyYURhdGEsIHtcblx0XHR0czogbm93LFxuXHRcdHJvOiByZWFkT25seSA9PT0gdHJ1ZSxcblx0XHRzeXNNZXM6IHJlYWRPbmx5ICE9PSB0cnVlXG5cdH0pO1xuXG5cdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5jcmVhdGVXaXRoVHlwZU5hbWVVc2VyQW5kVXNlcm5hbWVzKHR5cGUsIHNsdWdpZmllZFJvb21OYW1lLCBuYW1lLCBvd25lciwgbWVtYmVycywgZXh0cmFEYXRhKTtcblxuXHRmb3IgKGNvbnN0IHVzZXJuYW1lIG9mIG1lbWJlcnMpIHtcblx0XHRjb25zdCBtZW1iZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlVc2VybmFtZSh1c2VybmFtZSwgeyBmaWVsZHM6IHsgdXNlcm5hbWU6IDEgfX0pO1xuXHRcdGlmICghbWVtYmVyKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHQvLyBtYWtlIGFsbCByb29tIG1lbWJlcnMgbXV0ZWQgYnkgZGVmYXVsdCwgdW5sZXNzIHRoZXkgaGF2ZSB0aGUgcG9zdC1yZWFkb25seSBwZXJtaXNzaW9uXG5cdFx0aWYgKHJlYWRPbmx5ID09PSB0cnVlICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24obWVtYmVyLl9pZCwgJ3Bvc3QtcmVhZG9ubHknKSkge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMubXV0ZVVzZXJuYW1lQnlSb29tSWQocm9vbS5faWQsIHVzZXJuYW1lKTtcblx0XHR9XG5cblx0XHRjb25zdCBleHRyYSA9IHsgb3BlbjogdHJ1ZSB9O1xuXG5cdFx0aWYgKHVzZXJuYW1lID09PSBvd25lci51c2VybmFtZSkge1xuXHRcdFx0ZXh0cmEubHMgPSBub3c7XG5cdFx0fVxuXG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5jcmVhdGVXaXRoUm9vbUFuZFVzZXIocm9vbSwgbWVtYmVyLCBleHRyYSk7XG5cdH1cblxuXHRSb2NrZXRDaGF0LmF1dGh6LmFkZFVzZXJSb2xlcyhvd25lci5faWQsIFsnb3duZXInXSwgcm9vbS5faWQpO1xuXG5cdGlmICh0eXBlID09PSAnYycpIHtcblx0XHRNZXRlb3IuZGVmZXIoKCkgPT4ge1xuXHRcdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdhZnRlckNyZWF0ZUNoYW5uZWwnLCBvd25lciwgcm9vbSk7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAodHlwZSA9PT0gJ3AnKSB7XG5cdFx0TWV0ZW9yLmRlZmVyKCgpID0+IHtcblx0XHRcdFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bignYWZ0ZXJDcmVhdGVQcml2YXRlR3JvdXAnLCBvd25lciwgcm9vbSk7XG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHJpZDogcm9vbS5faWQsXG5cdFx0bmFtZTogc2x1Z2lmaWVkUm9vbU5hbWVcblx0fTtcbn07XG4iLCIvKiBnbG9iYWxzIEZpbGVVcGxvYWQgKi9cblJvY2tldENoYXQuZGVsZXRlTWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHVzZXIpIHtcblx0Y29uc3Qga2VlcEhpc3RvcnkgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9LZWVwSGlzdG9yeScpO1xuXHRjb25zdCBzaG93RGVsZXRlZFN0YXR1cyA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX1Nob3dEZWxldGVkU3RhdHVzJyk7XG5cdGxldCBkZWxldGVkTXNnO1xuXG5cdGlmIChrZWVwSGlzdG9yeSkge1xuXHRcdGlmIChzaG93RGVsZXRlZFN0YXR1cykge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuY2xvbmVBbmRTYXZlQXNIaXN0b3J5QnlJZChtZXNzYWdlLl9pZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnNldEhpZGRlbkJ5SWQobWVzc2FnZS5faWQsIHRydWUpO1xuXHRcdH1cblxuXHRcdGlmIChtZXNzYWdlLmZpbGUgJiYgbWVzc2FnZS5maWxlLl9pZCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuVXBsb2Fkcy51cGRhdGUobWVzc2FnZS5maWxlLl9pZCwgeyAkc2V0OiB7IF9oaWRkZW46IHRydWUgfSB9KTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0aWYgKCFzaG93RGVsZXRlZFN0YXR1cykge1xuXHRcdFx0ZGVsZXRlZE1zZyA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRPbmVCeUlkKG1lc3NhZ2UuX2lkKTtcblx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnJlbW92ZUJ5SWQobWVzc2FnZS5faWQpO1xuXHRcdH1cblxuXHRcdGlmIChtZXNzYWdlLmZpbGUgJiYgbWVzc2FnZS5maWxlLl9pZCkge1xuXHRcdFx0RmlsZVVwbG9hZC5nZXRTdG9yZSgnVXBsb2FkcycpLmRlbGV0ZUJ5SWQobWVzc2FnZS5maWxlLl9pZCk7XG5cdFx0fVxuXG5cdFx0TWV0ZW9yLmRlZmVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdhZnRlckRlbGV0ZU1lc3NhZ2UnLCBkZWxldGVkTXNnKTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIHVwZGF0ZSBsYXN0IG1lc3NhZ2Vcblx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTdG9yZV9MYXN0X01lc3NhZ2UnKSkge1xuXHRcdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChtZXNzYWdlLnJpZCwgeyBmaWVsZHM6IHsgbGFzdE1lc3NhZ2U6IDEgfSB9KTtcblx0XHRpZiAoIXJvb20ubGFzdE1lc3NhZ2UgfHwgcm9vbS5sYXN0TWVzc2FnZS5faWQgPT09IG1lc3NhZ2UuX2lkKSB7XG5cdFx0XHRjb25zdCBsYXN0TWVzc2FnZSA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmdldExhc3RWaXNpYmxlTWVzc2FnZVNlbnRXaXRoTm9UeXBlQnlSb29tSWQobWVzc2FnZS5yaWQsIG1lc3NhZ2UuX2lkKTtcblx0XHRcdFJvY2tldENoYXQubW9kZWxzLlJvb21zLnNldExhc3RNZXNzYWdlQnlJZChtZXNzYWdlLnJpZCwgbGFzdE1lc3NhZ2UpO1xuXHRcdH1cblx0fVxuXG5cdGlmIChzaG93RGVsZXRlZFN0YXR1cykge1xuXHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnNldEFzRGVsZXRlZEJ5SWRBbmRVc2VyKG1lc3NhZ2UuX2lkLCB1c2VyKTtcblx0fSBlbHNlIHtcblx0XHRSb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMubm90aWZ5Um9vbShtZXNzYWdlLnJpZCwgJ2RlbGV0ZU1lc3NhZ2UnLCB7IF9pZDogbWVzc2FnZS5faWQgfSk7XG5cdH1cbn07XG4iLCJSb2NrZXRDaGF0LmRlbGV0ZVVzZXIgPSBmdW5jdGlvbih1c2VySWQpIHtcblx0Y29uc3QgdXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeUlkKHVzZXJJZCk7XG5cblx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMucmVtb3ZlQnlVc2VySWQodXNlcklkKTsgLy8gUmVtb3ZlIHVzZXIgbWVzc2FnZXNcblx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kQnlVc2VySWQodXNlcklkKS5mb3JFYWNoKChzdWJzY3JpcHRpb24pID0+IHtcblx0XHRjb25zdCByb29tID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQoc3Vic2NyaXB0aW9uLnJpZCk7XG5cdFx0aWYgKHJvb20pIHtcblx0XHRcdGlmIChyb29tLnQgIT09ICdjJyAmJiByb29tLnVzZXJuYW1lcy5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMucmVtb3ZlQnlJZChzdWJzY3JpcHRpb24ucmlkKTsgLy8gUmVtb3ZlIG5vbi1jaGFubmVsIHJvb21zIHdpdGggb25seSAxIHVzZXIgKHRoZSBvbmUgYmVpbmcgZGVsZXRlZClcblx0XHRcdH1cblx0XHRcdGlmIChyb29tLnQgPT09ICdkJykge1xuXHRcdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLnJlbW92ZUJ5Um9vbUlkKHN1YnNjcmlwdGlvbi5yaWQpO1xuXHRcdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5yZW1vdmVCeVJvb21JZChzdWJzY3JpcHRpb24ucmlkKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMucmVtb3ZlQnlVc2VySWQodXNlcklkKTsgLy8gUmVtb3ZlIHVzZXIgc3Vic2NyaXB0aW9uc1xuXHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5yZW1vdmVCeVR5cGVDb250YWluaW5nVXNlcm5hbWUoJ2QnLCB1c2VyLnVzZXJuYW1lKTsgLy8gUmVtb3ZlIGRpcmVjdCByb29tcyB3aXRoIHRoZSB1c2VyXG5cdFJvY2tldENoYXQubW9kZWxzLlJvb21zLnJlbW92ZVVzZXJuYW1lRnJvbUFsbCh1c2VyLnVzZXJuYW1lKTsgLy8gUmVtb3ZlIHVzZXIgZnJvbSBhbGwgb3RoZXIgcm9vbXNcblxuXHQvLyByZW1vdmVzIHVzZXIncyBhdmF0YXJcblx0aWYgKHVzZXIuYXZhdGFyT3JpZ2luID09PSAndXBsb2FkJyB8fCB1c2VyLmF2YXRhck9yaWdpbiA9PT0gJ3VybCcpIHtcblx0XHRGaWxlVXBsb2FkLmdldFN0b3JlKCdBdmF0YXJzJykuZGVsZXRlQnlOYW1lKHVzZXIudXNlcm5hbWUpO1xuXHR9XG5cblx0Um9ja2V0Q2hhdC5tb2RlbHMuSW50ZWdyYXRpb25zLmRpc2FibGVCeVVzZXJJZCh1c2VySWQpOyAvLyBEaXNhYmxlcyBhbGwgdGhlIGludGVncmF0aW9ucyB3aGljaCByZWx5IG9uIHRoZSB1c2VyIGJlaW5nIGRlbGV0ZWQuXG5cblx0Um9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMucmVtb3ZlQnlJZCh1c2VySWQpOyAvLyBSZW1vdmUgdXNlciBmcm9tIHVzZXJzIGRhdGFiYXNlXG59O1xuIiwiLyogZ2xvYmFscyBSb2NrZXRDaGF0ICovXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuUm9ja2V0Q2hhdC5nZXRGdWxsVXNlckRhdGEgPSBmdW5jdGlvbih7dXNlcklkLCBmaWx0ZXIsIGxpbWl0fSkge1xuXHRsZXQgZmllbGRzID0ge1xuXHRcdG5hbWU6IDEsXG5cdFx0dXNlcm5hbWU6IDEsXG5cdFx0c3RhdHVzOiAxLFxuXHRcdHV0Y09mZnNldDogMSxcblx0XHR0eXBlOiAxLFxuXHRcdGFjdGl2ZTogMVxuXHR9O1xuXG5cdGlmIChSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlcklkLCAndmlldy1mdWxsLW90aGVyLXVzZXItaW5mbycpKSB7XG5cdFx0ZmllbGRzID0gXy5leHRlbmQoZmllbGRzLCB7XG5cdFx0XHRlbWFpbHM6IDEsXG5cdFx0XHRwaG9uZTogMSxcblx0XHRcdHN0YXR1c0Nvbm5lY3Rpb246IDEsXG5cdFx0XHRjcmVhdGVkQXQ6IDEsXG5cdFx0XHRsYXN0TG9naW46IDEsXG5cdFx0XHRzZXJ2aWNlczogMSxcblx0XHRcdHJlcXVpcmVQYXNzd29yZENoYW5nZTogMSxcblx0XHRcdHJlcXVpcmVQYXNzd29yZENoYW5nZVJlYXNvbjogMSxcblx0XHRcdHJvbGVzOiAxLFxuXHRcdFx0Y3VzdG9tRmllbGRzOiAxXG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAobGltaXQgIT09IDApIHtcblx0XHRsaW1pdCA9IDE7XG5cdH1cblxuXHRmaWx0ZXIgPSBzLnRyaW0oZmlsdGVyKTtcblxuXHRpZiAoIWZpbHRlciAmJiBsaW1pdCA9PT0gMSkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHRjb25zdCBvcHRpb25zID0ge1xuXHRcdGZpZWxkcyxcblx0XHRsaW1pdCxcblx0XHRzb3J0OiB7IHVzZXJuYW1lOiAxIH1cblx0fTtcblxuXHRpZiAoZmlsdGVyKSB7XG5cdFx0aWYgKGxpbWl0ID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZEJ5VXNlcm5hbWUoZmlsdGVyLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgZmlsdGVyUmVnID0gbmV3IFJlZ0V4cChzLmVzY2FwZVJlZ0V4cChmaWx0ZXIpLCAnaScpO1xuXHRcdFx0cmV0dXJuIFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRCeVVzZXJuYW1lTmFtZU9yRW1haWxBZGRyZXNzKGZpbHRlclJlZywgb3B0aW9ucyk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmQoe30sIG9wdGlvbnMpO1xufTtcbiIsIi8qIGdsb2JhbHMgUm9ja2V0Q2hhdCAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cblJvY2tldENoYXQuZ2V0Um9vbUJ5TmFtZU9ySWRXaXRoT3B0aW9uVG9Kb2luID0gZnVuY3Rpb24gX2dldFJvb21CeU5hbWVPcklkV2l0aE9wdGlvblRvSm9pbih7IGN1cnJlbnRVc2VySWQsIG5hbWVPcklkLCB0eXBlPScnLCB0cnlEaXJlY3RCeVVzZXJJZE9ubHk9ZmFsc2UsIGpvaW5DaGFubmVsPXRydWUsIGVycm9yT25FbXB0eT10cnVlIH0pIHtcblx0bGV0IHJvb207XG5cblx0Ly9JZiB0aGUgbmFtZU9ySWQgc3RhcnRzIHdpdGggIywgdGhlbiBsZXQncyB0cnkgdG8gZmluZCBhIGNoYW5uZWwgb3IgZ3JvdXBcblx0aWYgKG5hbWVPcklkLnN0YXJ0c1dpdGgoJyMnKSkge1xuXHRcdG5hbWVPcklkID0gbmFtZU9ySWQuc3Vic3RyaW5nKDEpO1xuXHRcdHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZE9yTmFtZShuYW1lT3JJZCk7XG5cdH0gZWxzZSBpZiAobmFtZU9ySWQuc3RhcnRzV2l0aCgnQCcpIHx8IHR5cGUgPT09ICdkJykge1xuXHRcdC8vSWYgdGhlIG5hbWVPcklkIHN0YXJ0cyB3aXRoIEAgT1IgdHlwZSBpcyAnZCcsIHRoZW4gbGV0J3MgdHJ5IGp1c3QgYSBkaXJlY3QgbWVzc2FnZVxuXHRcdG5hbWVPcklkID0gbmFtZU9ySWQucmVwbGFjZSgnQCcsICcnKTtcblxuXHRcdGxldCByb29tVXNlcjtcblx0XHRpZiAodHJ5RGlyZWN0QnlVc2VySWRPbmx5KSB7XG5cdFx0XHRyb29tVXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeUlkKG5hbWVPcklkKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cm9vbVVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lKHtcblx0XHRcdFx0JG9yOiBbeyBfaWQ6IG5hbWVPcklkIH0sIHsgdXNlcm5hbWU6IG5hbWVPcklkIH1dXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRjb25zdCByaWQgPSBfLmlzT2JqZWN0KHJvb21Vc2VyKSA/IFtjdXJyZW50VXNlcklkLCByb29tVXNlci5faWRdLnNvcnQoKS5qb2luKCcnKSA6IG5hbWVPcklkO1xuXHRcdHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChyaWQpO1xuXG5cdFx0Ly9JZiB0aGUgcm9vbSBoYXNuJ3QgYmVlbiBmb3VuZCB5ZXQsIGxldCdzIHRyeSBzb21lIG1vcmVcblx0XHRpZiAoIV8uaXNPYmplY3Qocm9vbSkpIHtcblx0XHRcdC8vSWYgdGhlIHJvb21Vc2VyIHdhc24ndCBmb3VuZCwgdGhlbiB0aGVyZSdzIG5vIGRlc3RpbmF0aW9uIHRvIHBvaW50IHRvd2FyZHNcblx0XHRcdC8vc28gcmV0dXJuIG91dCBiYXNlZCB1cG9uIGVycm9yT25FbXB0eVxuXHRcdFx0aWYgKCFfLmlzT2JqZWN0KHJvb21Vc2VyKSkge1xuXHRcdFx0XHRpZiAoZXJyb3JPbkVtcHR5KSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignaW52YWxpZC1jaGFubmVsJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJvb20gPSBNZXRlb3IucnVuQXNVc2VyKGN1cnJlbnRVc2VySWQsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjb25zdCB7cmlkfSA9IE1ldGVvci5jYWxsKCdjcmVhdGVEaXJlY3RNZXNzYWdlJywgcm9vbVVzZXIudXNlcm5hbWUpO1xuXHRcdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQocmlkKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvL090aGVyd2lzZSwgd2UnbGwgdHJlYXQgdGhpcyBhcyBhIGNoYW5uZWwgb3IgZ3JvdXAuXG5cdFx0cm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkT3JOYW1lKG5hbWVPcklkKTtcblx0fVxuXG5cdC8vSWYgbm8gcm9vbSB3YXMgZm91bmQsIGhhbmRsZSB0aGUgcm9vbSByZXR1cm4gYmFzZWQgdXBvbiBlcnJvck9uRW1wdHlcblx0aWYgKCFyb29tICYmIGVycm9yT25FbXB0eSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ludmFsaWQtY2hhbm5lbCcpO1xuXHR9IGVsc2UgaWYgKCFyb29tKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly9JZiBhIHJvb20gd2FzIGZvdW5kIGFuZCB0aGV5IHByb3ZpZGVkIGEgdHlwZSB0byBzZWFyY2gsIHRoZW4gY2hlY2tcblx0Ly9hbmQgaWYgdGhlIHR5cGUgZm91bmQgaXNuJ3Qgd2hhdCB3ZSdyZSBsb29raW5nIGZvciB0aGVuIGhhbmRsZVxuXHQvL3RoZSByZXR1cm4gYmFzZWQgdXBvbiBlcnJvck9uRW1wdHlcblx0aWYgKHR5cGUgJiYgcm9vbS50ICE9PSB0eXBlKSB7XG5cdFx0aWYgKGVycm9yT25FbXB0eSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignaW52YWxpZC1jaGFubmVsJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHQvL0lmIHRoZSByb29tIHR5cGUgaXMgY2hhbm5lbCBhbmQgam9pbkNoYW5uZWwgaGFzIGJlZW4gcGFzc2VkLCB0cnkgdG8gam9pbiB0aGVtXG5cdC8vaWYgdGhleSBjYW4ndCBqb2luIHRoZSByb29tLCB0aGlzIHdpbGwgZXJyb3Igb3V0IVxuXHRpZiAocm9vbS50ID09PSAnYycgJiYgam9pbkNoYW5uZWwpIHtcblx0XHRjb25zdCBzdWIgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChyb29tLl9pZCwgY3VycmVudFVzZXJJZCk7XG5cblx0XHRpZiAoIXN1Yikge1xuXHRcdFx0TWV0ZW9yLnJ1bkFzVXNlcihjdXJyZW50VXNlcklkLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIE1ldGVvci5jYWxsKCdqb2luUm9vbScsIHJvb20uX2lkKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByb29tO1xufTtcbiIsIlJvY2tldENoYXQucmVtb3ZlVXNlckZyb21Sb29tID0gZnVuY3Rpb24ocmlkLCB1c2VyKSB7XG5cdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChyaWQpO1xuXG5cdGlmIChyb29tKSB7XG5cdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdiZWZvcmVMZWF2ZVJvb20nLCB1c2VyLCByb29tKTtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5yZW1vdmVVc2VybmFtZUJ5SWQocmlkLCB1c2VyLnVzZXJuYW1lKTtcblxuXHRcdGlmIChyb29tLnVzZXJuYW1lcy5pbmRleE9mKHVzZXIudXNlcm5hbWUpICE9PSAtMSkge1xuXHRcdFx0Y29uc3QgcmVtb3ZlZFVzZXIgPSB1c2VyO1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuY3JlYXRlVXNlckxlYXZlV2l0aFJvb21JZEFuZFVzZXIocmlkLCByZW1vdmVkVXNlcik7XG5cdFx0fVxuXG5cdFx0aWYgKHJvb20udCA9PT0gJ2wnKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5jcmVhdGVDb21tYW5kV2l0aFJvb21JZEFuZFVzZXIoJ3N1cnZleScsIHJpZCwgdXNlcik7XG5cdFx0fVxuXG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5yZW1vdmVCeVJvb21JZEFuZFVzZXJJZChyaWQsIHVzZXIuX2lkKTtcblxuXHRcdE1ldGVvci5kZWZlcihmdW5jdGlvbigpIHtcblx0XHRcdFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bignYWZ0ZXJMZWF2ZVJvb20nLCB1c2VyLCByb29tKTtcblx0XHR9KTtcblx0fVxufTtcbiIsIi8qIGdsb2JhbHMgR3JhdmF0YXIgKi9cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0LnNhdmVVc2VyID0gZnVuY3Rpb24odXNlcklkLCB1c2VyRGF0YSkge1xuXHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQodXNlcklkKTtcblx0Y29uc3QgZXhpc3RpbmdSb2xlcyA9IF8ucGx1Y2soUm9ja2V0Q2hhdC5hdXRoei5nZXRSb2xlcygpLCAnX2lkJyk7XG5cblx0aWYgKHVzZXJEYXRhLl9pZCAmJiB1c2VySWQgIT09IHVzZXJEYXRhLl9pZCAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2VkaXQtb3RoZXItdXNlci1pbmZvJykpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnRWRpdGluZyB1c2VyIGlzIG5vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLCBhY3Rpb246ICdFZGl0aW5nX3VzZXInIH0pO1xuXHR9XG5cblx0aWYgKCF1c2VyRGF0YS5faWQgJiYgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbih1c2VySWQsICdjcmVhdGUtdXNlcicpKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ0FkZGluZyB1c2VyIGlzIG5vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLCBhY3Rpb246ICdBZGRpbmdfdXNlcicgfSk7XG5cdH1cblxuXHRpZiAodXNlckRhdGEucm9sZXMgJiYgXy5kaWZmZXJlbmNlKHVzZXJEYXRhLnJvbGVzLCBleGlzdGluZ1JvbGVzKS5sZW5ndGggPiAwKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ1RoZSBmaWVsZCBSb2xlcyBjb25zaXN0IGludmFsaWQgcm9sZSBuYW1lJywgeyBtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLCBhY3Rpb246ICdBc3NpZ25fcm9sZScgfSk7XG5cdH1cblxuXHRpZiAodXNlckRhdGEucm9sZXMgJiYgXy5pbmRleE9mKHVzZXJEYXRhLnJvbGVzLCAnYWRtaW4nKSA+PSAwICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlcklkLCAnYXNzaWduLWFkbWluLXJvbGUnKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsICdBc3NpZ25pbmcgYWRtaW4gaXMgbm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ2luc2VydE9yVXBkYXRlVXNlcicsIGFjdGlvbjogJ0Fzc2lnbl9hZG1pbicgfSk7XG5cdH1cblxuXHRpZiAoIXVzZXJEYXRhLl9pZCAmJiAhcy50cmltKHVzZXJEYXRhLm5hbWUpKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItdGhlLWZpZWxkLWlzLXJlcXVpcmVkJywgJ1RoZSBmaWVsZCBOYW1lIGlzIHJlcXVpcmVkJywgeyBtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLCBmaWVsZDogJ05hbWUnIH0pO1xuXHR9XG5cblx0aWYgKCF1c2VyRGF0YS5faWQgJiYgIXMudHJpbSh1c2VyRGF0YS51c2VybmFtZSkpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci10aGUtZmllbGQtaXMtcmVxdWlyZWQnLCAnVGhlIGZpZWxkIFVzZXJuYW1lIGlzIHJlcXVpcmVkJywgeyBtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLCBmaWVsZDogJ1VzZXJuYW1lJyB9KTtcblx0fVxuXG5cdGxldCBuYW1lVmFsaWRhdGlvbjtcblxuXHR0cnkge1xuXHRcdG5hbWVWYWxpZGF0aW9uID0gbmV3IFJlZ0V4cChgXiR7IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVVEY4X05hbWVzX1ZhbGlkYXRpb24nKSB9JGApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0bmFtZVZhbGlkYXRpb24gPSBuZXcgUmVnRXhwKCdeWzAtOWEtekEtWi1fLl0rJCcpO1xuXHR9XG5cblx0aWYgKHVzZXJEYXRhLnVzZXJuYW1lICYmICFuYW1lVmFsaWRhdGlvbi50ZXN0KHVzZXJEYXRhLnVzZXJuYW1lKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWlucHV0LWlzLW5vdC1hLXZhbGlkLWZpZWxkJywgYCR7IF8uZXNjYXBlKHVzZXJEYXRhLnVzZXJuYW1lKSB9IGlzIG5vdCBhIHZhbGlkIHVzZXJuYW1lYCwgeyBtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLCBpbnB1dDogdXNlckRhdGEudXNlcm5hbWUsIGZpZWxkOiAnVXNlcm5hbWUnIH0pO1xuXHR9XG5cblx0aWYgKCF1c2VyRGF0YS5faWQgJiYgIXVzZXJEYXRhLnBhc3N3b3JkKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItdGhlLWZpZWxkLWlzLXJlcXVpcmVkJywgJ1RoZSBmaWVsZCBQYXNzd29yZCBpcyByZXF1aXJlZCcsIHsgbWV0aG9kOiAnaW5zZXJ0T3JVcGRhdGVVc2VyJywgZmllbGQ6ICdQYXNzd29yZCcgfSk7XG5cdH1cblxuXHRpZiAoIXVzZXJEYXRhLl9pZCkge1xuXHRcdGlmICghUm9ja2V0Q2hhdC5jaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5KHVzZXJEYXRhLnVzZXJuYW1lKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItZmllbGQtdW5hdmFpbGFibGUnLCBgJHsgXy5lc2NhcGUodXNlckRhdGEudXNlcm5hbWUpIH0gaXMgYWxyZWFkeSBpbiB1c2UgOihgLCB7IG1ldGhvZDogJ2luc2VydE9yVXBkYXRlVXNlcicsIGZpZWxkOiB1c2VyRGF0YS51c2VybmFtZSB9KTtcblx0XHR9XG5cblx0XHRpZiAodXNlckRhdGEuZW1haWwgJiYgIVJvY2tldENoYXQuY2hlY2tFbWFpbEF2YWlsYWJpbGl0eSh1c2VyRGF0YS5lbWFpbCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWZpZWxkLXVuYXZhaWxhYmxlJywgYCR7IF8uZXNjYXBlKHVzZXJEYXRhLmVtYWlsKSB9IGlzIGFscmVhZHkgaW4gdXNlIDooYCwgeyBtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLCBmaWVsZDogdXNlckRhdGEuZW1haWwgfSk7XG5cdFx0fVxuXG5cdFx0Um9ja2V0Q2hhdC52YWxpZGF0ZUVtYWlsRG9tYWluKHVzZXJEYXRhLmVtYWlsKTtcblxuXHRcdC8vIGluc2VydCB1c2VyXG5cdFx0Y29uc3QgY3JlYXRlVXNlciA9IHtcblx0XHRcdHVzZXJuYW1lOiB1c2VyRGF0YS51c2VybmFtZSxcblx0XHRcdHBhc3N3b3JkOiB1c2VyRGF0YS5wYXNzd29yZCxcblx0XHRcdGpvaW5EZWZhdWx0Q2hhbm5lbHM6IHVzZXJEYXRhLmpvaW5EZWZhdWx0Q2hhbm5lbHNcblx0XHR9O1xuXHRcdGlmICh1c2VyRGF0YS5lbWFpbCkge1xuXHRcdFx0Y3JlYXRlVXNlci5lbWFpbCA9IHVzZXJEYXRhLmVtYWlsO1xuXHRcdH1cblxuXHRcdGNvbnN0IF9pZCA9IEFjY291bnRzLmNyZWF0ZVVzZXIoY3JlYXRlVXNlcik7XG5cblx0XHRjb25zdCB1cGRhdGVVc2VyID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRuYW1lOiB1c2VyRGF0YS5uYW1lLFxuXHRcdFx0XHRyb2xlczogdXNlckRhdGEucm9sZXMgfHwgWyd1c2VyJ11cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0aWYgKHR5cGVvZiB1c2VyRGF0YS5yZXF1aXJlUGFzc3dvcmRDaGFuZ2UgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHR1cGRhdGVVc2VyLiRzZXQucmVxdWlyZVBhc3N3b3JkQ2hhbmdlID0gdXNlckRhdGEucmVxdWlyZVBhc3N3b3JkQ2hhbmdlO1xuXHRcdH1cblxuXHRcdGlmICh1c2VyRGF0YS52ZXJpZmllZCkge1xuXHRcdFx0dXBkYXRlVXNlci4kc2V0WydlbWFpbHMuMC52ZXJpZmllZCddID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRNZXRlb3IudXNlcnMudXBkYXRlKHsgX2lkIH0sIHVwZGF0ZVVzZXIpO1xuXG5cdFx0aWYgKHVzZXJEYXRhLnNlbmRXZWxjb21lRW1haWwpIHtcblx0XHRcdGNvbnN0IGhlYWRlciA9IFJvY2tldENoYXQucGxhY2Vob2xkZXJzLnJlcGxhY2UoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0VtYWlsX0hlYWRlcicpIHx8ICcnKTtcblx0XHRcdGNvbnN0IGZvb3RlciA9IFJvY2tldENoYXQucGxhY2Vob2xkZXJzLnJlcGxhY2UoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0VtYWlsX0Zvb3RlcicpIHx8ICcnKTtcblxuXHRcdFx0bGV0IHN1YmplY3Q7XG5cdFx0XHRsZXQgaHRtbDtcblxuXHRcdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbF9DdXN0b21pemVkJykpIHtcblx0XHRcdFx0c3ViamVjdCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbFN1YmplY3QnKTtcblx0XHRcdFx0aHRtbCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbCcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3ViamVjdCA9IFRBUGkxOG4uX18oJ0FjY291bnRzX1VzZXJBZGRlZEVtYWlsU3ViamVjdF9EZWZhdWx0JywgeyBsbmc6IHVzZXIubGFuZ3VhZ2UgfHwgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ2xhbmd1YWdlJykgfHwgJ2VuJyB9KTtcblx0XHRcdFx0aHRtbCA9IFRBUGkxOG4uX18oJ0FjY291bnRzX1VzZXJBZGRlZEVtYWlsX0RlZmF1bHQnLCB7IGxuZzogdXNlci5sYW5ndWFnZSB8fCBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnbGFuZ3VhZ2UnKSB8fCAnZW4nIH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRzdWJqZWN0ID0gUm9ja2V0Q2hhdC5wbGFjZWhvbGRlcnMucmVwbGFjZShzdWJqZWN0KTtcblx0XHRcdGh0bWwgPSBSb2NrZXRDaGF0LnBsYWNlaG9sZGVycy5yZXBsYWNlKGh0bWwsIHtcblx0XHRcdFx0bmFtZTogdXNlckRhdGEubmFtZSxcblx0XHRcdFx0ZW1haWw6IHVzZXJEYXRhLmVtYWlsLFxuXHRcdFx0XHRwYXNzd29yZDogdXNlckRhdGEucGFzc3dvcmRcblx0XHRcdH0pO1xuXG5cdFx0XHRjb25zdCBlbWFpbCA9IHtcblx0XHRcdFx0dG86IHVzZXJEYXRhLmVtYWlsLFxuXHRcdFx0XHRmcm9tOiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRnJvbV9FbWFpbCcpLFxuXHRcdFx0XHRzdWJqZWN0LFxuXHRcdFx0XHRodG1sOiBoZWFkZXIgKyBodG1sICsgZm9vdGVyXG5cdFx0XHR9O1xuXG5cdFx0XHRNZXRlb3IuZGVmZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0RW1haWwuc2VuZChlbWFpbCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItZW1haWwtc2VuZC1mYWlsZWQnLCBgRXJyb3IgdHJ5aW5nIHRvIHNlbmQgZW1haWw6ICR7IGVycm9yLm1lc3NhZ2UgfWAsIHsgZnVuY3Rpb246ICdSb2NrZXRDaGF0LnNhdmVVc2VyJywgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dXNlckRhdGEuX2lkID0gX2lkO1xuXG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19TZXREZWZhdWx0QXZhdGFyJykgPT09IHRydWUgJiYgdXNlckRhdGEuZW1haWwpIHtcblx0XHRcdGNvbnN0IGdyYXZhdGFyVXJsID0gR3JhdmF0YXIuaW1hZ2VVcmwodXNlckRhdGEuZW1haWwsIHtkZWZhdWx0OiAnNDA0Jywgc2l6ZTogMjAwLCBzZWN1cmU6IHRydWV9KTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5zZXRVc2VyQXZhdGFyKHVzZXJEYXRhLCBncmF2YXRhclVybCwgJycsICd1cmwnKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Ly9JZ25vcmUgdGhpcyBlcnJvciBmb3Igbm93LCBhcyBpdCBub3QgYmVpbmcgc3VjY2Vzc2Z1bCBpc24ndCBiYWRcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gX2lkO1xuXHR9IGVsc2Uge1xuXHRcdC8vIHVwZGF0ZSB1c2VyXG5cdFx0aWYgKHVzZXJEYXRhLnVzZXJuYW1lKSB7XG5cdFx0XHRSb2NrZXRDaGF0LnNldFVzZXJuYW1lKHVzZXJEYXRhLl9pZCwgdXNlckRhdGEudXNlcm5hbWUpO1xuXHRcdH1cblxuXHRcdGlmICh1c2VyRGF0YS5uYW1lKSB7XG5cdFx0XHRSb2NrZXRDaGF0LnNldFJlYWxOYW1lKHVzZXJEYXRhLl9pZCwgdXNlckRhdGEubmFtZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHVzZXJEYXRhLmVtYWlsKSB7XG5cdFx0XHRSb2NrZXRDaGF0LnNldEVtYWlsKHVzZXJEYXRhLl9pZCwgdXNlckRhdGEuZW1haWwpO1xuXHRcdH1cblxuXHRcdGlmICh1c2VyRGF0YS5wYXNzd29yZCAmJiB1c2VyRGF0YS5wYXNzd29yZC50cmltKCkgJiYgUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2VkaXQtb3RoZXItdXNlci1wYXNzd29yZCcpKSB7XG5cdFx0XHRBY2NvdW50cy5zZXRQYXNzd29yZCh1c2VyRGF0YS5faWQsIHVzZXJEYXRhLnBhc3N3b3JkLnRyaW0oKSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdXBkYXRlVXNlciA9IHtcblx0XHRcdCRzZXQ6IHt9XG5cdFx0fTtcblxuXHRcdGlmICh1c2VyRGF0YS5yb2xlcykge1xuXHRcdFx0dXBkYXRlVXNlci4kc2V0LnJvbGVzID0gdXNlckRhdGEucm9sZXM7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiB1c2VyRGF0YS5yZXF1aXJlUGFzc3dvcmRDaGFuZ2UgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHR1cGRhdGVVc2VyLiRzZXQucmVxdWlyZVBhc3N3b3JkQ2hhbmdlID0gdXNlckRhdGEucmVxdWlyZVBhc3N3b3JkQ2hhbmdlO1xuXHRcdH1cblxuXHRcdGlmICh1c2VyRGF0YS52ZXJpZmllZCkge1xuXHRcdFx0dXBkYXRlVXNlci4kc2V0WydlbWFpbHMuMC52ZXJpZmllZCddID0gdXNlckRhdGEudmVyaWZpZWQ7XG5cdFx0fVxuXG5cdFx0TWV0ZW9yLnVzZXJzLnVwZGF0ZSh7IF9pZDogdXNlckRhdGEuX2lkIH0sIHVwZGF0ZVVzZXIpO1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn07XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQuc2F2ZUN1c3RvbUZpZWxkcyA9IGZ1bmN0aW9uKHVzZXJJZCwgZm9ybURhdGEpIHtcblx0aWYgKHMudHJpbShSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQ3VzdG9tRmllbGRzJykpICE9PSAnJykge1xuXHRcdFJvY2tldENoYXQudmFsaWRhdGVDdXN0b21GaWVsZHMoZm9ybURhdGEpO1xuXHRcdHJldHVybiBSb2NrZXRDaGF0LnNhdmVDdXN0b21GaWVsZHNXaXRob3V0VmFsaWRhdGlvbih1c2VySWQsIGZvcm1EYXRhKTtcblx0fVxufTtcbiIsImltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuUm9ja2V0Q2hhdC5zYXZlQ3VzdG9tRmllbGRzV2l0aG91dFZhbGlkYXRpb24gPSBmdW5jdGlvbih1c2VySWQsIGZvcm1EYXRhKSB7XG5cdGlmIChzLnRyaW0oUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0N1c3RvbUZpZWxkcycpKSAhPT0gJycpIHtcblx0XHRsZXQgY3VzdG9tRmllbGRzTWV0YTtcblx0XHR0cnkge1xuXHRcdFx0Y3VzdG9tRmllbGRzTWV0YSA9IEpTT04ucGFyc2UoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0N1c3RvbUZpZWxkcycpKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLWN1c3RvbWZpZWxkLWpzb24nLCAnSW52YWxpZCBKU09OIGZvciBDdXN0b20gRmllbGRzJyk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgY3VzdG9tRmllbGRzID0ge307XG5cdFx0T2JqZWN0LmtleXMoY3VzdG9tRmllbGRzTWV0YSkuZm9yRWFjaChrZXkgPT4gY3VzdG9tRmllbGRzW2tleV0gPSBmb3JtRGF0YVtrZXldKTtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5zZXRDdXN0b21GaWVsZHModXNlcklkLCBjdXN0b21GaWVsZHMpO1xuXG5cdFx0T2JqZWN0LmtleXMoY3VzdG9tRmllbGRzKS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcblx0XHRcdGlmICghY3VzdG9tRmllbGRzTWV0YVtmaWVsZE5hbWVdLm1vZGlmeVJlY29yZEZpZWxkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbW9kaWZ5UmVjb3JkRmllbGQgPSBjdXN0b21GaWVsZHNNZXRhW2ZpZWxkTmFtZV0ubW9kaWZ5UmVjb3JkRmllbGQ7XG5cdFx0XHRjb25zdCB1cGRhdGUgPSB7fTtcblx0XHRcdGlmIChtb2RpZnlSZWNvcmRGaWVsZC5hcnJheSkge1xuXHRcdFx0XHR1cGRhdGUuJGFkZFRvU2V0ID0ge307XG5cdFx0XHRcdHVwZGF0ZS4kYWRkVG9TZXRbbW9kaWZ5UmVjb3JkRmllbGQuZmllbGRdID0gY3VzdG9tRmllbGRzW2ZpZWxkTmFtZV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1cGRhdGUuJHNldCA9IHt9O1xuXHRcdFx0XHR1cGRhdGUuJHNldFttb2RpZnlSZWNvcmRGaWVsZC5maWVsZF0gPSBjdXN0b21GaWVsZHNbZmllbGROYW1lXTtcblx0XHRcdH1cblxuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMudXBkYXRlKHVzZXJJZCwgdXBkYXRlKTtcblx0XHR9KTtcblx0fVxufTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5Sb2NrZXRDaGF0LnNlbmRNZXNzYWdlID0gZnVuY3Rpb24odXNlciwgbWVzc2FnZSwgcm9vbSwgdXBzZXJ0ID0gZmFsc2UpIHtcblx0aWYgKCF1c2VyIHx8ICFtZXNzYWdlIHx8ICFyb29tLl9pZCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAobWVzc2FnZS50cyA9PSBudWxsKSB7XG5cdFx0bWVzc2FnZS50cyA9IG5ldyBEYXRlKCk7XG5cdH1cblx0bWVzc2FnZS51ID0gXy5waWNrKHVzZXIsIFsnX2lkJywgJ3VzZXJuYW1lJywgJ25hbWUnXSk7XG5cdGlmICghTWF0Y2gudGVzdChtZXNzYWdlLm1zZywgU3RyaW5nKSkge1xuXHRcdG1lc3NhZ2UubXNnID0gJyc7XG5cdH1cblx0bWVzc2FnZS5yaWQgPSByb29tLl9pZDtcblx0aWYgKCFyb29tLnVzZXJuYW1lcyB8fCByb29tLnVzZXJuYW1lcy5sZW5ndGggPT09IDApIHtcblx0XHRjb25zdCB1cGRhdGVkX3Jvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChyb29tLl9pZCk7XG5cdFx0aWYgKHVwZGF0ZWRfcm9vbSAhPSBudWxsKSB7XG5cdFx0XHRyb29tID0gdXBkYXRlZF9yb29tO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyb29tLnVzZXJuYW1lcyA9IFtdO1xuXHRcdH1cblx0fVxuXHRpZiAobWVzc2FnZS5wYXJzZVVybHMgIT09IGZhbHNlKSB7XG5cdFx0Y29uc3QgdXJscyA9IG1lc3NhZ2UubXNnLm1hdGNoKC8oW0EtWmEtel17Myw5fSk6XFwvXFwvKFstOzomPVxcK1xcJCxcXHddK0B7MX0pPyhbLUEtWmEtejAtOVxcLl0rKSs6PyhcXGQrKT8oKFxcL1stXFwrPSE6fiVcXC9cXC5AXFwsXFwoXFwpXFx3XSopP1xcPz8oWy1cXCs9JiE6OyVAXFwvXFwuXFwsXFx3XSspPyg/OiMoW15cXHNcXCldKykpPyk/L2cpO1xuXG5cdFx0aWYgKHVybHMpIHtcblx0XHRcdG1lc3NhZ2UudXJscyA9IHVybHMubWFwKGZ1bmN0aW9uKHVybCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHVybFxuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cdG1lc3NhZ2UgPSBSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ2JlZm9yZVNhdmVNZXNzYWdlJywgbWVzc2FnZSk7XG5cdGlmIChtZXNzYWdlKSB7XG5cdFx0Ly8gQXZvaWQgc2F2aW5nIHNhbmRzdG9ybVNlc3Npb25JZCB0byB0aGUgZGF0YWJhc2Vcblx0XHRsZXQgc2FuZHN0b3JtU2Vzc2lvbklkID0gbnVsbDtcblx0XHRpZiAobWVzc2FnZS5zYW5kc3Rvcm1TZXNzaW9uSWQpIHtcblx0XHRcdHNhbmRzdG9ybVNlc3Npb25JZCA9IG1lc3NhZ2Uuc2FuZHN0b3JtU2Vzc2lvbklkO1xuXHRcdFx0ZGVsZXRlIG1lc3NhZ2Uuc2FuZHN0b3JtU2Vzc2lvbklkO1xuXHRcdH1cblx0XHRpZiAobWVzc2FnZS5faWQgJiYgdXBzZXJ0KSB7XG5cdFx0XHRjb25zdCBfaWQgPSBtZXNzYWdlLl9pZDtcblx0XHRcdGRlbGV0ZSBtZXNzYWdlLl9pZDtcblx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnVwc2VydCh7XG5cdFx0XHRcdF9pZCxcblx0XHRcdFx0J3UuX2lkJzogbWVzc2FnZS51Ll9pZFxuXHRcdFx0fSwgbWVzc2FnZSk7XG5cdFx0XHRtZXNzYWdlLl9pZCA9IF9pZDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWVzc2FnZS5faWQgPSBSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5pbnNlcnQobWVzc2FnZSk7XG5cdFx0fVxuXG5cdFx0Lypcblx0XHREZWZlciBvdGhlciB1cGRhdGVzIGFzIHRoZWlyIHJldHVybiBpcyBub3QgaW50ZXJlc3RpbmcgdG8gdGhlIHVzZXJcblx0XHQqL1xuXHRcdE1ldGVvci5kZWZlcigoKSA9PiB7XG5cdFx0XHQvLyBFeGVjdXRlIGFsbCBjYWxsYmFja3Ncblx0XHRcdG1lc3NhZ2Uuc2FuZHN0b3JtU2Vzc2lvbklkID0gc2FuZHN0b3JtU2Vzc2lvbklkO1xuXHRcdFx0cmV0dXJuIFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bignYWZ0ZXJTYXZlTWVzc2FnZScsIG1lc3NhZ2UsIHJvb20sIHVzZXIuX2lkKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fVxufTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5jb25zdCBibG9ja2VkU2V0dGluZ3MgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52LlNFVFRJTkdTX0JMT0NLRUQpIHtcblx0cHJvY2Vzcy5lbnYuU0VUVElOR1NfQkxPQ0tFRC5zcGxpdCgnLCcpLmZvckVhY2goKHNldHRpbmdJZCkgPT4gYmxvY2tlZFNldHRpbmdzW3NldHRpbmdJZF0gPSAxKTtcbn1cblxuY29uc3QgaGlkZGVuU2V0dGluZ3MgPSB7fTtcbmlmIChwcm9jZXNzLmVudi5TRVRUSU5HU19ISURERU4pIHtcblx0cHJvY2Vzcy5lbnYuU0VUVElOR1NfSElEREVOLnNwbGl0KCcsJykuZm9yRWFjaCgoc2V0dGluZ0lkKSA9PiBoaWRkZW5TZXR0aW5nc1tzZXR0aW5nSWRdID0gMSk7XG59XG5cblJvY2tldENoYXQuc2V0dGluZ3MuX3NvcnRlciA9IHt9O1xuXG5cbi8qXG4qIEFkZCBhIHNldHRpbmdcbiogQHBhcmFtIHtTdHJpbmd9IF9pZFxuKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ1xuKi9cblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQgPSBmdW5jdGlvbihfaWQsIHZhbHVlLCBvcHRpb25zID0ge30pIHtcblx0aWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuXHRcdG9wdGlvbnMgPSB7fTtcblx0fVxuXHRpZiAoIV9pZCB8fCB2YWx1ZSA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLl9zb3J0ZXJbb3B0aW9ucy5ncm91cF0gPT0gbnVsbCkge1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuX3NvcnRlcltvcHRpb25zLmdyb3VwXSA9IDA7XG5cdH1cblx0b3B0aW9ucy5wYWNrYWdlVmFsdWUgPSB2YWx1ZTtcblx0b3B0aW9ucy52YWx1ZVNvdXJjZSA9ICdwYWNrYWdlVmFsdWUnO1xuXHRvcHRpb25zLmhpZGRlbiA9IG9wdGlvbnMuaGlkZGVuIHx8IGZhbHNlO1xuXHRvcHRpb25zLmJsb2NrZWQgPSBvcHRpb25zLmJsb2NrZWQgfHwgZmFsc2U7XG5cdGlmIChvcHRpb25zLnNvcnRlciA9PSBudWxsKSB7XG5cdFx0b3B0aW9ucy5zb3J0ZXIgPSBSb2NrZXRDaGF0LnNldHRpbmdzLl9zb3J0ZXJbb3B0aW9ucy5ncm91cF0rKztcblx0fVxuXHRpZiAob3B0aW9ucy5lbmFibGVRdWVyeSAhPSBudWxsKSB7XG5cdFx0b3B0aW9ucy5lbmFibGVRdWVyeSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuZW5hYmxlUXVlcnkpO1xuXHR9XG5cdGlmIChvcHRpb25zLmkxOG5EZWZhdWx0UXVlcnkgIT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuaTE4bkRlZmF1bHRRdWVyeSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuaTE4bkRlZmF1bHRRdWVyeSk7XG5cdH1cblx0aWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudltfaWRdKSB7XG5cdFx0dmFsdWUgPSBwcm9jZXNzLmVudltfaWRdO1xuXHRcdGlmICh2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpIHtcblx0XHRcdHZhbHVlID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdmYWxzZScpIHtcblx0XHRcdHZhbHVlID0gZmFsc2U7XG5cdFx0fVxuXHRcdG9wdGlvbnMucHJvY2Vzc0VudlZhbHVlID0gdmFsdWU7XG5cdFx0b3B0aW9ucy52YWx1ZVNvdXJjZSA9ICdwcm9jZXNzRW52VmFsdWUnO1xuXHR9IGVsc2UgaWYgKE1ldGVvci5zZXR0aW5ncyAmJiB0eXBlb2YgTWV0ZW9yLnNldHRpbmdzW19pZF0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0aWYgKE1ldGVvci5zZXR0aW5nc1tfaWRdID09IG51bGwpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR2YWx1ZSA9IE1ldGVvci5zZXR0aW5nc1tfaWRdO1xuXHRcdG9wdGlvbnMubWV0ZW9yU2V0dGluZ3NWYWx1ZSA9IHZhbHVlO1xuXHRcdG9wdGlvbnMudmFsdWVTb3VyY2UgPSAnbWV0ZW9yU2V0dGluZ3NWYWx1ZSc7XG5cdH1cblx0aWYgKG9wdGlvbnMuaTE4bkxhYmVsID09IG51bGwpIHtcblx0XHRvcHRpb25zLmkxOG5MYWJlbCA9IF9pZDtcblx0fVxuXHRpZiAob3B0aW9ucy5pMThuRGVzY3JpcHRpb24gPT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuaTE4bkRlc2NyaXB0aW9uID0gYCR7IF9pZCB9X0Rlc2NyaXB0aW9uYDtcblx0fVxuXHRpZiAoYmxvY2tlZFNldHRpbmdzW19pZF0gIT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuYmxvY2tlZCA9IHRydWU7XG5cdH1cblx0aWYgKGhpZGRlblNldHRpbmdzW19pZF0gIT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuaGlkZGVuID0gdHJ1ZTtcblx0fVxuXHRpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52W2BPVkVSV1JJVEVfU0VUVElOR18keyBfaWQgfWBdKSB7XG5cdFx0bGV0IHZhbHVlID0gcHJvY2Vzcy5lbnZbYE9WRVJXUklURV9TRVRUSU5HXyR7IF9pZCB9YF07XG5cdFx0aWYgKHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJykge1xuXHRcdFx0dmFsdWUgPSB0cnVlO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ2ZhbHNlJykge1xuXHRcdFx0dmFsdWUgPSBmYWxzZTtcblx0XHR9XG5cdFx0b3B0aW9ucy52YWx1ZSA9IHZhbHVlO1xuXHRcdG9wdGlvbnMucHJvY2Vzc0VudlZhbHVlID0gdmFsdWU7XG5cdFx0b3B0aW9ucy52YWx1ZVNvdXJjZSA9ICdwcm9jZXNzRW52VmFsdWUnO1xuXHR9XG5cdGNvbnN0IHVwZGF0ZU9wZXJhdGlvbnMgPSB7XG5cdFx0JHNldDogb3B0aW9ucyxcblx0XHQkc2V0T25JbnNlcnQ6IHtcblx0XHRcdGNyZWF0ZWRBdDogbmV3IERhdGVcblx0XHR9XG5cdH07XG5cdGlmIChvcHRpb25zLmVkaXRvciAhPSBudWxsKSB7XG5cdFx0dXBkYXRlT3BlcmF0aW9ucy4kc2V0T25JbnNlcnQuZWRpdG9yID0gb3B0aW9ucy5lZGl0b3I7XG5cdFx0ZGVsZXRlIG9wdGlvbnMuZWRpdG9yO1xuXHR9XG5cdGlmIChvcHRpb25zLnZhbHVlID09IG51bGwpIHtcblx0XHRpZiAob3B0aW9ucy5mb3JjZSA9PT0gdHJ1ZSkge1xuXHRcdFx0dXBkYXRlT3BlcmF0aW9ucy4kc2V0LnZhbHVlID0gb3B0aW9ucy5wYWNrYWdlVmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHVwZGF0ZU9wZXJhdGlvbnMuJHNldE9uSW5zZXJ0LnZhbHVlID0gdmFsdWU7XG5cdFx0fVxuXHR9XG5cdGNvbnN0IHF1ZXJ5ID0gXy5leHRlbmQoe1xuXHRcdF9pZFxuXHR9LCB1cGRhdGVPcGVyYXRpb25zLiRzZXQpO1xuXHRpZiAob3B0aW9ucy5zZWN0aW9uID09IG51bGwpIHtcblx0XHR1cGRhdGVPcGVyYXRpb25zLiR1bnNldCA9IHtcblx0XHRcdHNlY3Rpb246IDFcblx0XHR9O1xuXHRcdHF1ZXJ5LnNlY3Rpb24gPSB7XG5cdFx0XHQkZXhpc3RzOiBmYWxzZVxuXHRcdH07XG5cdH1cblx0Y29uc3QgZXhpc3RhbnRTZXR0aW5nID0gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZGIuZmluZE9uZShxdWVyeSk7XG5cdGlmIChleGlzdGFudFNldHRpbmcgIT0gbnVsbCkge1xuXHRcdGlmIChleGlzdGFudFNldHRpbmcuZWRpdG9yID09IG51bGwgJiYgdXBkYXRlT3BlcmF0aW9ucy4kc2V0T25JbnNlcnQuZWRpdG9yICE9IG51bGwpIHtcblx0XHRcdHVwZGF0ZU9wZXJhdGlvbnMuJHNldC5lZGl0b3IgPSB1cGRhdGVPcGVyYXRpb25zLiRzZXRPbkluc2VydC5lZGl0b3I7XG5cdFx0XHRkZWxldGUgdXBkYXRlT3BlcmF0aW9ucy4kc2V0T25JbnNlcnQuZWRpdG9yO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR1cGRhdGVPcGVyYXRpb25zLiRzZXQudHMgPSBuZXcgRGF0ZTtcblx0fVxuXHRyZXR1cm4gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MudXBzZXJ0KHtcblx0XHRfaWRcblx0fSwgdXBkYXRlT3BlcmF0aW9ucyk7XG59O1xuXG5cbi8qXG4qIEFkZCBhIHNldHRpbmcgZ3JvdXBcbiogQHBhcmFtIHtTdHJpbmd9IF9pZFxuKi9cblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGRHcm91cCA9IGZ1bmN0aW9uKF9pZCwgb3B0aW9ucyA9IHt9LCBjYikge1xuXHRpZiAoIV9pZCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoXy5pc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG5cdFx0Y2IgPSBvcHRpb25zO1xuXHRcdG9wdGlvbnMgPSB7fTtcblx0fVxuXHRpZiAob3B0aW9ucy5pMThuTGFiZWwgPT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuaTE4bkxhYmVsID0gX2lkO1xuXHR9XG5cdGlmIChvcHRpb25zLmkxOG5EZXNjcmlwdGlvbiA9PSBudWxsKSB7XG5cdFx0b3B0aW9ucy5pMThuRGVzY3JpcHRpb24gPSBgJHsgX2lkIH1fRGVzY3JpcHRpb25gO1xuXHR9XG5cdG9wdGlvbnMudHMgPSBuZXcgRGF0ZTtcblx0b3B0aW9ucy5ibG9ja2VkID0gZmFsc2U7XG5cdG9wdGlvbnMuaGlkZGVuID0gZmFsc2U7XG5cdGlmIChibG9ja2VkU2V0dGluZ3NbX2lkXSAhPSBudWxsKSB7XG5cdFx0b3B0aW9ucy5ibG9ja2VkID0gdHJ1ZTtcblx0fVxuXHRpZiAoaGlkZGVuU2V0dGluZ3NbX2lkXSAhPSBudWxsKSB7XG5cdFx0b3B0aW9ucy5oaWRkZW4gPSB0cnVlO1xuXHR9XG5cdFJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLnVwc2VydCh7XG5cdFx0X2lkXG5cdH0sIHtcblx0XHQkc2V0OiBvcHRpb25zLFxuXHRcdCRzZXRPbkluc2VydDoge1xuXHRcdFx0dHlwZTogJ2dyb3VwJyxcblx0XHRcdGNyZWF0ZWRBdDogbmV3IERhdGVcblx0XHR9XG5cdH0pO1xuXHRpZiAoY2IgIT0gbnVsbCkge1xuXHRcdGNiLmNhbGwoe1xuXHRcdFx0YWRkKGlkLCB2YWx1ZSwgb3B0aW9ucykge1xuXHRcdFx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7XG5cdFx0XHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9wdGlvbnMuZ3JvdXAgPSBfaWQ7XG5cdFx0XHRcdHJldHVybiBSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChpZCwgdmFsdWUsIG9wdGlvbnMpO1xuXHRcdFx0fSxcblx0XHRcdHNlY3Rpb24oc2VjdGlvbiwgY2IpIHtcblx0XHRcdFx0cmV0dXJuIGNiLmNhbGwoe1xuXHRcdFx0XHRcdGFkZChpZCwgdmFsdWUsIG9wdGlvbnMpIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zID09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0b3B0aW9ucy5ncm91cCA9IF9pZDtcblx0XHRcdFx0XHRcdG9wdGlvbnMuc2VjdGlvbiA9IHNlY3Rpb247XG5cdFx0XHRcdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQoaWQsIHZhbHVlLCBvcHRpb25zKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59O1xuXG5cbi8qXG4qIFJlbW92ZSBhIHNldHRpbmcgYnkgaWRcbiogQHBhcmFtIHtTdHJpbmd9IF9pZFxuKi9cblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkID0gZnVuY3Rpb24oX2lkKSB7XG5cdGlmICghX2lkKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBSb2NrZXRDaGF0Lm1vZGVscy5TZXR0aW5ncy5yZW1vdmVCeUlkKF9pZCk7XG59O1xuXG5cbi8qXG4qIFVwZGF0ZSBhIHNldHRpbmcgYnkgaWRcbiogQHBhcmFtIHtTdHJpbmd9IF9pZFxuKi9cblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy51cGRhdGVCeUlkID0gZnVuY3Rpb24oX2lkLCB2YWx1ZSwgZWRpdG9yKSB7XG5cdGlmICghX2lkIHx8IHZhbHVlID09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKGVkaXRvciAhPSBudWxsKSB7XG5cdFx0cmV0dXJuIFJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLnVwZGF0ZVZhbHVlQW5kRWRpdG9yQnlJZChfaWQsIHZhbHVlLCBlZGl0b3IpO1xuXHR9XG5cdHJldHVybiBSb2NrZXRDaGF0Lm1vZGVscy5TZXR0aW5ncy51cGRhdGVWYWx1ZUJ5SWQoX2lkLCB2YWx1ZSk7XG59O1xuXG5cbi8qXG4qIFVwZGF0ZSBvcHRpb25zIG9mIGEgc2V0dGluZyBieSBpZFxuKiBAcGFyYW0ge1N0cmluZ30gX2lkXG4qL1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLnVwZGF0ZU9wdGlvbnNCeUlkID0gZnVuY3Rpb24oX2lkLCBvcHRpb25zKSB7XG5cdGlmICghX2lkIHx8IG9wdGlvbnMgPT0gbnVsbCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MudXBkYXRlT3B0aW9uc0J5SWQoX2lkLCBvcHRpb25zKTtcbn07XG5cblxuLypcbiogVXBkYXRlIGEgc2V0dGluZyBieSBpZFxuKiBAcGFyYW0ge1N0cmluZ30gX2lkXG4qL1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmNsZWFyQnlJZCA9IGZ1bmN0aW9uKF9pZCkge1xuXHRpZiAoX2lkID09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIFJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLnVwZGF0ZVZhbHVlQnlJZChfaWQsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qXG4qIFVwZGF0ZSBhIHNldHRpbmcgYnkgaWRcbiovXG5cblJvY2tldENoYXQuc2V0dGluZ3MuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRSb2NrZXRDaGF0LnNldHRpbmdzLmluaXRpYWxMb2FkID0gdHJ1ZTtcblx0Um9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZmluZCgpLm9ic2VydmUoe1xuXHRcdGFkZGVkKHJlY29yZCkge1xuXHRcdFx0TWV0ZW9yLnNldHRpbmdzW3JlY29yZC5faWRdID0gcmVjb3JkLnZhbHVlO1xuXHRcdFx0aWYgKHJlY29yZC5lbnYgPT09IHRydWUpIHtcblx0XHRcdFx0cHJvY2Vzcy5lbnZbcmVjb3JkLl9pZF0gPSByZWNvcmQudmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5sb2FkKHJlY29yZC5faWQsIHJlY29yZC52YWx1ZSwgUm9ja2V0Q2hhdC5zZXR0aW5ncy5pbml0aWFsTG9hZCk7XG5cdFx0fSxcblx0XHRjaGFuZ2VkKHJlY29yZCkge1xuXHRcdFx0TWV0ZW9yLnNldHRpbmdzW3JlY29yZC5faWRdID0gcmVjb3JkLnZhbHVlO1xuXHRcdFx0aWYgKHJlY29yZC5lbnYgPT09IHRydWUpIHtcblx0XHRcdFx0cHJvY2Vzcy5lbnZbcmVjb3JkLl9pZF0gPSByZWNvcmQudmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5sb2FkKHJlY29yZC5faWQsIHJlY29yZC52YWx1ZSwgUm9ja2V0Q2hhdC5zZXR0aW5ncy5pbml0aWFsTG9hZCk7XG5cdFx0fSxcblx0XHRyZW1vdmVkKHJlY29yZCkge1xuXHRcdFx0ZGVsZXRlIE1ldGVvci5zZXR0aW5nc1tyZWNvcmQuX2lkXTtcblx0XHRcdGlmIChyZWNvcmQuZW52ID09PSB0cnVlKSB7XG5cdFx0XHRcdGRlbGV0ZSBwcm9jZXNzLmVudltyZWNvcmQuX2lkXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBSb2NrZXRDaGF0LnNldHRpbmdzLmxvYWQocmVjb3JkLl9pZCwgdW5kZWZpbmVkLCBSb2NrZXRDaGF0LnNldHRpbmdzLmluaXRpYWxMb2FkKTtcblx0XHR9XG5cdH0pO1xuXHRSb2NrZXRDaGF0LnNldHRpbmdzLmluaXRpYWxMb2FkID0gZmFsc2U7XG5cdFJvY2tldENoYXQuc2V0dGluZ3MuYWZ0ZXJJbml0aWFsTG9hZC5mb3JFYWNoKGZuID0+IGZuKE1ldGVvci5zZXR0aW5ncykpO1xufTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZnRlckluaXRpYWxMb2FkID0gW107XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25BZnRlckluaXRpYWxMb2FkID0gZnVuY3Rpb24oZm4pIHtcblx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5hZnRlckluaXRpYWxMb2FkLnB1c2goZm4pO1xuXHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5pbml0aWFsTG9hZCA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gZm4oTWV0ZW9yLnNldHRpbmdzKTtcblx0fVxufTtcbiIsIlJvY2tldENoYXQuc2V0VXNlckF2YXRhciA9IGZ1bmN0aW9uKHVzZXIsIGRhdGFVUkksIGNvbnRlbnRUeXBlLCBzZXJ2aWNlKSB7XG5cdGxldCBlbmNvZGluZztcblx0bGV0IGltYWdlO1xuXG5cdGlmIChzZXJ2aWNlID09PSAnaW5pdGlhbHMnKSB7XG5cdFx0cmV0dXJuIFJvY2tldENoYXQubW9kZWxzLlVzZXJzLnNldEF2YXRhck9yaWdpbih1c2VyLl9pZCwgc2VydmljZSk7XG5cdH0gZWxzZSBpZiAoc2VydmljZSA9PT0gJ3VybCcpIHtcblx0XHRsZXQgcmVzdWx0ID0gbnVsbDtcblxuXHRcdHRyeSB7XG5cdFx0XHRyZXN1bHQgPSBIVFRQLmdldChkYXRhVVJJLCB7IG5wbVJlcXVlc3RPcHRpb25zOiB7ZW5jb2Rpbmc6ICdiaW5hcnknfSB9KTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0aWYgKCFlcnJvci5yZXNwb25zZSB8fCBlcnJvci5yZXNwb25zZS5zdGF0dXNDb2RlICE9PSA0MDQpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coYEVycm9yIHdoaWxlIGhhbmRsaW5nIHRoZSBzZXR0aW5nIG9mIHRoZSBhdmF0YXIgZnJvbSBhIHVybCAoJHsgZGF0YVVSSSB9KSBmb3IgJHsgdXNlci51c2VybmFtZSB9OmAsIGVycm9yKTtcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYXZhdGFyLXVybC1oYW5kbGluZycsIGBFcnJvciB3aGlsZSBoYW5kbGluZyBhdmF0YXIgc2V0dGluZyBmcm9tIGEgVVJMICgkeyBkYXRhVVJJIH0pIGZvciAkeyB1c2VyLnVzZXJuYW1lIH1gLCB7IGZ1bmN0aW9uOiAnUm9ja2V0Q2hhdC5zZXRVc2VyQXZhdGFyJywgdXJsOiBkYXRhVVJJLCB1c2VybmFtZTogdXNlci51c2VybmFtZSB9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocmVzdWx0LnN0YXR1c0NvZGUgIT09IDIwMCkge1xuXHRcdFx0Y29uc29sZS5sb2coYE5vdCBhIHZhbGlkIHJlc3BvbnNlLCAkeyByZXN1bHQuc3RhdHVzQ29kZSB9LCBmcm9tIHRoZSBhdmF0YXIgdXJsOiAkeyBkYXRhVVJJIH1gKTtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWF2YXRhci1pbnZhbGlkLXVybCcsIGBJbnZhbGlkIGF2YXRhciBVUkw6ICR7IGRhdGFVUkkgfWAsIHsgZnVuY3Rpb246ICdSb2NrZXRDaGF0LnNldFVzZXJBdmF0YXInLCB1cmw6IGRhdGFVUkkgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCEvaW1hZ2VcXC8uKy8udGVzdChyZXN1bHQuaGVhZGVyc1snY29udGVudC10eXBlJ10pKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhgTm90IGEgdmFsaWQgY29udGVudC10eXBlIGZyb20gdGhlIHByb3ZpZGVkIHVybCwgJHsgcmVzdWx0LmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddIH0sIGZyb20gdGhlIGF2YXRhciB1cmw6ICR7IGRhdGFVUkkgfWApO1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYXZhdGFyLWludmFsaWQtdXJsJywgYEludmFsaWQgYXZhdGFyIFVSTDogJHsgZGF0YVVSSSB9YCwgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQuc2V0VXNlckF2YXRhcicsIHVybDogZGF0YVVSSSB9KTtcblx0XHR9XG5cblx0XHRlbmNvZGluZyA9ICdiaW5hcnknO1xuXHRcdGltYWdlID0gcmVzdWx0LmNvbnRlbnQ7XG5cdFx0Y29udGVudFR5cGUgPSByZXN1bHQuaGVhZGVyc1snY29udGVudC10eXBlJ107XG5cdH0gZWxzZSBpZiAoc2VydmljZSA9PT0gJ3Jlc3QnKSB7XG5cdFx0ZW5jb2RpbmcgPSAnYmluYXJ5Jztcblx0XHRpbWFnZSA9IGRhdGFVUkk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc3QgZmlsZURhdGEgPSBSb2NrZXRDaGF0RmlsZS5kYXRhVVJJUGFyc2UoZGF0YVVSSSk7XG5cdFx0ZW5jb2RpbmcgPSAnYmFzZTY0Jztcblx0XHRpbWFnZSA9IGZpbGVEYXRhLmltYWdlO1xuXHRcdGNvbnRlbnRUeXBlID0gZmlsZURhdGEuY29udGVudFR5cGU7XG5cdH1cblxuXHRjb25zdCBidWZmZXIgPSBuZXcgQnVmZmVyKGltYWdlLCBlbmNvZGluZyk7XG5cdGNvbnN0IGZpbGVTdG9yZSA9IEZpbGVVcGxvYWQuZ2V0U3RvcmUoJ0F2YXRhcnMnKTtcblx0ZmlsZVN0b3JlLmRlbGV0ZUJ5TmFtZSh1c2VyLnVzZXJuYW1lKTtcblxuXHRjb25zdCBmaWxlID0ge1xuXHRcdHVzZXJJZDogdXNlci5faWQsXG5cdFx0dHlwZTogY29udGVudFR5cGUsXG5cdFx0c2l6ZTogYnVmZmVyLmxlbmd0aFxuXHR9O1xuXG5cdGZpbGVTdG9yZS5pbnNlcnQoZmlsZSwgYnVmZmVyLCAoKSA9PiB7XG5cdFx0TWV0ZW9yLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5zZXRBdmF0YXJPcmlnaW4odXNlci5faWQsIHNlcnZpY2UpO1xuXHRcdFx0Um9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeUxvZ2dlZCgndXBkYXRlQXZhdGFyJywge3VzZXJuYW1lOiB1c2VyLnVzZXJuYW1lfSk7XG5cdFx0fSwgNTAwKTtcblx0fSk7XG59O1xuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0Ll9zZXRVc2VybmFtZSA9IGZ1bmN0aW9uKHVzZXJJZCwgdSkge1xuXHRjb25zdCB1c2VybmFtZSA9IHMudHJpbSh1KTtcblx0aWYgKCF1c2VySWQgfHwgIXVzZXJuYW1lKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGxldCBuYW1lVmFsaWRhdGlvbjtcblx0dHJ5IHtcblx0XHRuYW1lVmFsaWRhdGlvbiA9IG5ldyBSZWdFeHAoYF4keyBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVVRGOF9OYW1lc19WYWxpZGF0aW9uJykgfSRgKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRuYW1lVmFsaWRhdGlvbiA9IG5ldyBSZWdFeHAoJ15bMC05YS16QS1aLV8uXSskJyk7XG5cdH1cblx0aWYgKCFuYW1lVmFsaWRhdGlvbi50ZXN0KHVzZXJuYW1lKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQodXNlcklkKTtcblx0Ly8gVXNlciBhbHJlYWR5IGhhcyBkZXNpcmVkIHVzZXJuYW1lLCByZXR1cm5cblx0aWYgKHVzZXIudXNlcm5hbWUgPT09IHVzZXJuYW1lKSB7XG5cdFx0cmV0dXJuIHVzZXI7XG5cdH1cblx0Y29uc3QgcHJldmlvdXNVc2VybmFtZSA9IHVzZXIudXNlcm5hbWU7XG5cdC8vIENoZWNrIHVzZXJuYW1lIGF2YWlsYWJpbGl0eSBvciBpZiB0aGUgdXNlciBhbHJlYWR5IG93bnMgYSBkaWZmZXJlbnQgY2FzaW5nIG9mIHRoZSBuYW1lXG5cdGlmICghcHJldmlvdXNVc2VybmFtZSB8fCAhKHVzZXJuYW1lLnRvTG93ZXJDYXNlKCkgPT09IHByZXZpb3VzVXNlcm5hbWUudG9Mb3dlckNhc2UoKSkpIHtcblx0XHRpZiAoIVJvY2tldENoYXQuY2hlY2tVc2VybmFtZUF2YWlsYWJpbGl0eSh1c2VybmFtZSkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0Ly9JZiBmaXJzdCB0aW1lIHNldHRpbmcgdXNlcm5hbWUsIHNlbmQgRW5yb2xsbWVudCBFbWFpbFxuXHR0cnkge1xuXHRcdGlmICghcHJldmlvdXNVc2VybmFtZSAmJiB1c2VyLmVtYWlscyAmJiB1c2VyLmVtYWlscy5sZW5ndGggPiAwICYmIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19FbnJvbGxtZW50X0VtYWlsJykpIHtcblx0XHRcdEFjY291bnRzLnNlbmRFbnJvbGxtZW50RW1haWwodXNlci5faWQpO1xuXHRcdH1cblx0fSBjYXRjaCAoZSkge1xuXHRcdGNvbnNvbGUuZXJyb3IoZSk7XG5cdH1cblx0LyogZ2xvYmFscyBnZXRBdmF0YXJTdWdnZXN0aW9uRm9yVXNlciAqL1xuXHR1c2VyLnVzZXJuYW1lID0gdXNlcm5hbWU7XG5cdGlmICghcHJldmlvdXNVc2VybmFtZSAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfU2V0RGVmYXVsdEF2YXRhcicpID09PSB0cnVlKSB7XG5cdFx0Y29uc3QgYXZhdGFyU3VnZ2VzdGlvbnMgPSBnZXRBdmF0YXJTdWdnZXN0aW9uRm9yVXNlcih1c2VyKTtcblx0XHRsZXQgZ3JhdmF0YXI7XG5cdFx0T2JqZWN0LmtleXMoYXZhdGFyU3VnZ2VzdGlvbnMpLnNvbWUoc2VydmljZSA9PiB7XG5cdFx0XHRjb25zdCBhdmF0YXJEYXRhID0gYXZhdGFyU3VnZ2VzdGlvbnNbc2VydmljZV07XG5cdFx0XHRpZiAoc2VydmljZSAhPT0gJ2dyYXZhdGFyJykge1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldFVzZXJBdmF0YXIodXNlciwgYXZhdGFyRGF0YS5ibG9iLCBhdmF0YXJEYXRhLmNvbnRlbnRUeXBlLCBzZXJ2aWNlKTtcblx0XHRcdFx0Z3JhdmF0YXIgPSBudWxsO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGdyYXZhdGFyID0gYXZhdGFyRGF0YTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpZiAoZ3JhdmF0YXIgIT0gbnVsbCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5zZXRVc2VyQXZhdGFyKHVzZXIsIGdyYXZhdGFyLmJsb2IsIGdyYXZhdGFyLmNvbnRlbnRUeXBlLCAnZ3JhdmF0YXInKTtcblx0XHR9XG5cdH1cblx0Ly8gVXNlcm5hbWUgaXMgYXZhaWxhYmxlOyBpZiBjb21pbmcgZnJvbSBvbGQgdXNlcm5hbWUsIHVwZGF0ZSBhbGwgcmVmZXJlbmNlc1xuXHRpZiAocHJldmlvdXNVc2VybmFtZSkge1xuXHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnVwZGF0ZUFsbFVzZXJuYW1lc0J5VXNlcklkKHVzZXIuX2lkLCB1c2VybmFtZSk7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMudXBkYXRlVXNlcm5hbWVPZkVkaXRCeVVzZXJJZCh1c2VyLl9pZCwgdXNlcm5hbWUpO1xuXHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRCeU1lbnRpb24ocHJldmlvdXNVc2VybmFtZSkuZm9yRWFjaChmdW5jdGlvbihtc2cpIHtcblx0XHRcdGNvbnN0IHVwZGF0ZWRNc2cgPSBtc2cubXNnLnJlcGxhY2UobmV3IFJlZ0V4cChgQCR7IHByZXZpb3VzVXNlcm5hbWUgfWAsICdpZycpLCBgQCR7IHVzZXJuYW1lIH1gKTtcblx0XHRcdHJldHVybiBSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy51cGRhdGVVc2VybmFtZUFuZE1lc3NhZ2VPZk1lbnRpb25CeUlkQW5kT2xkVXNlcm5hbWUobXNnLl9pZCwgcHJldmlvdXNVc2VybmFtZSwgdXNlcm5hbWUsIHVwZGF0ZWRNc2cpO1xuXHRcdH0pO1xuXHRcdFJvY2tldENoYXQubW9kZWxzLlJvb21zLnJlcGxhY2VVc2VybmFtZShwcmV2aW91c1VzZXJuYW1lLCB1c2VybmFtZSk7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMucmVwbGFjZU11dGVkVXNlcm5hbWUocHJldmlvdXNVc2VybmFtZSwgdXNlcm5hbWUpO1xuXHRcdFJvY2tldENoYXQubW9kZWxzLlJvb21zLnJlcGxhY2VVc2VybmFtZU9mVXNlckJ5VXNlcklkKHVzZXIuX2lkLCB1c2VybmFtZSk7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5zZXRVc2VyVXNlcm5hbWVCeVVzZXJJZCh1c2VyLl9pZCwgdXNlcm5hbWUpO1xuXHRcdFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuc2V0TmFtZUZvckRpcmVjdFJvb21zV2l0aE9sZE5hbWUocHJldmlvdXNVc2VybmFtZSwgdXNlcm5hbWUpO1xuXG5cdFx0Y29uc3QgZmlsZVN0b3JlID0gRmlsZVVwbG9hZC5nZXRTdG9yZSgnQXZhdGFycycpO1xuXHRcdGNvbnN0IGZpbGUgPSBmaWxlU3RvcmUubW9kZWwuZmluZE9uZUJ5TmFtZShwcmV2aW91c1VzZXJuYW1lKTtcblx0XHRpZiAoZmlsZSkge1xuXHRcdFx0ZmlsZVN0b3JlLm1vZGVsLnVwZGF0ZUZpbGVOYW1lQnlJZChmaWxlLl9pZCwgdXNlcm5hbWUpO1xuXHRcdH1cblx0fVxuXHQvLyBTZXQgbmV3IHVzZXJuYW1lKlxuXHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5zZXRVc2VybmFtZSh1c2VyLl9pZCwgdXNlcm5hbWUpO1xuXHRyZXR1cm4gdXNlcjtcbn07XG5cblJvY2tldENoYXQuc2V0VXNlcm5hbWUgPSBSb2NrZXRDaGF0LlJhdGVMaW1pdGVyLmxpbWl0RnVuY3Rpb24oUm9ja2V0Q2hhdC5fc2V0VXNlcm5hbWUsIDEsIDYwMDAwLCB7XG5cdFswXSh1c2VySWQpIHtcblx0XHRyZXR1cm4gIXVzZXJJZCB8fCAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2VkaXQtb3RoZXItdXNlci1pbmZvJyk7XG5cdH1cbn0pO1xuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0Ll9zZXRSZWFsTmFtZSA9IGZ1bmN0aW9uKHVzZXJJZCwgbmFtZSkge1xuXHRuYW1lID0gcy50cmltKG5hbWUpO1xuXHRpZiAoIXVzZXJJZCB8fCAhbmFtZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZCh1c2VySWQpO1xuXG5cdC8vIFVzZXIgYWxyZWFkeSBoYXMgZGVzaXJlZCBuYW1lLCByZXR1cm5cblx0aWYgKHVzZXIubmFtZSA9PT0gbmFtZSkge1xuXHRcdHJldHVybiB1c2VyO1xuXHR9XG5cblx0Ly8gU2V0IG5ldyBuYW1lXG5cdFJvY2tldENoYXQubW9kZWxzLlVzZXJzLnNldE5hbWUodXNlci5faWQsIG5hbWUpO1xuXHR1c2VyLm5hbWUgPSBuYW1lO1xuXG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpID09PSB0cnVlKSB7XG5cdFx0Um9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeUxvZ2dlZCgnVXNlcnM6TmFtZUNoYW5nZWQnLCB7XG5cdFx0XHRfaWQ6IHVzZXIuX2lkLFxuXHRcdFx0bmFtZTogdXNlci5uYW1lLFxuXHRcdFx0dXNlcm5hbWU6IHVzZXIudXNlcm5hbWVcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB1c2VyO1xufTtcblxuUm9ja2V0Q2hhdC5zZXRSZWFsTmFtZSA9IFJvY2tldENoYXQuUmF0ZUxpbWl0ZXIubGltaXRGdW5jdGlvbihSb2NrZXRDaGF0Ll9zZXRSZWFsTmFtZSwgMSwgNjAwMDAsIHtcblx0MCgpIHsgcmV0dXJuICFNZXRlb3IudXNlcklkKCkgfHwgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdlZGl0LW90aGVyLXVzZXItaW5mbycpOyB9IC8vIEFkbWluaXN0cmF0b3JzIGhhdmUgcGVybWlzc2lvbiB0byBjaGFuZ2Ugb3RoZXJzIG5hbWVzLCBzbyBkb24ndCBsaW1pdCB0aG9zZVxufSk7XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQuX3NldEVtYWlsID0gZnVuY3Rpb24odXNlcklkLCBlbWFpbCkge1xuXHRlbWFpbCA9IHMudHJpbShlbWFpbCk7XG5cdGlmICghdXNlcklkKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgZnVuY3Rpb246ICdfc2V0RW1haWwnIH0pO1xuXHR9XG5cblx0aWYgKCFlbWFpbCkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtZW1haWwnLCAnSW52YWxpZCBlbWFpbCcsIHsgZnVuY3Rpb246ICdfc2V0RW1haWwnIH0pO1xuXHR9XG5cblx0Um9ja2V0Q2hhdC52YWxpZGF0ZUVtYWlsRG9tYWluKGVtYWlsKTtcblxuXHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQodXNlcklkKTtcblxuXHQvLyBVc2VyIGFscmVhZHkgaGFzIGRlc2lyZWQgdXNlcm5hbWUsIHJldHVyblxuXHRpZiAodXNlci5lbWFpbHMgJiYgdXNlci5lbWFpbHNbMF0gJiYgdXNlci5lbWFpbHNbMF0uYWRkcmVzcyA9PT0gZW1haWwpIHtcblx0XHRyZXR1cm4gdXNlcjtcblx0fVxuXG5cdC8vIENoZWNrIGVtYWlsIGF2YWlsYWJpbGl0eVxuXHRpZiAoIVJvY2tldENoYXQuY2hlY2tFbWFpbEF2YWlsYWJpbGl0eShlbWFpbCkpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1maWVsZC11bmF2YWlsYWJsZScsIGAkeyBlbWFpbCB9IGlzIGFscmVhZHkgaW4gdXNlIDooYCwgeyBmdW5jdGlvbjogJ19zZXRFbWFpbCcsIGZpZWxkOiBlbWFpbCB9KTtcblx0fVxuXG5cdC8vIFNldCBuZXcgZW1haWxcblx0Um9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuc2V0RW1haWwodXNlci5faWQsIGVtYWlsKTtcblx0dXNlci5lbWFpbCA9IGVtYWlsO1xuXHRyZXR1cm4gdXNlcjtcbn07XG5cblJvY2tldENoYXQuc2V0RW1haWwgPSBSb2NrZXRDaGF0LlJhdGVMaW1pdGVyLmxpbWl0RnVuY3Rpb24oUm9ja2V0Q2hhdC5fc2V0RW1haWwsIDEsIDYwMDAwLCB7XG5cdDAoKSB7IHJldHVybiAhTWV0ZW9yLnVzZXJJZCgpIHx8ICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAnZWRpdC1vdGhlci11c2VyLWluZm8nKTsgfSAvLyBBZG1pbmlzdHJhdG9ycyBoYXZlIHBlcm1pc3Npb24gdG8gY2hhbmdlIG90aGVycyBlbWFpbHMsIHNvIGRvbid0IGxpbWl0IHRob3NlXG59KTtcbiIsIlJvY2tldENoYXQudW5hcmNoaXZlUm9vbSA9IGZ1bmN0aW9uKHJpZCkge1xuXHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy51bmFyY2hpdmVCeUlkKHJpZCk7XG5cdFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMudW5hcmNoaXZlQnlSb29tSWQocmlkKTtcbn07XG4iLCJSb2NrZXRDaGF0LnVwZGF0ZU1lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlLCB1c2VyKSB7XG5cdC8vIElmIHdlIGtlZXAgaGlzdG9yeSBvZiBlZGl0cywgaW5zZXJ0IGEgbmV3IG1lc3NhZ2UgdG8gc3RvcmUgaGlzdG9yeSBpbmZvcm1hdGlvblxuXHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ01lc3NhZ2VfS2VlcEhpc3RvcnknKSkge1xuXHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmNsb25lQW5kU2F2ZUFzSGlzdG9yeUJ5SWQobWVzc2FnZS5faWQpO1xuXHR9XG5cblx0bWVzc2FnZS5lZGl0ZWRBdCA9IG5ldyBEYXRlKCk7XG5cdG1lc3NhZ2UuZWRpdGVkQnkgPSB7XG5cdFx0X2lkOiB1c2VyLl9pZCxcblx0XHR1c2VybmFtZTogdXNlci51c2VybmFtZVxuXHR9O1xuXG5cdGNvbnN0IHVybHMgPSBtZXNzYWdlLm1zZy5tYXRjaCgvKFtBLVphLXpdezMsOX0pOlxcL1xcLyhbLTs6Jj1cXCtcXCQsXFx3XStAezF9KT8oWy1BLVphLXowLTlcXC5dKykrOj8oXFxkKyk/KChcXC9bLVxcKz0hOn4lXFwvXFwuQFxcLFxcd10qKT9cXD8/KFstXFwrPSYhOjslQFxcL1xcLlxcLFxcd10rKT8oPzojKFteXFxzXFwpXSspKT8pPy9nKTtcblx0aWYgKHVybHMpIHtcblx0XHRtZXNzYWdlLnVybHMgPSB1cmxzLm1hcCgodXJsKSA9PiB7IHJldHVybiB7IHVybCB9OyB9KTtcblx0fVxuXG5cdG1lc3NhZ2UgPSBSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ2JlZm9yZVNhdmVNZXNzYWdlJywgbWVzc2FnZSk7XG5cblx0Y29uc3QgdGVtcGlkID0gbWVzc2FnZS5faWQ7XG5cdGRlbGV0ZSBtZXNzYWdlLl9pZDtcblxuXHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy51cGRhdGUoeyBfaWQ6IHRlbXBpZCB9LCB7ICRzZXQ6IG1lc3NhZ2UgfSk7XG5cblx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKG1lc3NhZ2UucmlkKTtcblxuXHRNZXRlb3IuZGVmZXIoZnVuY3Rpb24oKSB7XG5cdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdhZnRlclNhdmVNZXNzYWdlJywgUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZE9uZUJ5SWQodGVtcGlkKSwgcm9vbSwgdXNlci5faWQpO1xuXHR9KTtcbn07XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQudmFsaWRhdGVDdXN0b21GaWVsZHMgPSBmdW5jdGlvbihmaWVsZHMpIHtcblx0Ly8gU3BlY2lhbCBDYXNlOlxuXHQvLyBJZiBhbiBhZG1pbiBkaWRuJ3Qgc2V0IGFueSBjdXN0b20gZmllbGRzIHRoZXJlJ3Mgbm90aGluZyB0byB2YWxpZGF0ZSBhZ2FpbnN0IHNvIGNvbnNpZGVyIGFueSBjdXN0b21GaWVsZHMgdmFsaWRcblx0aWYgKHMudHJpbShSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQ3VzdG9tRmllbGRzJykpID09PSAnJykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGxldCBjdXN0b21GaWVsZHNNZXRhO1xuXHR0cnkge1xuXHRcdGN1c3RvbUZpZWxkc01ldGEgPSBKU09OLnBhcnNlKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19DdXN0b21GaWVsZHMnKSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLWN1c3RvbWZpZWxkLWpzb24nLCAnSW52YWxpZCBKU09OIGZvciBDdXN0b20gRmllbGRzJyk7XG5cdH1cblxuXHRjb25zdCBjdXN0b21GaWVsZHMgPSB7fTtcblxuXHRPYmplY3Qua2V5cyhjdXN0b21GaWVsZHNNZXRhKS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcblx0XHRjb25zdCBmaWVsZCA9IGN1c3RvbUZpZWxkc01ldGFbZmllbGROYW1lXTtcblxuXHRcdGN1c3RvbUZpZWxkc1tmaWVsZE5hbWVdID0gZmllbGRzW2ZpZWxkTmFtZV07XG5cdFx0Y29uc3QgZmllbGRWYWx1ZSA9IHMudHJpbShmaWVsZHNbZmllbGROYW1lXSk7XG5cblx0XHRpZiAoZmllbGQucmVxdWlyZWQgJiYgZmllbGRWYWx1ZSA9PT0gJycpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLXVzZXItcmVnaXN0cmF0aW9uLWN1c3RvbS1maWVsZCcsIGBGaWVsZCAkeyBmaWVsZE5hbWUgfSBpcyByZXF1aXJlZGAsIHttZXRob2Q6ICdyZWdpc3RlclVzZXInfSk7XG5cdFx0fVxuXG5cdFx0aWYgKGZpZWxkLnR5cGUgPT09ICdzZWxlY3QnICYmIGZpZWxkLm9wdGlvbnMuaW5kZXhPZihmaWVsZHNbZmllbGROYW1lXSkgPT09IC0xKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci11c2VyLXJlZ2lzdHJhdGlvbi1jdXN0b20tZmllbGQnLCBgVmFsdWUgZm9yIGZpZWxkICR7IGZpZWxkTmFtZSB9IGlzIGludmFsaWRgLCB7bWV0aG9kOiAncmVnaXN0ZXJVc2VyJ30pO1xuXHRcdH1cblxuXHRcdGlmIChmaWVsZC5tYXhMZW5ndGggJiYgZmllbGRWYWx1ZS5sZW5ndGggPiBmaWVsZC5tYXhMZW5ndGgpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLXVzZXItcmVnaXN0cmF0aW9uLWN1c3RvbS1maWVsZCcsIGBNYXggbGVuZ3RoIG9mIGZpZWxkICR7IGZpZWxkTmFtZSB9ICR7IGZpZWxkLm1heExlbmd0aCB9YCwge21ldGhvZDogJ3JlZ2lzdGVyVXNlcid9KTtcblx0XHR9XG5cblx0XHRpZiAoZmllbGQubWluTGVuZ3RoICYmIGZpZWxkVmFsdWUubGVuZ3RoIDwgZmllbGQubWluTGVuZ3RoKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci11c2VyLXJlZ2lzdHJhdGlvbi1jdXN0b20tZmllbGQnLCBgTWluIGxlbmd0aCBvZiBmaWVsZCAkeyBmaWVsZE5hbWUgfSAkeyBmaWVsZC5taW5MZW5ndGggfWAsIHttZXRob2Q6ICdyZWdpc3RlclVzZXInfSk7XG5cdFx0fVxuXHR9KTtcbn07XG4iLCJSb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMgPSBuZXcgY2xhc3Mge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmRlYnVnID0gZmFsc2U7XG5cdFx0dGhpcy5zdHJlYW1BbGwgPSBuZXcgTWV0ZW9yLlN0cmVhbWVyKCdub3RpZnktYWxsJyk7XG5cdFx0dGhpcy5zdHJlYW1Mb2dnZWQgPSBuZXcgTWV0ZW9yLlN0cmVhbWVyKCdub3RpZnktbG9nZ2VkJyk7XG5cdFx0dGhpcy5zdHJlYW1Sb29tID0gbmV3IE1ldGVvci5TdHJlYW1lcignbm90aWZ5LXJvb20nKTtcblx0XHR0aGlzLnN0cmVhbVJvb21Vc2VycyA9IG5ldyBNZXRlb3IuU3RyZWFtZXIoJ25vdGlmeS1yb29tLXVzZXJzJyk7XG5cdFx0dGhpcy5zdHJlYW1Vc2VyID0gbmV3IE1ldGVvci5TdHJlYW1lcignbm90aWZ5LXVzZXInKTtcblx0XHR0aGlzLnN0cmVhbUFsbC5hbGxvd1dyaXRlKCdub25lJyk7XG5cdFx0dGhpcy5zdHJlYW1Mb2dnZWQuYWxsb3dXcml0ZSgnbm9uZScpO1xuXHRcdHRoaXMuc3RyZWFtUm9vbS5hbGxvd1dyaXRlKCdub25lJyk7XG5cdFx0dGhpcy5zdHJlYW1Sb29tVXNlcnMuYWxsb3dXcml0ZShmdW5jdGlvbihldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRcdGNvbnN0IFtyb29tSWQsIGVdID0gZXZlbnROYW1lLnNwbGl0KCcvJyk7XG5cdFx0XHQvLyBjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXJzLmZpbmRPbmUodGhpcy51c2VySWQsIHtcblx0XHRcdC8vIFx0ZmllbGRzOiB7XG5cdFx0XHQvLyBcdFx0dXNlcm5hbWU6IDFcblx0XHRcdC8vIFx0fVxuXHRcdFx0Ly8gfSk7XG5cdFx0XHRpZiAoUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lQnlSb29tSWRBbmRVc2VySWQocm9vbUlkLCB0aGlzLnVzZXJJZCkgIT0gbnVsbCkge1xuXHRcdFx0XHRjb25zdCBzdWJzY3JpcHRpb25zID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kQnlSb29tSWRBbmROb3RVc2VySWQocm9vbUlkLCB0aGlzLnVzZXJJZCkuZmV0Y2goKTtcblx0XHRcdFx0c3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YnNjcmlwdGlvbiA9PiBSb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMubm90aWZ5VXNlcihzdWJzY3JpcHRpb24udS5faWQsIGUsIC4uLmFyZ3MpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9KTtcblx0XHR0aGlzLnN0cmVhbVVzZXIuYWxsb3dXcml0ZSgnbG9nZ2VkJyk7XG5cdFx0dGhpcy5zdHJlYW1BbGwuYWxsb3dSZWFkKCdhbGwnKTtcblx0XHR0aGlzLnN0cmVhbUxvZ2dlZC5hbGxvd1JlYWQoJ2xvZ2dlZCcpO1xuXHRcdHRoaXMuc3RyZWFtUm9vbS5hbGxvd1JlYWQoZnVuY3Rpb24oZXZlbnROYW1lKSB7XG5cdFx0XHRpZiAodGhpcy51c2VySWQgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBbcm9vbUlkXSA9IGV2ZW50TmFtZS5zcGxpdCgnLycpO1xuXHRcdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2Vycy5maW5kT25lKHRoaXMudXNlcklkLCB7XG5cdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdHVzZXJuYW1lOiAxXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKHJvb21JZCk7XG5cdFx0XHRpZiAoIXJvb20pIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKGBJbnZhbGlkIHN0cmVhbVJvb20gZXZlbnROYW1lOiBcIiR7IGV2ZW50TmFtZSB9XCJgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJvb20udCA9PT0gJ2wnICYmIHJvb20udi5faWQgPT09IHVzZXIuX2lkKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJvb20udXNlcm5hbWVzLmluZGV4T2YodXNlci51c2VybmFtZSkgPiAtMTtcblx0XHR9KTtcblx0XHR0aGlzLnN0cmVhbVJvb21Vc2Vycy5hbGxvd1JlYWQoJ25vbmUnKTtcblx0XHR0aGlzLnN0cmVhbVVzZXIuYWxsb3dSZWFkKGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuXHRcdFx0Y29uc3QgW3VzZXJJZF0gPSBldmVudE5hbWUuc3BsaXQoJy8nKTtcblx0XHRcdHJldHVybiAodGhpcy51c2VySWQgIT0gbnVsbCkgJiYgdGhpcy51c2VySWQgPT09IHVzZXJJZDtcblx0XHR9KTtcblx0fVxuXG5cdG5vdGlmeUFsbChldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeUFsbCcsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXHRcdGFyZ3MudW5zaGlmdChldmVudE5hbWUpO1xuXHRcdHJldHVybiB0aGlzLnN0cmVhbUFsbC5lbWl0LmFwcGx5KHRoaXMuc3RyZWFtQWxsLCBhcmdzKTtcblx0fVxuXG5cdG5vdGlmeUxvZ2dlZChldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeUxvZ2dlZCcsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXHRcdGFyZ3MudW5zaGlmdChldmVudE5hbWUpO1xuXHRcdHJldHVybiB0aGlzLnN0cmVhbUxvZ2dlZC5lbWl0LmFwcGx5KHRoaXMuc3RyZWFtTG9nZ2VkLCBhcmdzKTtcblx0fVxuXG5cdG5vdGlmeVJvb20ocm9vbSwgZXZlbnROYW1lLCAuLi5hcmdzKSB7XG5cdFx0aWYgKHRoaXMuZGVidWcgPT09IHRydWUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdub3RpZnlSb29tJywgYXJndW1lbnRzKTtcblx0XHR9XG5cdFx0YXJncy51bnNoaWZ0KGAkeyByb29tIH0vJHsgZXZlbnROYW1lIH1gKTtcblx0XHRyZXR1cm4gdGhpcy5zdHJlYW1Sb29tLmVtaXQuYXBwbHkodGhpcy5zdHJlYW1Sb29tLCBhcmdzKTtcblx0fVxuXG5cdG5vdGlmeVVzZXIodXNlcklkLCBldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeVVzZXInLCBhcmd1bWVudHMpO1xuXHRcdH1cblx0XHRhcmdzLnVuc2hpZnQoYCR7IHVzZXJJZCB9LyR7IGV2ZW50TmFtZSB9YCk7XG5cdFx0cmV0dXJuIHRoaXMuc3RyZWFtVXNlci5lbWl0LmFwcGx5KHRoaXMuc3RyZWFtVXNlciwgYXJncyk7XG5cdH1cblxuXHRub3RpZnlBbGxJblRoaXNJbnN0YW5jZShldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeUFsbCcsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXHRcdGFyZ3MudW5zaGlmdChldmVudE5hbWUpO1xuXHRcdHJldHVybiB0aGlzLnN0cmVhbUFsbC5lbWl0V2l0aG91dEJyb2FkY2FzdC5hcHBseSh0aGlzLnN0cmVhbUFsbCwgYXJncyk7XG5cdH1cblxuXHRub3RpZnlMb2dnZWRJblRoaXNJbnN0YW5jZShldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeUxvZ2dlZCcsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXHRcdGFyZ3MudW5zaGlmdChldmVudE5hbWUpO1xuXHRcdHJldHVybiB0aGlzLnN0cmVhbUxvZ2dlZC5lbWl0V2l0aG91dEJyb2FkY2FzdC5hcHBseSh0aGlzLnN0cmVhbUxvZ2dlZCwgYXJncyk7XG5cdH1cblxuXHRub3RpZnlSb29tSW5UaGlzSW5zdGFuY2Uocm9vbSwgZXZlbnROYW1lLCAuLi5hcmdzKSB7XG5cdFx0aWYgKHRoaXMuZGVidWcgPT09IHRydWUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdub3RpZnlSb29tQW5kQnJvYWRjYXN0JywgYXJndW1lbnRzKTtcblx0XHR9XG5cdFx0YXJncy51bnNoaWZ0KGAkeyByb29tIH0vJHsgZXZlbnROYW1lIH1gKTtcblx0XHRyZXR1cm4gdGhpcy5zdHJlYW1Sb29tLmVtaXRXaXRob3V0QnJvYWRjYXN0LmFwcGx5KHRoaXMuc3RyZWFtUm9vbSwgYXJncyk7XG5cdH1cblxuXHRub3RpZnlVc2VySW5UaGlzSW5zdGFuY2UodXNlcklkLCBldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeVVzZXJBbmRCcm9hZGNhc3QnLCBhcmd1bWVudHMpO1xuXHRcdH1cblx0XHRhcmdzLnVuc2hpZnQoYCR7IHVzZXJJZCB9LyR7IGV2ZW50TmFtZSB9YCk7XG5cdFx0cmV0dXJuIHRoaXMuc3RyZWFtVXNlci5lbWl0V2l0aG91dEJyb2FkY2FzdC5hcHBseSh0aGlzLnN0cmVhbVVzZXIsIGFyZ3MpO1xuXHR9XG59O1xuXG5Sb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMuc3RyZWFtUm9vbS5hbGxvd1dyaXRlKGZ1bmN0aW9uKGV2ZW50TmFtZSwgdXNlcm5hbWUpIHtcblx0Y29uc3QgWywgZV0gPSBldmVudE5hbWUuc3BsaXQoJy8nKTtcblx0aWYgKGUgPT09ICd3ZWJydGMnKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKGUgPT09ICd0eXBpbmcnKSB7XG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2Vycy5maW5kT25lKHRoaXMudXNlcklkLCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0dXNlcm5hbWU6IDFcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpZiAodXNlciAhPSBudWxsICYmIHVzZXIudXNlcm5hbWUgPT09IHVzZXJuYW1lKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufSk7XG4iLCJpbXBvcnQgTW9kZWxzQmFzZURiIGZyb20gJy4vX0Jhc2VEYic7XG5pbXBvcnQgTW9kZWxzQmFzZUNhY2hlIGZyb20gJy4vX0Jhc2VDYWNoZSc7XG5cblJvY2tldENoYXQubW9kZWxzLl9DYWNoZUNvbnRyb2wgPSBuZXcgTWV0ZW9yLkVudmlyb25tZW50VmFyaWFibGUoKTtcblxuY2xhc3MgTW9kZWxzQmFzZSB7XG5cdGNvbnN0cnVjdG9yKG5hbWVPck1vZGVsLCB1c2VDYWNoZSkge1xuXHRcdHRoaXMuX2RiID0gbmV3IE1vZGVsc0Jhc2VEYihuYW1lT3JNb2RlbCwgdGhpcyk7XG5cdFx0dGhpcy5tb2RlbCA9IHRoaXMuX2RiLm1vZGVsO1xuXHRcdHRoaXMuY29sbGVjdGlvbk5hbWUgPSB0aGlzLl9kYi5jb2xsZWN0aW9uTmFtZTtcblx0XHR0aGlzLm5hbWUgPSB0aGlzLl9kYi5uYW1lO1xuXG5cdFx0dGhpcy5fdXNlQ2FjaGUgPSB1c2VDYWNoZSA9PT0gdHJ1ZTtcblxuXHRcdHRoaXMuY2FjaGUgPSBuZXcgTW9kZWxzQmFzZUNhY2hlKHRoaXMpO1xuXHRcdC8vIFRPRE9fQ0FDSEU6IHJlbW92ZVxuXHRcdHRoaXMub24gPSB0aGlzLmNhY2hlLm9uLmJpbmQodGhpcy5jYWNoZSk7XG5cdFx0dGhpcy5lbWl0ID0gdGhpcy5jYWNoZS5lbWl0LmJpbmQodGhpcy5jYWNoZSk7XG5cdFx0dGhpcy5nZXREeW5hbWljVmlldyA9IHRoaXMuY2FjaGUuZ2V0RHluYW1pY1ZpZXcuYmluZCh0aGlzLmNhY2hlKTtcblx0XHR0aGlzLnByb2Nlc3NRdWVyeU9wdGlvbnNPblJlc3VsdCA9IHRoaXMuY2FjaGUucHJvY2Vzc1F1ZXJ5T3B0aW9uc09uUmVzdWx0LmJpbmQodGhpcy5jYWNoZSk7XG5cdFx0Ly8gRU5EX1RPRE9fQ0FDSEVcblxuXHRcdHRoaXMuZGIgPSB0aGlzO1xuXG5cdFx0aWYgKHRoaXMuX3VzZUNhY2hlKSB7XG5cdFx0XHR0aGlzLmRiID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5tb2RlbCwgZmFsc2UpO1xuXHRcdH1cblx0fVxuXG5cdGdldCB1c2VDYWNoZSgpIHtcblx0XHRpZiAoUm9ja2V0Q2hhdC5tb2RlbHMuX0NhY2hlQ29udHJvbC5nZXQoKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fdXNlQ2FjaGU7XG5cdH1cblxuXHRnZXQgb3JpZ2luKCkge1xuXHRcdHJldHVybiB0aGlzLnVzZUNhY2hlID09PSB0cnVlID8gJ2NhY2hlJyA6ICdfZGInO1xuXHR9XG5cblx0YXJyYXlUb0N1cnNvcihkYXRhKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZldGNoKCkge1xuXHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdH0sXG5cdFx0XHRjb3VudCgpIHtcblx0XHRcdFx0cmV0dXJuIGRhdGEubGVuZ3RoO1xuXHRcdFx0fSxcblx0XHRcdGZvckVhY2goZm4pIHtcblx0XHRcdFx0cmV0dXJuIGRhdGEuZm9yRWFjaChmbik7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdHNldFVwZGF0ZWRBdCgvKnJlY29yZCwgY2hlY2tRdWVyeSwgcXVlcnkqLykge1xuXHRcdHJldHVybiB0aGlzLl9kYi5zZXRVcGRhdGVkQXQoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGZpbmQoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiB0aGlzW3RoaXMub3JpZ2luXS5maW5kKC4uLmFyZ3VtZW50cyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRXhjZXB0aW9uIG9uIGZpbmQnLCBlLCAuLi5hcmd1bWVudHMpO1xuXHRcdH1cblx0fVxuXG5cdGZpbmRPbmUoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiB0aGlzW3RoaXMub3JpZ2luXS5maW5kT25lKC4uLmFyZ3VtZW50cyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRXhjZXB0aW9uIG9uIGZpbmQnLCBlLCAuLi5hcmd1bWVudHMpO1xuXHRcdH1cblx0fVxuXG5cdGZpbmRPbmVCeUlkKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gdGhpc1t0aGlzLm9yaWdpbl0uZmluZE9uZUJ5SWQoLi4uYXJndW1lbnRzKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdFeGNlcHRpb24gb24gZmluZCcsIGUsIC4uLmFyZ3VtZW50cyk7XG5cdFx0fVxuXHR9XG5cblx0ZmluZE9uZUJ5SWRzKGlkcywgb3B0aW9ucykge1xuXHRcdGNoZWNrKGlkcywgW1N0cmluZ10pO1xuXG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiB0aGlzW3RoaXMub3JpZ2luXS5maW5kT25lQnlJZHMoaWRzLCBvcHRpb25zKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdFeGNlcHRpb24gb24gZmluZCcsIGUsIC4uLmFyZ3VtZW50cyk7XG5cdFx0fVxuXHR9XG5cblx0aW5zZXJ0KC8qcmVjb3JkKi8pIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIuaW5zZXJ0KC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHR1cGRhdGUoLypxdWVyeSwgdXBkYXRlLCBvcHRpb25zKi8pIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIudXBkYXRlKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHR1cHNlcnQoLypxdWVyeSwgdXBkYXRlKi8pIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIudXBzZXJ0KC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRyZW1vdmUoLypxdWVyeSovKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RiLnJlbW92ZSguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0aW5zZXJ0T3JVcHNlcnQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RiLmluc2VydE9yVXBzZXJ0KC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRhbGxvdygpIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIuYWxsb3coLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGRlbnkoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RiLmRlbnkoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGVuc3VyZUluZGV4KCkge1xuXHRcdHJldHVybiB0aGlzLl9kYi5lbnN1cmVJbmRleCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0ZHJvcEluZGV4KCkge1xuXHRcdHJldHVybiB0aGlzLl9kYi5kcm9wSW5kZXgoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdHRyeUVuc3VyZUluZGV4KCkge1xuXHRcdHJldHVybiB0aGlzLl9kYi50cnlFbnN1cmVJbmRleCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0dHJ5RHJvcEluZGV4KCkge1xuXHRcdHJldHVybiB0aGlzLl9kYi50cnlEcm9wSW5kZXgoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdHRyYXNoRmluZCgvKnF1ZXJ5LCBvcHRpb25zKi8pIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIudHJhc2hGaW5kKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHR0cmFzaEZpbmREZWxldGVkQWZ0ZXIoLypkZWxldGVkQXQsIHF1ZXJ5LCBvcHRpb25zKi8pIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIudHJhc2hGaW5kRGVsZXRlZEFmdGVyKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHQvLyBkaW5hbWljVHJhc2hGaW5kQWZ0ZXIobWV0aG9kLCBkZWxldGVkQXQsIC4uLmFyZ3MpIHtcblx0Ly8gXHRjb25zdCBzY29wZSA9IHtcblx0Ly8gXHRcdGZpbmQ6IChxdWVyeT17fSkgPT4ge1xuXHQvLyBcdFx0XHRyZXR1cm4gdGhpcy50cmFzaEZpbmREZWxldGVkQWZ0ZXIoZGVsZXRlZEF0LCBxdWVyeSwgeyBmaWVsZHM6IHtfaWQ6IDEsIF9kZWxldGVkQXQ6IDF9IH0pO1xuXHQvLyBcdFx0fVxuXHQvLyBcdH07XG5cblx0Ly8gXHRzY29wZS5tb2RlbCA9IHtcblx0Ly8gXHRcdGZpbmQ6IHNjb3BlLmZpbmRcblx0Ly8gXHR9O1xuXG5cdC8vIFx0cmV0dXJuIHRoaXNbbWV0aG9kXS5hcHBseShzY29wZSwgYXJncyk7XG5cdC8vIH1cblxuXHQvLyBkaW5hbWljRmluZEFmdGVyKG1ldGhvZCwgdXBkYXRlZEF0LCAuLi5hcmdzKSB7XG5cdC8vIFx0Y29uc3Qgc2NvcGUgPSB7XG5cdC8vIFx0XHRmaW5kOiAocXVlcnk9e30sIG9wdGlvbnMpID0+IHtcblx0Ly8gXHRcdFx0cXVlcnkuX3VwZGF0ZWRBdCA9IHtcblx0Ly8gXHRcdFx0XHQkZ3Q6IHVwZGF0ZWRBdFxuXHQvLyBcdFx0XHR9O1xuXG5cdC8vIFx0XHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHQvLyBcdFx0fVxuXHQvLyBcdH07XG5cblx0Ly8gXHRzY29wZS5tb2RlbCA9IHtcblx0Ly8gXHRcdGZpbmQ6IHNjb3BlLmZpbmRcblx0Ly8gXHR9O1xuXG5cdC8vIFx0cmV0dXJuIHRoaXNbbWV0aG9kXS5hcHBseShzY29wZSwgYXJncyk7XG5cdC8vIH1cblxuXHQvLyBkaW5hbWljRmluZENoYW5nZXNBZnRlcihtZXRob2QsIHVwZGF0ZWRBdCwgLi4uYXJncykge1xuXHQvLyBcdHJldHVybiB7XG5cdC8vIFx0XHR1cGRhdGU6IHRoaXMuZGluYW1pY0ZpbmRBZnRlcihtZXRob2QsIHVwZGF0ZWRBdCwgLi4uYXJncykuZmV0Y2goKSxcblx0Ly8gXHRcdHJlbW92ZTogdGhpcy5kaW5hbWljVHJhc2hGaW5kQWZ0ZXIobWV0aG9kLCB1cGRhdGVkQXQsIC4uLmFyZ3MpLmZldGNoKClcblx0Ly8gXHR9O1xuXHQvLyB9XG5cbn1cblxuUm9ja2V0Q2hhdC5tb2RlbHMuX0Jhc2UgPSBNb2RlbHNCYXNlO1xuIiwiLyogZ2xvYmFscyBJbnN0YW5jZVN0YXR1cyAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQubW9kZWxzLkF2YXRhcnMgPSBuZXcgY2xhc3MgZXh0ZW5kcyBSb2NrZXRDaGF0Lm1vZGVscy5fQmFzZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCdhdmF0YXJzJyk7XG5cblx0XHR0aGlzLm1vZGVsLmJlZm9yZS5pbnNlcnQoKHVzZXJJZCwgZG9jKSA9PiB7XG5cdFx0XHRkb2MuaW5zdGFuY2VJZCA9IEluc3RhbmNlU3RhdHVzLmlkKCk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgbmFtZTogMSB9KTtcblx0fVxuXG5cdGluc2VydEF2YXRhckZpbGVJbml0KG5hbWUsIHVzZXJJZCwgc3RvcmUsIGZpbGUsIGV4dHJhKSB7XG5cdFx0Y29uc3QgZmlsZURhdGEgPSB7XG5cdFx0XHRfaWQ6IG5hbWUsXG5cdFx0XHRuYW1lLFxuXHRcdFx0dXNlcklkLFxuXHRcdFx0c3RvcmUsXG5cdFx0XHRjb21wbGV0ZTogZmFsc2UsXG5cdFx0XHR1cGxvYWRpbmc6IHRydWUsXG5cdFx0XHRwcm9ncmVzczogMCxcblx0XHRcdGV4dGVuc2lvbjogcy5zdHJSaWdodEJhY2soZmlsZS5uYW1lLCAnLicpLFxuXHRcdFx0dXBsb2FkZWRBdDogbmV3IERhdGUoKVxuXHRcdH07XG5cblx0XHRfLmV4dGVuZChmaWxlRGF0YSwgZmlsZSwgZXh0cmEpO1xuXG5cdFx0cmV0dXJuIHRoaXMuaW5zZXJ0T3JVcHNlcnQoZmlsZURhdGEpO1xuXHR9XG5cblx0dXBkYXRlRmlsZUNvbXBsZXRlKGZpbGVJZCwgdXNlcklkLCBmaWxlKSB7XG5cdFx0aWYgKCFmaWxlSWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBmaWx0ZXIgPSB7XG5cdFx0XHRfaWQ6IGZpbGVJZCxcblx0XHRcdHVzZXJJZFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGNvbXBsZXRlOiB0cnVlLFxuXHRcdFx0XHR1cGxvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRwcm9ncmVzczogMVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR1cGRhdGUuJHNldCA9IF8uZXh0ZW5kKGZpbGUsIHVwZGF0ZS4kc2V0KTtcblxuXHRcdGlmICh0aGlzLm1vZGVsLmRpcmVjdCAmJiB0aGlzLm1vZGVsLmRpcmVjdC51cGRhdGUpIHtcblx0XHRcdHJldHVybiB0aGlzLm1vZGVsLmRpcmVjdC51cGRhdGUoZmlsdGVyLCB1cGRhdGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy51cGRhdGUoZmlsdGVyLCB1cGRhdGUpO1xuXHRcdH1cblx0fVxuXG5cdGZpbmRPbmVCeU5hbWUobmFtZSkge1xuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUoeyBuYW1lIH0pO1xuXHR9XG5cblx0dXBkYXRlRmlsZU5hbWVCeUlkKGZpbGVJZCwgbmFtZSkge1xuXHRcdGNvbnN0IGZpbHRlciA9IHsgX2lkOiBmaWxlSWQgfTtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdG5hbWVcblx0XHRcdH1cblx0XHR9O1xuXHRcdGlmICh0aGlzLm1vZGVsLmRpcmVjdCAmJiB0aGlzLm1vZGVsLmRpcmVjdC51cGRhdGUpIHtcblx0XHRcdHJldHVybiB0aGlzLm1vZGVsLmRpcmVjdC51cGRhdGUoZmlsdGVyLCB1cGRhdGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy51cGRhdGUoZmlsdGVyLCB1cGRhdGUpO1xuXHRcdH1cblx0fVxuXG5cdC8vIEBUT0RPIGRlcHJlY2F0ZWRcblx0dXBkYXRlRmlsZUNvbXBsZXRlQnlOYW1lQW5kVXNlcklkKG5hbWUsIHVzZXJJZCwgdXJsKSB7XG5cdFx0aWYgKCFuYW1lKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZmlsdGVyID0ge1xuXHRcdFx0bmFtZSxcblx0XHRcdHVzZXJJZFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGNvbXBsZXRlOiB0cnVlLFxuXHRcdFx0XHR1cGxvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRwcm9ncmVzczogMSxcblx0XHRcdFx0dXJsXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmICh0aGlzLm1vZGVsLmRpcmVjdCAmJiB0aGlzLm1vZGVsLmRpcmVjdC51cGRhdGUpIHtcblx0XHRcdHJldHVybiB0aGlzLm1vZGVsLmRpcmVjdC51cGRhdGUoZmlsdGVyLCB1cGRhdGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy51cGRhdGUoZmlsdGVyLCB1cGRhdGUpO1xuXHRcdH1cblx0fVxuXG5cdGRlbGV0ZUZpbGUoZmlsZUlkKSB7XG5cdFx0aWYgKHRoaXMubW9kZWwuZGlyZWN0ICYmIHRoaXMubW9kZWwuZGlyZWN0LnJlbW92ZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMubW9kZWwuZGlyZWN0LnJlbW92ZSh7IF9pZDogZmlsZUlkIH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoeyBfaWQ6IGZpbGVJZCB9KTtcblx0XHR9XG5cdH1cbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMgPSBuZXcgY2xhc3MgZXh0ZW5kcyBSb2NrZXRDaGF0Lm1vZGVscy5fQmFzZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCdtZXNzYWdlJyk7XG5cblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ3JpZCc6IDEsICd0cyc6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICd0cyc6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICd1Ll9pZCc6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdlZGl0ZWRBdCc6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdlZGl0ZWRCeS5faWQnOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAncmlkJzogMSwgJ3QnOiAxLCAndS5faWQnOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnZXhwaXJlQXQnOiAxIH0sIHsgZXhwaXJlQWZ0ZXJTZWNvbmRzOiAwIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnbXNnJzogJ3RleHQnIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnZmlsZS5faWQnOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnbWVudGlvbnMudXNlcm5hbWUnOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAncGlubmVkJzogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ3NuaXBwZXRlZCc6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdsb2NhdGlvbic6ICcyZHNwaGVyZScgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdzbGFja0JvdElkJzogMSwgJ3NsYWNrVHMnOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHR9XG5cblx0Ly8gRklORFxuXHRmaW5kQnlNZW50aW9uKHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVx0eydtZW50aW9ucy51c2VybmFtZSc6IHVzZXJuYW1lfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZFZpc2libGVCeU1lbnRpb25BbmRSb29tSWQodXNlcm5hbWUsIHJpZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjogeyAkbmU6IHRydWUgfSxcblx0XHRcdCdtZW50aW9ucy51c2VybmFtZSc6IHVzZXJuYW1lLFxuXHRcdFx0cmlkXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZFZpc2libGVCeVJvb21JZChyb29tSWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9oaWRkZW46IHtcblx0XHRcdFx0JG5lOiB0cnVlXG5cdFx0XHR9LFxuXG5cdFx0XHRyaWQ6IHJvb21JZFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRWaXNpYmxlQnlSb29tSWROb3RDb250YWluaW5nVHlwZXMocm9vbUlkLCB0eXBlcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjoge1xuXHRcdFx0XHQkbmU6IHRydWVcblx0XHRcdH0sXG5cblx0XHRcdHJpZDogcm9vbUlkXG5cdFx0fTtcblxuXHRcdGlmIChNYXRjaC50ZXN0KHR5cGVzLCBbU3RyaW5nXSkgJiYgKHR5cGVzLmxlbmd0aCA+IDApKSB7XG5cdFx0XHRxdWVyeS50ID1cblx0XHRcdHskbmluOiB0eXBlc307XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kSW52aXNpYmxlQnlSb29tSWQocm9vbUlkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB0cnVlLFxuXHRcdFx0cmlkOiByb29tSWRcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVmlzaWJsZUJ5Um9vbUlkQWZ0ZXJUaW1lc3RhbXAocm9vbUlkLCB0aW1lc3RhbXAsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9oaWRkZW46IHtcblx0XHRcdFx0JG5lOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHR0czoge1xuXHRcdFx0XHQkZ3Q6IHRpbWVzdGFtcFxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRGb3JVcGRhdGVzKHJvb21JZCwgdGltZXN0YW1wLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7XG5cdFx0XHRcdCRuZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0X3VwZGF0ZWRBdDoge1xuXHRcdFx0XHQkZ3Q6IHRpbWVzdGFtcFxuXHRcdFx0fVxuXHRcdH07XG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVmlzaWJsZUJ5Um9vbUlkQmVmb3JlVGltZXN0YW1wKHJvb21JZCwgdGltZXN0YW1wLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7XG5cdFx0XHRcdCRuZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0dHM6IHtcblx0XHRcdFx0JGx0OiB0aW1lc3RhbXBcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVmlzaWJsZUJ5Um9vbUlkQmVmb3JlVGltZXN0YW1wSW5jbHVzaXZlKHJvb21JZCwgdGltZXN0YW1wLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7XG5cdFx0XHRcdCRuZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0dHM6IHtcblx0XHRcdFx0JGx0ZTogdGltZXN0YW1wXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZFZpc2libGVCeVJvb21JZEJldHdlZW5UaW1lc3RhbXBzKHJvb21JZCwgYWZ0ZXJUaW1lc3RhbXAsIGJlZm9yZVRpbWVzdGFtcCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjoge1xuXHRcdFx0XHQkbmU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdHRzOiB7XG5cdFx0XHRcdCRndDogYWZ0ZXJUaW1lc3RhbXAsXG5cdFx0XHRcdCRsdDogYmVmb3JlVGltZXN0YW1wXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZFZpc2libGVCeVJvb21JZEJldHdlZW5UaW1lc3RhbXBzSW5jbHVzaXZlKHJvb21JZCwgYWZ0ZXJUaW1lc3RhbXAsIGJlZm9yZVRpbWVzdGFtcCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjoge1xuXHRcdFx0XHQkbmU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdHRzOiB7XG5cdFx0XHRcdCRndGU6IGFmdGVyVGltZXN0YW1wLFxuXHRcdFx0XHQkbHRlOiBiZWZvcmVUaW1lc3RhbXBcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVmlzaWJsZUJ5Um9vbUlkQmVmb3JlVGltZXN0YW1wTm90Q29udGFpbmluZ1R5cGVzKHJvb21JZCwgdGltZXN0YW1wLCB0eXBlcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjoge1xuXHRcdFx0XHQkbmU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdHRzOiB7XG5cdFx0XHRcdCRsdDogdGltZXN0YW1wXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmIChNYXRjaC50ZXN0KHR5cGVzLCBbU3RyaW5nXSkgJiYgKHR5cGVzLmxlbmd0aCA+IDApKSB7XG5cdFx0XHRxdWVyeS50ID1cblx0XHRcdHskbmluOiB0eXBlc307XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVmlzaWJsZUJ5Um9vbUlkQmV0d2VlblRpbWVzdGFtcHNOb3RDb250YWluaW5nVHlwZXMocm9vbUlkLCBhZnRlclRpbWVzdGFtcCwgYmVmb3JlVGltZXN0YW1wLCB0eXBlcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjoge1xuXHRcdFx0XHQkbmU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdHRzOiB7XG5cdFx0XHRcdCRndDogYWZ0ZXJUaW1lc3RhbXAsXG5cdFx0XHRcdCRsdDogYmVmb3JlVGltZXN0YW1wXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmIChNYXRjaC50ZXN0KHR5cGVzLCBbU3RyaW5nXSkgJiYgKHR5cGVzLmxlbmd0aCA+IDApKSB7XG5cdFx0XHRxdWVyeS50ID1cblx0XHRcdHskbmluOiB0eXBlc307XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVmlzaWJsZUNyZWF0ZWRPckVkaXRlZEFmdGVyVGltZXN0YW1wKHRpbWVzdGFtcCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjogeyAkbmU6IHRydWUgfSxcblx0XHRcdCRvcjogW3tcblx0XHRcdFx0dHM6IHtcblx0XHRcdFx0XHQkZ3Q6IHRpbWVzdGFtcFxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHQnZWRpdGVkQXQnOiB7XG5cdFx0XHRcdFx0JGd0OiB0aW1lc3RhbXBcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRTdGFycmVkQnlVc2VyQXRSb29tKHVzZXJJZCwgcm9vbUlkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0J3N0YXJyZWQuX2lkJzogdXNlcklkLFxuXHRcdFx0cmlkOiByb29tSWRcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kUGlubmVkQnlSb29tKHJvb21JZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDogeyAkbmU6ICdybScgfSxcblx0XHRcdF9oaWRkZW46IHsgJG5lOiB0cnVlIH0sXG5cdFx0XHRwaW5uZWQ6IHRydWUsXG5cdFx0XHRyaWQ6IHJvb21JZFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRTbmlwcGV0ZWRCeVJvb20ocm9vbUlkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0c25pcHBldGVkOiB0cnVlLFxuXHRcdFx0cmlkOiByb29tSWRcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRnZXRMYXN0VGltZXN0YW1wKG9wdGlvbnMpIHtcblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7IG9wdGlvbnMgPSB7fTsgfVxuXHRcdGNvbnN0IHF1ZXJ5ID0geyB0czogeyAkZXhpc3RzOiAxIH0gfTtcblx0XHRvcHRpb25zLnNvcnQgPSB7IHRzOiAtMSB9O1xuXHRcdG9wdGlvbnMubGltaXQgPSAxO1xuXHRcdGNvbnN0IFttZXNzYWdlXSA9IHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucykuZmV0Y2goKTtcblx0XHRyZXR1cm4gbWVzc2FnZSAmJiBtZXNzYWdlLnRzO1xuXHR9XG5cblx0ZmluZEJ5Um9vbUlkQW5kTWVzc2FnZUlkcyhyaWQsIG1lc3NhZ2VJZHMsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZCxcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkaW46IG1lc3NhZ2VJZHNcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kT25lQnlTbGFja0JvdElkQW5kU2xhY2tUcyhzbGFja0JvdElkLCBzbGFja1RzKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRzbGFja0JvdElkLFxuXHRcdFx0c2xhY2tUc1xuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5KTtcblx0fVxuXG5cdGZpbmRPbmVCeVNsYWNrVHMoc2xhY2tUcykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge3NsYWNrVHN9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSk7XG5cdH1cblxuXHRnZXRMYXN0VmlzaWJsZU1lc3NhZ2VTZW50V2l0aE5vVHlwZUJ5Um9vbUlkKHJpZCwgbWVzc2FnZUlkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQsXG5cdFx0XHRfaGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0dDogeyAkZXhpc3RzOiBmYWxzZSB9XG5cdFx0fTtcblxuXHRcdGlmIChtZXNzYWdlSWQpIHtcblx0XHRcdHF1ZXJ5Ll9pZCA9IHsgJG5lOiBtZXNzYWdlSWQgfTtcblx0XHR9XG5cblx0XHRjb25zdCBvcHRpb25zID0ge1xuXHRcdFx0c29ydDoge1xuXHRcdFx0XHR0czogLTFcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRjbG9uZUFuZFNhdmVBc0hpc3RvcnlCeUlkKF9pZCkge1xuXHRcdGNvbnN0IG1lID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQoTWV0ZW9yLnVzZXJJZCgpKTtcblx0XHRjb25zdCByZWNvcmQgPSB0aGlzLmZpbmRPbmVCeUlkKF9pZCk7XG5cdFx0cmVjb3JkLl9oaWRkZW4gPSB0cnVlO1xuXHRcdHJlY29yZC5wYXJlbnQgPSByZWNvcmQuX2lkO1xuXHRcdHJlY29yZC5lZGl0ZWRBdCA9IG5ldyBEYXRlO1xuXHRcdHJlY29yZC5lZGl0ZWRCeSA9IHtcblx0XHRcdF9pZDogTWV0ZW9yLnVzZXJJZCgpLFxuXHRcdFx0dXNlcm5hbWU6IG1lLnVzZXJuYW1lXG5cdFx0fTtcblx0XHRkZWxldGUgcmVjb3JkLl9pZDtcblx0XHRyZXR1cm4gdGhpcy5pbnNlcnQocmVjb3JkKTtcblx0fVxuXG5cdC8vIFVQREFURVxuXHRzZXRIaWRkZW5CeUlkKF9pZCwgaGlkZGVuKSB7XG5cdFx0aWYgKGhpZGRlbiA9PSBudWxsKSB7IGhpZGRlbiA9IHRydWU7IH1cblx0XHRjb25zdCBxdWVyeSA9XHR7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0X2hpZGRlbjogaGlkZGVuXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldEFzRGVsZXRlZEJ5SWRBbmRVc2VyKF9pZCwgdXNlcikge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRtc2c6ICcnLFxuXHRcdFx0XHR0OiAncm0nLFxuXHRcdFx0XHR1cmxzOiBbXSxcblx0XHRcdFx0bWVudGlvbnM6IFtdLFxuXHRcdFx0XHRhdHRhY2htZW50czogW10sXG5cdFx0XHRcdHJlYWN0aW9uczogW10sXG5cdFx0XHRcdGVkaXRlZEF0OiBuZXcgRGF0ZSgpLFxuXHRcdFx0XHRlZGl0ZWRCeToge1xuXHRcdFx0XHRcdF9pZDogdXNlci5faWQsXG5cdFx0XHRcdFx0dXNlcm5hbWU6IHVzZXIudXNlcm5hbWVcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRQaW5uZWRCeUlkQW5kVXNlcklkKF9pZCwgcGlubmVkQnksIHBpbm5lZCwgcGlubmVkQXQpIHtcblx0XHRpZiAocGlubmVkID09IG51bGwpIHsgcGlubmVkID0gdHJ1ZTsgfVxuXHRcdGlmIChwaW5uZWRBdCA9PSBudWxsKSB7IHBpbm5lZEF0ID0gMDsgfVxuXHRcdGNvbnN0IHF1ZXJ5ID1cdHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRwaW5uZWQsXG5cdFx0XHRcdHBpbm5lZEF0OiBwaW5uZWRBdCB8fCBuZXcgRGF0ZSxcblx0XHRcdFx0cGlubmVkQnlcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0U25pcHBldGVkQnlJZEFuZFVzZXJJZChtZXNzYWdlLCBzbmlwcGV0TmFtZSwgc25pcHBldGVkQnksIHNuaXBwZXRlZCwgc25pcHBldGVkQXQpIHtcblx0XHRpZiAoc25pcHBldGVkID09IG51bGwpIHsgc25pcHBldGVkID0gdHJ1ZTsgfVxuXHRcdGlmIChzbmlwcGV0ZWRBdCA9PSBudWxsKSB7IHNuaXBwZXRlZEF0ID0gMDsgfVxuXHRcdGNvbnN0IHF1ZXJ5ID1cdHtfaWQ6IG1lc3NhZ2UuX2lkfTtcblxuXHRcdGNvbnN0IG1zZyA9IGBcXGBcXGBcXGAkeyBtZXNzYWdlLm1zZyB9XFxgXFxgXFxgYDtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bXNnLFxuXHRcdFx0XHRzbmlwcGV0ZWQsXG5cdFx0XHRcdHNuaXBwZXRlZEF0OiBzbmlwcGV0ZWRBdCB8fCBuZXcgRGF0ZSxcblx0XHRcdFx0c25pcHBldGVkQnksXG5cdFx0XHRcdHNuaXBwZXROYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldFVybHNCeUlkKF9pZCwgdXJscykge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHR1cmxzXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHVwZGF0ZUFsbFVzZXJuYW1lc0J5VXNlcklkKHVzZXJJZCwgdXNlcm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7J3UuX2lkJzogdXNlcklkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3UudXNlcm5hbWUnOiB1c2VybmFtZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHVwZGF0ZVVzZXJuYW1lT2ZFZGl0QnlVc2VySWQodXNlcklkLCB1c2VybmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHsnZWRpdGVkQnkuX2lkJzogdXNlcklkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J2VkaXRlZEJ5LnVzZXJuYW1lJzogdXNlcm5hbWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHR1cGRhdGVVc2VybmFtZUFuZE1lc3NhZ2VPZk1lbnRpb25CeUlkQW5kT2xkVXNlcm5hbWUoX2lkLCBvbGRVc2VybmFtZSwgbmV3VXNlcm5hbWUsIG5ld01lc3NhZ2UpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZCxcblx0XHRcdCdtZW50aW9ucy51c2VybmFtZSc6IG9sZFVzZXJuYW1lXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J21lbnRpb25zLiQudXNlcm5hbWUnOiBuZXdVc2VybmFtZSxcblx0XHRcdFx0J21zZyc6IG5ld01lc3NhZ2Vcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0dXBkYXRlVXNlclN0YXJCeUlkKF9pZCwgdXNlcklkLCBzdGFycmVkKSB7XG5cdFx0bGV0IHVwZGF0ZTtcblx0XHRjb25zdCBxdWVyeSA9XHR7X2lkfTtcblxuXHRcdGlmIChzdGFycmVkKSB7XG5cdFx0XHR1cGRhdGUgPSB7XG5cdFx0XHRcdCRhZGRUb1NldDoge1xuXHRcdFx0XHRcdHN0YXJyZWQ6IHsgX2lkOiB1c2VySWQgfVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR1cGRhdGUgPSB7XG5cdFx0XHRcdCRwdWxsOiB7XG5cdFx0XHRcdFx0c3RhcnJlZDogeyBfaWQ6IE1ldGVvci51c2VySWQoKSB9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0dXBncmFkZUV0c1RvRWRpdEF0KCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHtldHM6IHsgJGV4aXN0czogMSB9fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRyZW5hbWU6IHtcblx0XHRcdFx0J2V0cyc6ICdlZGl0ZWRBdCdcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHRzZXRNZXNzYWdlQXR0YWNobWVudHMoX2lkLCBhdHRhY2htZW50cykge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRhdHRhY2htZW50c1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRTbGFja0JvdElkQW5kU2xhY2tUcyhfaWQsIHNsYWNrQm90SWQsIHNsYWNrVHMpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0c2xhY2tCb3RJZCxcblx0XHRcdFx0c2xhY2tUc1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXG5cdC8vIElOU0VSVFxuXHRjcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyKHR5cGUsIHJvb21JZCwgbWVzc2FnZSwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKHJvb21JZCwgeyBmaWVsZHM6IHsgc3lzTWVzOiAxIH19KTtcblx0XHRpZiAoKHJvb20gIT0gbnVsbCA/IHJvb20uc3lzTWVzIDogdW5kZWZpbmVkKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgcmVjb3JkID0ge1xuXHRcdFx0dDogdHlwZSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0dHM6IG5ldyBEYXRlLFxuXHRcdFx0bXNnOiBtZXNzYWdlLFxuXHRcdFx0dToge1xuXHRcdFx0XHRfaWQ6IHVzZXIuX2lkLFxuXHRcdFx0XHR1c2VybmFtZTogdXNlci51c2VybmFtZVxuXHRcdFx0fSxcblx0XHRcdGdyb3VwYWJsZTogZmFsc2Vcblx0XHR9O1xuXG5cdFx0Xy5leHRlbmQocmVjb3JkLCBleHRyYURhdGEpO1xuXG5cdFx0cmVjb3JkLl9pZCA9IHRoaXMuaW5zZXJ0T3JVcHNlcnQocmVjb3JkKTtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5pbmNNc2dDb3VudEJ5SWQocm9vbS5faWQsIDEpO1xuXHRcdHJldHVybiByZWNvcmQ7XG5cdH1cblxuXHRjcmVhdGVVc2VySm9pbldpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcigndWonLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVVc2VyTGVhdmVXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3VsJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlVXNlclJlbW92ZWRXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3J1Jywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlVXNlckFkZGVkV2l0aFJvb21JZEFuZFVzZXIocm9vbUlkLCB1c2VyLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCBtZXNzYWdlID0gdXNlci51c2VybmFtZTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyKCdhdScsIHJvb21JZCwgbWVzc2FnZSwgdXNlciwgZXh0cmFEYXRhKTtcblx0fVxuXG5cdGNyZWF0ZUNvbW1hbmRXaXRoUm9vbUlkQW5kVXNlcihjb21tYW5kLCByb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ2NvbW1hbmQnLCByb29tSWQsIGNvbW1hbmQsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVVc2VyTXV0ZWRXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3VzZXItbXV0ZWQnLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVVc2VyVW5tdXRlZFdpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcigndXNlci11bm11dGVkJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlTmV3TW9kZXJhdG9yV2l0aFJvb21JZEFuZFVzZXIocm9vbUlkLCB1c2VyLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCBtZXNzYWdlID0gdXNlci51c2VybmFtZTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyKCduZXctbW9kZXJhdG9yJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlTW9kZXJhdG9yUmVtb3ZlZFdpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcignbW9kZXJhdG9yLXJlbW92ZWQnLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVOZXdPd25lcldpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcignbmV3LW93bmVyJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlT3duZXJSZW1vdmVkV2l0aFJvb21JZEFuZFVzZXIocm9vbUlkLCB1c2VyLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCBtZXNzYWdlID0gdXNlci51c2VybmFtZTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyKCdvd25lci1yZW1vdmVkJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlTmV3TGVhZGVyV2l0aFJvb21JZEFuZFVzZXIocm9vbUlkLCB1c2VyLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCBtZXNzYWdlID0gdXNlci51c2VybmFtZTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyKCduZXctbGVhZGVyJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlTGVhZGVyUmVtb3ZlZFdpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcignbGVhZGVyLXJlbW92ZWQnLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVTdWJzY3JpcHRpb25Sb2xlQWRkZWRXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3N1YnNjcmlwdGlvbi1yb2xlLWFkZGVkJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlU3Vic2NyaXB0aW9uUm9sZVJlbW92ZWRXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3N1YnNjcmlwdGlvbi1yb2xlLXJlbW92ZWQnLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHQvLyBSRU1PVkVcblx0cmVtb3ZlQnlJZChfaWQpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7X2lkfTtcblxuXHRcdHJldHVybiB0aGlzLnJlbW92ZShxdWVyeSk7XG5cdH1cblxuXHRyZW1vdmVCeVJvb21JZChyb29tSWQpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7cmlkOiByb29tSWR9O1xuXG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKHF1ZXJ5KTtcblx0fVxuXG5cdHJlbW92ZUJ5VXNlcklkKHVzZXJJZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHsndS5faWQnOiB1c2VySWR9O1xuXG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKHF1ZXJ5KTtcblx0fVxuXG5cdGdldE1lc3NhZ2VCeUZpbGVJZChmaWxlSUQpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHsgJ2ZpbGUuX2lkJzogZmlsZUlEIH0pO1xuXHR9XG59O1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cblJvY2tldENoYXQubW9kZWxzLlJlcG9ydHMgPSBuZXcgY2xhc3MgZXh0ZW5kcyBSb2NrZXRDaGF0Lm1vZGVscy5fQmFzZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCdyZXBvcnRzJyk7XG5cdH1cblx0Y3JlYXRlV2l0aE1lc3NhZ2VEZXNjcmlwdGlvbkFuZFVzZXJJZChtZXNzYWdlLCBkZXNjcmlwdGlvbiwgdXNlcklkLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCByZWNvcmQgPSB7XG5cdFx0XHRtZXNzYWdlLFxuXHRcdFx0ZGVzY3JpcHRpb24sXG5cdFx0XHR0czogbmV3IERhdGUoKSxcblx0XHRcdHVzZXJJZFxuXHRcdH07XG5cdFx0Xy5leHRlbmQocmVjb3JkLCBleHRyYURhdGEpO1xuXHRcdHJlY29yZC5faWQgPSB0aGlzLmluc2VydChyZWNvcmQpO1xuXHRcdHJldHVybiByZWNvcmQ7XG5cdH1cbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuY2xhc3MgTW9kZWxSb29tcyBleHRlbmRzIFJvY2tldENoYXQubW9kZWxzLl9CYXNlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoLi4uYXJndW1lbnRzKTtcblxuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnbmFtZSc6IDEgfSwgeyB1bmlxdWU6IDEsIHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ2RlZmF1bHQnOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAndXNlcm5hbWVzJzogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ3QnOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAndS5faWQnOiAxIH0pO1xuXG5cdFx0dGhpcy5jYWNoZS5pZ25vcmVVcGRhdGVkRmllbGRzID0gWydtc2dzJywgJ2xtJ107XG5cdFx0dGhpcy5jYWNoZS5lbnN1cmVJbmRleChbJ3QnLCAnbmFtZSddLCAndW5pcXVlJyk7XG5cdFx0dGhpcy5jYWNoZS5vcHRpb25zID0ge2ZpZWxkczoge3VzZXJuYW1lczogMH19O1xuXHR9XG5cblx0ZmluZE9uZUJ5SWRPck5hbWUoX2lkT3JOYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQkb3I6IFt7XG5cdFx0XHRcdF9pZDogX2lkT3JOYW1lXG5cdFx0XHR9LCB7XG5cdFx0XHRcdG5hbWU6IF9pZE9yTmFtZVxuXHRcdFx0fV1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kT25lQnlJbXBvcnRJZChfaWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtpbXBvcnRJZHM6IF9pZH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRPbmVCeU5hbWUobmFtZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge25hbWV9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kT25lQnlOYW1lQW5kTm90SWQobmFtZSwgcmlkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQ6IHsgJG5lOiByaWQgfSxcblx0XHRcdG5hbWVcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSk7XG5cdH1cblxuXHRmaW5kT25lQnlEaXNwbGF5TmFtZShmbmFtZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge2ZuYW1lfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUJ5TmFtZUFuZFR5cGUobmFtZSwgdHlwZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0bmFtZSxcblx0XHRcdHQ6IHR5cGVcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kT25lQnlJZENvbnRhaW5pbmdVc2VybmFtZShfaWQsIHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQsXG5cdFx0XHR1c2VybmFtZXM6IHVzZXJuYW1lXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUJ5TmFtZUFuZFR5cGVOb3RDb250YWluaW5nVXNlcm5hbWUobmFtZSwgdHlwZSwgdXNlcm5hbWUsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdG5hbWUsXG5cdFx0XHR0OiB0eXBlLFxuXHRcdFx0dXNlcm5hbWVzOiB7XG5cdFx0XHRcdCRuZTogdXNlcm5hbWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXG5cdC8vIEZJTkRcblxuXHRmaW5kQnlJZChyb29tSWQsIG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kKHsgX2lkOiByb29tSWQgfSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlJZHMocm9vbUlkcywgb3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLmZpbmQoeyBfaWQ6IHskaW46IFtdLmNvbmNhdChyb29tSWRzKX0gfSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlUeXBlKHR5cGUsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHt0OiB0eXBlfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5VHlwZXModHlwZXMsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHQ6IHtcblx0XHRcdFx0JGluOiB0eXBlc1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVVzZXJJZCh1c2VySWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsndS5faWQnOiB1c2VySWR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlTdWJzY3JpcHRpb25Vc2VySWQodXNlcklkLCBvcHRpb25zKSB7XG5cdFx0bGV0IGRhdGE7XG5cdFx0aWYgKHRoaXMudXNlQ2FjaGUpIHtcblx0XHRcdGRhdGEgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRCeVVzZXJJZCh1c2VySWQpLmZldGNoKCk7XG5cdFx0XHRkYXRhID0gZGF0YS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0XHRpZiAoaXRlbS5fcm9vbSkge1xuXHRcdFx0XHRcdHJldHVybiBpdGVtLl9yb29tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdFbXB0eSBSb29tIGZvciBTdWJzY3JpcHRpb24nLCBpdGVtKTtcblx0XHRcdFx0cmV0dXJuIHt9O1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hcnJheVRvQ3Vyc29yKHRoaXMucHJvY2Vzc1F1ZXJ5T3B0aW9uc09uUmVzdWx0KGRhdGEsIG9wdGlvbnMpKTtcblx0XHR9XG5cblx0XHRkYXRhID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kQnlVc2VySWQodXNlcklkLCB7ZmllbGRzOiB7cmlkOiAxfX0pLmZldGNoKCk7XG5cdFx0ZGF0YSA9IGRhdGEubWFwKGl0ZW0gPT4gaXRlbS5yaWQpO1xuXG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQ6IHtcblx0XHRcdFx0JGluOiBkYXRhXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5U3Vic2NyaXB0aW9uVXNlcklkVXBkYXRlZEFmdGVyKHVzZXJJZCwgX3VwZGF0ZWRBdCwgb3B0aW9ucykge1xuXHRcdGlmICh0aGlzLnVzZUNhY2hlKSB7XG5cdFx0XHRsZXQgZGF0YSA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZEJ5VXNlcklkKHVzZXJJZCkuZmV0Y2goKTtcblx0XHRcdGRhdGEgPSBkYXRhLm1hcChmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRcdGlmIChpdGVtLl9yb29tKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGl0ZW0uX3Jvb207XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc29sZS5sb2coJ0VtcHR5IFJvb20gZm9yIFN1YnNjcmlwdGlvbicsIGl0ZW0pO1xuXHRcdFx0XHRyZXR1cm4ge307XG5cdFx0XHR9KTtcblx0XHRcdGRhdGEgPSBkYXRhLmZpbHRlcihpdGVtID0+IGl0ZW0uX3VwZGF0ZWRBdCA+IF91cGRhdGVkQXQpO1xuXHRcdFx0cmV0dXJuIHRoaXMuYXJyYXlUb0N1cnNvcih0aGlzLnByb2Nlc3NRdWVyeU9wdGlvbnNPblJlc3VsdChkYXRhLCBvcHRpb25zKSk7XG5cdFx0fVxuXG5cdFx0bGV0IGlkcyA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZEJ5VXNlcklkKHVzZXJJZCwge2ZpZWxkczoge3JpZDogMX19KS5mZXRjaCgpO1xuXHRcdGlkcyA9IGlkcy5tYXAoaXRlbSA9PiBpdGVtLnJpZCk7XG5cblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkaW46IGlkc1xuXHRcdFx0fSxcblx0XHRcdF91cGRhdGVkQXQ6IHtcblx0XHRcdFx0JGd0OiBfdXBkYXRlZEF0XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5TmFtZUNvbnRhaW5pbmcobmFtZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IG5hbWVSZWdleCA9IG5ldyBSZWdFeHAocy50cmltKHMuZXNjYXBlUmVnRXhwKG5hbWUpKSwgJ2knKTtcblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0JG9yOiBbXG5cdFx0XHRcdHtuYW1lOiBuYW1lUmVnZXh9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dDogJ2QnLFxuXHRcdFx0XHRcdHVzZXJuYW1lczogbmFtZVJlZ2V4XG5cdFx0XHRcdH1cblx0XHRcdF1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlOYW1lQ29udGFpbmluZ1R5cGVzV2l0aFVzZXJuYW1lKG5hbWUsIHR5cGVzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgbmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cChzLnRyaW0ocy5lc2NhcGVSZWdFeHAobmFtZSkpLCAnaScpO1xuXG5cdFx0Y29uc3QgJG9yID0gW107XG5cdFx0Zm9yIChjb25zdCB0eXBlIG9mIEFycmF5LmZyb20odHlwZXMpKSB7XG5cdFx0XHRjb25zdCBvYmogPSB7bmFtZTogbmFtZVJlZ2V4LCB0OiB0eXBlLnR5cGV9O1xuXHRcdFx0aWYgKHR5cGUudXNlcm5hbWUgIT0gbnVsbCkge1xuXHRcdFx0XHRvYmoudXNlcm5hbWVzID0gdHlwZS51c2VybmFtZTtcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlLmlkcyAhPSBudWxsKSB7XG5cdFx0XHRcdG9iai5faWQgPSB7JGluOiB0eXBlLmlkc307XG5cdFx0XHR9XG5cdFx0XHQkb3IucHVzaChvYmopO1xuXHRcdH1cblxuXHRcdGNvbnN0IHF1ZXJ5ID0geyRvcn07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRDb250YWluaW5nVHlwZXNXaXRoVXNlcm5hbWUodHlwZXMsIG9wdGlvbnMpIHtcblxuXHRcdGNvbnN0ICRvciA9IFtdO1xuXHRcdGZvciAoY29uc3QgdHlwZSBvZiBBcnJheS5mcm9tKHR5cGVzKSkge1xuXHRcdFx0Y29uc3Qgb2JqID0ge3Q6IHR5cGUudHlwZX07XG5cdFx0XHRpZiAodHlwZS51c2VybmFtZSAhPSBudWxsKSB7XG5cdFx0XHRcdG9iai51c2VybmFtZXMgPSB0eXBlLnVzZXJuYW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHR5cGUuaWRzICE9IG51bGwpIHtcblx0XHRcdFx0b2JqLl9pZCA9IHskaW46IHR5cGUuaWRzfTtcblx0XHRcdH1cblx0XHRcdCRvci5wdXNoKG9iaik7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcXVlcnkgPSB7JG9yfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5TmFtZUNvbnRhaW5pbmdBbmRUeXBlcyhuYW1lLCB0eXBlcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IG5hbWVSZWdleCA9IG5ldyBSZWdFeHAocy50cmltKHMuZXNjYXBlUmVnRXhwKG5hbWUpKSwgJ2knKTtcblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDoge1xuXHRcdFx0XHQkaW46IHR5cGVzXG5cdFx0XHR9LFxuXHRcdFx0JG9yOiBbXG5cdFx0XHRcdHtuYW1lOiBuYW1lUmVnZXh9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dDogJ2QnLFxuXHRcdFx0XHRcdHVzZXJuYW1lczogbmFtZVJlZ2V4XG5cdFx0XHRcdH1cblx0XHRcdF1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlOYW1lQW5kVHlwZU5vdERlZmF1bHQobmFtZSwgdHlwZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDogdHlwZSxcblx0XHRcdG5hbWUsXG5cdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdCRuZTogdHJ1ZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBkbyBub3QgdXNlIGNhY2hlXG5cdFx0cmV0dXJuIHRoaXMuX2RiLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5TmFtZUFuZFR5cGVzTm90Q29udGFpbmluZ1VzZXJuYW1lKG5hbWUsIHR5cGVzLCB1c2VybmFtZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDoge1xuXHRcdFx0XHQkaW46IHR5cGVzXG5cdFx0XHR9LFxuXHRcdFx0bmFtZSxcblx0XHRcdHVzZXJuYW1lczoge1xuXHRcdFx0XHQkbmU6IHVzZXJuYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIGRvIG5vdCB1c2UgY2FjaGVcblx0XHRyZXR1cm4gdGhpcy5fZGIuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlOYW1lU3RhcnRpbmdBbmRUeXBlcyhuYW1lLCB0eXBlcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IG5hbWVSZWdleCA9IG5ldyBSZWdFeHAoYF4keyBzLnRyaW0ocy5lc2NhcGVSZWdFeHAobmFtZSkpIH1gLCAnaScpO1xuXG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiB7XG5cdFx0XHRcdCRpbjogdHlwZXNcblx0XHRcdH0sXG5cdFx0XHQkb3I6IFtcblx0XHRcdFx0e25hbWU6IG5hbWVSZWdleH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHR0OiAnZCcsXG5cdFx0XHRcdFx0dXNlcm5hbWVzOiBuYW1lUmVnZXhcblx0XHRcdFx0fVxuXHRcdFx0XVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeURlZmF1bHRBbmRUeXBlcyhkZWZhdWx0VmFsdWUsIHR5cGVzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG5cdFx0XHR0OiB7XG5cdFx0XHRcdCRpbjogdHlwZXNcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlUeXBlQ29udGFpbmluZ1VzZXJuYW1lKHR5cGUsIHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiB0eXBlLFxuXHRcdFx0dXNlcm5hbWVzOiB1c2VybmFtZVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGVDb250YWluaW5nVXNlcm5hbWVzKHR5cGUsIHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiB0eXBlLFxuXHRcdFx0dXNlcm5hbWVzOiB7ICRhbGw6IFtdLmNvbmNhdCh1c2VybmFtZSkgfVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGVzQW5kTm90VXNlcklkQ29udGFpbmluZ1VzZXJuYW1lKHR5cGVzLCB1c2VySWQsIHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiB7XG5cdFx0XHRcdCRpbjogdHlwZXNcblx0XHRcdH0sXG5cdFx0XHR1aWQ6IHtcblx0XHRcdFx0JG5lOiB1c2VySWRcblx0XHRcdH0sXG5cdFx0XHR1c2VybmFtZXM6IHVzZXJuYW1lXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5Q29udGFpbmluZ1VzZXJuYW1lKHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7dXNlcm5hbWVzOiB1c2VybmFtZX07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGVBbmROYW1lKHR5cGUsIG5hbWUsIG9wdGlvbnMpIHtcblx0XHRpZiAodGhpcy51c2VDYWNoZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGUuZmluZEJ5SW5kZXgoJ3QsbmFtZScsIFt0eXBlLCBuYW1lXSwgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRuYW1lLFxuXHRcdFx0dDogdHlwZVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGVBbmROYW1lQ29udGFpbmluZ1VzZXJuYW1lKHR5cGUsIG5hbWUsIHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRuYW1lLFxuXHRcdFx0dDogdHlwZSxcblx0XHRcdHVzZXJuYW1lczogdXNlcm5hbWVcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlUeXBlQW5kQXJjaGl2YXRpb25TdGF0ZSh0eXBlLCBhcmNoaXZhdGlvbnN0YXRlLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7dDogdHlwZX07XG5cblx0XHRpZiAoYXJjaGl2YXRpb25zdGF0ZSkge1xuXHRcdFx0cXVlcnkuYXJjaGl2ZWQgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRxdWVyeS5hcmNoaXZlZCA9IHsgJG5lOiB0cnVlIH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHQvLyBVUERBVEVcblx0YWRkSW1wb3J0SWRzKF9pZCwgaW1wb3J0SWRzKSB7XG5cdFx0aW1wb3J0SWRzID0gW10uY29uY2F0KGltcG9ydElkcyk7XG5cdFx0Y29uc3QgcXVlcnkgPSB7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRhZGRUb1NldDoge1xuXHRcdFx0XHRpbXBvcnRJZHM6IHtcblx0XHRcdFx0XHQkZWFjaDogaW1wb3J0SWRzXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0YXJjaGl2ZUJ5SWQoX2lkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YXJjaGl2ZWQ6IHRydWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0dW5hcmNoaXZlQnlJZChfaWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRhcmNoaXZlZDogZmFsc2Vcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0YWRkVXNlcm5hbWVCeUlkKF9pZCwgdXNlcm5hbWUsIG11dGVkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRhZGRUb1NldDoge1xuXHRcdFx0XHR1c2VybmFtZXM6IHVzZXJuYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmIChtdXRlZCkge1xuXHRcdFx0dXBkYXRlLiRhZGRUb1NldC5tdXRlZCA9IHVzZXJuYW1lO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdGFkZFVzZXJuYW1lc0J5SWQoX2lkLCB1c2VybmFtZXMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JGFkZFRvU2V0OiB7XG5cdFx0XHRcdHVzZXJuYW1lczoge1xuXHRcdFx0XHRcdCRlYWNoOiB1c2VybmFtZXNcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRhZGRVc2VybmFtZUJ5TmFtZShuYW1lLCB1c2VybmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge25hbWV9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JGFkZFRvU2V0OiB7XG5cdFx0XHRcdHVzZXJuYW1lczogdXNlcm5hbWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0cmVtb3ZlVXNlcm5hbWVCeUlkKF9pZCwgdXNlcm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHB1bGw6IHtcblx0XHRcdFx0dXNlcm5hbWVzOiB1c2VybmFtZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRyZW1vdmVVc2VybmFtZXNCeUlkKF9pZCwgdXNlcm5hbWVzKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRwdWxsOiB7XG5cdFx0XHRcdHVzZXJuYW1lczoge1xuXHRcdFx0XHRcdCRpbjogdXNlcm5hbWVzXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0cmVtb3ZlVXNlcm5hbWVGcm9tQWxsKHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7dXNlcm5hbWVzOiB1c2VybmFtZX07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkcHVsbDoge1xuXHRcdFx0XHR1c2VybmFtZXM6IHVzZXJuYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0cmVtb3ZlVXNlcm5hbWVCeU5hbWUobmFtZSwgdXNlcm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtuYW1lfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRwdWxsOiB7XG5cdFx0XHRcdHVzZXJuYW1lczogdXNlcm5hbWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0TmFtZUJ5SWQoX2lkLCBuYW1lLCBmbmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge19pZH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdG5hbWUsXG5cdFx0XHRcdGZuYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdGluY01zZ0NvdW50QnlJZChfaWQsIGluYykge1xuXHRcdGlmIChpbmMgPT0gbnVsbCkgeyBpbmMgPSAxOyB9XG5cdFx0Y29uc3QgcXVlcnkgPSB7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRpbmM6IHtcblx0XHRcdFx0bXNnczogaW5jXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdGluY01zZ0NvdW50QW5kU2V0TGFzdE1lc3NhZ2VCeUlkKF9pZCwgaW5jLCBsYXN0TWVzc2FnZVRpbWVzdGFtcCwgbGFzdE1lc3NhZ2UpIHtcblx0XHRpZiAoaW5jID09IG51bGwpIHsgaW5jID0gMTsgfVxuXHRcdGNvbnN0IHF1ZXJ5ID0ge19pZH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGxtOiBsYXN0TWVzc2FnZVRpbWVzdGFtcFxuXHRcdFx0fSxcblx0XHRcdCRpbmM6IHtcblx0XHRcdFx0bXNnczogaW5jXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGlmIChsYXN0TWVzc2FnZSkge1xuXHRcdFx0dXBkYXRlLiRzZXQubGFzdE1lc3NhZ2UgPSBsYXN0TWVzc2FnZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRMYXN0TWVzc2FnZUJ5SWQoX2lkLCBsYXN0TWVzc2FnZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge19pZH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGxhc3RNZXNzYWdlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHJlcGxhY2VVc2VybmFtZShwcmV2aW91c1VzZXJuYW1lLCB1c2VybmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge3VzZXJuYW1lczogcHJldmlvdXNVc2VybmFtZX07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdCd1c2VybmFtZXMuJCc6IHVzZXJuYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0cmVwbGFjZU11dGVkVXNlcm5hbWUocHJldmlvdXNVc2VybmFtZSwgdXNlcm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9IHttdXRlZDogcHJldmlvdXNVc2VybmFtZX07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdCdtdXRlZC4kJzogdXNlcm5hbWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHRyZXBsYWNlVXNlcm5hbWVPZlVzZXJCeVVzZXJJZCh1c2VySWQsIHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7J3UuX2lkJzogdXNlcklkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3UudXNlcm5hbWUnOiB1c2VybmFtZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHNldEpvaW5Db2RlQnlJZChfaWQsIGpvaW5Db2RlKSB7XG5cdFx0bGV0IHVwZGF0ZTtcblx0XHRjb25zdCBxdWVyeSA9IHtfaWR9O1xuXG5cdFx0aWYgKChqb2luQ29kZSAhPSBudWxsID8gam9pbkNvZGUudHJpbSgpIDogdW5kZWZpbmVkKSAhPT0gJycpIHtcblx0XHRcdHVwZGF0ZSA9IHtcblx0XHRcdFx0JHNldDoge1xuXHRcdFx0XHRcdGpvaW5Db2RlUmVxdWlyZWQ6IHRydWUsXG5cdFx0XHRcdFx0am9pbkNvZGVcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dXBkYXRlID0ge1xuXHRcdFx0XHQkc2V0OiB7XG5cdFx0XHRcdFx0am9pbkNvZGVSZXF1aXJlZDogZmFsc2Vcblx0XHRcdFx0fSxcblx0XHRcdFx0JHVuc2V0OiB7XG5cdFx0XHRcdFx0am9pbkNvZGU6IDFcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRVc2VyQnlJZChfaWQsIHVzZXIpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHR1OiB7XG5cdFx0XHRcdFx0X2lkOiB1c2VyLl9pZCxcblx0XHRcdFx0XHR1c2VybmFtZTogdXNlci51c2VybmFtZVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldFR5cGVCeUlkKF9pZCwgdHlwZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge19pZH07XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHR0OiB0eXBlXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRpZiAodHlwZSA9PT0gJ3AnKSB7XG5cdFx0XHR1cGRhdGUuJHVuc2V0ID0ge2RlZmF1bHQ6ICcnfTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRUb3BpY0J5SWQoX2lkLCB0b3BpYykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge19pZH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdHRvcGljXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldEFubm91bmNlbWVudEJ5SWQoX2lkLCBhbm5vdW5jZW1lbnQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRhbm5vdW5jZW1lbnRcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0bXV0ZVVzZXJuYW1lQnlSb29tSWQoX2lkLCB1c2VybmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge19pZH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkYWRkVG9TZXQ6IHtcblx0XHRcdFx0bXV0ZWQ6IHVzZXJuYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHVubXV0ZVVzZXJuYW1lQnlSb29tSWQoX2lkLCB1c2VybmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge19pZH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkcHVsbDoge1xuXHRcdFx0XHRtdXRlZDogdXNlcm5hbWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2F2ZURlZmF1bHRCeUlkKF9pZCwgZGVmYXVsdFZhbHVlKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0ZGVmYXVsdDogZGVmYXVsdFZhbHVlID09PSAndHJ1ZSdcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0VG9waWNBbmRUYWdzQnlJZChfaWQsIHRvcGljLCB0YWdzKSB7XG5cdFx0Y29uc3Qgc2V0RGF0YSA9IHt9O1xuXHRcdGNvbnN0IHVuc2V0RGF0YSA9IHt9O1xuXG5cdFx0aWYgKHRvcGljICE9IG51bGwpIHtcblx0XHRcdGlmICghXy5pc0VtcHR5KHMudHJpbSh0b3BpYykpKSB7XG5cdFx0XHRcdHNldERhdGEudG9waWMgPSBzLnRyaW0odG9waWMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dW5zZXREYXRhLnRvcGljID0gMTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodGFncyAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIV8uaXNFbXB0eShzLnRyaW0odGFncykpKSB7XG5cdFx0XHRcdHNldERhdGEudGFncyA9IHMudHJpbSh0YWdzKS5zcGxpdCgnLCcpLm1hcCh0YWcgPT4gcy50cmltKHRhZykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dW5zZXREYXRhLnRhZ3MgPSAxO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHt9O1xuXG5cdFx0aWYgKCFfLmlzRW1wdHkoc2V0RGF0YSkpIHtcblx0XHRcdHVwZGF0ZS4kc2V0ID0gc2V0RGF0YTtcblx0XHR9XG5cblx0XHRpZiAoIV8uaXNFbXB0eSh1bnNldERhdGEpKSB7XG5cdFx0XHR1cGRhdGUuJHVuc2V0ID0gdW5zZXREYXRhO1xuXHRcdH1cblxuXHRcdGlmIChfLmlzRW1wdHkodXBkYXRlKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZSh7IF9pZCB9LCB1cGRhdGUpO1xuXHR9XG5cblx0Ly8gSU5TRVJUXG5cdGNyZWF0ZVdpdGhUeXBlTmFtZVVzZXJBbmRVc2VybmFtZXModHlwZSwgbmFtZSwgZm5hbWUsIHVzZXIsIHVzZXJuYW1lcywgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3Qgcm9vbSA9IHtcblx0XHRcdG5hbWUsXG5cdFx0XHRmbmFtZSxcblx0XHRcdHQ6IHR5cGUsXG5cdFx0XHR1c2VybmFtZXMsXG5cdFx0XHRtc2dzOiAwLFxuXHRcdFx0dToge1xuXHRcdFx0XHRfaWQ6IHVzZXIuX2lkLFxuXHRcdFx0XHR1c2VybmFtZTogdXNlci51c2VybmFtZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRfLmV4dGVuZChyb29tLCBleHRyYURhdGEpO1xuXG5cdFx0cm9vbS5faWQgPSB0aGlzLmluc2VydChyb29tKTtcblx0XHRyZXR1cm4gcm9vbTtcblx0fVxuXG5cdGNyZWF0ZVdpdGhJZFR5cGVBbmROYW1lKF9pZCwgdHlwZSwgbmFtZSwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3Qgcm9vbSA9IHtcblx0XHRcdF9pZCxcblx0XHRcdHRzOiBuZXcgRGF0ZSgpLFxuXHRcdFx0dDogdHlwZSxcblx0XHRcdG5hbWUsXG5cdFx0XHR1c2VybmFtZXM6IFtdLFxuXHRcdFx0bXNnczogMFxuXHRcdH07XG5cblx0XHRfLmV4dGVuZChyb29tLCBleHRyYURhdGEpO1xuXG5cdFx0dGhpcy5pbnNlcnQocm9vbSk7XG5cdFx0cmV0dXJuIHJvb207XG5cdH1cblxuXG5cdC8vIFJFTU9WRVxuXHRyZW1vdmVCeUlkKF9pZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge19pZH07XG5cblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUocXVlcnkpO1xuXHR9XG5cblx0cmVtb3ZlQnlUeXBlQ29udGFpbmluZ1VzZXJuYW1lKHR5cGUsIHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiB0eXBlLFxuXHRcdFx0dXNlcm5hbWVzOiB1c2VybmFtZVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUocXVlcnkpO1xuXHR9XG59XG5cblJvY2tldENoYXQubW9kZWxzLlJvb21zID0gbmV3IE1vZGVsUm9vbXMoJ3Jvb20nLCB0cnVlKTtcbiIsImNsYXNzIE1vZGVsU2V0dGluZ3MgZXh0ZW5kcyBSb2NrZXRDaGF0Lm1vZGVscy5fQmFzZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ2Jsb2NrZWQnOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnaGlkZGVuJzogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0fVxuXG5cdC8vIEZJTkRcblx0ZmluZEJ5SWQoX2lkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7X2lkfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnkpO1xuXHR9XG5cblx0ZmluZE9uZU5vdEhpZGRlbkJ5SWQoX2lkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQsXG5cdFx0XHRoaWRkZW46IHsgJG5lOiB0cnVlIH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSk7XG5cdH1cblxuXHRmaW5kQnlJZHMoX2lkID0gW10pIHtcblx0XHRfaWQgPSBbXS5jb25jYXQoX2lkKTtcblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiB7XG5cdFx0XHRcdCRpbjogX2lkXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnkpO1xuXHR9XG5cblx0ZmluZEJ5Um9sZShyb2xlLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7cm9sZX07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRQdWJsaWMob3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge3B1YmxpYzogdHJ1ZX07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmROb3RIaWRkZW5QdWJsaWMoaWRzID0gW10pIHtcblx0XHRjb25zdCBmaWx0ZXIgPSB7XG5cdFx0XHRoaWRkZW46IHsgJG5lOiB0cnVlIH0sXG5cdFx0XHRwdWJsaWM6IHRydWVcblx0XHR9O1xuXG5cdFx0aWYgKGlkcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRmaWx0ZXIuX2lkID1cblx0XHRcdFx0eyRpbjogaWRzfTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKGZpbHRlciwgeyBmaWVsZHM6IHtfaWQ6IDEsIHZhbHVlOiAxfSB9KTtcblx0fVxuXG5cdGZpbmROb3RIaWRkZW5QdWJsaWNVcGRhdGVkQWZ0ZXIodXBkYXRlZEF0KSB7XG5cdFx0Y29uc3QgZmlsdGVyID0ge1xuXHRcdFx0aGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0X3VwZGF0ZWRBdDoge1xuXHRcdFx0XHQkZ3Q6IHVwZGF0ZWRBdFxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKGZpbHRlciwgeyBmaWVsZHM6IHtfaWQ6IDEsIHZhbHVlOiAxfSB9KTtcblx0fVxuXG5cdGZpbmROb3RIaWRkZW5Qcml2YXRlKCkge1xuXHRcdHJldHVybiB0aGlzLmZpbmQoe1xuXHRcdFx0aGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0cHVibGljOiB7ICRuZTogdHJ1ZSB9XG5cdFx0fSk7XG5cdH1cblxuXHRmaW5kTm90SGlkZGVuKG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kKHsgaGlkZGVuOiB7ICRuZTogdHJ1ZSB9IH0sIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE5vdEhpZGRlblVwZGF0ZWRBZnRlcih1cGRhdGVkQXQpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kKHtcblx0XHRcdGhpZGRlbjogeyAkbmU6IHRydWUgfSxcblx0XHRcdF91cGRhdGVkQXQ6IHtcblx0XHRcdFx0JGd0OiB1cGRhdGVkQXRcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8vIFVQREFURVxuXHR1cGRhdGVWYWx1ZUJ5SWQoX2lkLCB2YWx1ZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0YmxvY2tlZDogeyAkbmU6IHRydWUgfSxcblx0XHRcdHZhbHVlOiB7ICRuZTogdmFsdWUgfSxcblx0XHRcdF9pZFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdHZhbHVlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHVwZGF0ZVZhbHVlQW5kRWRpdG9yQnlJZChfaWQsIHZhbHVlLCBlZGl0b3IpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdGJsb2NrZWQ6IHsgJG5lOiB0cnVlIH0sXG5cdFx0XHR2YWx1ZTogeyAkbmU6IHZhbHVlIH0sXG5cdFx0XHRfaWRcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0ZWRpdG9yXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHVwZGF0ZVZhbHVlTm90SGlkZGVuQnlJZChfaWQsIHZhbHVlKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQsXG5cdFx0XHRoaWRkZW46IHsgJG5lOiB0cnVlIH0sXG5cdFx0XHRibG9ja2VkOiB7ICRuZTogdHJ1ZSB9XG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0dmFsdWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0dXBkYXRlT3B0aW9uc0J5SWQoX2lkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRibG9ja2VkOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0X2lkXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHskc2V0OiBvcHRpb25zfTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdC8vIElOU0VSVFxuXHRjcmVhdGVXaXRoSWRBbmRWYWx1ZShfaWQsIHZhbHVlKSB7XG5cdFx0Y29uc3QgcmVjb3JkID0ge1xuXHRcdFx0X2lkLFxuXHRcdFx0dmFsdWUsXG5cdFx0XHRfY3JlYXRlZEF0OiBuZXcgRGF0ZVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5pbnNlcnQocmVjb3JkKTtcblx0fVxuXG5cdC8vIFJFTU9WRVxuXHRyZW1vdmVCeUlkKF9pZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0YmxvY2tlZDogeyAkbmU6IHRydWUgfSxcblx0XHRcdF9pZFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUocXVlcnkpO1xuXHR9XG59XG5cblJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzID0gbmV3IE1vZGVsU2V0dGluZ3MoJ3NldHRpbmdzJywgdHJ1ZSk7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY2xhc3MgTW9kZWxTdWJzY3JpcHRpb25zIGV4dGVuZHMgUm9ja2V0Q2hhdC5tb2RlbHMuX0Jhc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlciguLi5hcmd1bWVudHMpO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdyaWQnOiAxLCAndS5faWQnOiAxIH0sIHsgdW5pcXVlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAncmlkJzogMSwgJ2FsZXJ0JzogMSwgJ3UuX2lkJzogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ3JpZCc6IDEsICdyb2xlcyc6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICd1Ll9pZCc6IDEsICduYW1lJzogMSwgJ3QnOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAndS5faWQnOiAxLCAnbmFtZSc6IDEsICd0JzogMSwgJ2NvZGUnOiAxIH0sIHsgdW5pcXVlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnb3Blbic6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdhbGVydCc6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICd1bnJlYWQnOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAndHMnOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnbHMnOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnYXVkaW9Ob3RpZmljYXRpb25zJzogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ2Rlc2t0b3BOb3RpZmljYXRpb25zJzogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ21vYmlsZVB1c2hOb3RpZmljYXRpb25zJzogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ2VtYWlsTm90aWZpY2F0aW9ucyc6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdhdXRvVHJhbnNsYXRlJzogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ2F1dG9UcmFuc2xhdGVMYW5ndWFnZSc6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cblx0XHR0aGlzLmNhY2hlLmVuc3VyZUluZGV4KCdyaWQnLCAnYXJyYXknKTtcblx0XHR0aGlzLmNhY2hlLmVuc3VyZUluZGV4KCd1Ll9pZCcsICdhcnJheScpO1xuXHRcdHRoaXMuY2FjaGUuZW5zdXJlSW5kZXgoJ25hbWUnLCAnYXJyYXknKTtcblx0XHR0aGlzLmNhY2hlLmVuc3VyZUluZGV4KFsncmlkJywgJ3UuX2lkJ10sICd1bmlxdWUnKTtcblx0XHR0aGlzLmNhY2hlLmVuc3VyZUluZGV4KFsnbmFtZScsICd1Ll9pZCddLCAndW5pcXVlJyk7XG5cdH1cblxuXG5cdC8vIEZJTkQgT05FXG5cdGZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHVzZXJJZCkge1xuXHRcdGlmICh0aGlzLnVzZUNhY2hlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZS5maW5kQnlJbmRleCgncmlkLHUuX2lkJywgW3Jvb21JZCwgdXNlcklkXSkuZmV0Y2goKTtcblx0XHR9XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5KTtcblx0fVxuXG5cdGZpbmRPbmVCeVJvb21OYW1lQW5kVXNlcklkKHJvb21OYW1lLCB1c2VySWQpIHtcblx0XHRpZiAodGhpcy51c2VDYWNoZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGUuZmluZEJ5SW5kZXgoJ25hbWUsdS5faWQnLCBbcm9vbU5hbWUsIHVzZXJJZF0pLmZldGNoKCk7XG5cdFx0fVxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0bmFtZTogcm9vbU5hbWUsXG5cdFx0XHQndS5faWQnOiB1c2VySWRcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSk7XG5cdH1cblxuXHQvLyBGSU5EXG5cdGZpbmRCeVVzZXJJZCh1c2VySWQsIG9wdGlvbnMpIHtcblx0XHRpZiAodGhpcy51c2VDYWNoZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGUuZmluZEJ5SW5kZXgoJ3UuX2lkJywgdXNlcklkLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRjb25zdCBxdWVyeSA9XG5cdFx0XHR7J3UuX2lkJzogdXNlcklkfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5VXNlcklkVXBkYXRlZEFmdGVyKHVzZXJJZCwgdXBkYXRlZEF0LCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0XHRfdXBkYXRlZEF0OiB7XG5cdFx0XHRcdCRndDogdXBkYXRlZEF0XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0Ly8gRklORFxuXHRmaW5kQnlSb29tSWRBbmRSb2xlcyhyb29tSWQsIHJvbGVzLCBvcHRpb25zKSB7XG5cdFx0cm9sZXMgPSBbXS5jb25jYXQocm9sZXMpO1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0J3JpZCc6IHJvb21JZCxcblx0XHRcdCdyb2xlcyc6IHsgJGluOiByb2xlcyB9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5VHlwZSh0eXBlcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDoge1xuXHRcdFx0XHQkaW46IHR5cGVzXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5VHlwZUFuZFVzZXJJZCh0eXBlLCB1c2VySWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHQ6IHR5cGUsXG5cdFx0XHQndS5faWQnOiB1c2VySWRcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlUeXBlTmFtZUFuZFVzZXJJZCh0eXBlLCBuYW1lLCB1c2VySWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHQ6IHR5cGUsXG5cdFx0XHRuYW1lLFxuXHRcdFx0J3UuX2lkJzogdXNlcklkXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5Um9vbUlkKHJvb21JZCwgb3B0aW9ucykge1xuXHRcdGlmICh0aGlzLnVzZUNhY2hlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZS5maW5kQnlJbmRleCgncmlkJywgcm9vbUlkLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRjb25zdCBxdWVyeSA9XG5cdFx0XHR7cmlkOiByb29tSWR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlSb29tSWRBbmROb3RVc2VySWQocm9vbUlkLCB1c2VySWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J3UuX2lkJzoge1xuXHRcdFx0XHQkbmU6IHVzZXJJZFxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGdldExhc3RTZWVuKG9wdGlvbnMpIHtcblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7IG9wdGlvbnMgPSB7fTsgfVxuXHRcdGNvbnN0IHF1ZXJ5ID0geyBsczogeyAkZXhpc3RzOiAxIH0gfTtcblx0XHRvcHRpb25zLnNvcnQgPSB7IGxzOiAtMSB9O1xuXHRcdG9wdGlvbnMubGltaXQgPSAxO1xuXHRcdGNvbnN0IFtzdWJzY3JpcHRpb25dID0gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKS5mZXRjaCgpO1xuXHRcdHJldHVybiBzdWJzY3JpcHRpb24gJiYgc3Vic2NyaXB0aW9uLmxzO1xuXHR9XG5cblx0ZmluZEJ5Um9vbUlkQW5kVXNlcklkcyhyb29tSWQsIHVzZXJJZHMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J3UuX2lkJzoge1xuXHRcdFx0XHQkaW46IHVzZXJJZHNcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSk7XG5cdH1cblxuXHRmaW5kQnlSb29tSWRBbmRVc2VySWRzT3JBbGxNZXNzYWdlcyhyb29tSWQsIHVzZXJJZHMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0JG9yOiBbXG5cdFx0XHRcdHsgJ3UuX2lkJzogeyAkaW46IHVzZXJJZHMgfSB9LFxuXHRcdFx0XHR7IGVtYWlsTm90aWZpY2F0aW9uczogJ2FsbCcgfVxuXHRcdFx0XVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5KTtcblx0fVxuXG5cdGZpbmRVbnJlYWRCeVVzZXJJZCh1c2VySWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZCxcblx0XHRcdHVucmVhZDoge1xuXHRcdFx0XHQkZ3Q6IDBcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgeyBmaWVsZHM6IHsgdW5yZWFkOiAxIH0gfSk7XG5cdH1cblxuXHQvLyBVUERBVEVcblx0YXJjaGl2ZUJ5Um9vbUlkKHJvb21JZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cblx0XHRcdHtyaWQ6IHJvb21JZH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGFsZXJ0OiBmYWxzZSxcblx0XHRcdFx0b3BlbjogZmFsc2UsXG5cdFx0XHRcdGFyY2hpdmVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0dW5hcmNoaXZlQnlSb29tSWQocm9vbUlkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVxuXHRcdFx0e3JpZDogcm9vbUlkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YWxlcnQ6IGZhbHNlLFxuXHRcdFx0XHRvcGVuOiB0cnVlLFxuXHRcdFx0XHRhcmNoaXZlZDogZmFsc2Vcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHRoaWRlQnlSb29tSWRBbmRVc2VySWQocm9vbUlkLCB1c2VySWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J3UuX2lkJzogdXNlcklkXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YWxlcnQ6IGZhbHNlLFxuXHRcdFx0XHRvcGVuOiBmYWxzZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRvcGVuQnlSb29tSWRBbmRVc2VySWQocm9vbUlkLCB1c2VySWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J3UuX2lkJzogdXNlcklkXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0b3BlbjogdHJ1ZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRBc1JlYWRCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHVzZXJJZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHQndS5faWQnOiB1c2VySWRcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRvcGVuOiB0cnVlLFxuXHRcdFx0XHRhbGVydDogZmFsc2UsXG5cdFx0XHRcdHVucmVhZDogMCxcblx0XHRcdFx0dXNlck1lbnRpb25zOiAwLFxuXHRcdFx0XHRncm91cE1lbnRpb25zOiAwLFxuXHRcdFx0XHRsczogbmV3IERhdGVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0QXNVbnJlYWRCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHVzZXJJZCwgZmlyc3RNZXNzYWdlVW5yZWFkVGltZXN0YW1wKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdG9wZW46IHRydWUsXG5cdFx0XHRcdGFsZXJ0OiB0cnVlLFxuXHRcdFx0XHRsczogZmlyc3RNZXNzYWdlVW5yZWFkVGltZXN0YW1wXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldEZhdm9yaXRlQnlSb29tSWRBbmRVc2VySWQocm9vbUlkLCB1c2VySWQsIGZhdm9yaXRlKSB7XG5cdFx0aWYgKGZhdm9yaXRlID09IG51bGwpIHsgZmF2b3JpdGUgPSB0cnVlOyB9XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGY6IGZhdm9yaXRlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHVwZGF0ZU5hbWVBbmRBbGVydEJ5Um9vbUlkKHJvb21JZCwgbmFtZSwgZm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9XG5cdFx0XHR7cmlkOiByb29tSWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRmbmFtZSxcblx0XHRcdFx0YWxlcnQ6IHRydWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHR1cGRhdGVOYW1lQnlSb29tSWQocm9vbUlkLCBuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVxuXHRcdFx0e3JpZDogcm9vbUlkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bmFtZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHNldFVzZXJVc2VybmFtZUJ5VXNlcklkKHVzZXJJZCwgdXNlcm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9XG5cdFx0XHR7J3UuX2lkJzogdXNlcklkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3UudXNlcm5hbWUnOiB1c2VybmFtZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHNldE5hbWVGb3JEaXJlY3RSb29tc1dpdGhPbGROYW1lKG9sZE5hbWUsIG5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdG5hbWU6IG9sZE5hbWUsXG5cdFx0XHR0OiAnZCdcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRuYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0aW5jVW5yZWFkRm9yUm9vbUlkRXhjbHVkaW5nVXNlcklkKHJvb21JZCwgdXNlcklkLCBpbmMpIHtcblx0XHRpZiAoaW5jID09IG51bGwpIHsgaW5jID0gMTsgfVxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHQndS5faWQnOiB7XG5cdFx0XHRcdCRuZTogdXNlcklkXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YWxlcnQ6IHRydWUsXG5cdFx0XHRcdG9wZW46IHRydWVcblx0XHRcdH0sXG5cdFx0XHQkaW5jOiB7XG5cdFx0XHRcdHVucmVhZDogaW5jXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0aW5jR3JvdXBNZW50aW9uc0FuZFVucmVhZEZvclJvb21JZEV4Y2x1ZGluZ1VzZXJJZChyb29tSWQsIHVzZXJJZCwgaW5jR3JvdXAgPSAxLCBpbmNVbnJlYWQgPSAxKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHtcblx0XHRcdFx0JG5lOiB1c2VySWRcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRhbGVydDogdHJ1ZSxcblx0XHRcdFx0b3BlbjogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdCRpbmM6IHtcblx0XHRcdFx0dW5yZWFkOiBpbmNVbnJlYWQsXG5cdFx0XHRcdGdyb3VwTWVudGlvbnM6IGluY0dyb3VwXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0aW5jVXNlck1lbnRpb25zQW5kVW5yZWFkRm9yUm9vbUlkQW5kVXNlcklkcyhyb29tSWQsIHVzZXJJZHMsIGluY1VzZXIgPSAxLCBpbmNVbnJlYWQgPSAxKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHtcblx0XHRcdFx0JGluOiB1c2VySWRzXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YWxlcnQ6IHRydWUsXG5cdFx0XHRcdG9wZW46IHRydWVcblx0XHRcdH0sXG5cdFx0XHQkaW5jOiB7XG5cdFx0XHRcdHVucmVhZDogaW5jVW5yZWFkLFxuXHRcdFx0XHR1c2VyTWVudGlvbnM6IGluY1VzZXJcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblx0c2V0QWxlcnRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQocm9vbUlkLCB1c2VySWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J3UuX2lkJzoge1xuXHRcdFx0XHQkbmU6IHVzZXJJZFxuXHRcdFx0fSxcblx0XHRcdCRvcjogW1xuXHRcdFx0XHR7IGFsZXJ0OiB7ICRuZTogdHJ1ZSB9IH0sXG5cdFx0XHRcdHsgb3BlbjogeyAkbmU6IHRydWUgfSB9XG5cdFx0XHRdXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YWxlcnQ6IHRydWUsXG5cdFx0XHRcdG9wZW46IHRydWVcblx0XHRcdH1cblx0XHR9O1xuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0c2V0QmxvY2tlZEJ5Um9vbUlkKHJpZCwgYmxvY2tlZCwgYmxvY2tlcikge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkLFxuXHRcdFx0J3UuX2lkJzogYmxvY2tlZFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGJsb2NrZWQ6IHRydWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3QgcXVlcnkyID0ge1xuXHRcdFx0cmlkLFxuXHRcdFx0J3UuX2lkJzogYmxvY2tlclxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUyID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRibG9ja2VyOiB0cnVlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKSAmJiB0aGlzLnVwZGF0ZShxdWVyeTIsIHVwZGF0ZTIpO1xuXHR9XG5cblx0dW5zZXRCbG9ja2VkQnlSb29tSWQocmlkLCBibG9ja2VkLCBibG9ja2VyKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQsXG5cdFx0XHQndS5faWQnOiBibG9ja2VkXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCR1bnNldDoge1xuXHRcdFx0XHRibG9ja2VkOiAxXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGNvbnN0IHF1ZXJ5MiA9IHtcblx0XHRcdHJpZCxcblx0XHRcdCd1Ll9pZCc6IGJsb2NrZXJcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlMiA9IHtcblx0XHRcdCR1bnNldDoge1xuXHRcdFx0XHRibG9ja2VyOiAxXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKSAmJiB0aGlzLnVwZGF0ZShxdWVyeTIsIHVwZGF0ZTIpO1xuXHR9XG5cblx0dXBkYXRlVHlwZUJ5Um9vbUlkKHJvb21JZCwgdHlwZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cblx0XHRcdHtyaWQ6IHJvb21JZH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdHQ6IHR5cGVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHRhZGRSb2xlQnlJZChfaWQsIHJvbGUpIHtcblx0XHRjb25zdCBxdWVyeSA9XG5cdFx0XHR7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRhZGRUb1NldDoge1xuXHRcdFx0XHRyb2xlczogcm9sZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRyZW1vdmVSb2xlQnlJZChfaWQsIHJvbGUpIHtcblx0XHRjb25zdCBxdWVyeSA9XG5cdFx0XHR7X2lkfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRwdWxsOiB7XG5cdFx0XHRcdHJvbGVzOiByb2xlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldEFyY2hpdmVkQnlVc2VybmFtZSh1c2VybmFtZSwgYXJjaGl2ZWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHQ6ICdkJyxcblx0XHRcdG5hbWU6IHVzZXJuYW1lXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YXJjaGl2ZWRcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHQvLyBJTlNFUlRcblx0Y3JlYXRlV2l0aFJvb21BbmRVc2VyKHJvb20sIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IHN1YnNjcmlwdGlvbiA9IHtcblx0XHRcdG9wZW46IGZhbHNlLFxuXHRcdFx0YWxlcnQ6IGZhbHNlLFxuXHRcdFx0dW5yZWFkOiAwLFxuXHRcdFx0dXNlck1lbnRpb25zOiAwLFxuXHRcdFx0Z3JvdXBNZW50aW9uczogMCxcblx0XHRcdHRzOiByb29tLnRzLFxuXHRcdFx0cmlkOiByb29tLl9pZCxcblx0XHRcdG5hbWU6IHJvb20ubmFtZSxcblx0XHRcdGZuYW1lOiByb29tLmZuYW1lLFxuXHRcdFx0dDogcm9vbS50LFxuXHRcdFx0dToge1xuXHRcdFx0XHRfaWQ6IHVzZXIuX2lkLFxuXHRcdFx0XHR1c2VybmFtZTogdXNlci51c2VybmFtZSxcblx0XHRcdFx0bmFtZTogdXNlci5uYW1lXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdF8uZXh0ZW5kKHN1YnNjcmlwdGlvbiwgZXh0cmFEYXRhKTtcblxuXHRcdHJldHVybiB0aGlzLmluc2VydChzdWJzY3JpcHRpb24pO1xuXHR9XG5cblxuXHQvLyBSRU1PVkVcblx0cmVtb3ZlQnlVc2VySWQodXNlcklkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVxuXHRcdFx0eyd1Ll9pZCc6IHVzZXJJZH07XG5cblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUocXVlcnkpO1xuXHR9XG5cblx0cmVtb3ZlQnlSb29tSWQocm9vbUlkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVxuXHRcdFx0e3JpZDogcm9vbUlkfTtcblxuXHRcdHJldHVybiB0aGlzLnJlbW92ZShxdWVyeSk7XG5cdH1cblxuXHRyZW1vdmVCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHVzZXJJZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHQndS5faWQnOiB1c2VySWRcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKHF1ZXJ5KTtcblx0fVxufVxuXG5Sb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zID0gbmV3IE1vZGVsU3Vic2NyaXB0aW9ucygnc3Vic2NyaXB0aW9uJywgdHJ1ZSk7XG4iLCIvKiBnbG9iYWxzIEluc3RhbmNlU3RhdHVzICovXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuUm9ja2V0Q2hhdC5tb2RlbHMuVXBsb2FkcyA9IG5ldyBjbGFzcyBleHRlbmRzIFJvY2tldENoYXQubW9kZWxzLl9CYXNlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoJ3VwbG9hZHMnKTtcblxuXHRcdHRoaXMubW9kZWwuYmVmb3JlLmluc2VydCgodXNlcklkLCBkb2MpID0+IHtcblx0XHRcdGRvYy5pbnN0YW5jZUlkID0gSW5zdGFuY2VTdGF0dXMuaWQoKTtcblx0XHR9KTtcblxuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAncmlkJzogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ3VwbG9hZGVkQXQnOiAxIH0pO1xuXHR9XG5cblx0ZmluZE5vdEhpZGRlbkZpbGVzT2ZSb29tKHJvb21JZCwgbGltaXQpIHtcblx0XHRjb25zdCBmaWxlUXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdGNvbXBsZXRlOiB0cnVlLFxuXHRcdFx0dXBsb2FkaW5nOiBmYWxzZSxcblx0XHRcdF9oaWRkZW46IHtcblx0XHRcdFx0JG5lOiB0cnVlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGNvbnN0IGZpbGVPcHRpb25zID0ge1xuXHRcdFx0bGltaXQsXG5cdFx0XHRzb3J0OiB7XG5cdFx0XHRcdHVwbG9hZGVkQXQ6IC0xXG5cdFx0XHR9LFxuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdF9pZDogMSxcblx0XHRcdFx0dXNlcklkOiAxLFxuXHRcdFx0XHRyaWQ6IDEsXG5cdFx0XHRcdG5hbWU6IDEsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiAxLFxuXHRcdFx0XHR0eXBlOiAxLFxuXHRcdFx0XHR1cmw6IDEsXG5cdFx0XHRcdHVwbG9hZGVkQXQ6IDFcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChmaWxlUXVlcnksIGZpbGVPcHRpb25zKTtcblx0fVxuXG5cdGluc2VydEZpbGVJbml0KHVzZXJJZCwgc3RvcmUsIGZpbGUsIGV4dHJhKSB7XG5cdFx0Y29uc3QgZmlsZURhdGEgPSB7XG5cdFx0XHR1c2VySWQsXG5cdFx0XHRzdG9yZSxcblx0XHRcdGNvbXBsZXRlOiBmYWxzZSxcblx0XHRcdHVwbG9hZGluZzogdHJ1ZSxcblx0XHRcdHByb2dyZXNzOiAwLFxuXHRcdFx0ZXh0ZW5zaW9uOiBzLnN0clJpZ2h0QmFjayhmaWxlLm5hbWUsICcuJyksXG5cdFx0XHR1cGxvYWRlZEF0OiBuZXcgRGF0ZSgpXG5cdFx0fTtcblxuXHRcdF8uZXh0ZW5kKGZpbGVEYXRhLCBmaWxlLCBleHRyYSk7XG5cblx0XHRpZiAodGhpcy5tb2RlbC5kaXJlY3QgJiYgdGhpcy5tb2RlbC5kaXJlY3QuaW5zZXJ0ICE9IG51bGwpIHtcblx0XHRcdGZpbGUgPSB0aGlzLm1vZGVsLmRpcmVjdC5pbnNlcnQoZmlsZURhdGEpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmaWxlID0gdGhpcy5pbnNlcnQoZmlsZURhdGEpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaWxlO1xuXHR9XG5cblx0dXBkYXRlRmlsZUNvbXBsZXRlKGZpbGVJZCwgdXNlcklkLCBmaWxlKSB7XG5cdFx0bGV0IHJlc3VsdDtcblx0XHRpZiAoIWZpbGVJZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGZpbHRlciA9IHtcblx0XHRcdF9pZDogZmlsZUlkLFxuXHRcdFx0dXNlcklkXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0Y29tcGxldGU6IHRydWUsXG5cdFx0XHRcdHVwbG9hZGluZzogZmFsc2UsXG5cdFx0XHRcdHByb2dyZXNzOiAxXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHVwZGF0ZS4kc2V0ID0gXy5leHRlbmQoZmlsZSwgdXBkYXRlLiRzZXQpO1xuXG5cdFx0aWYgKHRoaXMubW9kZWwuZGlyZWN0ICYmIHRoaXMubW9kZWwuZGlyZWN0LnVwZGF0ZSAhPSBudWxsKSB7XG5cdFx0XHRyZXN1bHQgPSB0aGlzLm1vZGVsLmRpcmVjdC51cGRhdGUoZmlsdGVyLCB1cGRhdGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSB0aGlzLnVwZGF0ZShmaWx0ZXIsIHVwZGF0ZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdGRlbGV0ZUZpbGUoZmlsZUlkKSB7XG5cdFx0aWYgKHRoaXMubW9kZWwuZGlyZWN0ICYmIHRoaXMubW9kZWwuZGlyZWN0LnJlbW92ZSAhPSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5tb2RlbC5kaXJlY3QucmVtb3ZlKHsgX2lkOiBmaWxlSWQgfSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLnJlbW92ZSh7IF9pZDogZmlsZUlkIH0pO1xuXHRcdH1cblx0fVxufTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5jbGFzcyBNb2RlbFVzZXJzIGV4dGVuZHMgUm9ja2V0Q2hhdC5tb2RlbHMuX0Jhc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlciguLi5hcmd1bWVudHMpO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdyb2xlcyc6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICduYW1lJzogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ2xhc3RMb2dpbic6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdzdGF0dXMnOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnYWN0aXZlJzogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ3N0YXR1c0Nvbm5lY3Rpb24nOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAndHlwZSc6IDEgfSk7XG5cblx0XHR0aGlzLmNhY2hlLmVuc3VyZUluZGV4KCd1c2VybmFtZScsICd1bmlxdWUnKTtcblx0fVxuXG5cdGZpbmRPbmVCeUltcG9ydElkKF9pZCwgb3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUoeyBpbXBvcnRJZHM6IF9pZCB9LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRPbmVCeVVzZXJuYW1lKHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0aWYgKHR5cGVvZiB1c2VybmFtZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHVzZXJuYW1lID0gbmV3IFJlZ0V4cChgXiR7IHVzZXJuYW1lIH0kYCwgJ2knKTtcblx0XHR9XG5cblx0XHRjb25zdCBxdWVyeSA9IHt1c2VybmFtZX07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRPbmVCeUVtYWlsQWRkcmVzcyhlbWFpbEFkZHJlc3MsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7J2VtYWlscy5hZGRyZXNzJzogbmV3IFJlZ0V4cChgXiR7IHMuZXNjYXBlUmVnRXhwKGVtYWlsQWRkcmVzcykgfSRgLCAnaScpfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUFkbWluKGFkbWluLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVx0e2FkbWlufTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUJ5SWRBbmRMb2dpblRva2VuKF9pZCwgdG9rZW4sIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZCxcblx0XHRcdCdzZXJ2aWNlcy5yZXN1bWUubG9naW5Ub2tlbnMuaGFzaGVkVG9rZW4nIDogQWNjb3VudHMuX2hhc2hMb2dpblRva2VuKHRva2VuKVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cblx0Ly8gRklORFxuXHRmaW5kQnlJZCh1c2VySWQpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7X2lkOiB1c2VySWR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSk7XG5cdH1cblxuXHRmaW5kVXNlcnNOb3RPZmZsaW5lKG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHVzZXJuYW1lOiB7XG5cdFx0XHRcdCRleGlzdHM6IDFcblx0XHRcdH0sXG5cdFx0XHRzdGF0dXM6IHtcblx0XHRcdFx0JGluOiBbJ29ubGluZScsICdhd2F5JywgJ2J1c3knXVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cblx0ZmluZEJ5VXNlcm5hbWUodXNlcm5hbWUsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7dXNlcm5hbWV9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVXNlcnNCeVVzZXJuYW1lc1dpdGhIaWdobGlnaHRzKHVzZXJuYW1lcywgb3B0aW9ucykge1xuXHRcdGlmICh0aGlzLnVzZUNhY2hlKSB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSB7XG5cdFx0XHRcdGZldGNoKCkge1xuXHRcdFx0XHRcdHJldHVybiBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5nZXREeW5hbWljVmlldygnaGlnaGxpZ2h0cycpLmRhdGEoKS5maWx0ZXIocmVjb3JkID0+IHVzZXJuYW1lcy5pbmRleE9mKHJlY29yZC51c2VybmFtZSkgPiAtMSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGNvdW50KCkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQuZmV0Y2goKS5sZW5ndGg7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZvckVhY2goZm4pIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LmZldGNoKCkuZm9yRWFjaChmbik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dXNlcm5hbWU6IHsgJGluOiB1c2VybmFtZXMgfSxcblx0XHRcdCdzZXR0aW5ncy5wcmVmZXJlbmNlcy5oaWdobGlnaHRzLjAnOiB7XG5cdFx0XHRcdCRleGlzdHM6IHRydWVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQWN0aXZlQnlVc2VybmFtZU9yTmFtZVJlZ2V4V2l0aEV4Y2VwdGlvbnMoc2VhcmNoVGVybSwgZXhjZXB0aW9ucywgb3B0aW9ucykge1xuXHRcdGlmIChleGNlcHRpb25zID09IG51bGwpIHsgZXhjZXB0aW9ucyA9IFtdOyB9XG5cdFx0aWYgKG9wdGlvbnMgPT0gbnVsbCkgeyBvcHRpb25zID0ge307IH1cblx0XHRpZiAoIV8uaXNBcnJheShleGNlcHRpb25zKSkge1xuXHRcdFx0ZXhjZXB0aW9ucyA9IFsgZXhjZXB0aW9ucyBdO1xuXHRcdH1cblxuXHRcdGNvbnN0IHRlcm1SZWdleCA9IG5ldyBSZWdFeHAocy5lc2NhcGVSZWdFeHAoc2VhcmNoVGVybSksICdpJyk7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQkb3I6IFt7XG5cdFx0XHRcdHVzZXJuYW1lOiB0ZXJtUmVnZXhcblx0XHRcdH0sIHtcblx0XHRcdFx0bmFtZTogdGVybVJlZ2V4XG5cdFx0XHR9XSxcblx0XHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRcdHR5cGU6IHtcblx0XHRcdFx0JGluOiBbJ3VzZXInLCAnYm90J11cblx0XHRcdH0sXG5cdFx0XHQkYW5kOiBbe1xuXHRcdFx0XHR1c2VybmFtZToge1xuXHRcdFx0XHRcdCRleGlzdHM6IHRydWVcblx0XHRcdFx0fVxuXHRcdFx0fSwge1xuXHRcdFx0XHR1c2VybmFtZToge1xuXHRcdFx0XHRcdCRuaW46IGV4Y2VwdGlvbnNcblx0XHRcdFx0fVxuXHRcdFx0fV1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlBY3RpdmVVc2Vyc0V4Y2VwdChzZWFyY2hUZXJtLCBleGNlcHRpb25zLCBvcHRpb25zKSB7XG5cdFx0aWYgKGV4Y2VwdGlvbnMgPT0gbnVsbCkgeyBleGNlcHRpb25zID0gW107IH1cblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7IG9wdGlvbnMgPSB7fTsgfVxuXHRcdGlmICghXy5pc0FycmF5KGV4Y2VwdGlvbnMpKSB7XG5cdFx0XHRleGNlcHRpb25zID0gWyBleGNlcHRpb25zIF07XG5cdFx0fVxuXG5cdFx0Y29uc3QgdGVybVJlZ2V4ID0gbmV3IFJlZ0V4cChzLmVzY2FwZVJlZ0V4cChzZWFyY2hUZXJtKSwgJ2knKTtcblxuXHRcdGNvbnN0IG9yU3RtdCA9IF8ucmVkdWNlKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19TZWFyY2hGaWVsZHMnKS50cmltKCkuc3BsaXQoJywnKSwgZnVuY3Rpb24oYWNjLCBlbCkge1xuXHRcdFx0YWNjLnB1c2goeyBbZWwudHJpbSgpXTogdGVybVJlZ2V4IH0pO1xuXHRcdFx0cmV0dXJuIGFjYztcblx0XHR9LCBbXSk7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQkYW5kOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhY3RpdmU6IHRydWUsXG5cdFx0XHRcdFx0JG9yOiBvclN0bXRcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHVzZXJuYW1lOiB7ICRleGlzdHM6IHRydWUsICRuaW46IGV4Y2VwdGlvbnMgfVxuXHRcdFx0XHR9XG5cdFx0XHRdXG5cdFx0fTtcblxuXHRcdC8vIGRvIG5vdCB1c2UgY2FjaGVcblx0XHRyZXR1cm4gdGhpcy5fZGIuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVXNlcnNCeU5hbWVPclVzZXJuYW1lKG5hbWVPclVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR1c2VybmFtZToge1xuXHRcdFx0XHQkZXhpc3RzOiAxXG5cdFx0XHR9LFxuXG5cdFx0XHQkb3I6IFtcblx0XHRcdFx0e25hbWU6IG5hbWVPclVzZXJuYW1lfSxcblx0XHRcdFx0e3VzZXJuYW1lOiBuYW1lT3JVc2VybmFtZX1cblx0XHRcdF0sXG5cblx0XHRcdHR5cGU6IHtcblx0XHRcdFx0JGluOiBbJ3VzZXInXVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVVzZXJuYW1lTmFtZU9yRW1haWxBZGRyZXNzKHVzZXJuYW1lTmFtZU9yRW1haWxBZGRyZXNzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQkb3I6IFtcblx0XHRcdFx0e25hbWU6IHVzZXJuYW1lTmFtZU9yRW1haWxBZGRyZXNzfSxcblx0XHRcdFx0e3VzZXJuYW1lOiB1c2VybmFtZU5hbWVPckVtYWlsQWRkcmVzc30sXG5cdFx0XHRcdHsnZW1haWxzLmFkZHJlc3MnOiB1c2VybmFtZU5hbWVPckVtYWlsQWRkcmVzc31cblx0XHRcdF0sXG5cdFx0XHR0eXBlOiB7XG5cdFx0XHRcdCRpbjogWyd1c2VyJywgJ2JvdCddXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZExEQVBVc2VycyhvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVx0e2xkYXA6IHRydWV9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQ3Jvd2RVc2VycyhvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVx0e2Nyb3dkOiB0cnVlfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0Z2V0TGFzdExvZ2luKG9wdGlvbnMpIHtcblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7IG9wdGlvbnMgPSB7fTsgfVxuXHRcdGNvbnN0IHF1ZXJ5ID0geyBsYXN0TG9naW46IHsgJGV4aXN0czogMSB9IH07XG5cdFx0b3B0aW9ucy5zb3J0ID0geyBsYXN0TG9naW46IC0xIH07XG5cdFx0b3B0aW9ucy5saW1pdCA9IDE7XG5cdFx0Y29uc3QgW3VzZXJdID0gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKS5mZXRjaCgpO1xuXHRcdHJldHVybiB1c2VyICYmIHVzZXIubGFzdExvZ2luO1xuXHR9XG5cblx0ZmluZFVzZXJzQnlVc2VybmFtZXModXNlcm5hbWVzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR1c2VybmFtZToge1xuXHRcdFx0XHQkaW46IHVzZXJuYW1lc1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRVc2Vyc0J5SWRzKGlkcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiB7XG5cdFx0XHRcdCRpbjogaWRzXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdC8vIFVQREFURVxuXHRhZGRJbXBvcnRJZHMoX2lkLCBpbXBvcnRJZHMpIHtcblx0XHRpbXBvcnRJZHMgPSBbXS5jb25jYXQoaW1wb3J0SWRzKTtcblxuXHRcdGNvbnN0IHF1ZXJ5ID1cdHtfaWR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JGFkZFRvU2V0OiB7XG5cdFx0XHRcdGltcG9ydElkczoge1xuXHRcdFx0XHRcdCRlYWNoOiBpbXBvcnRJZHNcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHR1cGRhdGVMYXN0TG9naW5CeUlkKF9pZCkge1xuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bGFzdExvZ2luOiBuZXcgRGF0ZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0U2VydmljZUlkKF9pZCwgc2VydmljZU5hbWUsIHNlcnZpY2VJZCkge1xuXHRcdGNvbnN0IHVwZGF0ZSA9XG5cdFx0eyRzZXQ6IHt9fTtcblxuXHRcdGNvbnN0IHNlcnZpY2VJZEtleSA9IGBzZXJ2aWNlcy4keyBzZXJ2aWNlTmFtZSB9LmlkYDtcblx0XHR1cGRhdGUuJHNldFtzZXJ2aWNlSWRLZXldID0gc2VydmljZUlkO1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKF9pZCwgdXBkYXRlKTtcblx0fVxuXG5cdHNldFVzZXJuYW1lKF9pZCwgdXNlcm5hbWUpIHtcblx0XHRjb25zdCB1cGRhdGUgPVxuXHRcdHskc2V0OiB7dXNlcm5hbWV9fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRFbWFpbChfaWQsIGVtYWlsKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRlbWFpbHM6IFt7XG5cdFx0XHRcdFx0YWRkcmVzczogZW1haWwsXG5cdFx0XHRcdFx0dmVyaWZpZWQ6IGZhbHNlXG5cdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0RW1haWxWZXJpZmllZChfaWQsIGVtYWlsKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQsXG5cdFx0XHRlbWFpbHM6IHtcblx0XHRcdFx0JGVsZW1NYXRjaDoge1xuXHRcdFx0XHRcdGFkZHJlc3M6IGVtYWlsLFxuXHRcdFx0XHRcdHZlcmlmaWVkOiBmYWxzZVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J2VtYWlscy4kLnZlcmlmaWVkJzogdHJ1ZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXROYW1lKF9pZCwgbmFtZSkge1xuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bmFtZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0Q3VzdG9tRmllbGRzKF9pZCwgZmllbGRzKSB7XG5cdFx0Y29uc3QgdmFsdWVzID0ge307XG5cdFx0T2JqZWN0LmtleXMoZmllbGRzKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHR2YWx1ZXNbYGN1c3RvbUZpZWxkcy4keyBrZXkgfWBdID0gZmllbGRzW2tleV07XG5cdFx0fSk7XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7JHNldDogdmFsdWVzfTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRBdmF0YXJPcmlnaW4oX2lkLCBvcmlnaW4pIHtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGF2YXRhck9yaWdpbjogb3JpZ2luXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHR1bnNldEF2YXRhck9yaWdpbihfaWQpIHtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkdW5zZXQ6IHtcblx0XHRcdFx0YXZhdGFyT3JpZ2luOiAxXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRVc2VyQWN0aXZlKF9pZCwgYWN0aXZlKSB7XG5cdFx0aWYgKGFjdGl2ZSA9PSBudWxsKSB7IGFjdGl2ZSA9IHRydWU7IH1cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGFjdGl2ZVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0QWxsVXNlcnNBY3RpdmUoYWN0aXZlKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRhY3RpdmVcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHt9LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHR1bnNldExvZ2luVG9rZW5zKF9pZCkge1xuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3NlcnZpY2VzLnJlc3VtZS5sb2dpblRva2VucycgOiBbXVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0dW5zZXRSZXF1aXJlUGFzc3dvcmRDaGFuZ2UoX2lkKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHVuc2V0OiB7XG5cdFx0XHRcdCdyZXF1aXJlUGFzc3dvcmRDaGFuZ2UnIDogdHJ1ZSxcblx0XHRcdFx0J3JlcXVpcmVQYXNzd29yZENoYW5nZVJlYXNvbicgOiB0cnVlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRyZXNldFBhc3N3b3JkQW5kU2V0UmVxdWlyZVBhc3N3b3JkQ2hhbmdlKF9pZCwgcmVxdWlyZVBhc3N3b3JkQ2hhbmdlLCByZXF1aXJlUGFzc3dvcmRDaGFuZ2VSZWFzb24pIHtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkdW5zZXQ6IHtcblx0XHRcdFx0J3NlcnZpY2VzLnBhc3N3b3JkJzogMVxuXHRcdFx0fSxcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0cmVxdWlyZVBhc3N3b3JkQ2hhbmdlLFxuXHRcdFx0XHRyZXF1aXJlUGFzc3dvcmRDaGFuZ2VSZWFzb25cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKF9pZCwgdXBkYXRlKTtcblx0fVxuXG5cdHNldExhbmd1YWdlKF9pZCwgbGFuZ3VhZ2UpIHtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGxhbmd1YWdlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRQcm9maWxlKF9pZCwgcHJvZmlsZSkge1xuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3NldHRpbmdzLnByb2ZpbGUnOiBwcm9maWxlXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRQcmVmZXJlbmNlcyhfaWQsIHByZWZlcmVuY2VzKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHQnc2V0dGluZ3MucHJlZmVyZW5jZXMnOiBwcmVmZXJlbmNlc1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0VXRjT2Zmc2V0KF9pZCwgdXRjT2Zmc2V0KSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQsXG5cdFx0XHR1dGNPZmZzZXQ6IHtcblx0XHRcdFx0JG5lOiB1dGNPZmZzZXRcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHR1dGNPZmZzZXRcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2F2ZVVzZXJCeUlkKF9pZCwgZGF0YSkge1xuXHRcdGNvbnN0IHNldERhdGEgPSB7fTtcblx0XHRjb25zdCB1bnNldERhdGEgPSB7fTtcblxuXHRcdGlmIChkYXRhLm5hbWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCFfLmlzRW1wdHkocy50cmltKGRhdGEubmFtZSkpKSB7XG5cdFx0XHRcdHNldERhdGEubmFtZSA9IHMudHJpbShkYXRhLm5hbWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dW5zZXREYXRhLm5hbWUgPSAxO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChkYXRhLmVtYWlsICE9IG51bGwpIHtcblx0XHRcdGlmICghXy5pc0VtcHR5KHMudHJpbShkYXRhLmVtYWlsKSkpIHtcblx0XHRcdFx0c2V0RGF0YS5lbWFpbHMgPSBbe2FkZHJlc3M6IHMudHJpbShkYXRhLmVtYWlsKX1dO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dW5zZXREYXRhLmVtYWlscyA9IDE7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGRhdGEucGhvbmUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCFfLmlzRW1wdHkocy50cmltKGRhdGEucGhvbmUpKSkge1xuXHRcdFx0XHRzZXREYXRhLnBob25lID0gW3twaG9uZU51bWJlcjogcy50cmltKGRhdGEucGhvbmUpfV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1bnNldERhdGEucGhvbmUgPSAxO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHt9O1xuXG5cdFx0aWYgKCFfLmlzRW1wdHkoc2V0RGF0YSkpIHtcblx0XHRcdHVwZGF0ZS4kc2V0ID0gc2V0RGF0YTtcblx0XHR9XG5cblx0XHRpZiAoIV8uaXNFbXB0eSh1bnNldERhdGEpKSB7XG5cdFx0XHR1cGRhdGUuJHVuc2V0ID0gdW5zZXREYXRhO1xuXHRcdH1cblxuXHRcdGlmIChfLmlzRW1wdHkodXBkYXRlKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHsgX2lkIH0sIHVwZGF0ZSk7XG5cdH1cblxuXHQvLyBJTlNFUlRcblx0Y3JlYXRlKGRhdGEpIHtcblx0XHRjb25zdCB1c2VyID0ge1xuXHRcdFx0Y3JlYXRlZEF0OiBuZXcgRGF0ZSxcblx0XHRcdGF2YXRhck9yaWdpbjogJ25vbmUnXG5cdFx0fTtcblxuXHRcdF8uZXh0ZW5kKHVzZXIsIGRhdGEpO1xuXG5cdFx0cmV0dXJuIHRoaXMuaW5zZXJ0KHVzZXIpO1xuXHR9XG5cblxuXHQvLyBSRU1PVkVcblx0cmVtb3ZlQnlJZChfaWQpIHtcblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoX2lkKTtcblx0fVxuXG5cdC8qXG5GaW5kIHVzZXJzIHRvIHNlbmQgYSBtZXNzYWdlIGJ5IGVtYWlsIGlmOlxuLSBoZSBpcyBub3Qgb25saW5lXG4tIGhhcyBhIHZlcmlmaWVkIGVtYWlsXG4tIGhhcyBub3QgZGlzYWJsZWQgZW1haWwgbm90aWZpY2F0aW9uc1xuLSBgYWN0aXZlYCBpcyBlcXVhbCB0byB0cnVlIChmYWxzZSBtZWFucyB0aGV5IHdlcmUgZGVhY3RpdmF0ZWQgYW5kIGNhbid0IGxvZ2luKVxuKi9cblx0Z2V0VXNlcnNUb1NlbmRPZmZsaW5lRW1haWwodXNlcnNJZHMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkaW46IHVzZXJzSWRzXG5cdFx0XHR9LFxuXHRcdFx0YWN0aXZlOiB0cnVlLFxuXHRcdFx0c3RhdHVzOiAnb2ZmbGluZScsXG5cdFx0XHRzdGF0dXNDb25uZWN0aW9uOiB7XG5cdFx0XHRcdCRuZTogJ29ubGluZSdcblx0XHRcdH0sXG5cdFx0XHQnZW1haWxzLnZlcmlmaWVkJzogdHJ1ZVxuXHRcdH07XG5cblx0XHRjb25zdCBvcHRpb25zID0ge1xuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdG5hbWU6IDEsXG5cdFx0XHRcdHVzZXJuYW1lOiAxLFxuXHRcdFx0XHRlbWFpbHM6IDEsXG5cdFx0XHRcdCdzZXR0aW5ncy5wcmVmZXJlbmNlcy5lbWFpbE5vdGlmaWNhdGlvbk1vZGUnOiAxLFxuXHRcdFx0XHRsYW5ndWFnZTogMVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxufVxuXG5Sb2NrZXRDaGF0Lm1vZGVscy5Vc2VycyA9IG5ldyBNb2RlbFVzZXJzKE1ldGVvci51c2VycywgdHJ1ZSk7XG4iLCIvKiBlc2xpbnQgbmV3LWNhcDogMCAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgbG9raSBmcm9tICdsb2tpanMnO1xuaW1wb3J0IHtFdmVudEVtaXR0ZXJ9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgb2JqZWN0UGF0aCBmcm9tICdvYmplY3QtcGF0aCc7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0Jhc2VDYWNoZScpO1xuXG5jb25zdCBsb2tpRXEgPSBsb2tpLkxva2lPcHMuJGVxO1xuY29uc3QgbG9raU5lID0gbG9raS5Mb2tpT3BzLiRuZTtcblxubG9raS5Mb2tpT3BzLiRlcSA9IGZ1bmN0aW9uKGEsIGIpIHtcblx0aWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcblx0XHRyZXR1cm4gYS5pbmRleE9mKGIpICE9PSAtMTtcblx0fVxuXHRyZXR1cm4gbG9raUVxKGEsIGIpO1xufTtcblxubG9raS5Mb2tpT3BzLiRuZSA9IGZ1bmN0aW9uKGEsIGIpIHtcblx0aWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcblx0XHRyZXR1cm4gYS5pbmRleE9mKGIpID09PSAtMTtcblx0fVxuXHRyZXR1cm4gbG9raU5lKGEsIGIpO1xufTtcblxuY29uc3QgbG9raUluID0gbG9raS5Mb2tpT3BzLiRpbjtcbmxva2kuTG9raU9wcy4kaW4gPSBmdW5jdGlvbihhLCBiKSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG5cdFx0cmV0dXJuIGEuc29tZShzdWJBID0+IGxva2lJbihzdWJBLCBiKSk7XG5cdH1cblx0cmV0dXJuIGxva2lJbihhLCBiKTtcbn07XG5cbmxva2kuTG9raU9wcy4kbmluID0gZnVuY3Rpb24oYSwgYikge1xuXHRyZXR1cm4gIWxva2kuTG9raU9wcy4kaW4oYSwgYik7XG59O1xuXG5sb2tpLkxva2lPcHMuJGFsbCA9IGZ1bmN0aW9uKGEsIGIpIHtcblx0cmV0dXJuIGIuZXZlcnkoc3ViQiA9PiBhLmluY2x1ZGVzKHN1YkIpKTtcbn07XG5cbmxva2kuTG9raU9wcy4kZXhpc3RzID0gZnVuY3Rpb24oYSwgYikge1xuXHRpZiAoYikge1xuXHRcdHJldHVybiBsb2tpLkxva2lPcHMuJG5lKGEsIHVuZGVmaW5lZCk7XG5cdH1cblxuXHRyZXR1cm4gbG9raS5Mb2tpT3BzLiRlcShhLCB1bmRlZmluZWQpO1xufTtcblxubG9raS5Mb2tpT3BzLiRlbGVtTWF0Y2ggPSBmdW5jdGlvbihhLCBiKSB7XG5cdHJldHVybiBfLmZpbmRXaGVyZShhLCBiKTtcbn07XG5cbmNvbnN0IGlnbm9yZSA9IFtcblx0J2VtaXQnLFxuXHQnbG9hZCcsXG5cdCdvbicsXG5cdCdhZGRUb0FsbEluZGV4ZXMnXG5dO1xuXG5mdW5jdGlvbiB0cmFjZU1ldGhvZENhbGxzKHRhcmdldCkge1xuXHR0YXJnZXQuX3N0YXRzID0ge307XG5cblx0Zm9yIChjb25zdCBwcm9wZXJ0eSBpbiB0YXJnZXQpIHtcblx0XHRpZiAodHlwZW9mIHRhcmdldFtwcm9wZXJ0eV0gPT09ICdmdW5jdGlvbicgJiYgaWdub3JlLmluZGV4T2YocHJvcGVydHkpID09PSAtMSkge1xuXHRcdFx0dGFyZ2V0Ll9zdGF0c1twcm9wZXJ0eV0gPSB7XG5cdFx0XHRcdGNhbGxzOiAwLFxuXHRcdFx0XHR0aW1lOiAwLFxuXHRcdFx0XHRhdmc6IDBcblx0XHRcdH07XG5cdFx0XHRjb25zdCBvcmlnTWV0aG9kID0gdGFyZ2V0W3Byb3BlcnR5XTtcblx0XHRcdHRhcmdldFtwcm9wZXJ0eV0gPSBmdW5jdGlvbiguLi5hcmdzKSB7XG5cblx0XHRcdFx0aWYgKHRhcmdldC5sb2FkZWQgIT09IHRydWUpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ01ldGhvZC5hcHBseSh0YXJnZXQsIGFyZ3MpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3Qgc3RhcnRUaW1lID0gUm9ja2V0Q2hhdC5zdGF0c1RyYWNrZXIubm93KCk7XG5cdFx0XHRcdGNvbnN0IHJlc3VsdCA9IG9yaWdNZXRob2QuYXBwbHkodGFyZ2V0LCBhcmdzKTtcblx0XHRcdFx0Y29uc3QgdGltZSA9IE1hdGgucm91bmQoUm9ja2V0Q2hhdC5zdGF0c1RyYWNrZXIubm93KCkgLSBzdGFydFRpbWUpIC8gMTAwMDtcblx0XHRcdFx0dGFyZ2V0Ll9zdGF0c1twcm9wZXJ0eV0udGltZSArPSB0aW1lO1xuXHRcdFx0XHR0YXJnZXQuX3N0YXRzW3Byb3BlcnR5XS5jYWxscysrO1xuXHRcdFx0XHR0YXJnZXQuX3N0YXRzW3Byb3BlcnR5XS5hdmcgPSB0YXJnZXQuX3N0YXRzW3Byb3BlcnR5XS50aW1lIC8gdGFyZ2V0Ll9zdGF0c1twcm9wZXJ0eV0uY2FsbHM7XG5cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0Zm9yIChjb25zdCBwcm9wZXJ0eSBpbiB0YXJnZXQuX3N0YXRzKSB7XG5cdFx0XHRpZiAodGFyZ2V0Ll9zdGF0cy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkgJiYgdGFyZ2V0Ll9zdGF0c1twcm9wZXJ0eV0udGltZSA+IDApIHtcblx0XHRcdFx0Y29uc3QgdGFncyA9IFtgcHJvcGVydHk6JHsgcHJvcGVydHkgfWAsIGBjb2xsZWN0aW9uOiR7IHRhcmdldC5jb2xsZWN0aW9uTmFtZSB9YF07XG5cdFx0XHRcdFJvY2tldENoYXQuc3RhdHNUcmFja2VyLnRpbWluZygnY2FjaGUubWV0aG9kcy50aW1lJywgdGFyZ2V0Ll9zdGF0c1twcm9wZXJ0eV0uYXZnLCB0YWdzKTtcblx0XHRcdFx0Um9ja2V0Q2hhdC5zdGF0c1RyYWNrZXIuaW5jcmVtZW50KCdjYWNoZS5tZXRob2RzLnRvdGFsVGltZScsIHRhcmdldC5fc3RhdHNbcHJvcGVydHldLnRpbWUsIHRhZ3MpO1xuXHRcdFx0XHRSb2NrZXRDaGF0LnN0YXRzVHJhY2tlci5pbmNyZW1lbnQoJ2NhY2hlLm1ldGhvZHMuY291bnQnLCB0YXJnZXQuX3N0YXRzW3Byb3BlcnR5XS5jYWxscywgdGFncyk7XG5cdFx0XHRcdHRhcmdldC5fc3RhdHNbcHJvcGVydHldLmF2ZyA9IDA7XG5cdFx0XHRcdHRhcmdldC5fc3RhdHNbcHJvcGVydHldLnRpbWUgPSAwO1xuXHRcdFx0XHR0YXJnZXQuX3N0YXRzW3Byb3BlcnR5XS5jYWxscyA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LCAxMDAwMCk7XG5cblx0dGFyZ2V0Ll9nZXRTdGF0c0F2ZyA9IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IHN0YXRzID0gW107XG5cdFx0Zm9yIChjb25zdCBwcm9wZXJ0eSBpbiB0YXJnZXQuX3N0YXRzKSB7XG5cdFx0XHRpZiAodGFyZ2V0Ll9zdGF0cy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcblx0XHRcdFx0c3RhdHMucHVzaChbTWF0aC5yb3VuZCh0YXJnZXQuX3N0YXRzW3Byb3BlcnR5XS5hdmcqMTAwKS8xMDAsIHByb3BlcnR5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBfLnNvcnRCeShzdGF0cywgZnVuY3Rpb24ocmVjb3JkKSB7XG5cdFx0XHRyZXR1cm4gcmVjb3JkWzBdO1xuXHRcdH0pO1xuXHR9O1xufVxuXG5jbGFzcyBBZGFwdGVyIHtcblx0bG9hZERhdGFiYXNlKC8qZGJuYW1lLCBjYWxsYmFjayovKSB7fVxuXHRzYXZlRGF0YWJhc2UoLypkYm5hbWUsIGRic3RyaW5nLCBjYWxsYmFjayovKSB7fVxuXHRkZWxldGVEYXRhYmFzZSgvKmRibmFtZSwgY2FsbGJhY2sqLykge31cbn1cblxuY29uc3QgZGIgPSBuZXcgbG9raSgncm9ja2V0LmNoYXQuanNvbicsIHthZGFwdGVyOiBBZGFwdGVyfSk7XG5cbmNsYXNzIE1vZGVsc0Jhc2VDYWNoZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cdGNvbnN0cnVjdG9yKG1vZGVsKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRyYWNlTWV0aG9kQ2FsbHModGhpcyk7XG5cblx0XHR0aGlzLmluZGV4ZXMgPSB7fTtcblx0XHR0aGlzLmlnbm9yZVVwZGF0ZWRGaWVsZHMgPSBbJ191cGRhdGVkQXQnXTtcblxuXHRcdHRoaXMucXVlcnkgPSB7fTtcblx0XHR0aGlzLm9wdGlvbnMgPSB7fTtcblxuXHRcdHRoaXMuZW5zdXJlSW5kZXgoJ19pZCcsICd1bmlxdWUnKTtcblxuXHRcdHRoaXMuam9pbnMgPSB7fTtcblxuXHRcdHRoaXMub24oJ2luc2VydGVkJywgKC4uLmFyZ3MpID0+IHsgdGhpcy5lbWl0KCdjaGFuZ2VkJywgJ2luc2VydGVkJywgLi4uYXJncyk7IH0pO1xuXHRcdHRoaXMub24oJ3JlbW92ZWQnLCAoLi4uYXJncykgPT4geyB0aGlzLmVtaXQoJ2NoYW5nZWQnLCAncmVtb3ZlZCcsIC4uLmFyZ3MpOyB9KTtcblx0XHR0aGlzLm9uKCd1cGRhdGVkJywgKC4uLmFyZ3MpID0+IHsgdGhpcy5lbWl0KCdjaGFuZ2VkJywgJ3VwZGF0ZWQnLCAuLi5hcmdzKTsgfSk7XG5cblx0XHR0aGlzLm9uKCdiZWZvcmVpbnNlcnQnLCAoLi4uYXJncykgPT4geyB0aGlzLmVtaXQoJ2JlZm9yZWNoYW5nZScsICdpbnNlcnRlZCcsIC4uLmFyZ3MpOyB9KTtcblx0XHR0aGlzLm9uKCdiZWZvcmVyZW1vdmUnLCAoLi4uYXJncykgPT4geyB0aGlzLmVtaXQoJ2JlZm9yZWNoYW5nZScsICdyZW1vdmVkJywgLi4uYXJncyk7IH0pO1xuXHRcdHRoaXMub24oJ2JlZm9yZXVwZGF0ZScsICguLi5hcmdzKSA9PiB7IHRoaXMuZW1pdCgnYmVmb3JlY2hhbmdlJywgJ3VwZGF0ZWQnLCAuLi5hcmdzKTsgfSk7XG5cblx0XHR0aGlzLm9uKCdpbnNlcnRlZCcsICguLi5hcmdzKSA9PiB7IHRoaXMuZW1pdCgnc3luYycsICdpbnNlcnRlZCcsIC4uLmFyZ3MpOyB9KTtcblx0XHR0aGlzLm9uKCd1cGRhdGVkJywgKC4uLmFyZ3MpID0+IHsgdGhpcy5lbWl0KCdzeW5jJywgJ3VwZGF0ZWQnLCAuLi5hcmdzKTsgfSk7XG5cdFx0dGhpcy5vbignYmVmb3JlcmVtb3ZlJywgKC4uLmFyZ3MpID0+IHsgdGhpcy5lbWl0KCdzeW5jJywgJ3JlbW92ZWQnLCAuLi5hcmdzKTsgfSk7XG5cblx0XHR0aGlzLmRiID0gZGI7XG5cblx0XHR0aGlzLm1vZGVsID0gbW9kZWw7XG5cblx0XHR0aGlzLmNvbGxlY3Rpb25OYW1lID0gdGhpcy5tb2RlbC5fZGIuY29sbGVjdGlvbk5hbWU7XG5cdFx0dGhpcy5jb2xsZWN0aW9uID0gdGhpcy5kYi5hZGRDb2xsZWN0aW9uKHRoaXMuY29sbGVjdGlvbk5hbWUpO1xuXHR9XG5cblx0aGFzT25lKGpvaW4sIHtmaWVsZCwgbGlua30pIHtcblx0XHR0aGlzLmpvaW4oe2pvaW4sIGZpZWxkLCBsaW5rLCBtdWx0aTogZmFsc2V9KTtcblx0fVxuXG5cdGhhc01hbnkoam9pbiwge2ZpZWxkLCBsaW5rfSkge1xuXHRcdHRoaXMuam9pbih7am9pbiwgZmllbGQsIGxpbmssIG11bHRpOiB0cnVlfSk7XG5cdH1cblxuXHRqb2luKHtqb2luLCBmaWVsZCwgbGluaywgbXVsdGl9KSB7XG5cdFx0aWYgKCFSb2NrZXRDaGF0Lm1vZGVsc1tqb2luXSkge1xuXHRcdFx0Y29uc29sZS5sb2coYEludmFsaWQgY2FjaGUgbW9kZWwgJHsgam9pbiB9YCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHNbam9pbl0uY2FjaGUub24oJ2luc2VydGVkJywgKHJlY29yZCkgPT4ge1xuXHRcdFx0dGhpcy5wcm9jZXNzUmVtb3RlSm9pbkluc2VydGVkKHtqb2luLCBmaWVsZCwgbGluaywgbXVsdGksIHJlY29yZH0pO1xuXHRcdH0pO1xuXG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHNbam9pbl0uY2FjaGUub24oJ2JlZm9yZXVwZGF0ZScsIChyZWNvcmQsIGRpZmYpID0+IHtcblx0XHRcdGlmIChkaWZmW2xpbmsucmVtb3RlXSkge1xuXHRcdFx0XHR0aGlzLnByb2Nlc3NSZW1vdGVKb2luUmVtb3ZlZCh7am9pbiwgZmllbGQsIGxpbmssIG11bHRpLCByZWNvcmR9KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdFJvY2tldENoYXQubW9kZWxzW2pvaW5dLmNhY2hlLm9uKCd1cGRhdGVkJywgKHJlY29yZCwgZGlmZikgPT4ge1xuXHRcdFx0aWYgKGRpZmZbbGluay5yZW1vdGVdKSB7XG5cdFx0XHRcdHRoaXMucHJvY2Vzc1JlbW90ZUpvaW5JbnNlcnRlZCh7am9pbiwgZmllbGQsIGxpbmssIG11bHRpLCByZWNvcmR9KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdFJvY2tldENoYXQubW9kZWxzW2pvaW5dLmNhY2hlLm9uKCdyZW1vdmVkJywgKHJlY29yZCkgPT4ge1xuXHRcdFx0dGhpcy5wcm9jZXNzUmVtb3RlSm9pblJlbW92ZWQoe2pvaW4sIGZpZWxkLCBsaW5rLCBtdWx0aSwgcmVjb3JkfSk7XG5cdFx0fSk7XG5cblx0XHR0aGlzLm9uKCdpbnNlcnRlZCcsIChsb2NhbFJlY29yZCkgPT4ge1xuXHRcdFx0dGhpcy5wcm9jZXNzTG9jYWxKb2luSW5zZXJ0ZWQoe2pvaW4sIGZpZWxkLCBsaW5rLCBtdWx0aSwgbG9jYWxSZWNvcmR9KTtcblx0XHR9KTtcblxuXHRcdHRoaXMub24oJ2JlZm9yZXVwZGF0ZScsIChsb2NhbFJlY29yZCwgZGlmZikgPT4ge1xuXHRcdFx0aWYgKGRpZmZbbGluay5sb2NhbF0pIHtcblx0XHRcdFx0aWYgKG11bHRpID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0bG9jYWxSZWNvcmRbZmllbGRdID0gW107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bG9jYWxSZWNvcmRbZmllbGRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLm9uKCd1cGRhdGVkJywgKGxvY2FsUmVjb3JkLCBkaWZmKSA9PiB7XG5cdFx0XHRpZiAoZGlmZltsaW5rLmxvY2FsXSkge1xuXHRcdFx0XHR0aGlzLnByb2Nlc3NMb2NhbEpvaW5JbnNlcnRlZCh7am9pbiwgZmllbGQsIGxpbmssIG11bHRpLCBsb2NhbFJlY29yZH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0cHJvY2Vzc1JlbW90ZUpvaW5JbnNlcnRlZCh7ZmllbGQsIGxpbmssIG11bHRpLCByZWNvcmR9KSB7XG5cdFx0bGV0IGxvY2FsUmVjb3JkcyA9IHRoaXMuX2ZpbmRCeUluZGV4KGxpbmsubG9jYWwsIG9iamVjdFBhdGguZ2V0KHJlY29yZCwgbGluay5yZW1vdGUpKTtcblxuXHRcdGlmICghbG9jYWxSZWNvcmRzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGxvY2FsUmVjb3JkcykpIHtcblx0XHRcdGxvY2FsUmVjb3JkcyA9IFtsb2NhbFJlY29yZHNdO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxSZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBsb2NhbFJlY29yZCA9IGxvY2FsUmVjb3Jkc1tpXTtcblx0XHRcdGlmIChtdWx0aSA9PT0gdHJ1ZSAmJiAhbG9jYWxSZWNvcmRbZmllbGRdKSB7XG5cdFx0XHRcdGxvY2FsUmVjb3JkW2ZpZWxkXSA9IFtdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIGxpbmsud2hlcmUgPT09ICdmdW5jdGlvbicgJiYgbGluay53aGVyZShsb2NhbFJlY29yZCwgcmVjb3JkKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGxldCBtdXRhYmxlUmVjb3JkID0gcmVjb3JkO1xuXG5cdFx0XHRpZiAodHlwZW9mIGxpbmsudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdG11dGFibGVSZWNvcmQgPSBsaW5rLnRyYW5zZm9ybShsb2NhbFJlY29yZCwgbXV0YWJsZVJlY29yZCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtdWx0aSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRsb2NhbFJlY29yZFtmaWVsZF0ucHVzaChtdXRhYmxlUmVjb3JkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvY2FsUmVjb3JkW2ZpZWxkXSA9IG11dGFibGVSZWNvcmQ7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZW1pdChgam9pbjokeyBmaWVsZCB9Omluc2VydGVkYCwgbG9jYWxSZWNvcmQsIG11dGFibGVSZWNvcmQpO1xuXHRcdFx0dGhpcy5lbWl0KGBqb2luOiR7IGZpZWxkIH06Y2hhbmdlZGAsICdpbnNlcnRlZCcsIGxvY2FsUmVjb3JkLCBtdXRhYmxlUmVjb3JkKTtcblx0XHR9XG5cdH1cblxuXHRwcm9jZXNzTG9jYWxKb2luSW5zZXJ0ZWQoe2pvaW4sIGZpZWxkLCBsaW5rLCBtdWx0aSwgbG9jYWxSZWNvcmR9KSB7XG5cdFx0bGV0IHJlY29yZHMgPSBSb2NrZXRDaGF0Lm1vZGVsc1tqb2luXS5jYWNoZS5fZmluZEJ5SW5kZXgobGluay5yZW1vdGUsIG9iamVjdFBhdGguZ2V0KGxvY2FsUmVjb3JkLCBsaW5rLmxvY2FsKSk7XG5cblx0XHRpZiAoIUFycmF5LmlzQXJyYXkocmVjb3JkcykpIHtcblx0XHRcdHJlY29yZHMgPSBbcmVjb3Jkc107XG5cdFx0fVxuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgcmVjb3JkID0gcmVjb3Jkc1tpXTtcblxuXHRcdFx0aWYgKHR5cGVvZiBsaW5rLndoZXJlID09PSAnZnVuY3Rpb24nICYmIGxpbmsud2hlcmUobG9jYWxSZWNvcmQsIHJlY29yZCkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIGxpbmsudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHJlY29yZCA9IGxpbmsudHJhbnNmb3JtKGxvY2FsUmVjb3JkLCByZWNvcmQpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobXVsdGkgPT09IHRydWUpIHtcblx0XHRcdFx0bG9jYWxSZWNvcmRbZmllbGRdLnB1c2gocmVjb3JkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvY2FsUmVjb3JkW2ZpZWxkXSA9IHJlY29yZDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5lbWl0KGBqb2luOiR7IGZpZWxkIH06aW5zZXJ0ZWRgLCBsb2NhbFJlY29yZCwgcmVjb3JkKTtcblx0XHRcdHRoaXMuZW1pdChgam9pbjokeyBmaWVsZCB9OmNoYW5nZWRgLCAnaW5zZXJ0ZWQnLCBsb2NhbFJlY29yZCwgcmVjb3JkKTtcblx0XHR9XG5cdH1cblxuXHRwcm9jZXNzUmVtb3RlSm9pblJlbW92ZWQoe2ZpZWxkLCBsaW5rLCBtdWx0aSwgcmVjb3JkfSkge1xuXHRcdGxldCBsb2NhbFJlY29yZHMgPSB0aGlzLl9maW5kQnlJbmRleChsaW5rLmxvY2FsLCBvYmplY3RQYXRoLmdldChyZWNvcmQsIGxpbmsucmVtb3RlKSk7XG5cblx0XHRpZiAoIWxvY2FsUmVjb3Jkcykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghQXJyYXkuaXNBcnJheShsb2NhbFJlY29yZHMpKSB7XG5cdFx0XHRsb2NhbFJlY29yZHMgPSBbbG9jYWxSZWNvcmRzXTtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxvY2FsUmVjb3Jkcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgbG9jYWxSZWNvcmQgPSBsb2NhbFJlY29yZHNbaV07XG5cblx0XHRcdGlmIChtdWx0aSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShsb2NhbFJlY29yZFtmaWVsZF0pKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBsaW5rLnJlbW92ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdFx0bGluay5yZW1vdmUobG9jYWxSZWNvcmRbZmllbGRdLCByZWNvcmQpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAobG9jYWxSZWNvcmRbZmllbGRdLmluZGV4T2YocmVjb3JkKSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRsb2NhbFJlY29yZFtmaWVsZF0uc3BsaWNlKGxvY2FsUmVjb3JkW2ZpZWxkXS5pbmRleE9mKHJlY29yZCksIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bG9jYWxSZWNvcmRbZmllbGRdID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmVtaXQoYGpvaW46JHsgZmllbGQgfTpyZW1vdmVkYCwgbG9jYWxSZWNvcmQsIHJlY29yZCk7XG5cdFx0XHR0aGlzLmVtaXQoYGpvaW46JHsgZmllbGQgfTpjaGFuZ2VkYCwgJ3JlbW92ZWQnLCBsb2NhbFJlY29yZCwgcmVjb3JkKTtcblx0XHR9XG5cdH1cblxuXHRlbnN1cmVJbmRleChmaWVsZHMsIHR5cGU9J2FycmF5Jykge1xuXHRcdGlmICghQXJyYXkuaXNBcnJheShmaWVsZHMpKSB7XG5cdFx0XHRmaWVsZHMgPSBbZmllbGRzXTtcblx0XHR9XG5cblx0XHR0aGlzLmluZGV4ZXNbZmllbGRzLmpvaW4oJywnKV0gPSB7XG5cdFx0XHR0eXBlLFxuXHRcdFx0ZmllbGRzLFxuXHRcdFx0ZGF0YToge31cblx0XHR9O1xuXHR9XG5cblx0YWRkVG9BbGxJbmRleGVzKHJlY29yZCkge1xuXHRcdGZvciAoY29uc3QgaW5kZXhOYW1lIGluIHRoaXMuaW5kZXhlcykge1xuXHRcdFx0aWYgKHRoaXMuaW5kZXhlcy5oYXNPd25Qcm9wZXJ0eShpbmRleE5hbWUpKSB7XG5cdFx0XHRcdHRoaXMuYWRkVG9JbmRleChpbmRleE5hbWUsIHJlY29yZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0YWRkVG9JbmRleChpbmRleE5hbWUsIHJlY29yZCkge1xuXHRcdGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleGVzW2luZGV4TmFtZV07XG5cdFx0aWYgKCFpbmRleCkge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgSW5kZXggbm90IGRlZmluZWQgJHsgaW5kZXhOYW1lIH1gKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBrZXlzID0gW107XG5cdFx0Zm9yIChjb25zdCBmaWVsZCBvZiBpbmRleC5maWVsZHMpIHtcblx0XHRcdGtleXMucHVzaChvYmplY3RQYXRoLmdldChyZWNvcmQsIGZpZWxkKSk7XG5cdFx0fVxuXHRcdGNvbnN0IGtleSA9IGtleXMuam9pbignfCcpO1xuXG5cdFx0aWYgKGluZGV4LnR5cGUgPT09ICd1bmlxdWUnKSB7XG5cdFx0XHRpbmRleC5kYXRhW2tleV0gPSByZWNvcmQ7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGluZGV4LnR5cGUgPT09ICdhcnJheScpIHtcblx0XHRcdGlmICghaW5kZXguZGF0YVtrZXldKSB7XG5cdFx0XHRcdGluZGV4LmRhdGFba2V5XSA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0aW5kZXguZGF0YVtrZXldLnB1c2gocmVjb3JkKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHRyZW1vdmVGcm9tQWxsSW5kZXhlcyhyZWNvcmQpIHtcblx0XHRmb3IgKGNvbnN0IGluZGV4TmFtZSBpbiB0aGlzLmluZGV4ZXMpIHtcblx0XHRcdGlmICh0aGlzLmluZGV4ZXMuaGFzT3duUHJvcGVydHkoaW5kZXhOYW1lKSkge1xuXHRcdFx0XHR0aGlzLnJlbW92ZUZyb21JbmRleChpbmRleE5hbWUsIHJlY29yZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmVtb3ZlRnJvbUluZGV4KGluZGV4TmFtZSwgcmVjb3JkKSB7XG5cdFx0Y29uc3QgaW5kZXggPSB0aGlzLmluZGV4ZXNbaW5kZXhOYW1lXTtcblx0XHRpZiAoIXRoaXMuaW5kZXhlc1tpbmRleE5hbWVdKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBJbmRleCBub3QgZGVmaW5lZCAkeyBpbmRleE5hbWUgfWApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghaW5kZXguZGF0YSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGxldCBrZXkgPSBbXTtcblx0XHRmb3IgKGNvbnN0IGZpZWxkIG9mIGluZGV4LmZpZWxkcykge1xuXHRcdFx0a2V5LnB1c2gob2JqZWN0UGF0aC5nZXQocmVjb3JkLCBmaWVsZCkpO1xuXHRcdH1cblx0XHRrZXkgPSBrZXkuam9pbignfCcpO1xuXG5cdFx0aWYgKGluZGV4LnR5cGUgPT09ICd1bmlxdWUnKSB7XG5cdFx0XHRpbmRleC5kYXRhW2tleV0gPSB1bmRlZmluZWQ7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGluZGV4LnR5cGUgPT09ICdhcnJheScpIHtcblx0XHRcdGlmICghaW5kZXguZGF0YVtrZXldKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGkgPSBpbmRleC5kYXRhW2tleV0uaW5kZXhPZihyZWNvcmQpO1xuXHRcdFx0aWYgKGkgPiAtMSkge1xuXHRcdFx0XHRpbmRleC5kYXRhW2tleV0uc3BsaWNlKGksIDEpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdF9maW5kQnlJbmRleChpbmRleCwga2V5cykge1xuXHRcdGNvbnN0IGtleSA9IFtdLmNvbmNhdChrZXlzKS5qb2luKCd8Jyk7XG5cdFx0aWYgKCF0aGlzLmluZGV4ZXNbaW5kZXhdKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuaW5kZXhlc1tpbmRleF0uZGF0YSkge1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5pbmRleGVzW2luZGV4XS5kYXRhW2tleV07XG5cdFx0XHRpZiAocmVzdWx0KSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuaW5kZXhlc1tpbmRleF0udHlwZSA9PT0gJ2FycmF5Jykge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblx0fVxuXG5cdGZpbmRCeUluZGV4KGluZGV4LCBrZXlzLCBvcHRpb25zPXt9KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZldGNoOiAoKSA9PiB7XG5cdFx0XHRcdHJldHVybiB0aGlzLnByb2Nlc3NRdWVyeU9wdGlvbnNPblJlc3VsdCh0aGlzLl9maW5kQnlJbmRleChpbmRleCwga2V5cyksIG9wdGlvbnMpO1xuXHRcdFx0fSxcblxuXHRcdFx0Y291bnQ6ICgpID0+IHtcblx0XHRcdFx0Y29uc3QgcmVjb3JkcyA9IHRoaXMuZmluZEJ5SW5kZXgoaW5kZXgsIGtleXMsIG9wdGlvbnMpLmZldGNoKCk7XG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHJlY29yZHMpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlY29yZHMubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAhcmVjb3JkcyA/IDAgOiAxO1xuXHRcdFx0fSxcblxuXHRcdFx0Zm9yRWFjaDogKGZuKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHJlY29yZHMgPSB0aGlzLmZpbmRCeUluZGV4KGluZGV4LCBrZXlzLCBvcHRpb25zKS5mZXRjaCgpO1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShyZWNvcmRzKSkge1xuXHRcdFx0XHRcdHJldHVybiByZWNvcmRzLmZvckVhY2goZm4pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChyZWNvcmRzKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZuKHJlY29yZHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdGxvYWQoKSB7XG5cdFx0aWYgKHRoaXMubW9kZWwuX3VzZUNhY2hlID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnNvbGUubG9nKCdXaWxsIGxvYWQgY2FjaGUgZm9yJywgdGhpcy5jb2xsZWN0aW9uTmFtZSk7XG5cdFx0dGhpcy5lbWl0KCdiZWZvcmVsb2FkJyk7XG5cdFx0dGhpcy5sb2FkZWQgPSBmYWxzZTtcblx0XHRjb25zdCB0aW1lID0gUm9ja2V0Q2hhdC5zdGF0c1RyYWNrZXIubm93KCk7XG5cdFx0Y29uc3QgZGF0YSA9IHRoaXMubW9kZWwuZGIuZmluZCh0aGlzLnF1ZXJ5LCB0aGlzLm9wdGlvbnMpLmZldGNoKCk7XG5cdFx0Zm9yIChsZXQgaT0wOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5pbnNlcnQoZGF0YVtpXSk7XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKFN0cmluZyhkYXRhLmxlbmd0aCksICdyZWNvcmRzIGxvYWQgZnJvbScsIHRoaXMuY29sbGVjdGlvbk5hbWUpO1xuXHRcdFJvY2tldENoYXQuc3RhdHNUcmFja2VyLnRpbWluZygnY2FjaGUubG9hZCcsIFJvY2tldENoYXQuc3RhdHNUcmFja2VyLm5vdygpIC0gdGltZSwgW2Bjb2xsZWN0aW9uOiR7IHRoaXMuY29sbGVjdGlvbk5hbWUgfWBdKTtcblxuXHRcdHRoaXMuc3RhcnRTeW5jKCk7XG5cdFx0dGhpcy5sb2FkZWQgPSB0cnVlO1xuXHRcdHRoaXMuZW1pdCgnYWZ0ZXJsb2FkJyk7XG5cdH1cblxuXHRzdGFydFN5bmMoKSB7XG5cdFx0aWYgKHRoaXMubW9kZWwuX3VzZUNhY2hlID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMubW9kZWwuX2RiLm9uKCdjaGFuZ2UnLCAoe2FjdGlvbiwgaWQsIGRhdGEvKiwgb3Bsb2cqL30pID0+IHtcblx0XHRcdHN3aXRjaCAoYWN0aW9uKSB7XG5cdFx0XHRcdGNhc2UgJ2luc2VydCc6XG5cdFx0XHRcdFx0ZGF0YS5faWQgPSBpZDtcblx0XHRcdFx0XHR0aGlzLmluc2VydChkYXRhKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdyZW1vdmUnOlxuXHRcdFx0XHRcdHRoaXMucmVtb3ZlQnlJZChpZCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAndXBkYXRlOnJlY29yZCc6XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVEaWZmQnlJZChpZCwgZGF0YSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAndXBkYXRlOmRpZmYnOlxuXHRcdFx0XHRcdHRoaXMudXBkYXRlRGlmZkJ5SWQoaWQsIGRhdGEpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3VwZGF0ZTpxdWVyeSc6XG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoZGF0YS5xdWVyeSwgZGF0YS51cGRhdGUsIGRhdGEub3B0aW9ucyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRwcm9jZXNzUXVlcnlPcHRpb25zT25SZXN1bHQocmVzdWx0LCBvcHRpb25zPXt9KSB7XG5cdFx0aWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8IHJlc3VsdCA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG5cdFx0XHRpZiAob3B0aW9ucy5zb3J0KSB7XG5cdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC5zb3J0KChhLCBiKSA9PiB7XG5cdFx0XHRcdFx0bGV0IHIgPSAwO1xuXHRcdFx0XHRcdGZvciAoY29uc3QgZmllbGQgaW4gb3B0aW9ucy5zb3J0KSB7XG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5zb3J0Lmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBkaXJlY3Rpb24gPSBvcHRpb25zLnNvcnRbZmllbGRdO1xuXHRcdFx0XHRcdFx0XHRsZXQgdmFsdWVBO1xuXHRcdFx0XHRcdFx0XHRsZXQgdmFsdWVCO1xuXHRcdFx0XHRcdFx0XHRpZiAoZmllbGQuaW5kZXhPZignLicpID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZUEgPSBvYmplY3RQYXRoLmdldChhLCBmaWVsZCk7XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWVCID0gb2JqZWN0UGF0aC5nZXQoYiwgZmllbGQpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHZhbHVlQSA9IGFbZmllbGRdO1xuXHRcdFx0XHRcdFx0XHRcdHZhbHVlQiA9IGJbZmllbGRdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICh2YWx1ZUEgPiB2YWx1ZUIpIHtcblx0XHRcdFx0XHRcdFx0XHRyID0gZGlyZWN0aW9uO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICh2YWx1ZUEgPCB2YWx1ZUIpIHtcblx0XHRcdFx0XHRcdFx0XHRyID0gLWRpcmVjdGlvbjtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gcjtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5za2lwID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRyZXN1bHQuc3BsaWNlKDAsIG9wdGlvbnMuc2tpcCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicgJiYgb3B0aW9ucy5saW1pdCAhPT0gMCkge1xuXHRcdFx0XHRyZXN1bHQuc3BsaWNlKG9wdGlvbnMubGltaXQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghb3B0aW9ucy5maWVsZHMpIHtcblx0XHRcdG9wdGlvbnMuZmllbGRzID0ge307XG5cdFx0fVxuXG5cdFx0Y29uc3QgZmllbGRzVG9SZW1vdmUgPSBbXTtcblx0XHRjb25zdCBmaWVsZHNUb0dldCA9IFtdO1xuXG5cdFx0Zm9yIChjb25zdCBmaWVsZCBpbiBvcHRpb25zLmZpZWxkcykge1xuXHRcdFx0aWYgKG9wdGlvbnMuZmllbGRzLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuXHRcdFx0XHRpZiAob3B0aW9ucy5maWVsZHNbZmllbGRdID09PSAwKSB7XG5cdFx0XHRcdFx0ZmllbGRzVG9SZW1vdmUucHVzaChmaWVsZCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAob3B0aW9ucy5maWVsZHNbZmllbGRdID09PSAxKSB7XG5cdFx0XHRcdFx0ZmllbGRzVG9HZXQucHVzaChmaWVsZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZmllbGRzVG9SZW1vdmUubGVuZ3RoID4gMCAmJiBmaWVsZHNUb0dldC5sZW5ndGggPiAwKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0NhblxcJ3QgbWl4IHJlbW92ZSBhbmQgZ2V0IGZpZWxkcycpO1xuXHRcdFx0ZmllbGRzVG9SZW1vdmUuc3BsaWNlKDAsIGZpZWxkc1RvUmVtb3ZlLmxlbmd0aCk7XG5cdFx0fVxuXG5cdFx0aWYgKGZpZWxkc1RvR2V0Lmxlbmd0aCA+IDAgJiYgZmllbGRzVG9HZXQuaW5kZXhPZignX2lkJykgPT09IC0xKSB7XG5cdFx0XHRmaWVsZHNUb0dldC5wdXNoKCdfaWQnKTtcblx0XHR9XG5cblx0XHRjb25zdCBwaWNrRmllbGRzID0gKG9iaiwgZmllbGRzKSA9PiB7XG5cdFx0XHRjb25zdCBwaWNrZWQgPSB7fTtcblx0XHRcdGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuXHRcdFx0XHRpZiAoZmllbGQuaW5kZXhPZignLicpICE9PSAtMSkge1xuXHRcdFx0XHRcdG9iamVjdFBhdGguc2V0KHBpY2tlZCwgZmllbGQsIG9iamVjdFBhdGguZ2V0KG9iaiwgZmllbGQpKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwaWNrZWRbZmllbGRdID0gb2JqW2ZpZWxkXTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gcGlja2VkO1xuXHRcdH07XG5cblx0XHRpZiAoZmllbGRzVG9SZW1vdmUubGVuZ3RoID4gMCB8fCBmaWVsZHNUb0dldC5sZW5ndGggPiAwKSB7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG5cdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC5tYXAoKHJlY29yZCkgPT4ge1xuXHRcdFx0XHRcdGlmIChmaWVsZHNUb1JlbW92ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXy5vbWl0KHJlY29yZCwgLi4uZmllbGRzVG9SZW1vdmUpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChmaWVsZHNUb0dldC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcGlja0ZpZWxkcyhyZWNvcmQsIGZpZWxkc1RvR2V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKGZpZWxkc1RvUmVtb3ZlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRyZXR1cm4gXy5vbWl0KHJlc3VsdCwgLi4uZmllbGRzVG9SZW1vdmUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGZpZWxkc1RvR2V0Lmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGlja0ZpZWxkcyhyZXN1bHQsIGZpZWxkc1RvR2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRwcm9jZXNzUXVlcnkocXVlcnksIHBhcmVudEZpZWxkKSB7XG5cdFx0aWYgKCFxdWVyeSkge1xuXHRcdFx0cmV0dXJuIHF1ZXJ5O1xuXHRcdH1cblxuXHRcdGlmIChNYXRjaC50ZXN0KHF1ZXJ5LCBTdHJpbmcpKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRfaWQ6IHF1ZXJ5XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmIChPYmplY3Qua2V5cyhxdWVyeSkubGVuZ3RoID4gMSAmJiBwYXJlbnRGaWVsZCAhPT0gJyRlbGVtTWF0Y2gnKSB7XG5cdFx0XHRjb25zdCBhbmQgPSBbXTtcblx0XHRcdGZvciAoY29uc3QgZmllbGQgaW4gcXVlcnkpIHtcblx0XHRcdFx0aWYgKHF1ZXJ5Lmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuXHRcdFx0XHRcdGFuZC5wdXNoKHtcblx0XHRcdFx0XHRcdFtmaWVsZF06IHF1ZXJ5W2ZpZWxkXVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRxdWVyeSA9IHskYW5kOiBhbmR9O1xuXHRcdH1cblxuXHRcdGZvciAoY29uc3QgZmllbGQgaW4gcXVlcnkpIHtcblx0XHRcdGlmIChxdWVyeS5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIHtcblx0XHRcdFx0Y29uc3QgdmFsdWUgPSBxdWVyeVtmaWVsZF07XG5cdFx0XHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCAmJiBmaWVsZCAhPT0gJyRyZWdleCcpIHtcblx0XHRcdFx0XHRxdWVyeVtmaWVsZF0gPSB7XG5cdFx0XHRcdFx0XHQkcmVnZXg6IHZhbHVlXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChmaWVsZCA9PT0gJyRhbmQnIHx8IGZpZWxkID09PSAnJG9yJykge1xuXHRcdFx0XHRcdHF1ZXJ5W2ZpZWxkXSA9IHZhbHVlLm1hcCgoc3ViVmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnByb2Nlc3NRdWVyeShzdWJWYWx1ZSwgZmllbGQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKE1hdGNoLnRlc3QodmFsdWUsIE9iamVjdCkgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRxdWVyeVtmaWVsZF0gPSB0aGlzLnByb2Nlc3NRdWVyeSh2YWx1ZSwgZmllbGQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHF1ZXJ5O1xuXHR9XG5cblx0ZmluZChxdWVyeSwgb3B0aW9ucz17fSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRmZXRjaDogKCkgPT4ge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHF1ZXJ5ID0gdGhpcy5wcm9jZXNzUXVlcnkocXVlcnkpO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnByb2Nlc3NRdWVyeU9wdGlvbnNPblJlc3VsdCh0aGlzLmNvbGxlY3Rpb24uZmluZChxdWVyeSksIG9wdGlvbnMpO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcignRXhjZXB0aW9uIG9uIGNhY2hlIGZpbmQgZm9yJywgdGhpcy5jb2xsZWN0aW9uTmFtZSk7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcignUXVlcnk6JywgSlNPTi5zdHJpbmdpZnkocXVlcnksIG51bGwsIDIpKTtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdPcHRpb25zOicsIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMsIG51bGwsIDIpKTtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGUuc3RhY2spO1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGNvdW50OiAoKSA9PiB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cXVlcnkgPSB0aGlzLnByb2Nlc3NRdWVyeShxdWVyeSk7XG5cdFx0XHRcdFx0Y29uc3QgeyBsaW1pdCwgc2tpcCB9ID0gb3B0aW9ucztcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5wcm9jZXNzUXVlcnlPcHRpb25zT25SZXN1bHQodGhpcy5jb2xsZWN0aW9uLmZpbmQocXVlcnkpLCB7IGxpbWl0LCBza2lwIH0pLmxlbmd0aDtcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0V4Y2VwdGlvbiBvbiBjYWNoZSBmaW5kIGZvcicsIHRoaXMuY29sbGVjdGlvbk5hbWUpO1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1F1ZXJ5OicsIEpTT04uc3RyaW5naWZ5KHF1ZXJ5LCBudWxsLCAyKSk7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcignT3B0aW9uczonLCBKU09OLnN0cmluZ2lmeShvcHRpb25zLCBudWxsLCAyKSk7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlLnN0YWNrKTtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRmb3JFYWNoOiAoZm4pID0+IHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucykuZmV0Y2goKS5mb3JFYWNoKGZuKTtcblx0XHRcdH0sXG5cblx0XHRcdG9ic2VydmU6IChvYmopID0+IHtcblx0XHRcdFx0bG9nZ2VyLmRlYnVnKHRoaXMuY29sbGVjdGlvbk5hbWUsICdGYWxsaW5nIGJhY2sgb2JzZXJ2ZSB0byBtb2RlbCB3aXRoIHF1ZXJ5OicsIHF1ZXJ5KTtcblx0XHRcdFx0cmV0dXJuIHRoaXMubW9kZWwuZGIuZmluZCguLi5hcmd1bWVudHMpLm9ic2VydmUob2JqKTtcblx0XHRcdH0sXG5cblx0XHRcdG9ic2VydmVDaGFuZ2VzOiAob2JqKSA9PiB7XG5cdFx0XHRcdGxvZ2dlci5kZWJ1Zyh0aGlzLmNvbGxlY3Rpb25OYW1lLCAnRmFsbGluZyBiYWNrIG9ic2VydmVDaGFuZ2VzIHRvIG1vZGVsIHdpdGggcXVlcnk6JywgcXVlcnkpO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5tb2RlbC5kYi5maW5kKC4uLmFyZ3VtZW50cykub2JzZXJ2ZUNoYW5nZXMob2JqKTtcblx0XHRcdH0sXG5cblx0XHRcdF9wdWJsaXNoQ3Vyc29yOiAoY3Vyc29yLCBzdWIsIGNvbGxlY3Rpb24pID0+IHtcblx0XHRcdFx0bG9nZ2VyLmRlYnVnKHRoaXMuY29sbGVjdGlvbk5hbWUsICdGYWxsaW5nIGJhY2sgX3B1Ymxpc2hDdXJzb3IgdG8gbW9kZWwgd2l0aCBxdWVyeTonLCBxdWVyeSk7XG5cdFx0XHRcdHJldHVybiB0aGlzLm1vZGVsLmRiLmZpbmQoLi4uYXJndW1lbnRzKS5fcHVibGlzaEN1cnNvcihjdXJzb3IsIHN1YiwgY29sbGVjdGlvbik7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdGZpbmRPbmUocXVlcnksIG9wdGlvbnMpIHtcblx0XHR0cnkge1xuXHRcdFx0cXVlcnkgPSB0aGlzLnByb2Nlc3NRdWVyeShxdWVyeSk7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9jZXNzUXVlcnlPcHRpb25zT25SZXN1bHQodGhpcy5jb2xsZWN0aW9uLmZpbmRPbmUocXVlcnkpLCBvcHRpb25zKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdFeGNlcHRpb24gb24gY2FjaGUgZmluZE9uZSBmb3InLCB0aGlzLmNvbGxlY3Rpb25OYW1lKTtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1F1ZXJ5OicsIEpTT04uc3RyaW5naWZ5KHF1ZXJ5LCBudWxsLCAyKSk7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdPcHRpb25zOicsIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMsIG51bGwsIDIpKTtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZS5zdGFjayk7XG5cdFx0XHR0aHJvdyBlO1xuXHRcdH1cblx0fVxuXG5cdGZpbmRPbmVCeUlkKF9pZCwgb3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLmZpbmRCeUluZGV4KCdfaWQnLCBfaWQsIG9wdGlvbnMpLmZldGNoKCk7XG5cdH1cblxuXHRmaW5kT25lQnlJZHMoaWRzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB0aGlzLnByb2Nlc3NRdWVyeSh7IF9pZDogeyAkaW46IGlkcyB9fSk7XG5cdFx0cmV0dXJuIHRoaXMucHJvY2Vzc1F1ZXJ5T3B0aW9uc09uUmVzdWx0KHRoaXMuY29sbGVjdGlvbi5maW5kT25lKHF1ZXJ5KSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kV2hlcmUocXVlcnksIG9wdGlvbnMpIHtcblx0XHRxdWVyeSA9IHRoaXMucHJvY2Vzc1F1ZXJ5KHF1ZXJ5KTtcblx0XHRyZXR1cm4gdGhpcy5wcm9jZXNzUXVlcnlPcHRpb25zT25SZXN1bHQodGhpcy5jb2xsZWN0aW9uLmZpbmRXaGVyZShxdWVyeSksIG9wdGlvbnMpO1xuXHR9XG5cblx0YWRkRHluYW1pY1ZpZXcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY29sbGVjdGlvbi5hZGREeW5hbWljVmlldyguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0Z2V0RHluYW1pY1ZpZXcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY29sbGVjdGlvbi5nZXREeW5hbWljVmlldyguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0aW5zZXJ0KHJlY29yZCkge1xuXHRcdGlmIChBcnJheS5pc0FycmF5KHJlY29yZCkpIHtcblx0XHRcdGZvciAoY29uc3QgaXRlbSBvZiByZWNvcmQpIHtcblx0XHRcdFx0dGhpcy5pbnNlcnQoaXRlbSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRPRE8gcmVtb3ZlIC0gaWdub3JlIHVwZGF0ZXMgaW4gcm9vbS51c2VybmFtZXNcblx0XHRcdGlmICh0aGlzLmNvbGxlY3Rpb25OYW1lID09PSAncm9ja2V0Y2hhdF9yb29tJyAmJiByZWNvcmQudXNlcm5hbWVzKSB7XG5cdFx0XHRcdGRlbGV0ZSByZWNvcmQudXNlcm5hbWVzO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5lbWl0KCdiZWZvcmVpbnNlcnQnLCByZWNvcmQpO1xuXHRcdFx0dGhpcy5hZGRUb0FsbEluZGV4ZXMocmVjb3JkKTtcblx0XHRcdHRoaXMuY29sbGVjdGlvbi5pbnNlcnQocmVjb3JkKTtcblx0XHRcdHRoaXMuZW1pdCgnaW5zZXJ0ZWQnLCByZWNvcmQpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZURpZmZCeUlkKGlkLCBkaWZmKSB7XG5cdFx0Ly8gVE9ETyByZW1vdmUgLSBpZ25vcmUgdXBkYXRlcyBpbiByb29tLnVzZXJuYW1lc1xuXHRcdGlmICh0aGlzLmNvbGxlY3Rpb25OYW1lID09PSAncm9ja2V0Y2hhdF9yb29tJyAmJiBkaWZmLnVzZXJuYW1lcykge1xuXHRcdFx0ZGVsZXRlIGRpZmYudXNlcm5hbWVzO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJlY29yZCA9IHRoaXMuX2ZpbmRCeUluZGV4KCdfaWQnLCBpZCk7XG5cdFx0aWYgKCFyZWNvcmQpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0NhY2hlLnVwZGF0ZURpZmZCeUlkOiBObyByZWNvcmQnLCB0aGlzLmNvbGxlY3Rpb25OYW1lLCBpZCwgZGlmZik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMucmVtb3ZlRnJvbUFsbEluZGV4ZXMocmVjb3JkKTtcblxuXHRcdGNvbnN0IHVwZGF0ZWRGaWVsZHMgPSBfLndpdGhvdXQoT2JqZWN0LmtleXMoZGlmZiksIC4uLnRoaXMuaWdub3JlVXBkYXRlZEZpZWxkcyk7XG5cblx0XHRpZiAodXBkYXRlZEZpZWxkcy5sZW5ndGggPiAwKSB7XG5cdFx0XHR0aGlzLmVtaXQoJ2JlZm9yZXVwZGF0ZScsIHJlY29yZCwgZGlmZik7XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBrZXkgaW4gZGlmZikge1xuXHRcdFx0aWYgKGRpZmYuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRvYmplY3RQYXRoLnNldChyZWNvcmQsIGtleSwgZGlmZltrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmNvbGxlY3Rpb24udXBkYXRlKHJlY29yZCk7XG5cdFx0dGhpcy5hZGRUb0FsbEluZGV4ZXMocmVjb3JkKTtcblxuXHRcdGlmICh1cGRhdGVkRmllbGRzLmxlbmd0aCA+IDApIHtcblx0XHRcdHRoaXMuZW1pdCgndXBkYXRlZCcsIHJlY29yZCwgZGlmZik7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlUmVjb3JkKHJlY29yZCwgdXBkYXRlKSB7XG5cdFx0Ly8gVE9ETyByZW1vdmUgLSBpZ25vcmUgdXBkYXRlcyBpbiByb29tLnVzZXJuYW1lc1xuXHRcdGlmICh0aGlzLmNvbGxlY3Rpb25OYW1lID09PSAncm9ja2V0Y2hhdF9yb29tJyAmJiAocmVjb3JkLnVzZXJuYW1lcyB8fCAocmVjb3JkLiRzZXQgJiYgcmVjb3JkLiRzZXQudXNlcm5hbWVzKSkpIHtcblx0XHRcdGRlbGV0ZSByZWNvcmQudXNlcm5hbWVzO1xuXHRcdFx0aWYgKHJlY29yZC4kc2V0ICYmIHJlY29yZC4kc2V0LnVzZXJuYW1lcykge1xuXHRcdFx0XHRkZWxldGUgcmVjb3JkLiRzZXQudXNlcm5hbWVzO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMucmVtb3ZlRnJvbUFsbEluZGV4ZXMocmVjb3JkKTtcblxuXHRcdGNvbnN0IHRvcExldmVsRmllbGRzID0gT2JqZWN0LmtleXModXBkYXRlKS5tYXAoZmllbGQgPT4gZmllbGQuc3BsaXQoJy4nKVswXSk7XG5cdFx0Y29uc3QgdXBkYXRlZEZpZWxkcyA9IF8ud2l0aG91dCh0b3BMZXZlbEZpZWxkcywgLi4udGhpcy5pZ25vcmVVcGRhdGVkRmllbGRzKTtcblxuXHRcdGlmICh1cGRhdGVkRmllbGRzLmxlbmd0aCA+IDApIHtcblx0XHRcdHRoaXMuZW1pdCgnYmVmb3JldXBkYXRlJywgcmVjb3JkLCByZWNvcmQpO1xuXHRcdH1cblxuXHRcdGlmICh1cGRhdGUuJHNldCkge1xuXHRcdFx0Xy5lYWNoKHVwZGF0ZS4kc2V0LCAodmFsdWUsIGZpZWxkKSA9PiB7XG5cdFx0XHRcdG9iamVjdFBhdGguc2V0KHJlY29yZCwgZmllbGQsIHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICh1cGRhdGUuJHVuc2V0KSB7XG5cdFx0XHRfLmVhY2godXBkYXRlLiR1bnNldCwgKHZhbHVlLCBmaWVsZCkgPT4ge1xuXHRcdFx0XHRvYmplY3RQYXRoLmRlbChyZWNvcmQsIGZpZWxkKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICh1cGRhdGUuJG1pbikge1xuXHRcdFx0Xy5lYWNoKHVwZGF0ZS4kbWluLCAodmFsdWUsIGZpZWxkKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGN1clZhbHVlID0gb2JqZWN0UGF0aC5nZXQocmVjb3JkLCBmaWVsZCk7XG5cdFx0XHRcdGlmIChjdXJWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlIDwgY3VyVmFsdWUpIHtcblx0XHRcdFx0XHRvYmplY3RQYXRoLnNldChyZWNvcmQsIGZpZWxkLCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICh1cGRhdGUuJG1heCkge1xuXHRcdFx0Xy5lYWNoKHVwZGF0ZS4kbWF4LCAodmFsdWUsIGZpZWxkKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGN1clZhbHVlID0gb2JqZWN0UGF0aC5nZXQocmVjb3JkLCBmaWVsZCk7XG5cdFx0XHRcdGlmIChjdXJWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID4gY3VyVmFsdWUpIHtcblx0XHRcdFx0XHRvYmplY3RQYXRoLnNldChyZWNvcmQsIGZpZWxkLCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICh1cGRhdGUuJGluYykge1xuXHRcdFx0Xy5lYWNoKHVwZGF0ZS4kaW5jLCAodmFsdWUsIGZpZWxkKSA9PiB7XG5cdFx0XHRcdGxldCBjdXJWYWx1ZSA9IG9iamVjdFBhdGguZ2V0KHJlY29yZCwgZmllbGQpO1xuXHRcdFx0XHRpZiAoY3VyVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGN1clZhbHVlID0gdmFsdWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y3VyVmFsdWUgKz0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0b2JqZWN0UGF0aC5zZXQocmVjb3JkLCBmaWVsZCwgY3VyVmFsdWUpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHVwZGF0ZS4kbXVsKSB7XG5cdFx0XHRfLmVhY2godXBkYXRlLiRtdWwsICh2YWx1ZSwgZmllbGQpID0+IHtcblx0XHRcdFx0bGV0IGN1clZhbHVlID0gb2JqZWN0UGF0aC5nZXQocmVjb3JkLCBmaWVsZCk7XG5cdFx0XHRcdGlmIChjdXJWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0Y3VyVmFsdWUgPSAwO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGN1clZhbHVlICo9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9iamVjdFBhdGguc2V0KHJlY29yZCwgZmllbGQsIGN1clZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICh1cGRhdGUuJHJlbmFtZSkge1xuXHRcdFx0Xy5lYWNoKHVwZGF0ZS4kcmVuYW1lLCAodmFsdWUsIGZpZWxkKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGN1clZhbHVlID0gb2JqZWN0UGF0aC5nZXQocmVjb3JkLCBmaWVsZCk7XG5cdFx0XHRcdGlmIChjdXJWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0b2JqZWN0UGF0aC5zZXQocmVjb3JkLCB2YWx1ZSwgY3VyVmFsdWUpO1xuXHRcdFx0XHRcdG9iamVjdFBhdGguZGVsKHJlY29yZCwgZmllbGQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAodXBkYXRlLiRwdWxsQWxsKSB7XG5cdFx0XHRfLmVhY2godXBkYXRlLiRwdWxsQWxsLCAodmFsdWUsIGZpZWxkKSA9PiB7XG5cdFx0XHRcdGxldCBjdXJWYWx1ZSA9IG9iamVjdFBhdGguZ2V0KHJlY29yZCwgZmllbGQpO1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShjdXJWYWx1ZSkpIHtcblx0XHRcdFx0XHRjdXJWYWx1ZSA9IF8uZGlmZmVyZW5jZShjdXJWYWx1ZSwgdmFsdWUpO1xuXHRcdFx0XHRcdG9iamVjdFBhdGguc2V0KHJlY29yZCwgZmllbGQsIGN1clZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHVwZGF0ZS4kcG9wKSB7XG5cdFx0XHRfLmVhY2godXBkYXRlLiRwb3AsICh2YWx1ZSwgZmllbGQpID0+IHtcblx0XHRcdFx0Y29uc3QgY3VyVmFsdWUgPSBvYmplY3RQYXRoLmdldChyZWNvcmQsIGZpZWxkKTtcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoY3VyVmFsdWUpKSB7XG5cdFx0XHRcdFx0aWYgKHZhbHVlID09PSAtMSkge1xuXHRcdFx0XHRcdFx0Y3VyVmFsdWUuc2hpZnQoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y3VyVmFsdWUucG9wKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG9iamVjdFBhdGguc2V0KHJlY29yZCwgZmllbGQsIGN1clZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHVwZGF0ZS4kYWRkVG9TZXQpIHtcblx0XHRcdF8uZWFjaCh1cGRhdGUuJGFkZFRvU2V0LCAodmFsdWUsIGZpZWxkKSA9PiB7XG5cdFx0XHRcdGxldCBjdXJWYWx1ZSA9IG9iamVjdFBhdGguZ2V0KHJlY29yZCwgZmllbGQpO1xuXHRcdFx0XHRpZiAoY3VyVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGN1clZhbHVlID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoY3VyVmFsdWUpKSB7XG5cdFx0XHRcdFx0Y29uc3QgbGVuZ3RoID0gY3VyVmFsdWUubGVuZ3RoO1xuXG5cdFx0XHRcdFx0aWYgKHZhbHVlICYmIHZhbHVlLiRlYWNoICYmIEFycmF5LmlzQXJyYXkodmFsdWUuJGVhY2gpKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHZhbHVlSXRlbSBvZiB2YWx1ZS4kZWFjaCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoY3VyVmFsdWUuaW5kZXhPZih2YWx1ZUl0ZW0pID09PSAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdGN1clZhbHVlLnB1c2godmFsdWVJdGVtKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY3VyVmFsdWUuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG5cdFx0XHRcdFx0XHRjdXJWYWx1ZS5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoY3VyVmFsdWUubGVuZ3RoID4gbGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRvYmplY3RQYXRoLnNldChyZWNvcmQsIGZpZWxkLCBjdXJWYWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR0aGlzLmNvbGxlY3Rpb24udXBkYXRlKHJlY29yZCk7XG5cdFx0dGhpcy5hZGRUb0FsbEluZGV4ZXMocmVjb3JkKTtcblxuXHRcdGlmICh1cGRhdGVkRmllbGRzLmxlbmd0aCA+IDApIHtcblx0XHRcdHRoaXMuZW1pdCgndXBkYXRlZCcsIHJlY29yZCwgcmVjb3JkKTtcblx0XHR9XG5cdH1cblxuXHR1cGRhdGUocXVlcnksIHVwZGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0bGV0IHJlY29yZHMgPSBvcHRpb25zLm11bHRpID8gdGhpcy5maW5kKHF1ZXJ5KS5mZXRjaCgpIDogdGhpcy5maW5kT25lKHF1ZXJ5KSB8fCBbXTtcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkocmVjb3JkcykpIHtcblx0XHRcdHJlY29yZHMgPSBbcmVjb3Jkc107XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCByZWNvcmQgb2YgcmVjb3Jkcykge1xuXHRcdFx0dGhpcy51cGRhdGVSZWNvcmQocmVjb3JkLCB1cGRhdGUpO1xuXHRcdH1cblx0fVxuXG5cdHJlbW92ZUJ5SWQoaWQpIHtcblx0XHRjb25zdCByZWNvcmQgPSB0aGlzLl9maW5kQnlJbmRleCgnX2lkJywgaWQpO1xuXHRcdGlmIChyZWNvcmQpIHtcblx0XHRcdHRoaXMuZW1pdCgnYmVmb3JlcmVtb3ZlJywgcmVjb3JkKTtcblx0XHRcdHRoaXMuY29sbGVjdGlvbi5yZW1vdmVXaGVyZSh7X2lkOiBpZH0pO1xuXHRcdFx0dGhpcy5yZW1vdmVGcm9tQWxsSW5kZXhlcyhyZWNvcmQpO1xuXHRcdFx0dGhpcy5lbWl0KCdyZW1vdmVkJywgcmVjb3JkKTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kZWxzQmFzZUNhY2hlO1xuIiwiLyogZ2xvYmFscyBNb25nb0ludGVybmFscyAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmNvbnN0IGJhc2VOYW1lID0gJ3JvY2tldGNoYXRfJztcbmltcG9ydCB7RXZlbnRFbWl0dGVyfSBmcm9tICdldmVudHMnO1xuXG5jb25zdCB0cmFzaCA9IG5ldyBNb25nby5Db2xsZWN0aW9uKGAkeyBiYXNlTmFtZSB9X3RyYXNoYCk7XG50cnkge1xuXHR0cmFzaC5fZW5zdXJlSW5kZXgoeyBjb2xsZWN0aW9uOiAxIH0pO1xuXHR0cmFzaC5fZW5zdXJlSW5kZXgoeyBfZGVsZXRlZEF0OiAxIH0sIHsgZXhwaXJlQWZ0ZXJTZWNvbmRzOiA2MCAqIDYwICogMjQgKiAzMCB9KTtcbn0gY2F0Y2ggKGUpIHtcblx0Y29uc29sZS5sb2coZSk7XG59XG5cbmNvbnN0IGlzT3Bsb2dBdmFpbGFibGUgPSBNb25nb0ludGVybmFscy5kZWZhdWx0UmVtb3RlQ29sbGVjdGlvbkRyaXZlcigpLm1vbmdvLl9vcGxvZ0hhbmRsZSAmJiAhIU1vbmdvSW50ZXJuYWxzLmRlZmF1bHRSZW1vdGVDb2xsZWN0aW9uRHJpdmVyKCkubW9uZ28uX29wbG9nSGFuZGxlLm9uT3Bsb2dFbnRyeTtcbmxldCBpc09wbG9nRW5hYmxlZCA9IGlzT3Bsb2dBdmFpbGFibGU7XG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRm9yY2VfRGlzYWJsZV9PcExvZ19Gb3JfQ2FjaGUnLCAoa2V5LCB2YWx1ZSkgPT4ge1xuXHRpc09wbG9nRW5hYmxlZCA9IGlzT3Bsb2dBdmFpbGFibGUgJiYgdmFsdWUgPT09IGZhbHNlO1xufSk7XG5cbmNsYXNzIE1vZGVsc0Jhc2VEYiBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cdGNvbnN0cnVjdG9yKG1vZGVsLCBiYXNlTW9kZWwpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0aWYgKE1hdGNoLnRlc3QobW9kZWwsIFN0cmluZykpIHtcblx0XHRcdHRoaXMubmFtZSA9IG1vZGVsO1xuXHRcdFx0dGhpcy5jb2xsZWN0aW9uTmFtZSA9IHRoaXMuYmFzZU5hbWUgKyB0aGlzLm5hbWU7XG5cdFx0XHR0aGlzLm1vZGVsID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uTmFtZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMubmFtZSA9IG1vZGVsLl9uYW1lO1xuXHRcdFx0dGhpcy5jb2xsZWN0aW9uTmFtZSA9IHRoaXMubmFtZTtcblx0XHRcdHRoaXMubW9kZWwgPSBtb2RlbDtcblx0XHR9XG5cblx0XHR0aGlzLmJhc2VNb2RlbCA9IGJhc2VNb2RlbDtcblxuXHRcdHRoaXMud3JhcE1vZGVsKCk7XG5cblx0XHQvLyBXaGVuIHNvbWVvbmUgc3RhcnQgbGlzdGVuaW5nIGZvciBjaGFuZ2VzIHdlIHN0YXJ0IG9wbG9nIGlmIGF2YWlsYWJsZVxuXHRcdHRoaXMub25jZSgnbmV3TGlzdGVuZXInLCAoZXZlbnQvKiwgbGlzdGVuZXIqLykgPT4ge1xuXHRcdFx0aWYgKGV2ZW50ID09PSAnY2hhbmdlJykge1xuXHRcdFx0XHRpZiAoaXNPcGxvZ0VuYWJsZWQpIHtcblx0XHRcdFx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdFx0XHRcdGNvbGxlY3Rpb246IHRoaXMuY29sbGVjdGlvbk5hbWVcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0TW9uZ29JbnRlcm5hbHMuZGVmYXVsdFJlbW90ZUNvbGxlY3Rpb25Ecml2ZXIoKS5tb25nby5fb3Bsb2dIYW5kbGUub25PcGxvZ0VudHJ5KHF1ZXJ5LCB0aGlzLnByb2Nlc3NPcGxvZ1JlY29yZC5iaW5kKHRoaXMpKTtcblx0XHRcdFx0XHRNb25nb0ludGVybmFscy5kZWZhdWx0UmVtb3RlQ29sbGVjdGlvbkRyaXZlcigpLm1vbmdvLl9vcGxvZ0hhbmRsZS5fZGVmaW5lVG9vRmFyQmVoaW5kKE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7ICdfdXBkYXRlZEF0JzogMSB9KTtcblx0fVxuXG5cdGdldCBiYXNlTmFtZSgpIHtcblx0XHRyZXR1cm4gYmFzZU5hbWU7XG5cdH1cblxuXHRzZXRVcGRhdGVkQXQocmVjb3JkID0ge30pIHtcblxuXHRcdC8vIFRPRE86IENoZWNrIGlmIHRoaXMgY2FuIGJlIGRlbGV0ZWQsIFJvZHJpZ28gZG9lcyBub3QgcmVtZW1lYnIgV0hZIGhlIGFkZGVkIGl0LiBTbyBoZSByZW1vdmVkIGl0IHRvIGZpeCBpc3N1ZSAjNTU0MVxuXHRcdC8vIHNldFVwZGF0ZWRBdChyZWNvcmQgPSB7fSwgY2hlY2tRdWVyeSA9IGZhbHNlLCBxdWVyeSkge1xuXHRcdC8vIGlmIChjaGVja1F1ZXJ5ID09PSB0cnVlKSB7XG5cdFx0Ly8gXHRpZiAoIXF1ZXJ5IHx8IE9iamVjdC5rZXlzKHF1ZXJ5KS5sZW5ndGggPT09IDApIHtcblx0XHQvLyBcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignTW9kZWxzLl9CYXNlOiBFbXB0eSBxdWVyeScpO1xuXHRcdC8vIFx0fVxuXHRcdC8vIH1cblxuXHRcdGlmICgvKF58LClcXCQvLnRlc3QoT2JqZWN0LmtleXMocmVjb3JkKS5qb2luKCcsJykpKSB7XG5cdFx0XHRyZWNvcmQuJHNldCA9IHJlY29yZC4kc2V0IHx8IHt9O1xuXHRcdFx0cmVjb3JkLiRzZXQuX3VwZGF0ZWRBdCA9IG5ldyBEYXRlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZWNvcmQuX3VwZGF0ZWRBdCA9IG5ldyBEYXRlO1xuXHRcdH1cblxuXHRcdHJldHVybiByZWNvcmQ7XG5cdH1cblxuXHR3cmFwTW9kZWwoKSB7XG5cdFx0dGhpcy5vcmlnaW5hbHMgPSB7XG5cdFx0XHRpbnNlcnQ6IHRoaXMubW9kZWwuaW5zZXJ0LmJpbmQodGhpcy5tb2RlbCksXG5cdFx0XHR1cGRhdGU6IHRoaXMubW9kZWwudXBkYXRlLmJpbmQodGhpcy5tb2RlbCksXG5cdFx0XHRyZW1vdmU6IHRoaXMubW9kZWwucmVtb3ZlLmJpbmQodGhpcy5tb2RlbClcblx0XHR9O1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXG5cdFx0dGhpcy5tb2RlbC5pbnNlcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBzZWxmLmluc2VydCguLi5hcmd1bWVudHMpO1xuXHRcdH07XG5cblx0XHR0aGlzLm1vZGVsLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHNlbGYudXBkYXRlKC4uLmFyZ3VtZW50cyk7XG5cdFx0fTtcblxuXHRcdHRoaXMubW9kZWwucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5yZW1vdmUoLi4uYXJndW1lbnRzKTtcblx0XHR9O1xuXHR9XG5cblx0ZmluZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5tb2RlbC5maW5kKC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRmaW5kT25lKCkge1xuXHRcdHJldHVybiB0aGlzLm1vZGVsLmZpbmRPbmUoLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGZpbmRPbmVCeUlkKF9pZCwgb3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLm1vZGVsLmZpbmRPbmUoeyBfaWQgfSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kT25lQnlJZHMoaWRzLCBvcHRpb25zKSB7XG5cdFx0cmV0dXJuIHRoaXMubW9kZWwuZmluZE9uZSh7IF9pZDogeyAkaW46IGlkcyB9fSwgb3B0aW9ucyk7XG5cdH1cblxuXHRkZWZpbmVTeW5jU3RyYXRlZ3kocXVlcnksIG1vZGlmaWVyLCBvcHRpb25zKSB7XG5cdFx0aWYgKHRoaXMuYmFzZU1vZGVsLnVzZUNhY2hlID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuICdkYic7XG5cdFx0fVxuXG5cdFx0aWYgKG9wdGlvbnMudXBzZXJ0ID09PSB0cnVlKSB7XG5cdFx0XHRyZXR1cm4gJ2RiJztcblx0XHR9XG5cblx0XHQvLyBjb25zdCBkYk1vZGlmaWVycyA9IFtcblx0XHQvLyBcdCckY3VycmVudERhdGUnLFxuXHRcdC8vIFx0JyRiaXQnLFxuXHRcdC8vIFx0JyRwdWxsJyxcblx0XHQvLyBcdCckcHVzaEFsbCcsXG5cdFx0Ly8gXHQnJHB1c2gnLFxuXHRcdC8vIFx0JyRzZXRPbkluc2VydCdcblx0XHQvLyBdO1xuXG5cdFx0Y29uc3QgY2FjaGVBbGxvd2VkTW9kaWZpZXJzID0gW1xuXHRcdFx0JyRzZXQnLFxuXHRcdFx0JyR1bnNldCcsXG5cdFx0XHQnJG1pbicsXG5cdFx0XHQnJG1heCcsXG5cdFx0XHQnJGluYycsXG5cdFx0XHQnJG11bCcsXG5cdFx0XHQnJHJlbmFtZScsXG5cdFx0XHQnJHB1bGxBbGwnLFxuXHRcdFx0JyRwb3AnLFxuXHRcdFx0JyRhZGRUb1NldCdcblx0XHRdO1xuXG5cdFx0Y29uc3Qgbm90QWxsb3dlZE1vZGlmaWVycyA9IE9iamVjdC5rZXlzKG1vZGlmaWVyKS5maWx0ZXIoaSA9PiBpLnN0YXJ0c1dpdGgoJyQnKSAmJiBjYWNoZUFsbG93ZWRNb2RpZmllcnMuaW5jbHVkZXMoaSkgPT09IGZhbHNlKTtcblxuXHRcdGlmIChub3RBbGxvd2VkTW9kaWZpZXJzLmxlbmd0aCA+IDApIHtcblx0XHRcdHJldHVybiAnZGInO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBsYWNlaG9sZGVyRmllbGRzID0gT2JqZWN0LmtleXMocXVlcnkpLmZpbHRlcihpdGVtID0+IGl0ZW0uaW5kZXhPZignJCcpID4gLTEpO1xuXHRcdGlmIChwbGFjZWhvbGRlckZpZWxkcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRyZXR1cm4gJ2RiJztcblx0XHR9XG5cblx0XHRyZXR1cm4gJ2NhY2hlJztcblx0fVxuXG5cdHVwZGF0ZUhhc1Bvc2l0aW9uYWxPcGVyYXRvcih1cGRhdGUpIHtcblx0XHRmb3IgKGNvbnN0IGtleSBpbiB1cGRhdGUpIHtcblx0XHRcdGlmIChrZXkuaW5jbHVkZXMoJy4kJykpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHZhbHVlID0gdXBkYXRlW2tleV07XG5cblx0XHRcdGlmIChNYXRjaC50ZXN0KHZhbHVlLCBPYmplY3QpKSB7XG5cdFx0XHRcdGlmICh0aGlzLnVwZGF0ZUhhc1Bvc2l0aW9uYWxPcGVyYXRvcih2YWx1ZSkgPT09IHRydWUpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHByb2Nlc3NPcGxvZ1JlY29yZChhY3Rpb24pIHtcblx0XHRpZiAoaXNPcGxvZ0VuYWJsZWQgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGFjdGlvbi5vcC5vcCA9PT0gJ2knKSB7XG5cdFx0XHR0aGlzLmVtaXQoJ2NoYW5nZScsIHtcblx0XHRcdFx0YWN0aW9uOiAnaW5zZXJ0Jyxcblx0XHRcdFx0aWQ6IGFjdGlvbi5vcC5vLl9pZCxcblx0XHRcdFx0ZGF0YTogYWN0aW9uLm9wLm8sXG5cdFx0XHRcdG9wbG9nOiB0cnVlXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoYWN0aW9uLm9wLm9wID09PSAndScpIHtcblx0XHRcdGlmICghYWN0aW9uLm9wLm8uJHNldCAmJiAhYWN0aW9uLm9wLm8uJHVuc2V0KSB7XG5cdFx0XHRcdHRoaXMuZW1pdCgnY2hhbmdlJywge1xuXHRcdFx0XHRcdGFjdGlvbjogJ3VwZGF0ZTpyZWNvcmQnLFxuXHRcdFx0XHRcdGlkOiBhY3Rpb24uaWQsXG5cdFx0XHRcdFx0ZGF0YTogYWN0aW9uLm9wLm8sXG5cdFx0XHRcdFx0b3Bsb2c6IHRydWVcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZGlmZiA9IHt9O1xuXHRcdFx0aWYgKGFjdGlvbi5vcC5vLiRzZXQpIHtcblx0XHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gYWN0aW9uLm9wLm8uJHNldCkge1xuXHRcdFx0XHRcdGlmIChhY3Rpb24ub3Auby4kc2V0Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRcdGRpZmZba2V5XSA9IGFjdGlvbi5vcC5vLiRzZXRba2V5XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGFjdGlvbi5vcC5vLiR1bnNldCkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBhY3Rpb24ub3Auby4kdW5zZXQpIHtcblx0XHRcdFx0XHRpZiAoYWN0aW9uLm9wLm8uJHVuc2V0Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRcdGRpZmZba2V5XSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5lbWl0KCdjaGFuZ2UnLCB7XG5cdFx0XHRcdGFjdGlvbjogJ3VwZGF0ZTpkaWZmJyxcblx0XHRcdFx0aWQ6IGFjdGlvbi5pZCxcblx0XHRcdFx0ZGF0YTogZGlmZixcblx0XHRcdFx0b3Bsb2c6IHRydWVcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChhY3Rpb24ub3Aub3AgPT09ICdkJykge1xuXHRcdFx0dGhpcy5lbWl0KCdjaGFuZ2UnLCB7XG5cdFx0XHRcdGFjdGlvbjogJ3JlbW92ZScsXG5cdFx0XHRcdGlkOiBhY3Rpb24uaWQsXG5cdFx0XHRcdG9wbG9nOiB0cnVlXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHRpbnNlcnQocmVjb3JkKSB7XG5cdFx0dGhpcy5zZXRVcGRhdGVkQXQocmVjb3JkKTtcblxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMub3JpZ2luYWxzLmluc2VydCguLi5hcmd1bWVudHMpO1xuXHRcdGlmICghaXNPcGxvZ0VuYWJsZWQgJiYgdGhpcy5saXN0ZW5lckNvdW50KCdjaGFuZ2UnKSA+IDApIHtcblx0XHRcdHRoaXMuZW1pdCgnY2hhbmdlJywge1xuXHRcdFx0XHRhY3Rpb246ICdpbnNlcnQnLFxuXHRcdFx0XHRpZDogcmVzdWx0LFxuXHRcdFx0XHRkYXRhOiBfLmV4dGVuZCh7fSwgcmVjb3JkKSxcblx0XHRcdFx0b3Bsb2c6IGZhbHNlXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZWNvcmQuX2lkID0gcmVzdWx0O1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHVwZGF0ZShxdWVyeSwgdXBkYXRlLCBvcHRpb25zID0ge30pIHtcblx0XHR0aGlzLnNldFVwZGF0ZWRBdCh1cGRhdGUsIHRydWUsIHF1ZXJ5KTtcblxuXHRcdGNvbnN0IHN0cmF0ZWd5ID0gdGhpcy5kZWZpbmVTeW5jU3RyYXRlZ3kocXVlcnksIHVwZGF0ZSwgb3B0aW9ucyk7XG5cdFx0bGV0IGlkcyA9IFtdO1xuXHRcdGlmICghaXNPcGxvZ0VuYWJsZWQgJiYgdGhpcy5saXN0ZW5lckNvdW50KCdjaGFuZ2UnKSA+IDAgJiYgc3RyYXRlZ3kgPT09ICdkYicpIHtcblx0XHRcdGNvbnN0IGZpbmRPcHRpb25zID0ge2ZpZWxkczoge19pZDogMX19O1xuXHRcdFx0bGV0IHJlY29yZHMgPSBvcHRpb25zLm11bHRpID8gdGhpcy5maW5kKHF1ZXJ5LCBmaW5kT3B0aW9ucykuZmV0Y2goKSA6IHRoaXMuZmluZE9uZShxdWVyeSwgZmluZE9wdGlvbnMpIHx8IFtdO1xuXHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KHJlY29yZHMpKSB7XG5cdFx0XHRcdHJlY29yZHMgPSBbcmVjb3Jkc107XG5cdFx0XHR9XG5cblx0XHRcdGlkcyA9IHJlY29yZHMubWFwKGl0ZW0gPT4gaXRlbS5faWQpO1xuXHRcdFx0aWYgKG9wdGlvbnMudXBzZXJ0ICE9PSB0cnVlICYmIHRoaXMudXBkYXRlSGFzUG9zaXRpb25hbE9wZXJhdG9yKHVwZGF0ZSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHF1ZXJ5ID0ge1xuXHRcdFx0XHRcdF9pZDoge1xuXHRcdFx0XHRcdFx0JGluOiBpZHNcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5vcmlnaW5hbHMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIG9wdGlvbnMpO1xuXG5cdFx0aWYgKCFpc09wbG9nRW5hYmxlZCAmJiB0aGlzLmxpc3RlbmVyQ291bnQoJ2NoYW5nZScpID4gMCkge1xuXHRcdFx0aWYgKHN0cmF0ZWd5ID09PSAnZGInKSB7XG5cdFx0XHRcdGlmIChvcHRpb25zLnVwc2VydCA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdGlmIChyZXN1bHQuaW5zZXJ0ZWRJZCkge1xuXHRcdFx0XHRcdFx0dGhpcy5lbWl0KCdjaGFuZ2UnLCB7XG5cdFx0XHRcdFx0XHRcdGFjdGlvbjogJ2luc2VydCcsXG5cdFx0XHRcdFx0XHRcdGlkOiByZXN1bHQuaW5zZXJ0ZWRJZCxcblx0XHRcdFx0XHRcdFx0ZGF0YTogdGhpcy5maW5kT25lKHtfaWQ6IHJlc3VsdC5pbnNlcnRlZElkfSksXG5cdFx0XHRcdFx0XHRcdG9wbG9nOiBmYWxzZVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cXVlcnkgPSB7XG5cdFx0XHRcdFx0XHRfaWQ6IHtcblx0XHRcdFx0XHRcdFx0JGluOiBpZHNcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IHJlY29yZHMgPSBvcHRpb25zLm11bHRpID8gdGhpcy5maW5kKHF1ZXJ5KS5mZXRjaCgpIDogdGhpcy5maW5kT25lKHF1ZXJ5KSB8fCBbXTtcblx0XHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KHJlY29yZHMpKSB7XG5cdFx0XHRcdFx0cmVjb3JkcyA9IFtyZWNvcmRzXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGNvbnN0IHJlY29yZCBvZiByZWNvcmRzKSB7XG5cdFx0XHRcdFx0dGhpcy5lbWl0KCdjaGFuZ2UnLCB7XG5cdFx0XHRcdFx0XHRhY3Rpb246ICd1cGRhdGU6cmVjb3JkJyxcblx0XHRcdFx0XHRcdGlkOiByZWNvcmQuX2lkLFxuXHRcdFx0XHRcdFx0ZGF0YTogcmVjb3JkLFxuXHRcdFx0XHRcdFx0b3Bsb2c6IGZhbHNlXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZW1pdCgnY2hhbmdlJywge1xuXHRcdFx0XHRcdGFjdGlvbjogJ3VwZGF0ZTpxdWVyeScsXG5cdFx0XHRcdFx0aWQ6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHRxdWVyeSxcblx0XHRcdFx0XHRcdHVwZGF0ZSxcblx0XHRcdFx0XHRcdG9wdGlvbnNcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdG9wbG9nOiBmYWxzZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHVwc2VydChxdWVyeSwgdXBkYXRlLCBvcHRpb25zID0ge30pIHtcblx0XHRvcHRpb25zLnVwc2VydCA9IHRydWU7XG5cdFx0b3B0aW9ucy5fcmV0dXJuT2JqZWN0ID0gdHJ1ZTtcblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgb3B0aW9ucyk7XG5cdH1cblxuXHRyZW1vdmUocXVlcnkpIHtcblx0XHRjb25zdCByZWNvcmRzID0gdGhpcy5tb2RlbC5maW5kKHF1ZXJ5KS5mZXRjaCgpO1xuXG5cdFx0Y29uc3QgaWRzID0gW107XG5cdFx0Zm9yIChjb25zdCByZWNvcmQgb2YgcmVjb3Jkcykge1xuXHRcdFx0aWRzLnB1c2gocmVjb3JkLl9pZCk7XG5cblx0XHRcdHJlY29yZC5fZGVsZXRlZEF0ID0gbmV3IERhdGU7XG5cdFx0XHRyZWNvcmQuX19jb2xsZWN0aW9uX18gPSB0aGlzLm5hbWU7XG5cblx0XHRcdHRyYXNoLnVwc2VydCh7X2lkOiByZWNvcmQuX2lkfSwgXy5vbWl0KHJlY29yZCwgJ19pZCcpKTtcblx0XHR9XG5cblx0XHRxdWVyeSA9IHsgX2lkOiB7ICRpbjogaWRzIH0gfTtcblxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMub3JpZ2luYWxzLnJlbW92ZShxdWVyeSk7XG5cblx0XHRpZiAoIWlzT3Bsb2dFbmFibGVkICYmIHRoaXMubGlzdGVuZXJDb3VudCgnY2hhbmdlJykgPiAwKSB7XG5cdFx0XHRmb3IgKGNvbnN0IHJlY29yZCBvZiByZWNvcmRzKSB7XG5cdFx0XHRcdHRoaXMuZW1pdCgnY2hhbmdlJywge1xuXHRcdFx0XHRcdGFjdGlvbjogJ3JlbW92ZScsXG5cdFx0XHRcdFx0aWQ6IHJlY29yZC5faWQsXG5cdFx0XHRcdFx0ZGF0YTogXy5leHRlbmQoe30sIHJlY29yZCksXG5cdFx0XHRcdFx0b3Bsb2c6IGZhbHNlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRpbnNlcnRPclVwc2VydCguLi5hcmdzKSB7XG5cdFx0aWYgKGFyZ3NbMF0gJiYgYXJnc1swXS5faWQpIHtcblx0XHRcdGNvbnN0IF9pZCA9IGFyZ3NbMF0uX2lkO1xuXHRcdFx0ZGVsZXRlIGFyZ3NbMF0uX2lkO1xuXHRcdFx0YXJncy51bnNoaWZ0KHtcblx0XHRcdFx0X2lkXG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy51cHNlcnQoLi4uYXJncyk7XG5cdFx0XHRyZXR1cm4gX2lkO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5pbnNlcnQoLi4uYXJncyk7XG5cdFx0fVxuXHR9XG5cblx0YWxsb3coKSB7XG5cdFx0cmV0dXJuIHRoaXMubW9kZWwuYWxsb3coLi4uYXJndW1lbnRzKTtcblx0fVxuXG5cdGRlbnkoKSB7XG5cdFx0cmV0dXJuIHRoaXMubW9kZWwuZGVueSguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0ZW5zdXJlSW5kZXgoKSB7XG5cdFx0cmV0dXJuIHRoaXMubW9kZWwuX2Vuc3VyZUluZGV4KC4uLmFyZ3VtZW50cyk7XG5cdH1cblxuXHRkcm9wSW5kZXgoKSB7XG5cdFx0cmV0dXJuIHRoaXMubW9kZWwuX2Ryb3BJbmRleCguLi5hcmd1bWVudHMpO1xuXHR9XG5cblx0dHJ5RW5zdXJlSW5kZXgoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiB0aGlzLmVuc3VyZUluZGV4KC4uLmFyZ3VtZW50cyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgaW5kZXg6JywgdGhpcy5uYW1lLCAnLT4nLCAuLi5hcmd1bWVudHMsIGUpO1xuXHRcdH1cblx0fVxuXG5cdHRyeURyb3BJbmRleCgpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZHJvcEluZGV4KC4uLmFyZ3VtZW50cyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRXJyb3IgZHJvcHBpbmcgaW5kZXg6JywgdGhpcy5uYW1lLCAnLT4nLCAuLi5hcmd1bWVudHMsIGUpO1xuXHRcdH1cblx0fVxuXG5cdHRyYXNoRmluZChxdWVyeSwgb3B0aW9ucykge1xuXHRcdHF1ZXJ5Ll9fY29sbGVjdGlvbl9fID0gdGhpcy5uYW1lO1xuXG5cdFx0cmV0dXJuIHRyYXNoLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0dHJhc2hGaW5kRGVsZXRlZEFmdGVyKGRlbGV0ZWRBdCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuXHRcdHF1ZXJ5Ll9fY29sbGVjdGlvbl9fID0gdGhpcy5uYW1lO1xuXHRcdHF1ZXJ5Ll9kZWxldGVkQXQgPSB7XG5cdFx0XHQkZ3Q6IGRlbGV0ZWRBdFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdHJhc2guZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kZWxzQmFzZURiO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmNvbnN0IEFjY2Vzc1Rva2VuU2VydmljZXMgPSB7fTtcblxuUm9ja2V0Q2hhdC5yZWdpc3RlckFjY2Vzc1Rva2VuU2VydmljZSA9IGZ1bmN0aW9uKHNlcnZpY2VOYW1lLCBoYW5kbGVBY2Nlc3NUb2tlblJlcXVlc3QpIHtcblx0QWNjZXNzVG9rZW5TZXJ2aWNlc1tzZXJ2aWNlTmFtZV0gPSB7XG5cdFx0c2VydmljZU5hbWUsXG5cdFx0aGFuZGxlQWNjZXNzVG9rZW5SZXF1ZXN0XG5cdH07XG59O1xuXG4vLyBMaXN0ZW4gdG8gY2FsbHMgdG8gYGxvZ2luYCB3aXRoIGFuIG9hdXRoIG9wdGlvbiBzZXQuIFRoaXMgaXMgd2hlcmVcbi8vIHVzZXJzIGFjdHVhbGx5IGdldCBsb2dnZWQgaW4gdG8gbWV0ZW9yIHZpYSBvYXV0aC5cbkFjY291bnRzLnJlZ2lzdGVyTG9naW5IYW5kbGVyKGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0aWYgKCFvcHRpb25zLmFjY2Vzc1Rva2VuKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDsgLy8gZG9uJ3QgaGFuZGxlXG5cdH1cblxuXHRjaGVjayhvcHRpb25zLCBNYXRjaC5PYmplY3RJbmNsdWRpbmcoe1xuXHRcdHNlcnZpY2VOYW1lOiBTdHJpbmdcblx0fSkpO1xuXG5cdGNvbnN0IHNlcnZpY2UgPSBBY2Nlc3NUb2tlblNlcnZpY2VzW29wdGlvbnMuc2VydmljZU5hbWVdO1xuXG5cdC8vIFNraXAgZXZlcnl0aGluZyBpZiB0aGVyZSdzIG5vIHNlcnZpY2Ugc2V0IGJ5IHRoZSBvYXV0aCBtaWRkbGV3YXJlXG5cdGlmICghc2VydmljZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBBY2Nlc3NUb2tlbiBzZXJ2aWNlICR7IG9wdGlvbnMuc2VydmljZU5hbWUgfWApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHdlJ3JlIGNvbmZpZ3VyZWRcblx0aWYgKCFTZXJ2aWNlQ29uZmlndXJhdGlvbi5jb25maWd1cmF0aW9ucy5maW5kT25lKHtzZXJ2aWNlOiBzZXJ2aWNlLnNlcnZpY2VOYW1lfSkpIHtcblx0XHR0aHJvdyBuZXcgU2VydmljZUNvbmZpZ3VyYXRpb24uQ29uZmlnRXJyb3IoKTtcblx0fVxuXG5cdGlmICghXy5jb250YWlucyhBY2NvdW50cy5vYXV0aC5zZXJ2aWNlTmFtZXMoKSwgc2VydmljZS5zZXJ2aWNlTmFtZSkpIHtcblx0XHQvLyBzZXJ2aWNlTmFtZSB3YXMgbm90IGZvdW5kIGluIHRoZSByZWdpc3RlcmVkIHNlcnZpY2VzIGxpc3QuXG5cdFx0Ly8gVGhpcyBjb3VsZCBoYXBwZW4gYmVjYXVzZSB0aGUgc2VydmljZSBuZXZlciByZWdpc3RlcmVkIGl0c2VsZiBvclxuXHRcdC8vIHVucmVnaXN0ZXJTZXJ2aWNlIHdhcyBjYWxsZWQgb24gaXQuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHR5cGU6ICdvYXV0aCcsXG5cdFx0XHRlcnJvcjogbmV3IE1ldGVvci5FcnJvcihcblx0XHRcdFx0QWNjb3VudHMuTG9naW5DYW5jZWxsZWRFcnJvci5udW1lcmljRXJyb3IsXG5cdFx0XHRcdGBObyByZWdpc3RlcmVkIG9hdXRoIHNlcnZpY2UgZm91bmQgZm9yOiAkeyBzZXJ2aWNlLnNlcnZpY2VOYW1lIH1gXG5cdFx0XHQpXG5cdFx0fTtcblx0fVxuXG5cdGNvbnN0IG9hdXRoUmVzdWx0ID0gc2VydmljZS5oYW5kbGVBY2Nlc3NUb2tlblJlcXVlc3Qob3B0aW9ucyk7XG5cblx0cmV0dXJuIEFjY291bnRzLnVwZGF0ZU9yQ3JlYXRlVXNlckZyb21FeHRlcm5hbFNlcnZpY2Uoc2VydmljZS5zZXJ2aWNlTmFtZSwgb2F1dGhSZXN1bHQuc2VydmljZURhdGEsIG9hdXRoUmVzdWx0Lm9wdGlvbnMpO1xufSk7XG5cblxuXG4iLCIvKiBnbG9iYWxzIEdvb2dsZSAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmZ1bmN0aW9uIGdldElkZW50aXR5KGFjY2Vzc1Rva2VuKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEhUVFAuZ2V0KFxuXHRcdFx0J2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS91c2VyaW5mbycsXG5cdFx0XHR7cGFyYW1zOiB7YWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbn19KS5kYXRhO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHR0aHJvdyBfLmV4dGVuZChuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBpZGVudGl0eSBmcm9tIEdvb2dsZS4gJHsgZXJyLm1lc3NhZ2UgfWApLCB7cmVzcG9uc2U6IGVyci5yZXNwb25zZX0pO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGdldFNjb3BlcyhhY2Nlc3NUb2tlbikge1xuXHR0cnkge1xuXHRcdHJldHVybiBIVFRQLmdldChcblx0XHRcdCdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvdG9rZW5pbmZvJyxcblx0XHRcdHtwYXJhbXM6IHthY2Nlc3NfdG9rZW46IGFjY2Vzc1Rva2VufX0pLmRhdGEuc2NvcGUuc3BsaXQoJyAnKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0dGhyb3cgXy5leHRlbmQobmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggdG9rZW5pbmZvIGZyb20gR29vZ2xlLiAkeyBlcnIubWVzc2FnZSB9YCksIHtyZXNwb25zZTogZXJyLnJlc3BvbnNlfSk7XG5cdH1cbn1cblxuXG5Sb2NrZXRDaGF0LnJlZ2lzdGVyQWNjZXNzVG9rZW5TZXJ2aWNlKCdnb29nbGUnLCBmdW5jdGlvbihvcHRpb25zKSB7XG5cdGNoZWNrKG9wdGlvbnMsIE1hdGNoLk9iamVjdEluY2x1ZGluZyh7XG5cdFx0YWNjZXNzVG9rZW46IFN0cmluZyxcblx0XHRpZFRva2VuOiBTdHJpbmcsXG5cdFx0ZXhwaXJlc0luOiBNYXRjaC5JbnRlZ2VyLFxuXHRcdHNjb3BlOiBNYXRjaC5NYXliZShTdHJpbmcpLFxuXHRcdGlkZW50aXR5OiBNYXRjaC5NYXliZShPYmplY3QpXG5cdH0pKTtcblxuXHRjb25zdCBpZGVudGl0eSA9IG9wdGlvbnMuaWRlbnRpdHkgfHwgZ2V0SWRlbnRpdHkob3B0aW9ucy5hY2Nlc3NUb2tlbik7XG5cblx0Y29uc3Qgc2VydmljZURhdGEgPSB7XG5cdFx0YWNjZXNzVG9rZW46IG9wdGlvbnMuYWNjZXNzVG9rZW4sXG5cdFx0aWRUb2tlbjogb3B0aW9ucy5pZFRva2VuLFxuXHRcdGV4cGlyZXNBdDogKCtuZXcgRGF0ZSkgKyAoMTAwMCAqIHBhcnNlSW50KG9wdGlvbnMuZXhwaXJlc0luLCAxMCkpLFxuXHRcdHNjb3BlOiBvcHRpb25zLnNjb3BlcyB8fCBnZXRTY29wZXMob3B0aW9ucy5hY2Nlc3NUb2tlbilcblx0fTtcblxuXHRjb25zdCBmaWVsZHMgPSBfLnBpY2soaWRlbnRpdHksIEdvb2dsZS53aGl0ZWxpc3RlZEZpZWxkcyk7XG5cdF8uZXh0ZW5kKHNlcnZpY2VEYXRhLCBmaWVsZHMpO1xuXG5cdC8vIG9ubHkgc2V0IHRoZSB0b2tlbiBpbiBzZXJ2aWNlRGF0YSBpZiBpdCdzIHRoZXJlLiB0aGlzIGVuc3VyZXNcblx0Ly8gdGhhdCB3ZSBkb24ndCBsb3NlIG9sZCBvbmVzIChzaW5jZSB3ZSBvbmx5IGdldCB0aGlzIG9uIHRoZSBmaXJzdFxuXHQvLyBsb2cgaW4gYXR0ZW1wdClcblx0aWYgKG9wdGlvbnMucmVmcmVzaFRva2VuKSB7XG5cdFx0c2VydmljZURhdGEucmVmcmVzaFRva2VuID0gb3B0aW9ucy5yZWZyZXNoVG9rZW47XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHNlcnZpY2VEYXRhLFxuXHRcdG9wdGlvbnM6IHtcblx0XHRcdHByb2ZpbGU6IHtcblx0XHRcdFx0bmFtZTogaWRlbnRpdHkubmFtZVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn0pO1xuIiwiLyogZ2xvYmFscyBPQXV0aCAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbk9BdXRoLl9yZWRpcmVjdFVyaSA9IF8ud3JhcChPQXV0aC5fcmVkaXJlY3RVcmksIGZ1bmN0aW9uKGZ1bmMsIHNlcnZpY2VOYW1lLCAuLi5hcmdzKSB7XG5cdGNvbnN0IHByb3h5ID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX09BdXRoX1Byb3h5X3NlcnZpY2VzJykucmVwbGFjZSgvXFxzL2csICcnKS5zcGxpdCgnLCcpO1xuXHRpZiAocHJveHkuaW5jbHVkZXMoc2VydmljZU5hbWUpKSB7XG5cdFx0cmV0dXJuIGAkeyBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfT0F1dGhfUHJveHlfaG9zdCcpIH0vb2F1dGhfcmVkaXJlY3RgO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBmdW5jKHNlcnZpY2VOYW1lLCAuLi5hcmdzKTtcblx0fVxuXG59KTtcbiIsIlJvY2tldENoYXQuc3RhdHNUcmFja2VyID0gbmV3IChjbGFzcyBTdGF0c1RyYWNrZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLlN0YXRzRCA9IE5wbS5yZXF1aXJlKCdub2RlLWRvZ3N0YXRzZCcpLlN0YXRzRDtcblx0XHR0aGlzLmRvZ3N0YXRzZCA9IG5ldyB0aGlzLlN0YXRzRCgpO1xuXHR9XG5cblx0dHJhY2sodHlwZSwgc3RhdHMsIC4uLmFyZ3MpIHtcblx0XHR0aGlzLmRvZ3N0YXRzZFt0eXBlXShgUm9ja2V0Q2hhdC4keyBzdGF0cyB9YCwgLi4uYXJncyk7XG5cdH1cblxuXHRub3coKSB7XG5cdFx0Y29uc3QgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWUoKTtcblx0XHRyZXR1cm4gKGhydGltZVswXSAqIDEwMDAwMDAgKyBocnRpbWVbMV0gLyAxMDAwKTtcblx0fVxuXG5cdHRpbWluZyhzdGF0cywgdGltZSwgdGFncykge1xuXHRcdHRoaXMudHJhY2soJ3RpbWluZycsIHN0YXRzLCB0aW1lLCB0YWdzKTtcblx0fVxuXG5cdGluY3JlbWVudChzdGF0cywgdGltZSwgdGFncykge1xuXHRcdHRoaXMudHJhY2soJ2luY3JlbWVudCcsIHN0YXRzLCB0aW1lLCB0YWdzKTtcblx0fVxuXG5cdGRlY3JlbWVudChzdGF0cywgdGltZSwgdGFncykge1xuXHRcdHRoaXMudHJhY2soJ2RlY3JlbWVudCcsIHN0YXRzLCB0aW1lLCB0YWdzKTtcblx0fVxuXG5cdGhpc3RvZ3JhbShzdGF0cywgdGltZSwgdGFncykge1xuXHRcdHRoaXMudHJhY2soJ2hpc3RvZ3JhbScsIHN0YXRzLCB0aW1lLCB0YWdzKTtcblx0fVxuXG5cdGdhdWdlKHN0YXRzLCB0aW1lLCB0YWdzKSB7XG5cdFx0dGhpcy50cmFjaygnZ2F1Z2UnLCBzdGF0cywgdGltZSwgdGFncyk7XG5cdH1cblxuXHR1bmlxdWUoc3RhdHMsIHRpbWUsIHRhZ3MpIHtcblx0XHR0aGlzLnRyYWNrKCd1bmlxdWUnLCBzdGF0cywgdGltZSwgdGFncyk7XG5cdH1cblxuXHRzZXQoc3RhdHMsIHRpbWUsIHRhZ3MpIHtcblx0XHR0aGlzLnRyYWNrKCdzZXQnLCBzdGF0cywgdGltZSwgdGFncyk7XG5cdH1cbn0pO1xuIiwiUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuY2FjaGUuaGFzTWFueSgnU3Vic2NyaXB0aW9ucycsIHtcblx0ZmllbGQ6ICd1c2VybmFtZXMnLFxuXHRsaW5rOiB7XG5cdFx0bG9jYWw6ICdfaWQnLFxuXHRcdHJlbW90ZTogJ3JpZCcsXG5cdFx0dHJhbnNmb3JtKHJvb20sIHN1YnNjcmlwdGlvbikge1xuXHRcdFx0cmV0dXJuIHN1YnNjcmlwdGlvbi51LnVzZXJuYW1lO1xuXHRcdH0sXG5cdFx0cmVtb3ZlKGFyciwgc3Vic2NyaXB0aW9uKSB7XG5cdFx0XHRpZiAoYXJyLmluZGV4T2Yoc3Vic2NyaXB0aW9uLnUudXNlcm5hbWUpID4gLTEpIHtcblx0XHRcdFx0YXJyLnNwbGljZShhcnIuaW5kZXhPZihzdWJzY3JpcHRpb24udS51c2VybmFtZSksIDEpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cblxuUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5jYWNoZS5oYXNPbmUoJ1Jvb21zJywge1xuXHRmaWVsZDogJ19yb29tJyxcblx0bGluazoge1xuXHRcdGxvY2FsOiAncmlkJyxcblx0XHRyZW1vdGU6ICdfaWQnXG5cdH1cbn0pO1xuXG5cblJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuY2FjaGUuaGFzT25lKCdVc2VycycsIHtcblx0ZmllbGQ6ICdfdXNlcicsXG5cdGxpbms6IHtcblx0XHRsb2NhbDogJ3UuX2lkJyxcblx0XHRyZW1vdGU6ICdfaWQnXG5cdH1cbn0pO1xuXG5Sb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmNhY2hlLmhhc09uZSgnVXNlcnMnLCB7XG5cdGZpZWxkOiAnZm5hbWUnLFxuXHRsaW5rOiB7XG5cdFx0bG9jYWw6ICduYW1lJyxcblx0XHRyZW1vdGU6ICd1c2VybmFtZScsXG5cdFx0d2hlcmUoc3Vic2NyaXB0aW9uLyosIHVzZXIqLykge1xuXHRcdFx0cmV0dXJuIHN1YnNjcmlwdGlvbi50ID09PSAnZCc7XG5cdFx0fSxcblx0XHR0cmFuc2Zvcm0oc3Vic2NyaXB0aW9uLCB1c2VyKSB7XG5cdFx0XHRpZiAodXNlciA9PSBudWxsIHx8IHN1YnNjcmlwdGlvbiA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHQvLyBQcmV2ZW50IGNsaWVudCBjYWNoZSBmb3Igb2xkIHN1YnNjcmlwdGlvbnMgd2l0aCBuZXcgbmFtZXNcblx0XHRcdC8vIEN1eiB3aGVuIGEgdXNlciBjaGFuZ2UgaGlzIG5hbWUsIHRoZSBzdWJzY3JpcHRpb24ncyBfdXBkYXRlQXRcblx0XHRcdC8vIHdpbGwgbm90IGNoYW5nZVxuXHRcdFx0aWYgKHN1YnNjcmlwdGlvbi5fdXBkYXRlZEF0IDwgdXNlci5fdXBkYXRlZEF0KSB7XG5cdFx0XHRcdHN1YnNjcmlwdGlvbi5fdXBkYXRlZEF0ID0gdXNlci5fdXBkYXRlZEF0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHVzZXIubmFtZTtcblx0XHR9XG5cdH1cbn0pO1xuXG5Sb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5jYWNoZS5sb2FkKCk7XG5Sb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5jYWNoZS5sb2FkKCk7XG5Sb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmNhY2hlLmxvYWQoKTtcblJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLmNhY2hlLmxvYWQoKTtcblxuXG5Sb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5jYWNoZS5hZGREeW5hbWljVmlldygnaGlnaGxpZ2h0cycpLmFwcGx5RmluZCh7XG5cdCdzZXR0aW5ncy5wcmVmZXJlbmNlcy5oaWdobGlnaHRzJzogeyRzaXplOiB7JGd0OiAwfX1cbn0pO1xuXG5Sb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmNhY2hlLmFkZER5bmFtaWNWaWV3KCdub3RpZmljYXRpb25zJykuYXBwbHlGaW5kKHtcblx0JG9yOiBbXG5cdFx0e2Rlc2t0b3BOb3RpZmljYXRpb25zOiB7JGluOiBbJ2FsbCcsICdub3RoaW5nJ119fSxcblx0XHR7bW9iaWxlUHVzaE5vdGlmaWNhdGlvbnM6IHskaW46IFsnYWxsJywgJ25vdGhpbmcnXX19XG5cdF1cbn0pO1xuIiwiLyogZ2xvYmFscyBXZWJBcHBJbnRlcm5hbHMqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmZ1bmN0aW9uIHRlc3RXZWJBcHBJbnRlcm5hbHMoZm4pIHtcblx0dHlwZW9mIFdlYkFwcEludGVybmFscyAhPT0gJ3VuZGVmaW5lZCcgJiYgZm4oV2ViQXBwSW50ZXJuYWxzKTtcbn1cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdDRE5fUFJFRklYJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRpZiAoXy5pc1N0cmluZyh2YWx1ZSkgJiYgdmFsdWUudHJpbSgpKSB7XG5cdFx0cmV0dXJuIHRlc3RXZWJBcHBJbnRlcm5hbHMoV2ViQXBwSW50ZXJuYWxzID0+IFdlYkFwcEludGVybmFscy5zZXRCdW5kbGVkSnNDc3NQcmVmaXgodmFsdWUpKTtcblx0fVxufSk7XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuXHRjb25zdCB2YWx1ZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdDRE5fUFJFRklYJyk7XG5cdGlmIChfLmlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS50cmltKCkpIHtcblx0XHRyZXR1cm4gdGVzdFdlYkFwcEludGVybmFscyhXZWJBcHBJbnRlcm5hbHMgPT4gV2ViQXBwSW50ZXJuYWxzLnNldEJ1bmRsZWRKc0Nzc1ByZWZpeCh2YWx1ZSkpO1xuXHR9XG59KTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHsgSU1BUEludGVyY2VwdGVyIH0gZnJvbSAnLi4vbGliL2ludGVyY2VwdERpcmVjdFJlcGx5RW1haWxzLmpzJztcbmltcG9ydCB7IFBPUDNIZWxwZXIgfSBmcm9tICcuLi9saWIvaW50ZXJjZXB0RGlyZWN0UmVwbHlFbWFpbHMuanMnO1xuXG5jb25zdCBzdGFydEVtYWlsSW50ZXJjZXB0ZXIgPSBfLmRlYm91bmNlKE1ldGVvci5iaW5kRW52aXJvbm1lbnQoZnVuY3Rpb24oKSB7XG5cdGNvbnNvbGUubG9nKCdTdGFydGluZyBFbWFpbCBJbnRlcmNlcHRlci4uLicpO1xuXG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0VuYWJsZScpICYmIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfUHJvdG9jb2wnKSAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0hvc3QnKSAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1BvcnQnKSAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1VzZXJuYW1lJykgJiYgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9QYXNzd29yZCcpKSB7XG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfUHJvdG9jb2wnKSA9PT0gJ0lNQVAnKSB7XG5cdFx0XHQvLyBzdG9wIGFscmVhZHkgcnVubmluZyBJTUFQIGluc3RhbmNlXG5cdFx0XHRpZiAoUm9ja2V0Q2hhdC5JTUFQICYmIFJvY2tldENoYXQuSU1BUC5pc0FjdGl2ZSgpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdEaXNjb25uZWN0aW5nIGFscmVhZHkgcnVubmluZyBJTUFQIGluc3RhbmNlLi4uJyk7XG5cdFx0XHRcdFJvY2tldENoYXQuSU1BUC5zdG9wKE1ldGVvci5iaW5kRW52aXJvbm1lbnQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ1N0YXJ0aW5nIG5ldyBJTUFQIGluc3RhbmNlLi4uLi4uJyk7XG5cdFx0XHRcdFx0Um9ja2V0Q2hhdC5JTUFQID0gbmV3IElNQVBJbnRlcmNlcHRlcigpO1xuXHRcdFx0XHRcdFJvY2tldENoYXQuSU1BUC5zdGFydCgpO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9KSk7XG5cdFx0XHR9IGVsc2UgaWYgKFJvY2tldENoYXQuUE9QMyAmJiBSb2NrZXRDaGF0LlBPUDNIZWxwZXIgJiYgUm9ja2V0Q2hhdC5QT1AzSGVscGVyLmlzQWN0aXZlKCkpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0Rpc2Nvbm5lY3RpbmcgYWxyZWFkeSBydW5uaW5nIFBPUCBpbnN0YW5jZS4uLicpO1xuXHRcdFx0XHRSb2NrZXRDaGF0LlBPUDNIZWxwZXIuc3RvcChNZXRlb3IuYmluZEVudmlyb25tZW50KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdTdGFydGluZyBuZXcgSU1BUCBpbnN0YW5jZS4uLi4uLicpO1xuXHRcdFx0XHRcdFJvY2tldENoYXQuSU1BUCA9IG5ldyBJTUFQSW50ZXJjZXB0ZXIoKTtcblx0XHRcdFx0XHRSb2NrZXRDaGF0LklNQVAuc3RhcnQoKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1N0YXJ0aW5nIG5ldyBJTUFQIGluc3RhbmNlLi4uLi4uJyk7XG5cdFx0XHRcdFJvY2tldENoYXQuSU1BUCA9IG5ldyBJTUFQSW50ZXJjZXB0ZXIoKTtcblx0XHRcdFx0Um9ja2V0Q2hhdC5JTUFQLnN0YXJ0KCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9Qcm90b2NvbCcpID09PSAnUE9QJykge1xuXHRcdFx0Ly8gc3RvcCBhbHJlYWR5IHJ1bm5pbmcgUE9QIGluc3RhbmNlXG5cdFx0XHRpZiAoUm9ja2V0Q2hhdC5QT1AzICYmIFJvY2tldENoYXQuUE9QM0hlbHBlciAmJiBSb2NrZXRDaGF0LlBPUDNIZWxwZXIuaXNBY3RpdmUoKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnRGlzY29ubmVjdGluZyBhbHJlYWR5IHJ1bm5pbmcgUE9QIGluc3RhbmNlLi4uJyk7XG5cdFx0XHRcdFJvY2tldENoYXQuUE9QM0hlbHBlci5zdG9wKE1ldGVvci5iaW5kRW52aXJvbm1lbnQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ1N0YXJ0aW5nIG5ldyBQT1AgaW5zdGFuY2UuLi4uLi4nKTtcblx0XHRcdFx0XHRSb2NrZXRDaGF0LlBPUDNIZWxwZXIgPSBuZXcgUE9QM0hlbHBlcigpO1xuXHRcdFx0XHRcdFJvY2tldENoYXQuUE9QM0hlbHBlci5zdGFydCgpO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9KSk7XG5cdFx0XHR9IGVsc2UgaWYgKFJvY2tldENoYXQuSU1BUCAmJiBSb2NrZXRDaGF0LklNQVAuaXNBY3RpdmUoKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnRGlzY29ubmVjdGluZyBhbHJlYWR5IHJ1bm5pbmcgSU1BUCBpbnN0YW5jZS4uLicpO1xuXHRcdFx0XHRSb2NrZXRDaGF0LklNQVAuc3RvcChNZXRlb3IuYmluZEVudmlyb25tZW50KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdTdGFydGluZyBuZXcgUE9QIGluc3RhbmNlLi4uLi4uJyk7XG5cdFx0XHRcdFx0Um9ja2V0Q2hhdC5QT1AzSGVscGVyID0gbmV3IFBPUDNIZWxwZXIoKTtcblx0XHRcdFx0XHRSb2NrZXRDaGF0LlBPUDNIZWxwZXIuc3RhcnQoKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1N0YXJ0aW5nIG5ldyBQT1AgaW5zdGFuY2UuLi4uLi4nKTtcblx0XHRcdFx0Um9ja2V0Q2hhdC5QT1AzSGVscGVyID0gbmV3IFBPUDNIZWxwZXIoKTtcblx0XHRcdFx0Um9ja2V0Q2hhdC5QT1AzSGVscGVyLnN0YXJ0KCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmIChSb2NrZXRDaGF0LklNQVAgJiYgUm9ja2V0Q2hhdC5JTUFQLmlzQWN0aXZlKCkpIHtcblx0XHQvLyBzdG9wIElNQVAgaW5zdGFuY2Vcblx0XHRSb2NrZXRDaGF0LklNQVAuc3RvcCgpO1xuXHR9IGVsc2UgaWYgKFJvY2tldENoYXQuUE9QMyAmJiBSb2NrZXRDaGF0LlBPUDNIZWxwZXIuaXNBY3RpdmUoKSkge1xuXHRcdC8vIHN0b3AgUE9QMyBpbnN0YW5jZVxuXHRcdFJvY2tldENoYXQuUE9QM0hlbHBlci5zdG9wKCk7XG5cdH1cbn0pLCAxMDAwKTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5vbmxvYWQoL15EaXJlY3RfUmVwbHlfLisvLCBzdGFydEVtYWlsSW50ZXJjZXB0ZXIpO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmNvbnN0IGJ1aWxkTWFpbFVSTCA9IF8uZGVib3VuY2UoZnVuY3Rpb24oKSB7XG5cdGNvbnNvbGUubG9nKCdVcGRhdGluZyBwcm9jZXNzLmVudi5NQUlMX1VSTCcpO1xuXG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9Ib3N0JykpIHtcblx0XHRwcm9jZXNzLmVudi5NQUlMX1VSTCA9IGAkeyBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9Qcm90b2NvbCcpIH06Ly9gO1xuXG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTTVRQX1VzZXJuYW1lJykgJiYgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NNVFBfUGFzc3dvcmQnKSkge1xuXHRcdFx0cHJvY2Vzcy5lbnYuTUFJTF9VUkwgKz0gYCR7IGVuY29kZVVSSUNvbXBvbmVudChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9Vc2VybmFtZScpKSB9OiR7IGVuY29kZVVSSUNvbXBvbmVudChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9QYXNzd29yZCcpKSB9QGA7XG5cdFx0fVxuXG5cdFx0cHJvY2Vzcy5lbnYuTUFJTF9VUkwgKz0gZW5jb2RlVVJJQ29tcG9uZW50KFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTTVRQX0hvc3QnKSk7XG5cblx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NNVFBfUG9ydCcpKSB7XG5cdFx0XHRwcm9jZXNzLmVudi5NQUlMX1VSTCArPSBgOiR7IHBhcnNlSW50KFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTTVRQX1BvcnQnKSkgfWA7XG5cdFx0fVxuXG5cdFx0cHJvY2Vzcy5lbnYuTUFJTF9VUkwgKz0gYD9wb29sPSR7IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTTVRQX1Bvb2wnKSB9YDtcblxuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9Qcm90b2NvbCcpID09PSAnc210cCcgJiYgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NNVFBfSWdub3JlVExTJykpIHtcblx0XHRcdHByb2Nlc3MuZW52Lk1BSUxfVVJMICs9ICcmc2VjdXJlPWZhbHNlJmlnbm9yZVRMUz10cnVlJztcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvY2Vzcy5lbnYuTUFJTF9VUkw7XG5cdH1cbn0sIDUwMCk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX0hvc3QnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdGlmIChfLmlzU3RyaW5nKHZhbHVlKSkge1xuXHRcdHJldHVybiBidWlsZE1haWxVUkwoKTtcblx0fVxufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX1BvcnQnLCBmdW5jdGlvbigpIHtcblx0cmV0dXJuIGJ1aWxkTWFpbFVSTCgpO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX1VzZXJuYW1lJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRpZiAoXy5pc1N0cmluZyh2YWx1ZSkpIHtcblx0XHRyZXR1cm4gYnVpbGRNYWlsVVJMKCk7XG5cdH1cbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLm9ubG9hZCgnU01UUF9QYXNzd29yZCcsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0aWYgKF8uaXNTdHJpbmcodmFsdWUpKSB7XG5cdFx0cmV0dXJuIGJ1aWxkTWFpbFVSTCgpO1xuXHR9XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5vbmxvYWQoJ1NNVFBfUHJvdG9jb2wnLCBmdW5jdGlvbigpIHtcblx0cmV0dXJuIGJ1aWxkTWFpbFVSTCgpO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX1Bvb2wnLCBmdW5jdGlvbigpIHtcblx0cmV0dXJuIGJ1aWxkTWFpbFVSTCgpO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX0lnbm9yZVRMUycsIGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gYnVpbGRNYWlsVVJMKCk7XG59KTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiBidWlsZE1haWxVUkwoKTtcbn0pO1xuIiwiLyogZ2xvYmFscyBDdXN0b21PQXV0aCAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ3JvY2tldGNoYXQ6bGliJywge1xuXHRtZXRob2RzOiB7XG5cdFx0b2F1dGhfdXBkYXRlZDoge1xuXHRcdFx0dHlwZTogJ2luZm8nXG5cdFx0fVxuXHR9XG59KTtcblxuZnVuY3Rpb24gX09BdXRoU2VydmljZXNVcGRhdGUoKSB7XG5cdGNvbnN0IHNlcnZpY2VzID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoL14oQWNjb3VudHNfT0F1dGhffEFjY291bnRzX09BdXRoX0N1c3RvbS0pW2EtejAtOV9dKyQvaSk7XG5cdHNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UpID0+IHtcblx0XHRsb2dnZXIub2F1dGhfdXBkYXRlZChzZXJ2aWNlLmtleSk7XG5cdFx0bGV0IHNlcnZpY2VOYW1lID0gc2VydmljZS5rZXkucmVwbGFjZSgnQWNjb3VudHNfT0F1dGhfJywgJycpO1xuXHRcdGlmIChzZXJ2aWNlTmFtZSA9PT0gJ01ldGVvcicpIHtcblx0XHRcdHNlcnZpY2VOYW1lID0gJ21ldGVvci1kZXZlbG9wZXInO1xuXHRcdH1cblx0XHRpZiAoL0FjY291bnRzX09BdXRoX0N1c3RvbS0vLnRlc3Qoc2VydmljZS5rZXkpKSB7XG5cdFx0XHRzZXJ2aWNlTmFtZSA9IHNlcnZpY2Uua2V5LnJlcGxhY2UoJ0FjY291bnRzX09BdXRoX0N1c3RvbS0nLCAnJyk7XG5cdFx0fVxuXHRcdGlmIChzZXJ2aWNlLnZhbHVlID09PSB0cnVlKSB7XG5cdFx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0XHRjbGllbnRJZDogUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH1faWRgKSxcblx0XHRcdFx0c2VjcmV0OiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfV9zZWNyZXRgKVxuXHRcdFx0fTtcblx0XHRcdGlmICgvQWNjb3VudHNfT0F1dGhfQ3VzdG9tLS8udGVzdChzZXJ2aWNlLmtleSkpIHtcblx0XHRcdFx0ZGF0YS5jdXN0b20gPSB0cnVlO1xuXHRcdFx0XHRkYXRhLmNsaWVudElkID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0taWRgKTtcblx0XHRcdFx0ZGF0YS5zZWNyZXQgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS1zZWNyZXRgKTtcblx0XHRcdFx0ZGF0YS5zZXJ2ZXJVUkwgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS11cmxgKTtcblx0XHRcdFx0ZGF0YS50b2tlblBhdGggPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS10b2tlbl9wYXRoYCk7XG5cdFx0XHRcdGRhdGEuaWRlbnRpdHlQYXRoID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0taWRlbnRpdHlfcGF0aGApO1xuXHRcdFx0XHRkYXRhLmF1dGhvcml6ZVBhdGggPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS1hdXRob3JpemVfcGF0aGApO1xuXHRcdFx0XHRkYXRhLnNjb3BlID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tc2NvcGVgKTtcblx0XHRcdFx0ZGF0YS5idXR0b25MYWJlbFRleHQgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS1idXR0b25fbGFiZWxfdGV4dGApO1xuXHRcdFx0XHRkYXRhLmJ1dHRvbkxhYmVsQ29sb3IgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS1idXR0b25fbGFiZWxfY29sb3JgKTtcblx0XHRcdFx0ZGF0YS5sb2dpblN0eWxlID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tbG9naW5fc3R5bGVgKTtcblx0XHRcdFx0ZGF0YS5idXR0b25Db2xvciA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KGAkeyBzZXJ2aWNlLmtleSB9LWJ1dHRvbl9jb2xvcmApO1xuXHRcdFx0XHRkYXRhLnRva2VuU2VudFZpYSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KGAkeyBzZXJ2aWNlLmtleSB9LXRva2VuX3NlbnRfdmlhYCk7XG5cdFx0XHRcdGRhdGEuaWRlbnRpdHlUb2tlblNlbnRWaWEgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS1pZGVudGl0eV90b2tlbl9zZW50X3ZpYWApO1xuXHRcdFx0XHRkYXRhLnVzZXJuYW1lRmllbGQgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS11c2VybmFtZV9maWVsZGApO1xuXHRcdFx0XHRkYXRhLm1lcmdlVXNlcnMgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS1tZXJnZV91c2Vyc2ApO1xuXHRcdFx0XHRuZXcgQ3VzdG9tT0F1dGgoc2VydmljZU5hbWUudG9Mb3dlckNhc2UoKSwge1xuXHRcdFx0XHRcdHNlcnZlclVSTDogZGF0YS5zZXJ2ZXJVUkwsXG5cdFx0XHRcdFx0dG9rZW5QYXRoOiBkYXRhLnRva2VuUGF0aCxcblx0XHRcdFx0XHRpZGVudGl0eVBhdGg6IGRhdGEuaWRlbnRpdHlQYXRoLFxuXHRcdFx0XHRcdGF1dGhvcml6ZVBhdGg6IGRhdGEuYXV0aG9yaXplUGF0aCxcblx0XHRcdFx0XHRzY29wZTogZGF0YS5zY29wZSxcblx0XHRcdFx0XHRsb2dpblN0eWxlOiBkYXRhLmxvZ2luU3R5bGUsXG5cdFx0XHRcdFx0dG9rZW5TZW50VmlhOiBkYXRhLnRva2VuU2VudFZpYSxcblx0XHRcdFx0XHRpZGVudGl0eVRva2VuU2VudFZpYTogZGF0YS5pZGVudGl0eVRva2VuU2VudFZpYSxcblx0XHRcdFx0XHR1c2VybmFtZUZpZWxkOiBkYXRhLnVzZXJuYW1lRmllbGQsXG5cdFx0XHRcdFx0bWVyZ2VVc2VyczogZGF0YS5tZXJnZVVzZXJzXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNlcnZpY2VOYW1lID09PSAnRmFjZWJvb2snKSB7XG5cdFx0XHRcdGRhdGEuYXBwSWQgPSBkYXRhLmNsaWVudElkO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5jbGllbnRJZDtcblx0XHRcdH1cblx0XHRcdGlmIChzZXJ2aWNlTmFtZSA9PT0gJ1R3aXR0ZXInKSB7XG5cdFx0XHRcdGRhdGEuY29uc3VtZXJLZXkgPSBkYXRhLmNsaWVudElkO1xuXHRcdFx0XHRkZWxldGUgZGF0YS5jbGllbnRJZDtcblx0XHRcdH1cblx0XHRcdFNlcnZpY2VDb25maWd1cmF0aW9uLmNvbmZpZ3VyYXRpb25zLnVwc2VydCh7XG5cdFx0XHRcdHNlcnZpY2U6IHNlcnZpY2VOYW1lLnRvTG93ZXJDYXNlKClcblx0XHRcdH0sIHtcblx0XHRcdFx0JHNldDogZGF0YVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFNlcnZpY2VDb25maWd1cmF0aW9uLmNvbmZpZ3VyYXRpb25zLnJlbW92ZSh7XG5cdFx0XHRcdHNlcnZpY2U6IHNlcnZpY2VOYW1lLnRvTG93ZXJDYXNlKClcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG59XG5cbmNvbnN0IE9BdXRoU2VydmljZXNVcGRhdGUgPSBfLmRlYm91bmNlKE1ldGVvci5iaW5kRW52aXJvbm1lbnQoX09BdXRoU2VydmljZXNVcGRhdGUpLCAyMDAwKTtcblxuZnVuY3Rpb24gT0F1dGhTZXJ2aWNlc1JlbW92ZShfaWQpIHtcblx0Y29uc3Qgc2VydmljZU5hbWUgPSBfaWQucmVwbGFjZSgnQWNjb3VudHNfT0F1dGhfQ3VzdG9tLScsICcnKTtcblx0cmV0dXJuIFNlcnZpY2VDb25maWd1cmF0aW9uLmNvbmZpZ3VyYXRpb25zLnJlbW92ZSh7XG5cdFx0c2VydmljZTogc2VydmljZU5hbWUudG9Mb3dlckNhc2UoKVxuXHR9KTtcbn1cblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoL15BY2NvdW50c19PQXV0aF8uKy8sIGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gT0F1dGhTZXJ2aWNlc1VwZGF0ZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgvXkFjY291bnRzX09BdXRoX0N1c3RvbS1bYS16MC05X10rLywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRpZiAoIXZhbHVlKSB7XG5cdFx0cmV0dXJuIE9BdXRoU2VydmljZXNSZW1vdmUoa2V5KTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcblx0fVxufSk7XG4iLCIvLyBJbnNlcnQgc2VydmVyIHVuaXF1ZSBpZCBpZiBpdCBkb2Vzbid0IGV4aXN0XG5Sb2NrZXRDaGF0LnNldHRpbmdzLmFkZCgndW5pcXVlSUQnLCBwcm9jZXNzLmVudi5ERVBMT1lNRU5UX0lEIHx8IFJhbmRvbS5pZCgpLCB7XG5cdCdwdWJsaWMnOiB0cnVlLFxuXHRoaWRkZW46IHRydWVcbn0pO1xuXG4vLyBXaGVuIHlvdSBkZWZpbmUgYSBzZXR0aW5nIGFuZCB3YW50IHRvIGFkZCBhIGRlc2NyaXB0aW9uLCB5b3UgZG9uJ3QgbmVlZCB0byBhdXRvbWF0aWNhbGx5IGRlZmluZSB0aGUgaTE4bkRlc2NyaXB0aW9uXG4vLyBpZiB5b3UgYWRkIGEgbm9kZSB0byB0aGUgaTE4bi5qc29uIHdpdGggdGhlIHNhbWUgc2V0dGluZyBuYW1lIGJ1dCB3aXRoIGBfRGVzY3JpcHRpb25gIGl0IHdpbGwgYXV0b21hdGljYWxseSB3b3JrLlxuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmFkZEdyb3VwKCdBY2NvdW50cycsIGZ1bmN0aW9uKCkge1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfQWxsb3dBbm9ueW1vdXNSZWFkJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfQWxsb3dBbm9ueW1vdXNXcml0ZScsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0X2lkOiAnQWNjb3VudHNfQWxsb3dBbm9ueW1vdXNSZWFkJyxcblx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0fVxuXHR9KTtcblx0dGhpcy5hZGQoJ0FjY291bnRzX0FsbG93RGVsZXRlT3duQWNjb3VudCcsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRfaWQ6ICdBY2NvdW50c19BbGxvd1VzZXJQcm9maWxlQ2hhbmdlJyxcblx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0fVxuXHR9KTtcblx0dGhpcy5hZGQoJ0FjY291bnRzX0FsbG93VXNlclByb2ZpbGVDaGFuZ2UnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfQWxsb3dVc2VyQXZhdGFyQ2hhbmdlJywgdHJ1ZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ0FjY291bnRzX0FsbG93UmVhbE5hbWVDaGFuZ2UnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfQWxsb3dVc2VybmFtZUNoYW5nZScsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdBY2NvdW50c19BbGxvd0VtYWlsQ2hhbmdlJywgdHJ1ZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ0FjY291bnRzX0FsbG93UGFzc3dvcmRDaGFuZ2UnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfQ3VzdG9tRmllbGRzVG9TaG93SW5Vc2VySW5mbycsICcnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0cHVibGljOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfTG9naW5FeHBpcmF0aW9uJywgOTAsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ0FjY291bnRzX1Nob3dGb3JtTG9naW4nLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfRW1haWxPclVzZXJuYW1lUGxhY2Vob2xkZXInLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdGkxOG5MYWJlbDogJ1BsYWNlaG9sZGVyX2Zvcl9lbWFpbF9vcl91c2VybmFtZV9sb2dpbl9maWVsZCdcblx0fSk7XG5cdHRoaXMuYWRkKCdBY2NvdW50c19QYXNzd29yZFBsYWNlaG9sZGVyJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHQncHVibGljJzogdHJ1ZSxcblx0XHRpMThuTGFiZWw6ICdQbGFjZWhvbGRlcl9mb3JfcGFzc3dvcmRfbG9naW5fZmllbGQnXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfRm9yZ2V0VXNlclNlc3Npb25PbldpbmRvd0Nsb3NlJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdBY2NvdW50c19TZWFyY2hGaWVsZHMnLCAndXNlcm5hbWUsIG5hbWUsIGVtYWlscy5hZGRyZXNzJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdHB1YmxpYzogdHJ1ZVxuXHR9KTtcblxuXHR0aGlzLnNlY3Rpb24oJ1JlZ2lzdHJhdGlvbicsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0VXNlcm5hbWVQcmVmaXhTdWdnZXN0aW9uJywgJ3VzZXInLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19SZXF1aXJlTmFtZUZvclNpZ25VcCcsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX1JlcXVpcmVQYXNzd29yZENvbmZpcm1hdGlvbicsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0VtYWlsVmVyaWZpY2F0aW9uJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnU01UUF9Ib3N0Jyxcblx0XHRcdFx0dmFsdWU6IHtcblx0XHRcdFx0XHQkZXhpc3RzOiAxLFxuXHRcdFx0XHRcdCRuZTogJydcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19NYW51YWxseUFwcHJvdmVOZXdVc2VycycsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbidcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfQWxsb3dlZERvbWFpbnNMaXN0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfQmxvY2tlZERvbWFpbnNMaXN0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0Jsb2NrZWRVc2VybmFtZUxpc3QnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZydcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfVXNlRGVmYXVsdEJsb2NrZWREb21haW5zTGlzdCcsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19Vc2VETlNEb21haW5DaGVjaycsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbidcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUmVnaXN0cmF0aW9uRm9ybScsICdQdWJsaWMnLCB7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdQdWJsaWMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0FjY291bnRzX1JlZ2lzdHJhdGlvbkZvcm1fUHVibGljJ1xuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnRGlzYWJsZWQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0FjY291bnRzX1JlZ2lzdHJhdGlvbkZvcm1fRGlzYWJsZWQnXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICdTZWNyZXQgVVJMJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdBY2NvdW50c19SZWdpc3RyYXRpb25Gb3JtX1NlY3JldF9VUkwnXG5cdFx0XHRcdH1cblx0XHRcdF1cblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUmVnaXN0cmF0aW9uRm9ybV9TZWNyZXRVUkwnLCBSYW5kb20uaWQoKSwge1xuXHRcdFx0dHlwZTogJ3N0cmluZydcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUmVnaXN0cmF0aW9uRm9ybV9MaW5rUmVwbGFjZW1lbnRUZXh0JywgJ05ldyB1c2VyIHJlZ2lzdHJhdGlvbiBpcyBjdXJyZW50bHkgZGlzYWJsZWQnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX1JlZ2lzdHJhdGlvbl9BdXRoZW50aWNhdGlvblNlcnZpY2VzX0VuYWJsZWQnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19SZWdpc3RyYXRpb25fQXV0aGVudGljYXRpb25TZXJ2aWNlc19EZWZhdWx0X1JvbGVzJywgJ3VzZXInLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0FjY291bnRzX1JlZ2lzdHJhdGlvbl9BdXRoZW50aWNhdGlvblNlcnZpY2VzX0VuYWJsZWQnLFxuXHRcdFx0XHR2YWx1ZTogdHJ1ZVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19QYXNzd29yZFJlc2V0JywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfQ3VzdG9tRmllbGRzJywgJycsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnQ3VzdG9tX0ZpZWxkcydcblx0XHR9KTtcblx0fSk7XG5cblx0dGhpcy5zZWN0aW9uKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXMnLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2VuYWJsZUF1dG9Bd2F5JywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnRW5hYmxlX0F1dG9fQXdheSdcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2lkbGVUaW1lb3V0TGltaXQnLCAzMDAwMDAsIHtcblx0XHRcdHR5cGU6ICdpbnQnLFxuXHRcdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdJZGxlX1RpbWVfTGltaXQnXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19kZXNrdG9wTm90aWZpY2F0aW9uRHVyYXRpb24nLCAwLCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnTm90aWZpY2F0aW9uX0R1cmF0aW9uJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfYXVkaW9Ob3RpZmljYXRpb25zJywgJ21lbnRpb25zJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2FsbCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQWxsX21lc3NhZ2VzJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbWVudGlvbnMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ01lbnRpb25zJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbm90aGluZycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnTm90aGluZydcblx0XHRcdFx0fVxuXHRcdFx0XSxcblx0XHRcdHB1YmxpYzogdHJ1ZVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfZGVza3RvcE5vdGlmaWNhdGlvbnMnLCAnbWVudGlvbnMnLCB7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdHZhbHVlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYWxsJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdBbGxfbWVzc2FnZXMnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtZW50aW9ucycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnTWVudGlvbnMnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdub3RoaW5nJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdOb3RoaW5nJ1xuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX21vYmlsZU5vdGlmaWNhdGlvbnMnLCAnbWVudGlvbnMnLCB7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdHZhbHVlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5IDogJ2FsbCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsIDogJ0FsbF9tZXNzYWdlcydcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleSA6ICdtZW50aW9ucycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsIDogJ01lbnRpb25zJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5IDogJ25vdGhpbmcnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbCA6ICdOb3RoaW5nJ1xuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX3VucmVhZEFsZXJ0JywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdVbnJlYWRfVHJheV9JY29uX0FsZXJ0J1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfdXNlRW1vamlzJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdVc2VfRW1vamlzJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfY29udmVydEFzY2lpRW1vamknLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0NvbnZlcnRfQXNjaWlfRW1vamlzJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfYXV0b0ltYWdlTG9hZCcsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnQXV0b19Mb2FkX0ltYWdlcydcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX3NhdmVNb2JpbGVCYW5kd2lkdGgnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ1NhdmVfTW9iaWxlX0JhbmR3aWR0aCdcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2NvbGxhcHNlTWVkaWFCeURlZmF1bHQnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdDb2xsYXBzZV9FbWJlZGRlZF9NZWRpYV9CeV9EZWZhdWx0J1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfaGlkZVVzZXJuYW1lcycsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0hpZGVfdXNlcm5hbWVzJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfaGlkZVJvbGVzJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnSGlkZV9yb2xlcydcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2hpZGVGbGV4VGFiJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnSGlkZV9mbGV4dGFiJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfaGlkZUF2YXRhcnMnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdIaWRlX0F2YXRhcnMnXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19yb29tc0xpc3RFeGhpYml0aW9uTW9kZScsICdjYXRlZ29yeScsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd1bnJlYWQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ1VucmVhZF9Sb29tc19Nb2RlJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYWN0aXZpdHknLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ1NvcnRfYnlfYWN0aXZpdHknXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjYXRlZ29yeScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnU3BsaXRfYnlfY2F0ZWdvcmllcydcblx0XHRcdFx0fVxuXHRcdFx0XSxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnU2lkZWJhcl9saXN0X21vZGUnXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19tZXJnZUNoYW5uZWxzJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnVUlfTWVyZ2VfQ2hhbm5lbHNfR3JvdXBzJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfc2VuZE9uRW50ZXInLCAnbm9ybWFsJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25vcm1hbCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnRW50ZXJfTm9ybWFsJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYWx0ZXJuYXRpdmUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0VudGVyX0FsdGVybmF0aXZlJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZGVza3RvcCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnT25seV9Pbl9EZXNrdG9wJ1xuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdFbnRlcl9CZWhhdmlvdXInXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc192aWV3TW9kZScsIDAsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6IDAsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnTm9ybWFsJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAxLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvenknXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6IDIsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ29tcGFjdCdcblx0XHRcdFx0fVxuXHRcdFx0XSxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnVmlld19tb2RlJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfZW1haWxOb3RpZmljYXRpb25Nb2RlJywgJ2FsbCcsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdkaXNhYmxlZCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnRW1haWxfTm90aWZpY2F0aW9uX01vZGVfRGlzYWJsZWQnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhbGwnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0VtYWlsX05vdGlmaWNhdGlvbl9Nb2RlX0FsbCdcblx0XHRcdFx0fVxuXHRcdFx0XSxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnRW1haWxfTm90aWZpY2F0aW9uX01vZGUnXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19yb29tQ291bnRlclNpZGViYXInLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdTaG93X3Jvb21fY291bnRlcl9vbl9zaWRlYmFyJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfbmV3Um9vbU5vdGlmaWNhdGlvbicsICdkb29yJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25vbmUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ05vbmUnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdkb29yJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdEZWZhdWx0J1xuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdOZXdfUm9vbV9Ob3RpZmljYXRpb24nXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19uZXdNZXNzYWdlTm90aWZpY2F0aW9uJywgJ2NoaW1lJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25vbmUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ05vbmUnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjaGltZScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnRGVmYXVsdCdcblx0XHRcdFx0fVxuXHRcdFx0XSxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnTmV3X01lc3NhZ2VfTm90aWZpY2F0aW9uJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfbm90aWZpY2F0aW9uc1NvdW5kVm9sdW1lJywgMTAwLCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnTm90aWZpY2F0aW9uc19Tb3VuZF9Wb2x1bWUnXG5cdFx0fSk7XG5cdH0pO1xuXG5cdHRoaXMuc2VjdGlvbignQXZhdGFyJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0F2YXRhclJlc2l6ZScsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19BdmF0YXJTaXplJywgMjAwLCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0FjY291bnRzX0F2YXRhclJlc2l6ZScsXG5cdFx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0FjY291bnRzX1NldERlZmF1bHRBdmF0YXInLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbidcblx0XHR9KTtcblx0fSk7XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGRHcm91cCgnT0F1dGgnLCBmdW5jdGlvbigpIHtcblx0dGhpcy5zZWN0aW9uKCdGYWNlYm9vaycsIGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IGVuYWJsZVF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiAnQWNjb3VudHNfT0F1dGhfRmFjZWJvb2snLFxuXHRcdFx0dmFsdWU6IHRydWVcblx0XHR9O1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9GYWNlYm9vaycsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9GYWNlYm9va19pZCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5XG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0ZhY2Vib29rX3NlY3JldCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9GYWNlYm9va19jYWxsYmFja191cmwnLCAnX29hdXRoL2ZhY2Vib29rJywge1xuXHRcdFx0dHlwZTogJ3JlbGF0aXZlVXJsJyxcblx0XHRcdHJlYWRvbmx5OiB0cnVlLFxuXHRcdFx0Zm9yY2U6IHRydWUsXG5cdFx0XHRlbmFibGVRdWVyeVxuXHRcdH0pO1xuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdHb29nbGUnLCBmdW5jdGlvbigpIHtcblx0XHRjb25zdCBlbmFibGVRdWVyeSA9IHtcblx0XHRcdF9pZDogJ0FjY291bnRzX09BdXRoX0dvb2dsZScsXG5cdFx0XHR2YWx1ZTogdHJ1ZVxuXHRcdH07XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0dvb2dsZScsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9Hb29nbGVfaWQnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbmFibGVRdWVyeVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9Hb29nbGVfc2VjcmV0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW5hYmxlUXVlcnlcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0dvb2dsZV9jYWxsYmFja191cmwnLCAnX29hdXRoL2dvb2dsZScsIHtcblx0XHRcdHR5cGU6ICdyZWxhdGl2ZVVybCcsXG5cdFx0XHRyZWFkb25seTogdHJ1ZSxcblx0XHRcdGZvcmNlOiB0cnVlLFxuXHRcdFx0ZW5hYmxlUXVlcnlcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignR2l0SHViJywgZnVuY3Rpb24oKSB7XG5cdFx0Y29uc3QgZW5hYmxlUXVlcnkgPSB7XG5cdFx0XHRfaWQ6ICdBY2NvdW50c19PQXV0aF9HaXRodWInLFxuXHRcdFx0dmFsdWU6IHRydWVcblx0XHR9O1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9HaXRodWInLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfR2l0aHViX2lkJywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW5hYmxlUXVlcnlcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfR2l0aHViX3NlY3JldCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9HaXRodWJfY2FsbGJhY2tfdXJsJywgJ19vYXV0aC9naXRodWInLCB7XG5cdFx0XHR0eXBlOiAncmVsYXRpdmVVcmwnLFxuXHRcdFx0cmVhZG9ubHk6IHRydWUsXG5cdFx0XHRmb3JjZTogdHJ1ZSxcblx0XHRcdGVuYWJsZVF1ZXJ5XG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ0xpbmtlZGluJywgZnVuY3Rpb24oKSB7XG5cdFx0Y29uc3QgZW5hYmxlUXVlcnkgPSB7XG5cdFx0XHRfaWQ6ICdBY2NvdW50c19PQXV0aF9MaW5rZWRpbicsXG5cdFx0XHR2YWx1ZTogdHJ1ZVxuXHRcdH07XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0xpbmtlZGluJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0xpbmtlZGluX2lkJywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW5hYmxlUXVlcnlcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfTGlua2VkaW5fc2VjcmV0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW5hYmxlUXVlcnlcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0xpbmtlZGluX2NhbGxiYWNrX3VybCcsICdfb2F1dGgvbGlua2VkaW4nLCB7XG5cdFx0XHR0eXBlOiAncmVsYXRpdmVVcmwnLFxuXHRcdFx0cmVhZG9ubHk6IHRydWUsXG5cdFx0XHRmb3JjZTogdHJ1ZSxcblx0XHRcdGVuYWJsZVF1ZXJ5XG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ01ldGVvcicsIGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IGVuYWJsZVF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiAnQWNjb3VudHNfT0F1dGhfTWV0ZW9yJyxcblx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0fTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfTWV0ZW9yJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX01ldGVvcl9pZCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5XG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX01ldGVvcl9zZWNyZXQnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbmFibGVRdWVyeVxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfTWV0ZW9yX2NhbGxiYWNrX3VybCcsICdfb2F1dGgvbWV0ZW9yJywge1xuXHRcdFx0dHlwZTogJ3JlbGF0aXZlVXJsJyxcblx0XHRcdHJlYWRvbmx5OiB0cnVlLFxuXHRcdFx0Zm9yY2U6IHRydWUsXG5cdFx0XHRlbmFibGVRdWVyeVxuXHRcdH0pO1xuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdUd2l0dGVyJywgZnVuY3Rpb24oKSB7XG5cdFx0Y29uc3QgZW5hYmxlUXVlcnkgPSB7XG5cdFx0XHRfaWQ6ICdBY2NvdW50c19PQXV0aF9Ud2l0dGVyJyxcblx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0fTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfVHdpdHRlcicsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9Ud2l0dGVyX2lkJywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW5hYmxlUXVlcnlcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfVHdpdHRlcl9zZWNyZXQnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbmFibGVRdWVyeVxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfVHdpdHRlcl9jYWxsYmFja191cmwnLCAnX29hdXRoL3R3aXR0ZXInLCB7XG5cdFx0XHR0eXBlOiAncmVsYXRpdmVVcmwnLFxuXHRcdFx0cmVhZG9ubHk6IHRydWUsXG5cdFx0XHRmb3JjZTogdHJ1ZSxcblx0XHRcdGVuYWJsZVF1ZXJ5XG5cdFx0fSk7XG5cdH0pO1xuXHRyZXR1cm4gdGhpcy5zZWN0aW9uKCdQcm94eScsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9Qcm94eV9ob3N0JywgJ2h0dHBzOi8vb2F1dGgtcHJveHkucm9ja2V0LmNoYXQnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9Qcm94eV9zZXJ2aWNlcycsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdH0pO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3MuYWRkR3JvdXAoJ0dlbmVyYWwnLCBmdW5jdGlvbigpIHtcblx0dGhpcy5hZGQoJ1NpdGVfVXJsJywgdHlwZW9mIF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18gIT09ICd1bmRlZmluZWQnICYmIF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18gIT09IG51bGwgPyBfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fLlJPT1RfVVJMIDogbnVsbCwge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdGkxOG5EZXNjcmlwdGlvbjogJ1NpdGVfVXJsX0Rlc2NyaXB0aW9uJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ1NpdGVfTmFtZScsICdSb2NrZXQuQ2hhdCcsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ0xhbmd1YWdlJywgJycsIHtcblx0XHR0eXBlOiAnbGFuZ3VhZ2UnLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWxsb3dfSW52YWxpZF9TZWxmU2lnbmVkX0NlcnRzJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbidcblx0fSk7XG5cdHRoaXMuYWRkKCdGYXZvcml0ZV9Sb29tcycsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdGaXJzdF9DaGFubmVsX0FmdGVyX0xvZ2luJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ1VucmVhZF9Db3VudCcsICd1c2VyX2FuZF9ncm91cF9tZW50aW9uc19vbmx5Jywge1xuXHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdHZhbHVlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRrZXk6ICdhbGxfbWVzc2FnZXMnLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdBbGxfbWVzc2FnZXMnXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGtleTogJ3VzZXJfbWVudGlvbnNfb25seScsXG5cdFx0XHRcdGkxOG5MYWJlbDogJ1VzZXJfbWVudGlvbnNfb25seSdcblx0XHRcdH0sIHtcblx0XHRcdFx0a2V5OiAnZ3JvdXBfbWVudGlvbnNfb25seScsXG5cdFx0XHRcdGkxOG5MYWJlbDogJ0dyb3VwX21lbnRpb25zX29ubHknXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGtleTogJ3VzZXJfYW5kX2dyb3VwX21lbnRpb25zX29ubHknLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdVc2VyX2FuZF9ncm91cF9tZW50aW9uc19vbmx5J1xuXHRcdFx0fVxuXHRcdF0sXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdVbnJlYWRfQ291bnRfRE0nLCAnYWxsX21lc3NhZ2VzJywge1xuXHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdHZhbHVlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRrZXk6ICdhbGxfbWVzc2FnZXMnLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdBbGxfbWVzc2FnZXMnXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGtleTogJ21lbnRpb25zX29ubHknLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdNZW50aW9uc19vbmx5J1xuXHRcdFx0fVxuXHRcdF0sXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdDRE5fUFJFRklYJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ0ZvcmNlX1NTTCcsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnR29vZ2xlVGFnTWFuYWdlcl9pZCcsICcnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdCdWdzbmFnX2FwaV9rZXknLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdCdwdWJsaWMnOiBmYWxzZVxuXHR9KTtcblx0dGhpcy5hZGQoJ0ZvcmNlX0Rpc2FibGVfT3BMb2dfRm9yX0NhY2hlJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IGZhbHNlXG5cdH0pO1xuXHR0aGlzLmFkZCgnUmVzdGFydCcsICdyZXN0YXJ0X3NlcnZlcicsIHtcblx0XHR0eXBlOiAnYWN0aW9uJyxcblx0XHRhY3Rpb25UZXh0OiAnUmVzdGFydF90aGVfc2VydmVyJ1xuXHR9KTtcblx0dGhpcy5hZGQoJ1N0b3JlX0xhc3RfTWVzc2FnZScsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRpMThuRGVzY3JpcHRpb246ICdTdG9yZV9MYXN0X01lc3NhZ2VfU2VudF9wZXJfUm9vbSdcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignVVRGOCcsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdVVEY4X05hbWVzX1ZhbGlkYXRpb24nLCAnWzAtOWEtekEtWi1fLl0rJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHQncHVibGljJzogdHJ1ZSxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ1VURjhfTmFtZXNfVmFsaWRhdGlvbl9EZXNjcmlwdGlvbidcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ1VURjhfTmFtZXNfU2x1Z2lmeScsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ1JlcG9ydGluZycsIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmFkZCgnU3RhdGlzdGljc19yZXBvcnRpbmcnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbidcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignTm90aWZpY2F0aW9ucycsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdOb3RpZmljYXRpb25zX01heF9Sb29tX01lbWJlcnMnLCAxMDAsIHtcblx0XHRcdHR5cGU6ICdpbnQnLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkRlc2NyaXB0aW9uOiAnTm90aWZpY2F0aW9uc19NYXhfUm9vbV9NZW1iZXJzX0Rlc2NyaXB0aW9uJ1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGQoJ05vdGlmaWNhdGlvbnNfQWx3YXlzX05vdGlmeV9Nb2JpbGUnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkRlc2NyaXB0aW9uOiAnTm90aWZpY2F0aW9uc19BbHdheXNfTm90aWZ5X01vYmlsZV9EZXNjcmlwdGlvbidcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignUkVTVCBBUEknLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0FQSV9Vc2VyX0xpbWl0JywgNTAwLCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkRlc2NyaXB0aW9uOiAnQVBJX1VzZXJfTGltaXQnXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ0lmcmFtZV9JbnRlZ3JhdGlvbicsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdJZnJhbWVfSW50ZWdyYXRpb25fc2VuZF9lbmFibGUnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnSWZyYW1lX0ludGVncmF0aW9uX3NlbmRfdGFyZ2V0X29yaWdpbicsICcqJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHQncHVibGljJzogdHJ1ZSxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0lmcmFtZV9JbnRlZ3JhdGlvbl9zZW5kX2VuYWJsZScsXG5cdFx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0lmcmFtZV9JbnRlZ3JhdGlvbl9yZWNlaXZlX2VuYWJsZScsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLmFkZCgnSWZyYW1lX0ludGVncmF0aW9uX3JlY2VpdmVfb3JpZ2luJywgJyonLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnSWZyYW1lX0ludGVncmF0aW9uX3JlY2VpdmVfZW5hYmxlJyxcblx0XHRcdFx0dmFsdWU6IHRydWVcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignVHJhbnNsYXRpb25zJywgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdDdXN0b21fVHJhbnNsYXRpb25zJywgJycsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdH0pO1xuXHRyZXR1cm4gdGhpcy5zZWN0aW9uKCdTdHJlYW1fQ2FzdCcsIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmFkZCgnU3RyZWFtX0Nhc3RfQWRkcmVzcycsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJ1xuXHRcdH0pO1xuXHR9KTtcbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmFkZEdyb3VwKCdFbWFpbCcsIGZ1bmN0aW9uKCkge1xuXHR0aGlzLnNlY3Rpb24oJ1N1YmplY3QnLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnT2ZmbGluZV9ETV9FbWFpbCcsICdbW1NpdGVfTmFtZV1dIFlvdSBoYXZlIGJlZW4gZGlyZWN0IG1lc3NhZ2VkIGJ5IFtVc2VyXScsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0Jyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ09mZmxpbmVfRE1fRW1haWwnLFxuXHRcdFx0aTE4bkRlc2NyaXB0aW9uOiAnT2ZmbGluZV9FbWFpbF9TdWJqZWN0X0Rlc2NyaXB0aW9uJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdPZmZsaW5lX01lbnRpb25fRW1haWwnLCAnW1tTaXRlX05hbWVdXSBZb3UgaGF2ZSBiZWVuIG1lbnRpb25lZCBieSBbVXNlcl0gaW4gI1tSb29tXScsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0Jyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ09mZmxpbmVfTWVudGlvbl9FbWFpbCcsXG5cdFx0XHRpMThuRGVzY3JpcHRpb246ICdPZmZsaW5lX0VtYWlsX1N1YmplY3RfRGVzY3JpcHRpb24nXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdPZmZsaW5lX01lbnRpb25fQWxsX0VtYWlsJywgJ1tVc2VyXSBoYXMgcG9zdGVkIGEgbWVzc2FnZSBpbiAjW1Jvb21dJywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0Y29kZTogJ3RleHQnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnT2ZmbGluZV9NZW50aW9uX0FsbF9FbWFpbCcsXG5cdFx0XHRpMThuRGVzY3JpcHRpb246ICdPZmZsaW5lX0VtYWlsX1N1YmplY3RfRGVzY3JpcHRpb24nXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ0hlYWRlcl9hbmRfRm9vdGVyJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0VtYWlsX0hlYWRlcicsICc8aHRtbD48dGFibGUgYm9yZGVyPVwiMFwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiIHdpZHRoPVwiMTAwJVwiIGJnY29sb3I9XCIjZjNmM2YzXCIgc3R5bGU9XCJjb2xvcjojNGE0YTRhO2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyMHB4O2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtib3JkZXItc3BhY2luZzowO21hcmdpbjowIGF1dG9cIj48dHI+PHRkIHN0eWxlPVwicGFkZGluZzoxZW1cIj48dGFibGUgYm9yZGVyPVwiMFwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiIGFsaWduPVwiY2VudGVyXCIgd2lkdGg9XCIxMDAlXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO21hcmdpbjowIGF1dG87bWF4LXdpZHRoOjgwMHB4XCI+PHRyPjx0ZCBiZ2NvbG9yPVwiI2ZmZmZmZlwiIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjojZmZmZmZmOyBib3JkZXI6IDFweCBzb2xpZCAjREREOyBmb250LXNpemU6IDEwcHQ7IGZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjtcIj48dGFibGUgd2lkdGg9XCIxMDAlXCIgYm9yZGVyPVwiMFwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiPjx0cj48dGQgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiAjMDQ0MzZhO1wiPjxoMSBzdHlsZT1cImZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsQXJpYWwsc2Fucy1zZXJpZjsgcGFkZGluZzogMCAxZW07IG1hcmdpbjogMDsgbGluZS1oZWlnaHQ6IDcwcHg7IGNvbG9yOiAjRkZGO1wiPltTaXRlX05hbWVdPC9oMT48L3RkPjwvdHI+PHRyPjx0ZCBzdHlsZT1cInBhZGRpbmc6IDFlbTsgZm9udC1zaXplOiAxMHB0OyBmb250LWZhbWlseTogSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7XCI+Jywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0Y29kZTogJ3RleHQvaHRtbCcsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdIZWFkZXInXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0VtYWlsX0Zvb3RlcicsICc8L3RkPjwvdHI+PC90YWJsZT48L3RkPjwvdHI+PHRyPjx0ZCBib3JkZXI9XCIwXCIgY2VsbHNwYWNpbmc9XCIwXCIgY2VsbHBhZGRpbmc9XCIwXCIgd2lkdGg9XCIxMDAlXCIgc3R5bGU9XCJmb250LWZhbWlseTogSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWY7IG1heC13aWR0aDogODAwcHg7IG1hcmdpbjogMCBhdXRvOyBwYWRkaW5nOiAxLjVlbTsgdGV4dC1hbGlnbjogY2VudGVyOyBmb250LXNpemU6IDhwdDsgY29sb3I6ICM5OTk7XCI+UG93ZXJlZCBieSA8YSBocmVmPVwiaHR0cHM6Ly9yb2NrZXQuY2hhdFwiIHRhcmdldD1cIl9ibGFua1wiPlJvY2tldC5DaGF0PC9hPjwvdGQ+PC90cj48L3RhYmxlPjwvdGQ+PC90cj48L3RhYmxlPjwvaHRtbD4nLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0Zvb3Rlcidcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0VtYWlsX0Zvb3Rlcl9EaXJlY3RfUmVwbHknLCAnPC90ZD48L3RyPjwvdGFibGU+PC90ZD48L3RyPjx0cj48dGQgYm9yZGVyPVwiMFwiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiIHdpZHRoPVwiMTAwJVwiIHN0eWxlPVwiZm9udC1mYW1pbHk6IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmOyBtYXgtd2lkdGg6IDgwMHB4OyBtYXJnaW46IDAgYXV0bzsgcGFkZGluZzogMS41ZW07IHRleHQtYWxpZ246IGNlbnRlcjsgZm9udC1zaXplOiA4cHQ7IGNvbG9yOiAjOTk5O1wiPllvdSBjYW4gZGlyZWN0bHkgcmVwbHkgdG8gdGhpcyBlbWFpbC48YnI+RG8gbm90IG1vZGlmeSBwcmV2aW91cyBlbWFpbHMgaW4gdGhlIHRocmVhZC48YnI+UG93ZXJlZCBieSA8YSBocmVmPVwiaHR0cHM6Ly9yb2NrZXQuY2hhdFwiIHRhcmdldD1cIl9ibGFua1wiPlJvY2tldC5DaGF0PC9hPjwvdGQ+PC90cj48L3RhYmxlPjwvdGQ+PC90cj48L3RhYmxlPjwvaHRtbD4nLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0Zvb3Rlcl9EaXJlY3RfUmVwbHknXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ0RpcmVjdF9SZXBseScsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdEaXJlY3RfUmVwbHlfRW5hYmxlJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0RpcmVjdF9SZXBseV9FbmFibGUnXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0RpcmVjdF9SZXBseV9EZWJ1ZycsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdEaXJlY3RfUmVwbHlfRGVidWcnLFxuXHRcdFx0aTE4bkRlc2NyaXB0aW9uOiAnRGlyZWN0X1JlcGx5X0RlYnVnX0Rlc2NyaXB0aW9uJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdEaXJlY3RfUmVwbHlfUHJvdG9jb2wnLCAnSU1BUCcsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdJTUFQJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdJTUFQJ1xuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnUE9QJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdQT1AnXG5cdFx0XHRcdH1cblx0XHRcdF0sXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdQcm90b2NvbCdcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnRGlyZWN0X1JlcGx5X0hvc3QnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdIb3N0J1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdEaXJlY3RfUmVwbHlfUG9ydCcsICcxNDMnLCB7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdHZhbHVlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnMTQzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICcxNDMnXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICc5OTMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJzk5Mydcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJzExMCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnMTEwJ1xuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnOTk1Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICc5OTUnXG5cdFx0XHRcdH1cblx0XHRcdF0sXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdQb3J0J1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdEaXJlY3RfUmVwbHlfSWdub3JlVExTJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0lnbm9yZVRMUydcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnRGlyZWN0X1JlcGx5X0ZyZXF1ZW5jeScsIDUsIHtcblx0XHRcdHR5cGU6ICdpbnQnLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnRGlyZWN0X1JlcGx5X0ZyZXF1ZW5jeScsXG5cdFx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0XHRfaWQ6ICdEaXJlY3RfUmVwbHlfUHJvdG9jb2wnLFxuXHRcdFx0XHR2YWx1ZTogJ1BPUCdcblx0XHRcdH1cblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnRGlyZWN0X1JlcGx5X0RlbGV0ZScsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0RpcmVjdF9SZXBseV9EZWxldGUnLFxuXHRcdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnRGlyZWN0X1JlcGx5X1Byb3RvY29sJyxcblx0XHRcdFx0dmFsdWU6ICdJTUFQJ1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdEaXJlY3RfUmVwbHlfU2VwYXJhdG9yJywgJysnLCB7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdHZhbHVlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnIScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnISdcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJyMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJyMnXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICckJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICckJ1xuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnJScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnJSdcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJyYnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJyYnXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICdcXCcnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ1xcJydcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJyonLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJyonXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICcrJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICcrJ1xuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnLScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnLSdcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJy8nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJy8nXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICc9Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICc9J1xuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnPycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnPydcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJ14nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ14nXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICdfJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdfJ1xuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnYCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnYCdcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJ3snLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ3snXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICd8Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICd8J1xuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnfScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnfSdcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJ34nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ34nXG5cdFx0XHRcdH1cblx0XHRcdF0sXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdEaXJlY3RfUmVwbHlfU2VwYXJhdG9yJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdEaXJlY3RfUmVwbHlfVXNlcm5hbWUnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdVc2VybmFtZScsXG5cdFx0XHRwbGFjZWhvbGRlcjogJ2VtYWlsQGRvbWFpbidcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0RpcmVjdF9SZXBseV9QYXNzd29yZCcsICcnLCB7XG5cdFx0XHR0eXBlOiAncGFzc3dvcmQnLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnUGFzc3dvcmQnXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ1NNVFAnLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnU01UUF9Qcm90b2NvbCcsICdzbXRwJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3NtdHAnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ3NtdHAnXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICdzbXRwcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnc210cHMnXG5cdFx0XHRcdH1cblx0XHRcdF0sXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdQcm90b2NvbCdcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnU01UUF9Ib3N0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnSG9zdCdcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnU01UUF9Qb3J0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnUG9ydCdcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnU01UUF9JZ25vcmVUTFMnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnSWdub3JlVExTJyxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ1NNVFBfUHJvdG9jb2wnLFxuXHRcdFx0XHR2YWx1ZTogJ3NtdHAnXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1NNVFBfUG9vbCcsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ1Bvb2wnXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1NNVFBfVXNlcm5hbWUnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdVc2VybmFtZSdcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnU01UUF9QYXNzd29yZCcsICcnLCB7XG5cdFx0XHR0eXBlOiAncGFzc3dvcmQnLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnUGFzc3dvcmQnXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0Zyb21fRW1haWwnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRwbGFjZWhvbGRlcjogJ2VtYWlsQGRvbWFpbidcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ1NNVFBfVGVzdF9CdXR0b24nLCAnc2VuZFNNVFBUZXN0RW1haWwnLCB7XG5cdFx0XHR0eXBlOiAnYWN0aW9uJyxcblx0XHRcdGFjdGlvblRleHQ6ICdTZW5kX2FfdGVzdF9tYWlsX3RvX215X3VzZXInXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ0ludml0YXRpb24nLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnSW52aXRhdGlvbl9DdXN0b21pemVkJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGkxOG5MYWJlbDogJ0N1c3RvbSdcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnSW52aXRhdGlvbl9TdWJqZWN0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0aTE4bkxhYmVsOiAnU3ViamVjdCcsXG5cdFx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0XHRfaWQ6ICdJbnZpdGF0aW9uX0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGkxOG5EZWZhdWx0UXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnSW52aXRhdGlvbl9DdXN0b21pemVkJyxcblx0XHRcdFx0dmFsdWU6IGZhbHNlXG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdJbnZpdGF0aW9uX0hUTUwnLCAnJywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0Y29kZTogJ3RleHQvaHRtbCcsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdCb2R5Jyxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ0ludml0YXRpb25fSFRNTF9EZXNjcmlwdGlvbicsXG5cdFx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0XHRfaWQ6ICdJbnZpdGF0aW9uX0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGkxOG5EZWZhdWx0UXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnSW52aXRhdGlvbl9DdXN0b21pemVkJyxcblx0XHRcdFx0dmFsdWU6IGZhbHNlXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ1JlZ2lzdHJhdGlvbicsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19FbnJvbGxtZW50X0N1c3RvbWl6ZWQnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0aTE4bkxhYmVsOiAnQ3VzdG9tJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19FbnJvbGxtZW50X0VtYWlsX1N1YmplY3QnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRpMThuTGFiZWw6ICdTdWJqZWN0Jyxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0FjY291bnRzX0Vucm9sbG1lbnRfQ3VzdG9taXplZCcsXG5cdFx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0aTE4bkRlZmF1bHRRdWVyeToge1xuXHRcdFx0XHRfaWQ6ICdBY2NvdW50c19FbnJvbGxtZW50X0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogZmFsc2Vcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0FjY291bnRzX0Vucm9sbG1lbnRfRW1haWwnLCAnJywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0Y29kZTogJ3RleHQvaHRtbCcsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdCb2R5Jyxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0FjY291bnRzX0Vucm9sbG1lbnRfQ3VzdG9taXplZCcsXG5cdFx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0aTE4bkRlZmF1bHRRdWVyeToge1xuXHRcdFx0XHRfaWQ6ICdBY2NvdW50c19FbnJvbGxtZW50X0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogZmFsc2Vcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignUmVnaXN0cmF0aW9uX3ZpYV9BZG1pbicsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbF9DdXN0b21pemVkJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGkxOG5MYWJlbDogJ0N1c3RvbSdcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfVXNlckFkZGVkRW1haWxTdWJqZWN0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0aTE4bkxhYmVsOiAnU3ViamVjdCcsXG5cdFx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0XHRfaWQ6ICdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbF9DdXN0b21pemVkJyxcblx0XHRcdFx0dmFsdWU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRpMThuRGVmYXVsdFF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0FjY291bnRzX1VzZXJBZGRlZEVtYWlsX0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogZmFsc2Vcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0FjY291bnRzX1VzZXJBZGRlZEVtYWlsJywgJycsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0L2h0bWwnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnQm9keScsXG5cdFx0XHRpMThuRGVzY3JpcHRpb246ICdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbF9EZXNjcmlwdGlvbicsXG5cdFx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0XHRfaWQ6ICdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbF9DdXN0b21pemVkJyxcblx0XHRcdFx0dmFsdWU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRpMThuRGVmYXVsdFF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0FjY291bnRzX1VzZXJBZGRlZEVtYWlsX0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogZmFsc2Vcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignRm9yZ290X3Bhc3N3b3JkX3NlY3Rpb24nLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnRm9yZ290X1Bhc3N3b3JkX0N1c3RvbWl6ZWQnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0aTE4bkxhYmVsOiAnQ3VzdG9tJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdGb3Jnb3RfUGFzc3dvcmRfRW1haWxfU3ViamVjdCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGkxOG5MYWJlbDogJ1N1YmplY3QnLFxuXHRcdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnRm9yZ290X1Bhc3N3b3JkX0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGkxOG5EZWZhdWx0UXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnRm9yZ290X1Bhc3N3b3JkX0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogZmFsc2Vcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0ZvcmdvdF9QYXNzd29yZF9FbWFpbCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0JvZHknLFxuXHRcdFx0aTE4bkRlc2NyaXB0aW9uOiAnRm9yZ290X1Bhc3N3b3JkX0Rlc2NyaXB0aW9uJyxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0ZvcmdvdF9QYXNzd29yZF9DdXN0b21pemVkJyxcblx0XHRcdFx0dmFsdWU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRpMThuRGVmYXVsdFF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0ZvcmdvdF9QYXNzd29yZF9DdXN0b21pemVkJyxcblx0XHRcdFx0dmFsdWU6IGZhbHNlXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXHRyZXR1cm4gdGhpcy5zZWN0aW9uKCdWZXJpZmljYXRpb24nLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnVmVyaWZpY2F0aW9uX0N1c3RvbWl6ZWQnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0aTE4bkxhYmVsOiAnQ3VzdG9tJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdWZXJpZmljYXRpb25fRW1haWxfU3ViamVjdCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGkxOG5MYWJlbDogJ1N1YmplY3QnLFxuXHRcdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnVmVyaWZpY2F0aW9uX0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGkxOG5EZWZhdWx0UXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnVmVyaWZpY2F0aW9uX0N1c3RvbWl6ZWQnLFxuXHRcdFx0XHR2YWx1ZTogZmFsc2Vcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ1ZlcmlmaWNhdGlvbl9FbWFpbCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0JvZHknLFxuXHRcdFx0aTE4bkRlc2NyaXB0aW9uOiAnVmVyaWZpY2F0aW9uX0Rlc2NyaXB0aW9uJyxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ1ZlcmlmaWNhdGlvbl9DdXN0b21pemVkJyxcblx0XHRcdFx0dmFsdWU6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRpMThuRGVmYXVsdFF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ1ZlcmlmaWNhdGlvbl9DdXN0b21pemVkJyxcblx0XHRcdFx0dmFsdWU6IGZhbHNlXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3MuYWRkR3JvdXAoJ01lc3NhZ2UnLCBmdW5jdGlvbigpIHtcblx0dGhpcy5zZWN0aW9uKCdNZXNzYWdlX0F0dGFjaG1lbnRzJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ01lc3NhZ2VfQXR0YWNobWVudHNfR3JvdXBBdHRhY2gnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0XHRpMThuRGVzY3JpcHRpb246ICdNZXNzYWdlX0F0dGFjaG1lbnRzX0dyb3VwQXR0YWNoRGVzY3JpcHRpb24nXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ01lc3NhZ2VfQXVkaW9SZWNvcmRlckVuYWJsZWQnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZSxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ01lc3NhZ2VfQXVkaW9SZWNvcmRlckVuYWJsZWREZXNjcmlwdGlvbidcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0FsbG93RWRpdGluZycsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0FsbG93RWRpdGluZ19CbG9ja0VkaXRJbk1pbnV0ZXMnLCAwLCB7XG5cdFx0dHlwZTogJ2ludCcsXG5cdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnTWVzc2FnZV9BbGxvd0VkaXRpbmdfQmxvY2tFZGl0SW5NaW51dGVzRGVzY3JpcHRpb24nXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9BbGxvd0RlbGV0aW5nJywgdHJ1ZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfQWxsb3dEZWxldGluZ19CbG9ja0RlbGV0ZUluTWludXRlcycsIDAsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0XHQncHVibGljJzogdHJ1ZSxcblx0XHRpMThuRGVzY3JpcHRpb246ICdNZXNzYWdlX0FsbG93RGVsZXRpbmdfQmxvY2tEZWxldGVJbk1pbnV0ZXMnXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9BbGxvd1VucmVjb2duaXplZFNsYXNoQ29tbWFuZCcsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9BbGxvd0RpcmVjdE1lc3NhZ2VzVG9Zb3Vyc2VsZicsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0Fsd2F5c1NlYXJjaFJlZ0V4cCcsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9TaG93RWRpdGVkU3RhdHVzJywgdHJ1ZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfU2hvd0RlbGV0ZWRTdGF0dXMnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfQWxsb3dCYWRXb3Jkc0ZpbHRlcicsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9CYWRXb3Jkc0ZpbHRlckxpc3QnLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9LZWVwSGlzdG9yeScsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9NYXhBbGwnLCAwLCB7XG5cdFx0dHlwZTogJ2ludCcsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX01heEFsbG93ZWRTaXplJywgNTAwMCwge1xuXHRcdHR5cGU6ICdpbnQnLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9TaG93Rm9ybWF0dGluZ1RpcHMnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9TZXROYW1lVG9BbGlhc0VuYWJsZWQnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHQncHVibGljJzogZmFsc2UsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnTWVzc2FnZV9TZXROYW1lVG9BbGlhc0VuYWJsZWRfRGVzY3JpcHRpb24nXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9Hcm91cGluZ1BlcmlvZCcsIDMwMCwge1xuXHRcdHR5cGU6ICdpbnQnLFxuXHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdGkxOG5EZXNjcmlwdGlvbjogJ01lc3NhZ2VfR3JvdXBpbmdQZXJpb2REZXNjcmlwdGlvbidcblx0fSk7XG5cdHRoaXMuYWRkKCdBUElfRW1iZWQnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQVBJX0VtYmVkX1VzZXJBZ2VudCcsICdNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS80MS4wLjIyMjcuMCBTYWZhcmkvNTM3LjM2Jywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQVBJX0VtYmVkQ2FjaGVFeHBpcmF0aW9uRGF5cycsIDMwLCB7XG5cdFx0dHlwZTogJ2ludCcsXG5cdFx0J3B1YmxpYyc6IGZhbHNlXG5cdH0pO1xuXHR0aGlzLmFkZCgnQVBJX0VtYmVkX2NsZWFyX2NhY2hlX25vdycsICdPRW1iZWRDYWNoZUNsZWFudXAnLCB7XG5cdFx0dHlwZTogJ2FjdGlvbicsXG5cdFx0YWN0aW9uVGV4dDogJ2NsZWFyJyxcblx0XHRpMThuTGFiZWw6ICdjbGVhcl9jYWNoZV9ub3cnXG5cdH0pO1xuXHR0aGlzLmFkZCgnQVBJX0VtYmVkRGlzYWJsZWRGb3InLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdGkxOG5EZXNjcmlwdGlvbjogJ0FQSV9FbWJlZERpc2FibGVkRm9yX0Rlc2NyaXB0aW9uJ1xuXHR9KTtcblx0dGhpcy5hZGQoJ0FQSV9FbWJlZElnbm9yZWRIb3N0cycsICdsb2NhbGhvc3QsIDEyNy4wLjAuMSwgMTAuMC4wLjAvOCwgMTcyLjE2LjAuMC8xMiwgMTkyLjE2OC4wLjAvMTYnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnQVBJX0VtYmVkSWdub3JlZEhvc3RzX0Rlc2NyaXB0aW9uJ1xuXHR9KTtcblx0dGhpcy5hZGQoJ0FQSV9FbWJlZFNhZmVQb3J0cycsICc4MCwgNDQzJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9UaW1lRm9ybWF0JywgJ0xUJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdGkxOG5EZXNjcmlwdGlvbjogJ01lc3NhZ2VfVGltZUZvcm1hdF9EZXNjcmlwdGlvbidcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0RhdGVGb3JtYXQnLCAnTEwnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0J3B1YmxpYyc6IHRydWUsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnTWVzc2FnZV9EYXRlRm9ybWF0X0Rlc2NyaXB0aW9uJ1xuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfVGltZUFuZERhdGVGb3JtYXQnLCAnTExMJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdGkxOG5EZXNjcmlwdGlvbjogJ01lc3NhZ2VfVGltZUFuZERhdGVGb3JtYXRfRGVzY3JpcHRpb24nXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9RdW90ZUNoYWluTGltaXQnLCAyLCB7XG5cdFx0dHlwZTogJ2ludCcsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0hpZGVUeXBlX3VqJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0hpZGVUeXBlX3VsJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0hpZGVUeXBlX3J1JywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0hpZGVUeXBlX2F1JywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cblx0cmV0dXJuIHRoaXMuYWRkKCdNZXNzYWdlX0hpZGVUeXBlX211dGVfdW5tdXRlJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGRHcm91cCgnTWV0YScsIGZ1bmN0aW9uKCkge1xuXHR0aGlzLmFkZCgnTWV0YV9sYW5ndWFnZScsICcnLCB7XG5cdFx0dHlwZTogJ3N0cmluZydcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXRhX2ZiX2FwcF9pZCcsICcnLCB7XG5cdFx0dHlwZTogJ3N0cmluZydcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXRhX3JvYm90cycsICdJTkRFWCxGT0xMT1cnLCB7XG5cdFx0dHlwZTogJ3N0cmluZydcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXRhX2dvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbicsICcnLCB7XG5cdFx0dHlwZTogJ3N0cmluZydcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXRhX21zdmFsaWRhdGUwMScsICcnLCB7XG5cdFx0dHlwZTogJ3N0cmluZydcblx0fSk7XG5cdHJldHVybiB0aGlzLmFkZCgnTWV0YV9jdXN0b20nLCAnJywge1xuXHRcdHR5cGU6ICdjb2RlJyxcblx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRtdWx0aWxpbmU6IHRydWVcblx0fSk7XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGRHcm91cCgnUHVzaCcsIGZ1bmN0aW9uKCkge1xuXHR0aGlzLmFkZCgnUHVzaF9lbmFibGUnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnUHVzaF9kZWJ1ZycsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRfaWQ6ICdQdXNoX2VuYWJsZScsXG5cdFx0XHR2YWx1ZTogdHJ1ZVxuXHRcdH1cblx0fSk7XG5cdHRoaXMuYWRkKCdQdXNoX2VuYWJsZV9nYXRld2F5JywgdHJ1ZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0X2lkOiAnUHVzaF9lbmFibGUnLFxuXHRcdFx0dmFsdWU6IHRydWVcblx0XHR9XG5cdH0pO1xuXHR0aGlzLmFkZCgnUHVzaF9nYXRld2F5JywgJ2h0dHBzOi8vZ2F0ZXdheS5yb2NrZXQuY2hhdCcsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRlbmFibGVRdWVyeTogW1xuXHRcdFx0e1xuXHRcdFx0XHRfaWQ6ICdQdXNoX2VuYWJsZScsXG5cdFx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0XHR9LCB7XG5cdFx0XHRcdF9pZDogJ1B1c2hfZW5hYmxlX2dhdGV3YXknLFxuXHRcdFx0XHR2YWx1ZTogdHJ1ZVxuXHRcdFx0fVxuXHRcdF1cblx0fSk7XG5cdHRoaXMuYWRkKCdQdXNoX3Byb2R1Y3Rpb24nLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdGVuYWJsZVF1ZXJ5OiBbXG5cdFx0XHR7XG5cdFx0XHRcdF9pZDogJ1B1c2hfZW5hYmxlJyxcblx0XHRcdFx0dmFsdWU6IHRydWVcblx0XHRcdH0sIHtcblx0XHRcdFx0X2lkOiAnUHVzaF9lbmFibGVfZ2F0ZXdheScsXG5cdFx0XHRcdHZhbHVlOiBmYWxzZVxuXHRcdFx0fVxuXHRcdF1cblx0fSk7XG5cdHRoaXMuYWRkKCdQdXNoX3Rlc3RfcHVzaCcsICdwdXNoX3Rlc3QnLCB7XG5cdFx0dHlwZTogJ2FjdGlvbicsXG5cdFx0YWN0aW9uVGV4dDogJ1NlbmRfYV90ZXN0X3B1c2hfdG9fbXlfdXNlcicsXG5cdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdF9pZDogJ1B1c2hfZW5hYmxlJyxcblx0XHRcdHZhbHVlOiB0cnVlXG5cdFx0fVxuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdDZXJ0aWZpY2F0ZXNfYW5kX0tleXMnLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnUHVzaF9hcG5fcGFzc3BocmFzZScsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdQdXNoX2Fwbl9rZXknLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnUHVzaF9hcG5fY2VydCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdQdXNoX2Fwbl9kZXZfcGFzc3BocmFzZScsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJ1xuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdQdXNoX2Fwbl9kZXZfa2V5JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1B1c2hfYXBuX2Rldl9jZXJ0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1B1c2hfZ2NtX2FwaV9rZXknLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZydcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ1B1c2hfZ2NtX3Byb2plY3RfbnVtYmVyJywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0fSk7XG5cdHJldHVybiB0aGlzLnNlY3Rpb24oJ1ByaXZhY3knLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnUHVzaF9zaG93X3VzZXJuYW1lX3Jvb20nLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLmFkZCgnUHVzaF9zaG93X21lc3NhZ2UnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHR9KTtcbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmFkZEdyb3VwKCdMYXlvdXQnLCBmdW5jdGlvbigpIHtcblx0dGhpcy5zZWN0aW9uKCdDb250ZW50JywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0xheW91dF9Ib21lX1RpdGxlJywgJ0hvbWUnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0xheW91dF9Ib21lX0JvZHknLCAnV2VsY29tZSB0byBSb2NrZXQuQ2hhdCA8YnI+IEdvIHRvIEFQUCBTRVRUSU5HUyAtPiBMYXlvdXQgdG8gY3VzdG9taXplIHRoaXMgaW50cm8uJywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0Y29kZTogJ3RleHQvaHRtbCcsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdMYXlvdXRfVGVybXNfb2ZfU2VydmljZScsICdUZXJtcyBvZiBTZXJ2aWNlIDxicj4gR28gdG8gQVBQIFNFVFRJTkdTIC0+IExheW91dCB0byBjdXN0b21pemUgdGhpcyBwYWdlLicsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0L2h0bWwnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnTGF5b3V0X0xvZ2luX1Rlcm1zJywgJ0J5IHByb2NlZWRpbmcgeW91IGFyZSBhZ3JlZWluZyB0byBvdXIgPGEgaHJlZj1cInRlcm1zLW9mLXNlcnZpY2VcIj5UZXJtcyBvZiBTZXJ2aWNlPC9hPiBhbmQgPGEgaHJlZj1cInByaXZhY3ktcG9saWN5XCI+UHJpdmFjeSBQb2xpY3k8L2E+LicsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnTGF5b3V0X1ByaXZhY3lfUG9saWN5JywgJ1ByaXZhY3kgUG9saWN5IDxicj4gR28gdG8gQVBQIFNFVFRJTkdTIC0+IExheW91dCB0byBjdXN0b21pemUgdGhpcyBwYWdlLicsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0L2h0bWwnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0xheW91dF9TaWRlbmF2X0Zvb3RlcicsICc8aW1nIHNyYz1cImFzc2V0cy9sb2dvXCIgLz4nLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlLFxuXHRcdFx0aTE4bkRlc2NyaXB0aW9uOiAnTGF5b3V0X1NpZGVuYXZfRm9vdGVyX2Rlc2NyaXB0aW9uJ1xuXHRcdH0pO1xuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdDdXN0b21fU2NyaXB0cycsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdDdXN0b21fU2NyaXB0X0xvZ2dlZF9PdXQnLCAnLy9BZGQgeW91ciBzY3JpcHQnLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLmFkZCgnQ3VzdG9tX1NjcmlwdF9Mb2dnZWRfSW4nLCAnLy9BZGQgeW91ciBzY3JpcHQnLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHQncHVibGljJzogdHJ1ZVxuXHRcdH0pO1xuXHR9KTtcblx0cmV0dXJuIHRoaXMuc2VjdGlvbignVXNlcl9JbnRlcmZhY2UnLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnVUlfRGlzcGxheVJvbGVzJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnVUlfTWVyZ2VfQ2hhbm5lbHNfR3JvdXBzJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnVUlfVXNlX05hbWVfQXZhdGFyJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdCdwdWJsaWMnOiB0cnVlXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1VJX1VzZV9SZWFsX05hbWUnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnVUlfQ2xpY2tfRGlyZWN0X01lc3NhZ2UnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnVUlfVW5yZWFkX0NvdW50ZXJfU3R5bGUnLCAnRGlmZmVyZW50X1N0eWxlX0Zvcl9Vc2VyX01lbnRpb25zJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ1NhbWVfU3R5bGVfRm9yX01lbnRpb25zJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdTYW1lX1N0eWxlX0Zvcl9NZW50aW9ucydcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJ0RpZmZlcmVudF9TdHlsZV9Gb3JfVXNlcl9NZW50aW9ucycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnRGlmZmVyZW50X1N0eWxlX0Zvcl9Vc2VyX01lbnRpb25zJ1xuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnVUlfQWxsb3dfcm9vbV9uYW1lc193aXRoX3NwZWNpYWxfY2hhcnMnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlXG5cdFx0fSk7XG5cdH0pO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3MuYWRkR3JvdXAoJ0xvZ3MnLCBmdW5jdGlvbigpIHtcblx0dGhpcy5hZGQoJ0xvZ19MZXZlbCcsICcwJywge1xuXHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdHZhbHVlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRrZXk6ICcwJyxcblx0XHRcdFx0aTE4bkxhYmVsOiAnMF9FcnJvcnNfT25seSdcblx0XHRcdH0sIHtcblx0XHRcdFx0a2V5OiAnMScsXG5cdFx0XHRcdGkxOG5MYWJlbDogJzFfRXJyb3JzX2FuZF9JbmZvcm1hdGlvbidcblx0XHRcdH0sIHtcblx0XHRcdFx0a2V5OiAnMicsXG5cdFx0XHRcdGkxOG5MYWJlbDogJzJfRXJyb3NfSW5mb3JtYXRpb25fYW5kX0RlYnVnJ1xuXHRcdFx0fVxuXHRcdF0sXG5cdFx0J3B1YmxpYyc6IHRydWVcblx0fSk7XG5cdHRoaXMuYWRkKCdMb2dfUGFja2FnZScsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdCdwdWJsaWMnOiB0cnVlXG5cdH0pO1xuXHR0aGlzLmFkZCgnTG9nX0ZpbGUnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHQncHVibGljJzogdHJ1ZVxuXHR9KTtcblx0cmV0dXJuIHRoaXMuYWRkKCdMb2dfVmlld19MaW1pdCcsIDEwMDAsIHtcblx0XHR0eXBlOiAnaW50J1xuXHR9KTtcbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmluaXQoKTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdCdwdWJsaWMtc2V0dGluZ3MvZ2V0Jyh1cGRhdGVkQXQpIHtcblx0XHR0aGlzLnVuYmxvY2soKTtcblx0XHRjb25zdCByZWNvcmRzID0gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZmluZCgpLmZldGNoKCkuZmlsdGVyKGZ1bmN0aW9uKHJlY29yZCkge1xuXHRcdFx0cmV0dXJuIHJlY29yZC5oaWRkZW4gIT09IHRydWUgJiYgcmVjb3JkWydwdWJsaWMnXSA9PT0gdHJ1ZTtcblx0XHR9KTtcblx0XHRpZiAodXBkYXRlZEF0IGluc3RhbmNlb2YgRGF0ZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXBkYXRlOiByZWNvcmRzLmZpbHRlcihmdW5jdGlvbihyZWNvcmQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkLl91cGRhdGVkQXQgPiB1cGRhdGVkQXQ7XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRyZW1vdmU6IFJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLnRyYXNoRmluZERlbGV0ZWRBZnRlcih1cGRhdGVkQXQsIHtcblx0XHRcdFx0XHRoaWRkZW46IHtcblx0XHRcdFx0XHRcdCRuZTogdHJ1ZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0J3B1YmxpYyc6IHRydWVcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdFx0X2lkOiAxLFxuXHRcdFx0XHRcdFx0X2RlbGV0ZWRBdDogMVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkuZmV0Y2goKVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlY29yZHM7XG5cdH0sXG5cdCdwcml2YXRlLXNldHRpbmdzL2dldCcodXBkYXRlZEF0KSB7XG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdFx0dGhpcy51bmJsb2NrKCk7XG5cdFx0aWYgKCFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAndmlldy1wcml2aWxlZ2VkLXNldHRpbmcnKSkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblx0XHRjb25zdCByZWNvcmRzID0gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZmluZCgpLmZldGNoKCkuZmlsdGVyKGZ1bmN0aW9uKHJlY29yZCkge1xuXHRcdFx0cmV0dXJuIHJlY29yZC5oaWRkZW4gIT09IHRydWU7XG5cdFx0fSk7XG5cdFx0aWYgKHVwZGF0ZWRBdCBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVwZGF0ZTogcmVjb3Jkcy5maWx0ZXIoZnVuY3Rpb24ocmVjb3JkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlY29yZC5fdXBkYXRlZEF0ID4gdXBkYXRlZEF0O1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0cmVtb3ZlOiBSb2NrZXRDaGF0Lm1vZGVscy5TZXR0aW5ncy50cmFzaEZpbmREZWxldGVkQWZ0ZXIodXBkYXRlZEF0LCB7XG5cdFx0XHRcdFx0aGlkZGVuOiB7XG5cdFx0XHRcdFx0XHQkbmU6IHRydWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0XHRcdF9pZDogMSxcblx0XHRcdFx0XHRcdF9kZWxldGVkQXQ6IDFcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pLmZldGNoKClcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiByZWNvcmRzO1xuXHR9XG59KTtcblxuUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuY2FjaGUub24oJ2NoYW5nZWQnLCBmdW5jdGlvbih0eXBlLCBzZXR0aW5nKSB7XG5cdGlmIChzZXR0aW5nWydwdWJsaWMnXSA9PT0gdHJ1ZSkge1xuXHRcdFJvY2tldENoYXQuTm90aWZpY2F0aW9ucy5ub3RpZnlBbGxJblRoaXNJbnN0YW5jZSgncHVibGljLXNldHRpbmdzLWNoYW5nZWQnLCB0eXBlLCBfLnBpY2soc2V0dGluZywgJ19pZCcsICd2YWx1ZScsICdlZGl0b3InLCAncHJvcGVydGllcycpKTtcblx0fVxuXHRyZXR1cm4gUm9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeUxvZ2dlZEluVGhpc0luc3RhbmNlKCdwcml2YXRlLXNldHRpbmdzLWNoYW5nZWQnLCB0eXBlLCBzZXR0aW5nKTtcbn0pO1xuXG5Sb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMuc3RyZWFtQWxsLmFsbG93UmVhZCgncHJpdmF0ZS1zZXR0aW5ncy1jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG5cdGlmICh0aGlzLnVzZXJJZCA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odGhpcy51c2VySWQsICd2aWV3LXByaXZpbGVnZWQtc2V0dGluZycpO1xufSk7XG4iLCIvKiBlc2xpbnQgbm8tbXVsdGktc3BhY2VzOiAwICovXG4vKiBlc2xpbnQgY29tbWEtc3BhY2luZzogMCAqL1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdGFkZE9BdXRoU2VydmljZShuYW1lKSB7XG5cblx0XHRjaGVjayhuYW1lLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2FkZE9BdXRoU2VydmljZScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKFJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdhZGQtb2F1dGgtc2VydmljZScpICE9PSB0cnVlKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnQWRkaW5nIE9BdXRoIFNlcnZpY2VzIGlzIG5vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdhZGRPQXV0aFNlcnZpY2UnLCBhY3Rpb246ICdBZGRpbmdfT0F1dGhfU2VydmljZXMnIH0pO1xuXHRcdH1cblxuXHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15hLXowLTlfXS9nLCAnJyk7XG5cdFx0bmFtZSA9IHMuY2FwaXRhbGl6ZShuYW1lKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfWAgICAgICAgICAgICAgICAgICAgICAgICAsIGZhbHNlICAgICAgICAgICAgICwgeyB0eXBlOiAnYm9vbGVhbicsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fRW5hYmxlJywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS11cmxgICAgICAgICAgICAgICAgICAgICAsICcnICAgICAgICAgICAgICAgICwgeyB0eXBlOiAnc3RyaW5nJyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdVUkwnLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXRva2VuX3BhdGhgICAgICAgICAgICAgICwgJy9vYXV0aC90b2tlbicgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9Ub2tlbl9QYXRoJywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS10b2tlbl9zZW50X3ZpYWAgICAgICAgICAsICdwYXlsb2FkJyAgICAgICAgICwgeyB0eXBlOiAnc2VsZWN0JyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fVG9rZW5fU2VudF9WaWEnLCBwZXJzaXN0ZW50OiB0cnVlLCB2YWx1ZXM6IFsgeyBrZXk6ICdoZWFkZXInLCBpMThuTGFiZWw6ICdIZWFkZXInIH0sIHsga2V5OiAncGF5bG9hZCcsIGkxOG5MYWJlbDogJ1BheWxvYWQnIH0gXSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1pZGVudGl0eV90b2tlbl9zZW50X3ZpYWAsICdkZWZhdWx0JyAgICAgICAgICwgeyB0eXBlOiAnc2VsZWN0JyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fSWRlbnRpdHlfVG9rZW5fU2VudF9WaWEnLCBwZXJzaXN0ZW50OiB0cnVlLCB2YWx1ZXM6IFsgeyBrZXk6ICdkZWZhdWx0JywgaTE4bkxhYmVsOiAnU2FtZV9Bc19Ub2tlbl9TZW50X1ZpYScgfSwgeyBrZXk6ICdoZWFkZXInLCBpMThuTGFiZWw6ICdIZWFkZXInIH0sIHsga2V5OiAncGF5bG9hZCcsIGkxOG5MYWJlbDogJ1BheWxvYWQnIH0gXSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1pZGVudGl0eV9wYXRoYCAgICAgICAgICAsICcvbWUnICAgICAgICAgICAgICwgeyB0eXBlOiAnc3RyaW5nJyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fSWRlbnRpdHlfUGF0aCcsIHBlcnNpc3RlbnQ6IHRydWUgfSk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tYXV0aG9yaXplX3BhdGhgICAgICAgICAgLCAnL29hdXRoL2F1dGhvcml6ZScsIHsgdHlwZTogJ3N0cmluZycgLCBncm91cDogJ09BdXRoJywgc2VjdGlvbjogYEN1c3RvbSBPQXV0aDogJHsgbmFtZSB9YCwgaTE4bkxhYmVsOiAnQWNjb3VudHNfT0F1dGhfQ3VzdG9tX0F1dGhvcml6ZV9QYXRoJywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1zY29wZWAgICAgICAgICAgICAgICAgICAsICdvcGVuaWQnICAgICAgICAgICwgeyB0eXBlOiAnc3RyaW5nJyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fU2NvcGUnLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWlkYCAgICAgICAgICAgICAgICAgICAgICwgJycgICAgICAgICAgICAgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9pZCcsIHBlcnNpc3RlbnQ6IHRydWUgfSk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tc2VjcmV0YCAgICAgICAgICAgICAgICAgLCAnJyAgICAgICAgICAgICAgICAsIHsgdHlwZTogJ3N0cmluZycgLCBncm91cDogJ09BdXRoJywgc2VjdGlvbjogYEN1c3RvbSBPQXV0aDogJHsgbmFtZSB9YCwgaTE4bkxhYmVsOiAnQWNjb3VudHNfT0F1dGhfQ3VzdG9tX1NlY3JldCcsIHBlcnNpc3RlbnQ6IHRydWUgfSk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tbG9naW5fc3R5bGVgICAgICAgICAgICAgLCAncG9wdXAnICAgICAgICAgICAsIHsgdHlwZTogJ3NlbGVjdCcgLCBncm91cDogJ09BdXRoJywgc2VjdGlvbjogYEN1c3RvbSBPQXV0aDogJHsgbmFtZSB9YCwgaTE4bkxhYmVsOiAnQWNjb3VudHNfT0F1dGhfQ3VzdG9tX0xvZ2luX1N0eWxlJywgcGVyc2lzdGVudDogdHJ1ZSwgdmFsdWVzOiBbIHsga2V5OiAncmVkaXJlY3QnLCBpMThuTGFiZWw6ICdSZWRpcmVjdCcgfSwgeyBrZXk6ICdwb3B1cCcsIGkxOG5MYWJlbDogJ1BvcHVwJyB9LCB7IGtleTogJycsIGkxOG5MYWJlbDogJ0RlZmF1bHQnIH0gXSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1idXR0b25fbGFiZWxfdGV4dGAgICAgICAsICcnICAgICAgICAgICAgICAgICwgeyB0eXBlOiAnc3RyaW5nJyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fQnV0dG9uX0xhYmVsX1RleHQnLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWJ1dHRvbl9sYWJlbF9jb2xvcmAgICAgICwgJyNGRkZGRkYnICAgICAgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9CdXR0b25fTGFiZWxfQ29sb3InLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWJ1dHRvbl9jb2xvcmAgICAgICAgICAgICwgJyMxMzY3OUEnICAgICAgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9CdXR0b25fQ29sb3InLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXVzZXJuYW1lX2ZpZWxkYCAgICAgICAgICwgJycgICAgICAgICAgICAgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9Vc2VybmFtZV9GaWVsZCcsIHBlcnNpc3RlbnQ6IHRydWUgfSk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tbWVyZ2VfdXNlcnNgICAgICAgICAgICAgLCBmYWxzZSAgICAgICAgICAgICAsIHsgdHlwZTogJ2Jvb2xlYW4nLCBncm91cDogJ09BdXRoJywgc2VjdGlvbjogYEN1c3RvbSBPQXV0aDogJHsgbmFtZSB9YCwgaTE4bkxhYmVsOiAnQWNjb3VudHNfT0F1dGhfQ3VzdG9tX01lcmdlX1VzZXJzJywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0fX0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRyZWZyZXNoT0F1dGhTZXJ2aWNlKCkge1xuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdyZWZyZXNoT0F1dGhTZXJ2aWNlJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2FkZC1vYXV0aC1zZXJ2aWNlJykgIT09IHRydWUpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsICdSZWZyZXNoIE9BdXRoIFNlcnZpY2VzIGlzIG5vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdyZWZyZXNoT0F1dGhTZXJ2aWNlJywgYWN0aW9uOiAnUmVmcmVzaGluZ19PQXV0aF9TZXJ2aWNlcycgfSk7XG5cdFx0fVxuXG5cdFx0U2VydmljZUNvbmZpZ3VyYXRpb24uY29uZmlndXJhdGlvbnMucmVtb3ZlKHt9KTtcblxuXHRcdFJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLnVwZGF0ZSh7X2lkOiAvXkFjY291bnRzX09BdXRoXy4rL30sIHskc2V0OiB7X3VwZGF0ZWRBdDogbmV3IERhdGV9fSwge211bHRpOiB0cnVlfSk7XG5cdH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRhZGRVc2VyVG9Sb29tKGRhdGEpIHtcblx0XHRyZXR1cm4gTWV0ZW9yLmNhbGwoJ2FkZFVzZXJzVG9Sb29tJywge1xuXHRcdFx0cmlkOiBkYXRhLnJpZCxcblx0XHRcdHVzZXJzOiBbIGRhdGEudXNlcm5hbWUgXVxuXHRcdH0pO1xuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0YWRkVXNlcnNUb1Jvb20oZGF0YSA9IHt9KSB7XG5cdFx0Ly8gVmFsaWRhdGUgdXNlciBhbmQgcm9vbVxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywge1xuXHRcdFx0XHRtZXRob2Q6ICdhZGRVc2Vyc1RvUm9vbSdcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICghTWF0Y2gudGVzdChkYXRhLnJpZCwgU3RyaW5nKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1yb29tJywgJ0ludmFsaWQgcm9vbScsIHtcblx0XHRcdFx0bWV0aG9kOiAnYWRkVXNlcnNUb1Jvb20nXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBHZXQgdXNlciBhbmQgcm9vbSBkZXRhaWxzXG5cdFx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKGRhdGEucmlkKTtcblx0XHRjb25zdCB1c2VySWQgPSBNZXRlb3IudXNlcklkKCk7XG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2VyKCk7XG5cdFx0Y29uc3QgdXNlckluUm9vbSA9IEFycmF5LmlzQXJyYXkocm9vbS51c2VybmFtZXMpICYmIHJvb20udXNlcm5hbWVzLmluY2x1ZGVzKHVzZXIudXNlcm5hbWUpO1xuXG5cdFx0Ly8gQ2FuJ3QgYWRkIHRvIGRpcmVjdCByb29tIGV2ZXJcblx0XHRpZiAocm9vbS50ID09PSAnZCcpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWNhbnQtaW52aXRlLWZvci1kaXJlY3Qtcm9vbScsICdDYW5cXCd0IGludml0ZSB1c2VyIHRvIGRpcmVjdCByb29tcycsIHtcblx0XHRcdFx0bWV0aG9kOiAnYWRkVXNlcnNUb1Jvb20nXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBDYW4gYWRkIHRvIGFueSByb29tIHlvdSdyZSBpbiwgd2l0aCBwZXJtaXNzaW9uLCBvdGhlcndpc2UgbmVlZCBzcGVjaWZpYyByb29tIHR5cGUgcGVybWlzc2lvblxuXHRcdGxldCBjYW5BZGRVc2VyID0gZmFsc2U7XG5cdFx0aWYgKHVzZXJJblJvb20gJiYgUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2FkZC11c2VyLXRvLWpvaW5lZC1yb29tJywgcm9vbS5faWQpKSB7XG5cdFx0XHRjYW5BZGRVc2VyID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKHJvb20udCA9PT0gJ2MnICYmIFJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbih1c2VySWQsICdhZGQtdXNlci10by1hbnktYy1yb29tJykpIHtcblx0XHRcdGNhbkFkZFVzZXIgPSB0cnVlO1xuXHRcdH0gZWxzZSBpZiAocm9vbS50ID09PSAncCcgJiYgUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2FkZC11c2VyLXRvLWFueS1wLXJvb20nKSkge1xuXHRcdFx0Y2FuQWRkVXNlciA9IHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkaW5nIHdhc24ndCBhbGxvd2VkXG5cdFx0aWYgKCFjYW5BZGRVc2VyKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1ub3QtYWxsb3dlZCcsICdOb3QgYWxsb3dlZCcsIHtcblx0XHRcdFx0bWV0aG9kOiAnYWRkVXNlcnNUb1Jvb20nXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBNaXNzaW5nIHRoZSB1c2VycyB0byBiZSBhZGRlZFxuXHRcdGlmICghQXJyYXkuaXNBcnJheShkYXRhLnVzZXJzKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1hcmd1bWVudHMnLCAnSW52YWxpZCBhcmd1bWVudHMnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ2FkZFVzZXJzVG9Sb29tJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gVmFsaWRhdGUgZWFjaCB1c2VyLCB0aGVuIGFkZCB0byByb29tXG5cdFx0ZGF0YS51c2Vycy5mb3JFYWNoKCh1c2VybmFtZSkgPT4ge1xuXHRcdFx0Y29uc3QgbmV3VXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeVVzZXJuYW1lKHVzZXJuYW1lKTtcblx0XHRcdGlmICghbmV3VXNlcikge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXJuYW1lJywgJ0ludmFsaWQgdXNlcm5hbWUnLCB7XG5cdFx0XHRcdFx0bWV0aG9kOiAnYWRkVXNlcnNUb1Jvb20nXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRSb2NrZXRDaGF0LmFkZFVzZXJUb1Jvb20oZGF0YS5yaWQsIG5ld1VzZXIsIHVzZXIpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRhcmNoaXZlUm9vbShyaWQpIHtcblxuXHRcdGNoZWNrKHJpZCwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdhcmNoaXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKHJpZCk7XG5cblx0XHRpZiAoIXJvb20pIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtcm9vbScsICdJbnZhbGlkIHJvb20nLCB7IG1ldGhvZDogJ2FyY2hpdmVSb29tJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdhcmNoaXZlLXJvb20nLCByb29tLl9pZCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hdXRob3JpemVkJywgJ05vdCBhdXRob3JpemVkJywgeyBtZXRob2Q6ICdhcmNoaXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKHJvb20udCA9PT0gJ2QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1kaXJlY3QtbWVzc2FnZS1yb29tJywgJ0RpcmVjdCBNZXNzYWdlcyBjYW4gbm90IGJlIGFyY2hpdmVkJywgeyBtZXRob2Q6ICdhcmNoaXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJvY2tldENoYXQuYXJjaGl2ZVJvb20ocmlkKTtcblx0fVxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdGJsb2NrVXNlcih7cmlkLCBibG9ja2VkfSkge1xuXG5cdFx0Y2hlY2socmlkLCBTdHJpbmcpO1xuXHRcdGNoZWNrKGJsb2NrZWQsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnYmxvY2tVc2VyJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChyaWQsIE1ldGVvci51c2VySWQoKSk7XG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uMiA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKHJpZCwgYmxvY2tlZCk7XG5cblx0XHRpZiAoIXN1YnNjcmlwdGlvbiB8fCAhc3Vic2NyaXB0aW9uMikge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1yb29tJywgJ0ludmFsaWQgcm9vbScsIHsgbWV0aG9kOiAnYmxvY2tVc2VyJyB9KTtcblx0XHR9XG5cblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLnNldEJsb2NrZWRCeVJvb21JZChyaWQsIGJsb2NrZWQsIE1ldGVvci51c2VySWQoKSk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdGNoZWNrUmVnaXN0cmF0aW9uU2VjcmV0VVJMKGhhc2gpIHtcblxuXHRcdGNoZWNrKGhhc2gsIFN0cmluZyk7XG5cblx0XHRyZXR1cm4gaGFzaCA9PT0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX1JlZ2lzdHJhdGlvbkZvcm1fU2VjcmV0VVJMJyk7XG5cdH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRjaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5KHVzZXJuYW1lKSB7XG5cdFx0Y2hlY2sodXNlcm5hbWUsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnc2V0VXNlcm5hbWUnIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IHVzZXIgPSBNZXRlb3IudXNlcigpO1xuXG5cdFx0aWYgKHVzZXIudXNlcm5hbWUgJiYgIVJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19BbGxvd1VzZXJuYW1lQ2hhbmdlJykpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdzZXRVc2VybmFtZScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKHVzZXIudXNlcm5hbWUgPT09IHVzZXJuYW1lKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIFJvY2tldENoYXQuY2hlY2tVc2VybmFtZUF2YWlsYWJpbGl0eSh1c2VybmFtZSk7XG5cdH1cbn0pO1xuXG5Sb2NrZXRDaGF0LlJhdGVMaW1pdGVyLmxpbWl0TWV0aG9kKCdjaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5JywgMSwgMTAwMCwge1xuXHR1c2VySWQoKSB7IHJldHVybiB0cnVlOyB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Y2xlYW5DaGFubmVsSGlzdG9yeSh7cm9vbUlkLCBsYXRlc3QsIG9sZGVzdCwgaW5jbHVzaXZlfSkge1xuXHRcdGNoZWNrKHJvb21JZCwgU3RyaW5nKTtcblx0XHRjaGVjayhsYXRlc3QsIERhdGUpO1xuXHRcdGNoZWNrKG9sZGVzdCwgRGF0ZSk7XG5cdFx0Y2hlY2soaW5jbHVzaXZlLCBCb29sZWFuKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdjbGVhbkNoYW5uZWxIaXN0b3J5JyB9KTtcblx0XHR9XG5cblx0XHRpZiAoIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdjbGVhbi1jaGFubmVsLWhpc3RvcnknKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ2NsZWFuQ2hhbm5lbEhpc3RvcnknIH0pO1xuXHRcdH1cblxuXHRcdGlmIChpbmNsdXNpdmUpIHtcblx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnJlbW92ZSh7XG5cdFx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0XHR0czoge1xuXHRcdFx0XHRcdCRndGU6IG9sZGVzdCxcblx0XHRcdFx0XHQkbHRlOiBsYXRlc3Rcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnJlbW92ZSh7XG5cdFx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0XHR0czoge1xuXHRcdFx0XHRcdCRndDogb2xkZXN0LFxuXHRcdFx0XHRcdCRsdDogbGF0ZXN0XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdGNyZWF0ZUNoYW5uZWwobmFtZSwgbWVtYmVycywgcmVhZE9ubHkgPSBmYWxzZSwgY3VzdG9tRmllbGRzID0ge30pIHtcblx0XHRjaGVjayhuYW1lLCBTdHJpbmcpO1xuXHRcdGNoZWNrKG1lbWJlcnMsIE1hdGNoLk9wdGlvbmFsKFtTdHJpbmddKSk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnY3JlYXRlQ2hhbm5lbCcgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAnY3JlYXRlLWMnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ2NyZWF0ZUNoYW5uZWwnIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LmNyZWF0ZVJvb20oJ2MnLCBuYW1lLCBNZXRlb3IudXNlcigpICYmIE1ldGVvci51c2VyKCkudXNlcm5hbWUsIG1lbWJlcnMsIHJlYWRPbmx5LCB7Y3VzdG9tRmllbGRzfSk7XG5cdH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRjcmVhdGVUb2tlbih1c2VySWQpIHtcblx0XHRpZiAoTWV0ZW9yLnVzZXJJZCgpICE9PSB1c2VySWQgJiYgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICd1c2VyLWdlbmVyYXRlLWFjY2Vzcy10b2tlbicpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1ub3QtYXV0aG9yaXplZCcsICdOb3QgYXV0aG9yaXplZCcsIHsgbWV0aG9kOiAnY3JlYXRlVG9rZW4nIH0pO1xuXHRcdH1cblx0XHRjb25zdCB0b2tlbiA9IEFjY291bnRzLl9nZW5lcmF0ZVN0YW1wZWRMb2dpblRva2VuKCk7XG5cdFx0QWNjb3VudHMuX2luc2VydExvZ2luVG9rZW4odXNlcklkLCB0b2tlbik7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHVzZXJJZCxcblx0XHRcdGF1dGhUb2tlbjogdG9rZW4udG9rZW5cblx0XHR9O1xuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Y3JlYXRlUHJpdmF0ZUdyb3VwKG5hbWUsIG1lbWJlcnMsIHJlYWRPbmx5ID0gZmFsc2UsIGN1c3RvbUZpZWxkcyA9IHt9LCBleHRyYURhdGEgPSB7fSkge1xuXHRcdGNoZWNrKG5hbWUsIFN0cmluZyk7XG5cdFx0Y2hlY2sobWVtYmVycywgTWF0Y2guT3B0aW9uYWwoW1N0cmluZ10pKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdjcmVhdGVQcml2YXRlR3JvdXAnIH0pO1xuXHRcdH1cblxuXHRcdGlmICghUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2NyZWF0ZS1wJykpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdjcmVhdGVQcml2YXRlR3JvdXAnIH0pO1xuXHRcdH1cblxuXHRcdC8vIHZhbGlkYXRlIGV4dHJhIGRhdGEgc2NoZW1hXG5cdFx0Y2hlY2soZXh0cmFEYXRhLCBNYXRjaC5PYmplY3RJbmNsdWRpbmcoe1xuXHRcdFx0dG9rZW5wYXNzOiBNYXRjaC5NYXliZSh7XG5cdFx0XHRcdHJlcXVpcmU6IFN0cmluZyxcblx0XHRcdFx0dG9rZW5zOiBbe1xuXHRcdFx0XHRcdHRva2VuOiBTdHJpbmcsXG5cdFx0XHRcdFx0YmFsYW5jZTogU3RyaW5nXG5cdFx0XHRcdH1dXG5cdFx0XHR9KVxuXHRcdH0pKTtcblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LmNyZWF0ZVJvb20oJ3AnLCBuYW1lLCBNZXRlb3IudXNlcigpICYmIE1ldGVvci51c2VyKCkudXNlcm5hbWUsIG1lbWJlcnMsIHJlYWRPbmx5LCB7Y3VzdG9tRmllbGRzLCAuLi5leHRyYURhdGF9KTtcblx0fVxufSk7XG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbk1ldGVvci5tZXRob2RzKHtcblx0ZGVsZXRlTWVzc2FnZShtZXNzYWdlKSB7XG5cdFx0Y2hlY2sobWVzc2FnZSwgTWF0Y2guT2JqZWN0SW5jbHVkaW5nKHtcblx0XHRcdF9pZDogU3RyaW5nXG5cdFx0fSkpO1xuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywge1xuXHRcdFx0XHRtZXRob2Q6ICdkZWxldGVNZXNzYWdlJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGNvbnN0IG9yaWdpbmFsTWVzc2FnZSA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRPbmVCeUlkKG1lc3NhZ2UuX2lkLCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0dTogMSxcblx0XHRcdFx0cmlkOiAxLFxuXHRcdFx0XHRmaWxlOiAxLFxuXHRcdFx0XHR0czogMVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlmIChvcmlnaW5hbE1lc3NhZ2UgPT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywge1xuXHRcdFx0XHRtZXRob2Q6ICdkZWxldGVNZXNzYWdlJyxcblx0XHRcdFx0YWN0aW9uOiAnRGVsZXRlX21lc3NhZ2UnXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Y29uc3QgZm9yY2VEZWxldGUgPSBSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAnZm9yY2UtZGVsZXRlLW1lc3NhZ2UnLCBvcmlnaW5hbE1lc3NhZ2UucmlkKTtcblx0XHRjb25zdCBoYXNQZXJtaXNzaW9uID0gUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2RlbGV0ZS1tZXNzYWdlJywgb3JpZ2luYWxNZXNzYWdlLnJpZCk7XG5cdFx0Y29uc3QgZGVsZXRlQWxsb3dlZCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX0FsbG93RGVsZXRpbmcnKTtcblx0XHRjb25zdCBkZWxldGVPd24gPSBvcmlnaW5hbE1lc3NhZ2UgJiYgb3JpZ2luYWxNZXNzYWdlLnUgJiYgb3JpZ2luYWxNZXNzYWdlLnUuX2lkID09PSBNZXRlb3IudXNlcklkKCk7XG5cdFx0aWYgKCEoaGFzUGVybWlzc2lvbiB8fCAoZGVsZXRlQWxsb3dlZCAmJiBkZWxldGVPd24pKSAmJiAhKGZvcmNlRGVsZXRlKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywge1xuXHRcdFx0XHRtZXRob2Q6ICdkZWxldGVNZXNzYWdlJyxcblx0XHRcdFx0YWN0aW9uOiAnRGVsZXRlX21lc3NhZ2UnXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Y29uc3QgYmxvY2tEZWxldGVJbk1pbnV0ZXMgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9BbGxvd0RlbGV0aW5nX0Jsb2NrRGVsZXRlSW5NaW51dGVzJyk7XG5cdFx0aWYgKGJsb2NrRGVsZXRlSW5NaW51dGVzICE9IG51bGwgJiYgYmxvY2tEZWxldGVJbk1pbnV0ZXMgIT09IDAgJiYgIWZvcmNlRGVsZXRlKSB7XG5cdFx0XHRpZiAob3JpZ2luYWxNZXNzYWdlLnRzID09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgbXNnVHMgPSBtb21lbnQob3JpZ2luYWxNZXNzYWdlLnRzKTtcblx0XHRcdGlmIChtc2dUcyA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGN1cnJlbnRUc0RpZmYgPSBtb21lbnQoKS5kaWZmKG1zZ1RzLCAnbWludXRlcycpO1xuXHRcdFx0aWYgKGN1cnJlbnRUc0RpZmYgPiBibG9ja0RlbGV0ZUluTWludXRlcykge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1tZXNzYWdlLWRlbGV0aW5nLWJsb2NrZWQnLCAnTWVzc2FnZSBkZWxldGluZyBpcyBibG9ja2VkJywge1xuXHRcdFx0XHRcdG1ldGhvZDogJ2RlbGV0ZU1lc3NhZ2UnXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5kZWxldGVNZXNzYWdlKG9yaWdpbmFsTWVzc2FnZSwgTWV0ZW9yLnVzZXIoKSk7XG5cdH1cbn0pO1xuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdGRlbGV0ZVVzZXJPd25BY2NvdW50KHBhc3N3b3JkKSB7XG5cblx0XHRjaGVjayhwYXNzd29yZCwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdkZWxldGVVc2VyT3duQWNjb3VudCcgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQWxsb3dEZWxldGVPd25BY2NvdW50JykpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdkZWxldGVVc2VyT3duQWNjb3VudCcgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdXNlcklkID0gTWV0ZW9yLnVzZXJJZCgpO1xuXHRcdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZCh1c2VySWQpO1xuXG5cdFx0aWYgKCF1c2VyKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdkZWxldGVVc2VyT3duQWNjb3VudCcgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKHVzZXIuc2VydmljZXMgJiYgdXNlci5zZXJ2aWNlcy5wYXNzd29yZCAmJiBzLnRyaW0odXNlci5zZXJ2aWNlcy5wYXNzd29yZC5iY3J5cHQpKSB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBBY2NvdW50cy5fY2hlY2tQYXNzd29yZCh1c2VyLCB7IGRpZ2VzdDogcGFzc3dvcmQsIGFsZ29yaXRobTogJ3NoYS0yNTYnIH0pO1xuXHRcdFx0aWYgKHJlc3VsdC5lcnJvcikge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXBhc3N3b3JkJywgJ0ludmFsaWQgcGFzc3dvcmQnLCB7IG1ldGhvZDogJ2RlbGV0ZVVzZXJPd25BY2NvdW50JyB9KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHVzZXIudXNlcm5hbWUgIT09IHMudHJpbShwYXNzd29yZCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcm5hbWUnLCAnSW52YWxpZCB1c2VybmFtZScsIHsgbWV0aG9kOiAnZGVsZXRlVXNlck93bkFjY291bnQnIH0pO1xuXHRcdH1cblxuXHRcdE1ldGVvci5kZWZlcihmdW5jdGlvbigpIHtcblx0XHRcdFJvY2tldENoYXQuZGVsZXRlVXNlcih1c2VySWQpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn0pO1xuIiwiY29uc3QgRmlsdGVyID0gTnBtLnJlcXVpcmUoJ2JhZC13b3JkcycpO1xuXG5Sb2NrZXRDaGF0LmNhbGxiYWNrcy5hZGQoJ2JlZm9yZVNhdmVNZXNzYWdlJywgZnVuY3Rpb24obWVzc2FnZSkge1xuXG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9BbGxvd0JhZFdvcmRzRmlsdGVyJykpIHtcblx0XHRjb25zdCBiYWRXb3Jkc0xpc3QgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9CYWRXb3Jkc0ZpbHRlckxpc3QnKTtcblx0XHRsZXQgb3B0aW9ucztcblxuXHRcdC8vIEFkZCB3b3JkcyB0byB0aGUgYmxhY2tsaXN0XG5cdFx0aWYgKCEhYmFkV29yZHNMaXN0ICYmIGJhZFdvcmRzTGlzdC5sZW5ndGgpIHtcblx0XHRcdG9wdGlvbnMgPSB7XG5cdFx0XHRcdGxpc3Q6IGJhZFdvcmRzTGlzdC5zcGxpdCgnLCcpXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRjb25zdCBmaWx0ZXIgPSBuZXcgRmlsdGVyKG9wdGlvbnMpO1xuXHRcdG1lc3NhZ2UubXNnID0gZmlsdGVyLmNsZWFuKG1lc3NhZ2UubXNnKTtcblx0fVxuXG5cdHJldHVybiBtZXNzYWdlO1xuXG59LCAxLCAnZmlsdGVyQmFkV29yZHMnKTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5Sb2NrZXRDaGF0LmNhbGxiYWNrcy5hZGQoJ2JlZm9yZVNhdmVNZXNzYWdlJywgZnVuY3Rpb24obWVzc2FnZSkge1xuXHQvLyBUZXN0IGlmIHRoZSBtZXNzYWdlIG1lbnRpb25zIGluY2x1ZGUgQGFsbC5cblx0aWYgKG1lc3NhZ2UubWVudGlvbnMgIT0gbnVsbCAmJlxuXHRcdF8ucGx1Y2sobWVzc2FnZS5tZW50aW9ucywgJ19pZCcpLnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT09ICdhbGwnKSkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHVzZXIgaGFzIHBlcm1pc3Npb25zIHRvIHVzZSBAYWxsIGluIGJvdGggZ2xvYmFsIGFuZCByb29tIHNjb3Blcy5cblx0XHRpZiAoIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihtZXNzYWdlLnUuX2lkLCAnbWVudGlvbi1hbGwnKSAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKG1lc3NhZ2UudS5faWQsICdtZW50aW9uLWFsbCcsIG1lc3NhZ2UucmlkKSkge1xuXG5cdFx0XHQvLyBHZXQgdGhlIGxhbmd1YWdlIG9mIHRoZSB1c2VyIGZvciB0aGUgZXJyb3Igbm90aWZpY2F0aW9uLlxuXHRcdFx0Y29uc3QgbGFuZ3VhZ2UgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZChtZXNzYWdlLnUuX2lkKS5sYW5ndWFnZTtcblx0XHRcdGNvbnN0IGFjdGlvbiA9IFRBUGkxOG4uX18oJ05vdGlmeV9hbGxfaW5fdGhpc19yb29tJywge30sIGxhbmd1YWdlKTtcblxuXHRcdFx0Ly8gQWRkIGEgbm90aWZpY2F0aW9uIHRvIHRoZSBjaGF0LCBpbmZvcm1pbmcgdGhlIHVzZXIgdGhhdCB0aGlzXG5cdFx0XHQvLyBhY3Rpb24gaXMgbm90IGFsbG93ZWQuXG5cdFx0XHRSb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMubm90aWZ5VXNlcihtZXNzYWdlLnUuX2lkLCAnbWVzc2FnZScsIHtcblx0XHRcdFx0X2lkOiBSYW5kb20uaWQoKSxcblx0XHRcdFx0cmlkOiBtZXNzYWdlLnJpZCxcblx0XHRcdFx0dHM6IG5ldyBEYXRlLFxuXHRcdFx0XHRtc2c6IFRBUGkxOG4uX18oJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsIHsgYWN0aW9uIH0sIGxhbmd1YWdlKVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFsc28gdGhyb3cgdG8gc3RvcCBwcm9wYWdhdGlvbiBvZiAnc2VuZE1lc3NhZ2UnLlxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ05vdGlmeSBhbGwgaW4gdGhpcyByb29tIG5vdCBhbGxvd2VkJywge1xuXHRcdFx0XHRtZXRob2Q6ICdmaWx0ZXJBVEFsbFRhZycsXG5cdFx0XHRcdGFjdGlvbjogJ05vdGlmeV9hbGxfaW5fdGhpc19yb29tJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1lc3NhZ2U7XG5cbn0sIDEsICdmaWx0ZXJBVEFsbFRhZycpO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbk1ldGVvci5tZXRob2RzKHtcblx0Z2V0Q2hhbm5lbEhpc3Rvcnkoe3JpZCwgbGF0ZXN0LCBvbGRlc3QsIGluY2x1c2l2ZSwgY291bnQgPSAyMCwgdW5yZWFkc30pIHtcblx0XHRjaGVjayhyaWQsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnZ2V0Q2hhbm5lbEhpc3RvcnknIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IGZyb21Vc2VySWQgPSBNZXRlb3IudXNlcklkKCk7XG5cdFx0Y29uc3Qgcm9vbSA9IE1ldGVvci5jYWxsKCdjYW5BY2Nlc3NSb29tJywgcmlkLCBmcm9tVXNlcklkKTtcblx0XHRpZiAoIXJvb20pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvL01ha2Ugc3VyZSB0aGV5IGNhbiBhY2Nlc3MgdGhlIHJvb21cblx0XHRpZiAocm9vbS50ID09PSAnYycgJiYgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihmcm9tVXNlcklkLCAncHJldmlldy1jLXJvb20nKSAmJiByb29tLnVzZXJuYW1lcy5pbmRleE9mKHJvb20udXNlcm5hbWUpID09PSAtMSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vRW5zdXJlIGxhdGVzdCBpcyBhbHdheXMgZGVmaW5lZC5cblx0XHRpZiAoXy5pc1VuZGVmaW5lZChsYXRlc3QpKSB7XG5cdFx0XHRsYXRlc3QgPSBuZXcgRGF0ZSgpO1xuXHRcdH1cblxuXHRcdC8vVmVyaWZ5IG9sZGVzdCBpcyBhIGRhdGUgaWYgaXQgZXhpc3RzXG5cdFx0aWYgKCFfLmlzVW5kZWZpbmVkKG9sZGVzdCkgJiYgIV8uaXNEYXRlKG9sZGVzdCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtZGF0ZScsICdJbnZhbGlkIGRhdGUnLCB7IG1ldGhvZDogJ2dldENoYW5uZWxIaXN0b3J5JyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCBvcHRpb25zID0ge1xuXHRcdFx0c29ydDoge1xuXHRcdFx0XHR0czogLTFcblx0XHRcdH0sXG5cdFx0XHRsaW1pdDogY291bnRcblx0XHR9O1xuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9TaG93RWRpdGVkU3RhdHVzJykpIHtcblx0XHRcdG9wdGlvbnMuZmllbGRzID0geyAnZWRpdGVkQXQnOiAwIH07XG5cdFx0fVxuXG5cdFx0bGV0IHJlY29yZHMgPSBbXTtcblx0XHRpZiAoXy5pc1VuZGVmaW5lZChvbGRlc3QpICYmIGluY2x1c2l2ZSkge1xuXHRcdFx0cmVjb3JkcyA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXBJbmNsdXNpdmUocmlkLCBsYXRlc3QsIG9wdGlvbnMpLmZldGNoKCk7XG5cdFx0fSBlbHNlIGlmIChfLmlzVW5kZWZpbmVkKG9sZGVzdCkgJiYgIWluY2x1c2l2ZSkge1xuXHRcdFx0cmVjb3JkcyA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXAocmlkLCBsYXRlc3QsIG9wdGlvbnMpLmZldGNoKCk7XG5cdFx0fSBlbHNlIGlmICghXy5pc1VuZGVmaW5lZChvbGRlc3QpICYmIGluY2x1c2l2ZSkge1xuXHRcdFx0cmVjb3JkcyA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRWaXNpYmxlQnlSb29tSWRCZXR3ZWVuVGltZXN0YW1wc0luY2x1c2l2ZShyaWQsIG9sZGVzdCwgbGF0ZXN0LCBvcHRpb25zKS5mZXRjaCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZWNvcmRzID0gUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZFZpc2libGVCeVJvb21JZEJldHdlZW5UaW1lc3RhbXBzKHJpZCwgb2xkZXN0LCBsYXRlc3QsIG9wdGlvbnMpLmZldGNoKCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgVUlfVXNlX1JlYWxfTmFtZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9Vc2VfUmVhbF9OYW1lJykgPT09IHRydWU7XG5cblx0XHRjb25zdCBtZXNzYWdlcyA9IF8ubWFwKHJlY29yZHMsIChtZXNzYWdlKSA9PiB7XG5cdFx0XHRtZXNzYWdlLnN0YXJyZWQgPSBfLmZpbmRXaGVyZShtZXNzYWdlLnN0YXJyZWQsIHsgX2lkOiBmcm9tVXNlcklkIH0pO1xuXHRcdFx0aWYgKG1lc3NhZ2UudSAmJiBtZXNzYWdlLnUuX2lkICYmIFVJX1VzZV9SZWFsX05hbWUpIHtcblx0XHRcdFx0Y29uc3QgdXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeUlkKG1lc3NhZ2UudS5faWQpO1xuXHRcdFx0XHRtZXNzYWdlLnUubmFtZSA9IHVzZXIgJiYgdXNlci5uYW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lc3NhZ2UubWVudGlvbnMgJiYgbWVzc2FnZS5tZW50aW9ucy5sZW5ndGggJiYgVUlfVXNlX1JlYWxfTmFtZSkge1xuXHRcdFx0XHRtZXNzYWdlLm1lbnRpb25zLmZvckVhY2goKG1lbnRpb24pID0+IHtcblx0XHRcdFx0XHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQobWVudGlvbi5faWQpO1xuXHRcdFx0XHRcdG1lbnRpb24ubmFtZSA9IHVzZXIgJiYgdXNlci5uYW1lO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtZXNzYWdlO1xuXHRcdH0pO1xuXG5cdFx0aWYgKHVucmVhZHMpIHtcblx0XHRcdGxldCB1bnJlYWROb3RMb2FkZWQgPSAwO1xuXHRcdFx0bGV0IGZpcnN0VW5yZWFkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIV8uaXNVbmRlZmluZWQob2xkZXN0KSkge1xuXHRcdFx0XHRjb25zdCBmaXJzdE1zZyA9IG1lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdO1xuXHRcdFx0XHRpZiAoIV8uaXNVbmRlZmluZWQoZmlyc3RNc2cpICYmIGZpcnN0TXNnLnRzID4gb2xkZXN0KSB7XG5cdFx0XHRcdFx0Y29uc3QgdW5yZWFkTWVzc2FnZXMgPSBSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5maW5kVmlzaWJsZUJ5Um9vbUlkQmV0d2VlblRpbWVzdGFtcHMocmlkLCBvbGRlc3QsIGZpcnN0TXNnLnRzLCB7IGxpbWl0OiAxLCBzb3J0OiB7IHRzOiAxIH0gfSk7XG5cdFx0XHRcdFx0Zmlyc3RVbnJlYWQgPSB1bnJlYWRNZXNzYWdlcy5mZXRjaCgpWzBdO1xuXHRcdFx0XHRcdHVucmVhZE5vdExvYWRlZCA9IHVucmVhZE1lc3NhZ2VzLmNvdW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0bWVzc2FnZXM6IG1lc3NhZ2VzIHx8IFtdLFxuXHRcdFx0XHRmaXJzdFVucmVhZCxcblx0XHRcdFx0dW5yZWFkTm90TG9hZGVkXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRtZXNzYWdlczogbWVzc2FnZXMgfHwgW11cblx0XHR9O1xuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Z2V0RnVsbFVzZXJEYXRhKHsgZmlsdGVyID0gJycsIGxpbWl0IH0pIHtcblx0XHRjb25zdCByZXN1bHQgPSBSb2NrZXRDaGF0LmdldEZ1bGxVc2VyRGF0YSh7IHVzZXJJZDogTWV0ZW9yLnVzZXJJZCgpLCBmaWx0ZXIsIGxpbWl0IH0pO1xuXG5cdFx0aWYgKCFyZXN1bHQpIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdC5mZXRjaCgpO1xuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Z2V0Um9vbUpvaW5Db2RlKHJpZCkge1xuXHRcdGNoZWNrKHJpZCwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdnZXRKb2luQ29kZScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAndmlldy1qb2luLWNvZGUnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWF1dGhvcml6ZWQnLCAnTm90IGF1dGhvcml6ZWQnLCB7IG1ldGhvZDogJ2dldEpvaW5Db2RlJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCBbIHJvb20gXSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRCeUlkKHJpZCkuZmV0Y2goKTtcblxuXHRcdHJldHVybiByb29tICYmIHJvb20uam9pbkNvZGU7XG5cdH1cbn0pO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbk1ldGVvci5tZXRob2RzKHtcblx0Z2V0Um9vbVJvbGVzKHJpZCkge1xuXHRcdGNoZWNrKHJpZCwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpICYmIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19BbGxvd0Fub255bW91c1JlYWQnKSA9PT0gZmFsc2UpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2dldFJvb21Sb2xlcycgfSk7XG5cdFx0fVxuXG5cdFx0Y2hlY2socmlkLCBTdHJpbmcpO1xuXG5cdFx0Y29uc3Qgb3B0aW9ucyA9IHtcblx0XHRcdHNvcnQ6IHtcblx0XHRcdFx0J3UudXNlcm5hbWUnOiAxXG5cdFx0XHR9LFxuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdHJpZDogMSxcblx0XHRcdFx0dTogMSxcblx0XHRcdFx0cm9sZXM6IDFcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3QgVUlfVXNlX1JlYWxfTmFtZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9Vc2VfUmVhbF9OYW1lJykgPT09IHRydWU7XG5cblx0XHRjb25zdCByb2xlcyA9IFJvY2tldENoYXQubW9kZWxzLlJvbGVzLmZpbmQoeyBzY29wZTogJ1N1YnNjcmlwdGlvbnMnLCBkZXNjcmlwdGlvbjogeyAkZXhpc3RzOiAxLCAkbmU6ICcnIH0gfSkuZmV0Y2goKTtcblx0XHRjb25zdCBzdWJzY3JpcHRpb25zID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kQnlSb29tSWRBbmRSb2xlcyhyaWQsIF8ucGx1Y2socm9sZXMsICdfaWQnKSwgb3B0aW9ucykuZmV0Y2goKTtcblxuXHRcdGlmICghVUlfVXNlX1JlYWxfTmFtZSkge1xuXHRcdFx0cmV0dXJuIHN1YnNjcmlwdGlvbnM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBzdWJzY3JpcHRpb25zLm1hcChzdWJzY3JpcHRpb24gPT4ge1xuXHRcdFx0XHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQoc3Vic2NyaXB0aW9uLnUuX2lkKTtcblx0XHRcdFx0c3Vic2NyaXB0aW9uLnUubmFtZSA9IHVzZXIgJiYgdXNlci5uYW1lO1xuXHRcdFx0XHRyZXR1cm4gc3Vic2NyaXB0aW9uO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Z2V0U2VydmVySW5mbygpIHtcblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5JbmZvO1xuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Z2V0U2luZ2xlTWVzc2FnZShtc2dJZCkge1xuXHRcdGNoZWNrKG1zZ0lkLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2dldFNpbmdsZU1lc3NhZ2UnIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IG1zZyA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRPbmVCeUlkKG1zZ0lkKTtcblxuXHRcdGlmICghbXNnICYmICFtc2cucmlkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdE1ldGVvci5jYWxsKCdjYW5BY2Nlc3NSb29tJywgbXNnLnJpZCwgTWV0ZW9yLnVzZXJJZCgpKTtcblxuXHRcdHJldHVybiBtc2c7XG5cdH1cbn0pO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbk1ldGVvci5tZXRob2RzKHtcblx0Z2V0VXNlclJvbGVzKCkge1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2dldFVzZXJSb2xlcycgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3B0aW9ucyA9IHtcblx0XHRcdHNvcnQ6IHtcblx0XHRcdFx0J3VzZXJuYW1lJzogMVxuXHRcdFx0fSxcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHR1c2VybmFtZTogMSxcblx0XHRcdFx0cm9sZXM6IDFcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y29uc3Qgcm9sZXMgPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb2xlcy5maW5kKHsgc2NvcGU6ICdVc2VycycsIGRlc2NyaXB0aW9uOiB7ICRleGlzdHM6IDEsICRuZTogJycgfSB9KS5mZXRjaCgpO1xuXHRcdGNvbnN0IHJvbGVJZHMgPSBfLnBsdWNrKHJvbGVzLCAnX2lkJyk7XG5cblx0XHQvLyBTZWN1cml0eSBpc3N1ZTogd2Ugc2hvdWxkIG5vdCBzZW5kIGFsbCB1c2VyJ3Mgcm9sZXMgdG8gYWxsIGNsaWVudHMsIG9ubHkgdGhlICdwdWJsaWMnIHJvbGVzXG5cdFx0Ly8gV2UgbXVzdCByZW1vdmUgYWxsIHJvbGVzIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIHRoZSBxdWVyeSBmcm9tIHRoZSByZXR1cm5lZCB1c2Vyc1xuXHRcdGNvbnN0IHVzZXJzID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZFVzZXJzSW5Sb2xlcyhyb2xlSWRzLCBudWxsLCBvcHRpb25zKS5mZXRjaCgpO1xuXHRcdGZvciAoY29uc3QgdXNlciBvZiB1c2Vycykge1xuXHRcdFx0dXNlci5yb2xlcyA9IF8uaW50ZXJzZWN0aW9uKHVzZXIucm9sZXMsIHJvbGVJZHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdXNlcnM7XG5cdH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRpbnNlcnRPclVwZGF0ZVVzZXIodXNlckRhdGEpIHtcblxuXHRcdGNoZWNrKHVzZXJEYXRhLCBPYmplY3QpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2luc2VydE9yVXBkYXRlVXNlcicgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJvY2tldENoYXQuc2F2ZVVzZXIoTWV0ZW9yLnVzZXJJZCgpLCB1c2VyRGF0YSk7XG5cdH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRqb2luRGVmYXVsdENoYW5uZWxzKHNpbGVuY2VkKSB7XG5cdFx0Y2hlY2soc2lsZW5jZWQsIE1hdGNoLk9wdGlvbmFsKEJvb2xlYW4pKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdqb2luRGVmYXVsdENoYW5uZWxzJyB9KTtcblx0XHR9XG5cblx0XHR0aGlzLnVuYmxvY2soKTtcblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5hZGRVc2VyVG9EZWZhdWx0Q2hhbm5lbHMoTWV0ZW9yLnVzZXIoKSwgc2lsZW5jZWQpO1xuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0am9pblJvb20ocmlkLCBjb2RlKSB7XG5cdFx0Y2hlY2socmlkLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2pvaW5Sb29tJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCByb29tID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQocmlkKTtcblxuXHRcdGlmICghcm9vbSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1yb29tJywgJ0ludmFsaWQgcm9vbScsIHsgbWV0aG9kOiAnam9pblJvb20nIH0pO1xuXHRcdH1cblxuXHRcdC8vIFRPRE8gd2Ugc2hvdWxkIGhhdmUgYSAnYmVmb3JlSm9pblJvb20nIGNhbGwgYmFjayBzbyBleHRlcm5hbCBzZXJ2aWNlcyBjYW4gZG8gdGhlaXIgb3duIHZhbGlkYXRpb25zXG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2VyKCk7XG5cdFx0aWYgKHJvb20udG9rZW5wYXNzICYmIHVzZXIgJiYgdXNlci5zZXJ2aWNlcyAmJiB1c2VyLnNlcnZpY2VzLnRva2VucGFzcykge1xuXHRcdFx0Y29uc3QgYmFsYW5jZXMgPSBSb2NrZXRDaGF0LnVwZGF0ZVVzZXJUb2tlbnBhc3NCYWxhbmNlcyh1c2VyKTtcblxuXHRcdFx0aWYgKCFSb2NrZXRDaGF0LlRva2VucGFzcy52YWxpZGF0ZUFjY2Vzcyhyb29tLnRva2VucGFzcywgYmFsYW5jZXMpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ1Rva2VuIHJlcXVpcmVkJywgeyBtZXRob2Q6ICdqb2luUm9vbScgfSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICgocm9vbS50ICE9PSAnYycpIHx8IChSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAndmlldy1jLXJvb20nKSAhPT0gdHJ1ZSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ2pvaW5Sb29tJyB9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKChyb29tLmpvaW5Db2RlUmVxdWlyZWQgPT09IHRydWUpICYmIChjb2RlICE9PSByb29tLmpvaW5Db2RlKSAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2pvaW4td2l0aG91dC1qb2luLWNvZGUnKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1jb2RlLWludmFsaWQnLCAnSW52YWxpZCBSb29tIFBhc3N3b3JkJywgeyBtZXRob2Q6ICdqb2luUm9vbScgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJvY2tldENoYXQuYWRkVXNlclRvUm9vbShyaWQsIHVzZXIpO1xuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0bGVhdmVSb29tKHJpZCkge1xuXG5cdFx0Y2hlY2socmlkLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2xlYXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0dGhpcy51bmJsb2NrKCk7XG5cblx0XHRjb25zdCByb29tID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQocmlkKTtcblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXIoKTtcblxuXHRcdGlmIChyb29tLnQgPT09ICdkJykge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ2xlYXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFBcnJheS5mcm9tKHJvb20udXNlcm5hbWVzIHx8IFtdKS5pbmNsdWRlcyh1c2VyLnVzZXJuYW1lKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItdXNlci1ub3QtaW4tcm9vbScsICdZb3UgYXJlIG5vdCBpbiB0aGlzIHJvb20nLCB7IG1ldGhvZDogJ2xlYXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdXNlciBpcyByb29tIG93bmVyLCBjaGVjayBpZiB0aGVyZSBhcmUgb3RoZXIgb3duZXJzLiBJZiB0aGVyZSBpc24ndCBhbnlvbmUgZWxzZSwgd2FybiB1c2VyIHRvIHNldCBhIG5ldyBvd25lci5cblx0XHRpZiAoUm9ja2V0Q2hhdC5hdXRoei5oYXNSb2xlKHVzZXIuX2lkLCAnb3duZXInLCByb29tLl9pZCkpIHtcblx0XHRcdGNvbnN0IG51bU93bmVycyA9IFJvY2tldENoYXQuYXV0aHouZ2V0VXNlcnNJblJvbGUoJ293bmVyJywgcm9vbS5faWQpLmZldGNoKCkubGVuZ3RoO1xuXHRcdFx0aWYgKG51bU93bmVycyA9PT0gMSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci15b3UtYXJlLWxhc3Qtb3duZXInLCAnWW91IGFyZSB0aGUgbGFzdCBvd25lci4gUGxlYXNlIHNldCBuZXcgb3duZXIgYmVmb3JlIGxlYXZpbmcgdGhlIHJvb20uJywgeyBtZXRob2Q6ICdsZWF2ZVJvb20nIH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LnJlbW92ZVVzZXJGcm9tUm9vbShyaWQsIE1ldGVvci51c2VyKCkpO1xuXHR9XG59KTtcbiIsImltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHRyZW1vdmVPQXV0aFNlcnZpY2UobmFtZSkge1xuXG5cdFx0Y2hlY2sobmFtZSwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdyZW1vdmVPQXV0aFNlcnZpY2UnIH0pO1xuXHRcdH1cblxuXHRcdGlmIChSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAnYWRkLW9hdXRoLXNlcnZpY2UnKSAhPT0gdHJ1ZSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3JlbW92ZU9BdXRoU2VydmljZScgfSk7XG5cdFx0fVxuXG5cdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtejAtOV9dL2csICcnKTtcblx0XHRuYW1lID0gcy5jYXBpdGFsaXplKG5hbWUpO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MucmVtb3ZlQnlJZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfWApO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MucmVtb3ZlQnlJZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS11cmxgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tdG9rZW5fcGF0aGApO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MucmVtb3ZlQnlJZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1pZGVudGl0eV9wYXRoYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWF1dGhvcml6ZV9wYXRoYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXNjb3BlYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXRva2VuX3NlbnRfdmlhYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWlkZW50aXR5X3Rva2VuX3NlbnRfdmlhYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWlkYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXNlY3JldGApO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MucmVtb3ZlQnlJZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1idXR0b25fbGFiZWxfdGV4dGApO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MucmVtb3ZlQnlJZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1idXR0b25fbGFiZWxfY29sb3JgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tYnV0dG9uX2NvbG9yYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWxvZ2luX3N0eWxlYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXVzZXJuYW1lX2ZpZWxkYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LW1lcmdlX3VzZXJzYCk7XG5cdH1cbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRyZXN0YXJ0X3NlcnZlcigpIHtcblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAncmVzdGFydF9zZXJ2ZXInIH0pO1xuXHRcdH1cblxuXHRcdGlmIChSb2NrZXRDaGF0LmF1dGh6Lmhhc1JvbGUoTWV0ZW9yLnVzZXJJZCgpLCAnYWRtaW4nKSAhPT0gdHJ1ZSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3Jlc3RhcnRfc2VydmVyJyB9KTtcblx0XHR9XG5cblx0XHRNZXRlb3Iuc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRNZXRlb3Iuc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUud2FybignQ2FsbCB0byBwcm9jZXNzLmV4aXQoKSB0aW1lZCBvdXQsIGFib3J0aW5nLicpO1xuXHRcdFx0XHRwcm9jZXNzLmFib3J0KCk7XG5cdFx0XHR9LCAxMDAwKTtcblx0XHRcdHByb2Nlc3MuZXhpdCgxKTtcblx0XHR9LCAxMDAwKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRtZXNzYWdlOiAnVGhlX3NlcnZlcl93aWxsX3Jlc3RhcnRfaW5fc19zZWNvbmRzJyxcblx0XHRcdHBhcmFtczogWzJdXG5cdFx0fTtcblx0fVxufSk7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHQncm9ib3QubW9kZWxDYWxsJyhtb2RlbCwgbWV0aG9kLCBhcmdzKSB7XG5cdFx0Y2hlY2sobW9kZWwsIFN0cmluZyk7XG5cdFx0Y2hlY2sobWV0aG9kLCBTdHJpbmcpO1xuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywge1xuXHRcdFx0XHRtZXRob2Q6ICdyb2JvdC5tb2RlbENhbGwnXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKCFSb2NrZXRDaGF0LmF1dGh6Lmhhc1JvbGUoTWV0ZW9yLnVzZXJJZCgpLCAncm9ib3QnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3JvYm90Lm1vZGVsQ2FsbCdcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRjb25zdCBtID0gUm9ja2V0Q2hhdC5tb2RlbHNbbW9kZWxdO1xuXG5cdFx0aWYgKCFtIHx8ICFfLmlzRnVuY3Rpb24obVttZXRob2RdKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1tZXRob2QnLCAnSW52YWxpZCBtZXRob2QnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3JvYm90Lm1vZGVsQ2FsbCdcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRjb25zdCBjdXJzb3IgPSBSb2NrZXRDaGF0Lm1vZGVsc1ttb2RlbF1bbWV0aG9kXS5hcHBseShSb2NrZXRDaGF0Lm1vZGVsc1ttb2RlbF0sIGFyZ3MpO1xuXHRcdHJldHVybiBjdXJzb3IgJiYgY3Vyc29yLmZldGNoID8gY3Vyc29yLmZldGNoKCkgOiBjdXJzb3I7XG5cdH1cbn0pO1xuIiwiLyogZXNsaW50IG5ldy1jYXA6IDAgKi9cblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHRzYXZlU2V0dGluZyhfaWQsIHZhbHVlLCBlZGl0b3IpIHtcblx0XHRpZiAoTWV0ZW9yLnVzZXJJZCgpID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnRWRpdGluZyBzZXR0aW5ncyBpcyBub3QgYWxsb3dlZCcsIHtcblx0XHRcdFx0bWV0aG9kOiAnc2F2ZVNldHRpbmcnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdlZGl0LXByaXZpbGVnZWQtc2V0dGluZycpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnRWRpdGluZyBzZXR0aW5ncyBpcyBub3QgYWxsb3dlZCcsIHtcblx0XHRcdFx0bWV0aG9kOiAnc2F2ZVNldHRpbmcnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvL1ZlcmlmeSB0aGUgX2lkIHBhc3NlZCBpbiBpcyBhIHN0cmluZy5cblx0XHRjaGVjayhfaWQsIFN0cmluZyk7XG5cblx0XHRjb25zdCBzZXR0aW5nID0gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZGIuZmluZE9uZUJ5SWQoX2lkKTtcblxuXHRcdC8vVmVyaWZ5IHRoZSB2YWx1ZSBpcyB3aGF0IGl0IHNob3VsZCBiZVxuXHRcdHN3aXRjaCAoc2V0dGluZy50eXBlKSB7XG5cdFx0XHRjYXNlICdyb29tUGljayc6XG5cdFx0XHRcdGNoZWNrKHZhbHVlLCBNYXRjaC5PbmVPZihbT2JqZWN0XSwgJycpKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdib29sZWFuJzpcblx0XHRcdFx0Y2hlY2sodmFsdWUsIEJvb2xlYW4pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2ludCc6XG5cdFx0XHRcdGNoZWNrKHZhbHVlLCBOdW1iZXIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGNoZWNrKHZhbHVlLCBTdHJpbmcpO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnVwZGF0ZUJ5SWQoX2lkLCB2YWx1ZSwgZWRpdG9yKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSk7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHRzZW5kSW52aXRhdGlvbkVtYWlsKGVtYWlscykge1xuXHRcdGNoZWNrKGVtYWlscywgW1N0cmluZ10pO1xuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywge1xuXHRcdFx0XHRtZXRob2Q6ICdzZW5kSW52aXRhdGlvbkVtYWlsJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGlmICghUm9ja2V0Q2hhdC5hdXRoei5oYXNSb2xlKE1ldGVvci51c2VySWQoKSwgJ2FkbWluJykpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywge1xuXHRcdFx0XHRtZXRob2Q6ICdzZW5kSW52aXRhdGlvbkVtYWlsJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGNvbnN0IHJmY01haWxQYXR0ZXJuID0gL15bYS16QS1aMC05LiEjJCUmJyorXFwvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykqJC87XG5cdFx0Y29uc3QgdmFsaWRFbWFpbHMgPSBfLmNvbXBhY3QoXy5tYXAoZW1haWxzLCBmdW5jdGlvbihlbWFpbCkge1xuXHRcdFx0aWYgKHJmY01haWxQYXR0ZXJuLnRlc3QoZW1haWwpKSB7XG5cdFx0XHRcdHJldHVybiBlbWFpbDtcblx0XHRcdH1cblx0XHR9KSk7XG5cdFx0Y29uc3QgaGVhZGVyID0gUm9ja2V0Q2hhdC5wbGFjZWhvbGRlcnMucmVwbGFjZShSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRW1haWxfSGVhZGVyJykgfHwgJycpO1xuXHRcdGNvbnN0IGZvb3RlciA9IFJvY2tldENoYXQucGxhY2Vob2xkZXJzLnJlcGxhY2UoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0VtYWlsX0Zvb3RlcicpIHx8ICcnKTtcblx0XHRsZXQgaHRtbDtcblx0XHRsZXQgc3ViamVjdDtcblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXIoKTtcblx0XHRjb25zdCBsbmcgPSB1c2VyLmxhbmd1YWdlIHx8IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdsYW5ndWFnZScpIHx8ICdlbic7XG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdJbnZpdGF0aW9uX0N1c3RvbWl6ZWQnKSkge1xuXHRcdFx0c3ViamVjdCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdJbnZpdGF0aW9uX1N1YmplY3QnKTtcblx0XHRcdGh0bWwgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnSW52aXRhdGlvbl9IVE1MJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN1YmplY3QgPSBUQVBpMThuLl9fKCdJbnZpdGF0aW9uX1N1YmplY3RfRGVmYXVsdCcsIHtcblx0XHRcdFx0bG5nXG5cdFx0XHR9KTtcblx0XHRcdGh0bWwgPSBUQVBpMThuLl9fKCdJbnZpdGF0aW9uX0hUTUxfRGVmYXVsdCcsIHtcblx0XHRcdFx0bG5nXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0c3ViamVjdCA9IFJvY2tldENoYXQucGxhY2Vob2xkZXJzLnJlcGxhY2Uoc3ViamVjdCk7XG5cdFx0dmFsaWRFbWFpbHMuZm9yRWFjaChlbWFpbCA9PiB7XG5cdFx0XHR0aGlzLnVuYmxvY2soKTtcblx0XHRcdGh0bWwgPSBSb2NrZXRDaGF0LnBsYWNlaG9sZGVycy5yZXBsYWNlKGh0bWwsIHtcblx0XHRcdFx0ZW1haWxcblx0XHRcdH0pO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0RW1haWwuc2VuZCh7XG5cdFx0XHRcdFx0dG86IGVtYWlsLFxuXHRcdFx0XHRcdGZyb206IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdGcm9tX0VtYWlsJyksXG5cdFx0XHRcdFx0c3ViamVjdCxcblx0XHRcdFx0XHRodG1sOiBoZWFkZXIgKyBodG1sICsgZm9vdGVyXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBjYXRjaCAoe21lc3NhZ2V9KSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWVtYWlsLXNlbmQtZmFpbGVkJywgYEVycm9yIHRyeWluZyB0byBzZW5kIGVtYWlsOiAkeyBtZXNzYWdlIH1gLCB7XG5cdFx0XHRcdFx0bWV0aG9kOiAnc2VuZEludml0YXRpb25FbWFpbCcsXG5cdFx0XHRcdFx0bWVzc2FnZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gdmFsaWRFbWFpbHM7XG5cdH1cbn0pO1xuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcblx0XHRjaGVjayhtZXNzYWdlLCBPYmplY3QpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3NlbmRNZXNzYWdlJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKG1lc3NhZ2UudHMpIHtcblx0XHRcdGNvbnN0IHRzRGlmZiA9IE1hdGguYWJzKG1vbWVudChtZXNzYWdlLnRzKS5kaWZmKCkpO1xuXHRcdFx0aWYgKHRzRGlmZiA+IDYwMDAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW1lc3NhZ2UtdHMtb3V0LW9mLXN5bmMnLCAnTWVzc2FnZSB0aW1lc3RhbXAgaXMgb3V0IG9mIHN5bmMnLCB7XG5cdFx0XHRcdFx0bWV0aG9kOiAnc2VuZE1lc3NhZ2UnLFxuXHRcdFx0XHRcdG1lc3NhZ2VfdHM6IG1lc3NhZ2UudHMsXG5cdFx0XHRcdFx0c2VydmVyX3RzOiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSBpZiAodHNEaWZmID4gMTAwMDApIHtcblx0XHRcdFx0bWVzc2FnZS50cyA9IG5ldyBEYXRlKCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lc3NhZ2UudHMgPSBuZXcgRGF0ZSgpO1xuXHRcdH1cblxuXHRcdGlmIChtZXNzYWdlLm1zZyAmJiBtZXNzYWdlLm1zZy5sZW5ndGggPiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9NYXhBbGxvd2VkU2l6ZScpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1tZXNzYWdlLXNpemUtZXhjZWVkZWQnLCAnTWVzc2FnZSBzaXplIGV4Y2VlZHMgTWVzc2FnZV9NYXhBbGxvd2VkU2l6ZScsIHtcblx0XHRcdFx0bWV0aG9kOiAnc2VuZE1lc3NhZ2UnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQoTWV0ZW9yLnVzZXJJZCgpLCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0dXNlcm5hbWU6IDEsXG5cdFx0XHRcdG5hbWU6IDFcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGNvbnN0IHJvb20gPSBNZXRlb3IuY2FsbCgnY2FuQWNjZXNzUm9vbScsIG1lc3NhZ2UucmlkLCB1c2VyLl9pZCk7XG5cdFx0aWYgKCFyb29tKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lQnlSb29tSWRBbmRVc2VySWQobWVzc2FnZS5yaWQsIE1ldGVvci51c2VySWQoKSk7XG5cdFx0aWYgKHN1YnNjcmlwdGlvbiAmJiBzdWJzY3JpcHRpb24uYmxvY2tlZCB8fCBzdWJzY3JpcHRpb24uYmxvY2tlcikge1xuXHRcdFx0Um9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeVVzZXIoTWV0ZW9yLnVzZXJJZCgpLCAnbWVzc2FnZScsIHtcblx0XHRcdFx0X2lkOiBSYW5kb20uaWQoKSxcblx0XHRcdFx0cmlkOiByb29tLl9pZCxcblx0XHRcdFx0dHM6IG5ldyBEYXRlLFxuXHRcdFx0XHRtc2c6IFRBUGkxOG4uX18oJ3Jvb21faXNfYmxvY2tlZCcsIHt9LCB1c2VyLmxhbmd1YWdlKVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKChyb29tLm11dGVkfHxbXSkuaW5jbHVkZXModXNlci51c2VybmFtZSkpIHtcblx0XHRcdFJvY2tldENoYXQuTm90aWZpY2F0aW9ucy5ub3RpZnlVc2VyKE1ldGVvci51c2VySWQoKSwgJ21lc3NhZ2UnLCB7XG5cdFx0XHRcdF9pZDogUmFuZG9tLmlkKCksXG5cdFx0XHRcdHJpZDogcm9vbS5faWQsXG5cdFx0XHRcdHRzOiBuZXcgRGF0ZSxcblx0XHRcdFx0bXNnOiBUQVBpMThuLl9fKCdZb3VfaGF2ZV9iZWVuX211dGVkJywge30sIHVzZXIubGFuZ3VhZ2UpXG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAobWVzc2FnZS5hbGlhcyA9PSBudWxsICYmIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX1NldE5hbWVUb0FsaWFzRW5hYmxlZCcpKSB7XG5cdFx0XHRtZXNzYWdlLmFsaWFzID0gdXNlci5uYW1lO1xuXHRcdH1cblxuXHRcdGlmIChNZXRlb3Iuc2V0dGluZ3NbJ3B1YmxpYyddLnNhbmRzdG9ybSkge1xuXHRcdFx0bWVzc2FnZS5zYW5kc3Rvcm1TZXNzaW9uSWQgPSB0aGlzLmNvbm5lY3Rpb24uc2FuZHN0b3JtU2Vzc2lvbklkKCk7XG5cdFx0fVxuXG5cdFx0Um9ja2V0Q2hhdC5tZXRyaWNzLm1lc3NhZ2VzU2VudC5pbmMoKTsgLy8gVE9ETyBUaGlzIGxpbmUgbmVlZHMgdG8gYmUgbW92ZWQgdG8gaXQncyBwcm9wZXIgcGxhY2UuIFNlZSB0aGUgY29tbWVudHMgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2NrZXRDaGF0L1JvY2tldC5DaGF0L3B1bGwvNTczNlxuXHRcdHJldHVybiBSb2NrZXRDaGF0LnNlbmRNZXNzYWdlKHVzZXIsIG1lc3NhZ2UsIHJvb20pO1xuXHR9XG59KTtcbi8vIExpbWl0IGEgdXNlciwgd2hvIGRvZXMgbm90IGhhdmUgdGhlIFwiYm90XCIgcm9sZSwgdG8gc2VuZGluZyA1IG1zZ3Mvc2Vjb25kXG5Sb2NrZXRDaGF0LlJhdGVMaW1pdGVyLmxpbWl0TWV0aG9kKCdzZW5kTWVzc2FnZScsIDUsIDEwMDAsIHtcblx0dXNlcklkKHVzZXJJZCkge1xuXHRcdHJldHVybiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ3NlbmQtbWFueS1tZXNzYWdlcycpO1xuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0c2VuZFNNVFBUZXN0RW1haWwoKSB7XG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3NlbmRTTVRQVGVzdEVtYWlsJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGNvbnN0IHVzZXIgPSBNZXRlb3IudXNlcigpO1xuXHRcdGlmICghdXNlci5lbWFpbHMgJiYgIXVzZXIuZW1haWxzWzBdICYmIHVzZXIuZW1haWxzWzBdLmFkZHJlc3MpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtZW1haWwnLCAnSW52YWxpZCBlbWFpbCcsIHtcblx0XHRcdFx0bWV0aG9kOiAnc2VuZFNNVFBUZXN0RW1haWwnXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0dGhpcy51bmJsb2NrKCk7XG5cdFx0Y29uc3QgaGVhZGVyID0gUm9ja2V0Q2hhdC5wbGFjZWhvbGRlcnMucmVwbGFjZShSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRW1haWxfSGVhZGVyJykgfHwgJycpO1xuXHRcdGNvbnN0IGZvb3RlciA9IFJvY2tldENoYXQucGxhY2Vob2xkZXJzLnJlcGxhY2UoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0VtYWlsX0Zvb3RlcicpIHx8ICcnKTtcblx0XHRjb25zb2xlLmxvZyhgU2VuZGluZyB0ZXN0IGVtYWlsIHRvICR7IHVzZXIuZW1haWxzWzBdLmFkZHJlc3MgfWApO1xuXHRcdHRyeSB7XG5cdFx0XHRFbWFpbC5zZW5kKHtcblx0XHRcdFx0dG86IHVzZXIuZW1haWxzWzBdLmFkZHJlc3MsXG5cdFx0XHRcdGZyb206IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdGcm9tX0VtYWlsJyksXG5cdFx0XHRcdHN1YmplY3Q6ICdTTVRQIFRlc3QgRW1haWwnLFxuXHRcdFx0XHRodG1sOiBgJHsgaGVhZGVyIH08cD5Zb3UgaGF2ZSBzdWNjZXNzZnVsbHkgc2VudCBhbiBlbWFpbDwvcD4keyBmb290ZXIgfWBcblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKHttZXNzYWdlfSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItZW1haWwtc2VuZC1mYWlsZWQnLCBgRXJyb3IgdHJ5aW5nIHRvIHNlbmQgZW1haWw6ICR7IG1lc3NhZ2UgfWAsIHtcblx0XHRcdFx0bWV0aG9kOiAnc2VuZFNNVFBUZXN0RW1haWwnLFxuXHRcdFx0XHRtZXNzYWdlXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdG1lc3NhZ2U6ICdZb3VyX21haWxfd2FzX3NlbnRfdG9fcycsXG5cdFx0XHRwYXJhbXM6IFt1c2VyLmVtYWlsc1swXS5hZGRyZXNzXVxuXHRcdH07XG5cdH1cbn0pO1xuXG5ERFBSYXRlTGltaXRlci5hZGRSdWxlKHtcblx0dHlwZTogJ21ldGhvZCcsXG5cdG5hbWU6ICdzZW5kU01UUFRlc3RFbWFpbCcsXG5cdHVzZXJJZCgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSwgMSwgMTAwMCk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdHNldEFkbWluU3RhdHVzKHVzZXJJZCwgYWRtaW4pIHtcblxuXHRcdGNoZWNrKHVzZXJJZCwgU3RyaW5nKTtcblx0XHRjaGVjayhhZG1pbiwgTWF0Y2guT3B0aW9uYWwoQm9vbGVhbikpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ3NldEFkbWluU3RhdHVzJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2Fzc2lnbi1hZG1pbi1yb2xlJykgIT09IHRydWUpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdzZXRBZG1pblN0YXR1cycgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2Vycy5maW5kT25lKHsgX2lkOiB1c2VySWQgfSwgeyBmaWVsZHM6IHsgdXNlcm5hbWU6IDEgfSB9KTtcblxuXHRcdGlmIChhZG1pbikge1xuXHRcdFx0cmV0dXJuIE1ldGVvci5jYWxsKCdhdXRob3JpemF0aW9uOmFkZFVzZXJUb1JvbGUnLCAnYWRtaW4nLCB1c2VyLnVzZXJuYW1lKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIE1ldGVvci5jYWxsKCdhdXRob3JpemF0aW9uOnJlbW92ZVVzZXJGcm9tUm9sZScsICdhZG1pbicsIHVzZXIudXNlcm5hbWUpO1xuXHRcdH1cblx0fVxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdHNldFJlYWxOYW1lKG5hbWUpIHtcblxuXHRcdGNoZWNrKG5hbWUsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnc2V0UmVhbE5hbWUnIH0pO1xuXHRcdH1cblxuXHRcdGlmICghUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0FsbG93UmVhbE5hbWVDaGFuZ2UnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3NldFJlYWxOYW1lJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoIVJvY2tldENoYXQuc2V0UmVhbE5hbWUoTWV0ZW9yLnVzZXJJZCgpLCBuYW1lKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItY291bGQtbm90LWNoYW5nZS1uYW1lJywgJ0NvdWxkIG5vdCBjaGFuZ2UgbmFtZScsIHsgbWV0aG9kOiAnc2V0UmVhbE5hbWUnIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59KTtcblxuUm9ja2V0Q2hhdC5SYXRlTGltaXRlci5saW1pdE1ldGhvZCgnc2V0UmVhbE5hbWUnLCAxLCAxMDAwLCB7XG5cdHVzZXJJZDogKCkgPT4gdHJ1ZVxufSk7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHRzZXRVc2VybmFtZSh1c2VybmFtZSwgcGFyYW0gPSB7fSkge1xuXHRcdGNvbnN0IHsgam9pbkRlZmF1bHRDaGFubmVsc1NpbGVuY2VkIH0gPSBwYXJhbTtcblx0XHRjaGVjayh1c2VybmFtZSwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdzZXRVc2VybmFtZScgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2VyKCk7XG5cblx0XHRpZiAodXNlci51c2VybmFtZSAmJiAhUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0FsbG93VXNlcm5hbWVDaGFuZ2UnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3NldFVzZXJuYW1lJyB9KTtcblx0XHR9XG5cblx0XHRpZiAodXNlci51c2VybmFtZSA9PT0gdXNlcm5hbWUgfHwgKHVzZXIudXNlcm5hbWUgJiYgdXNlci51c2VybmFtZS50b0xvd2VyQ2FzZSgpID09PSB1c2VybmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuXHRcdFx0cmV0dXJuIHVzZXJuYW1lO1xuXHRcdH1cblxuXHRcdGxldCBuYW1lVmFsaWRhdGlvbjtcblx0XHR0cnkge1xuXHRcdFx0bmFtZVZhbGlkYXRpb24gPSBuZXcgUmVnRXhwKGBeJHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VURjhfTmFtZXNfVmFsaWRhdGlvbicpIH0kYCk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdG5hbWVWYWxpZGF0aW9uID0gbmV3IFJlZ0V4cCgnXlswLTlhLXpBLVotXy5dKyQnKTtcblx0XHR9XG5cblx0XHRpZiAoIW5hbWVWYWxpZGF0aW9uLnRlc3QodXNlcm5hbWUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCd1c2VybmFtZS1pbnZhbGlkJywgYCR7IF8uZXNjYXBlKHVzZXJuYW1lKSB9IGlzIG5vdCBhIHZhbGlkIHVzZXJuYW1lLCB1c2Ugb25seSBsZXR0ZXJzLCBudW1iZXJzLCBkb3RzLCBoeXBoZW5zIGFuZCB1bmRlcnNjb3Jlc2ApO1xuXHRcdH1cblxuXHRcdGlmICghUm9ja2V0Q2hhdC5jaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5KHVzZXJuYW1lKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItZmllbGQtdW5hdmFpbGFibGUnLCBgPHN0cm9uZz4keyBfLmVzY2FwZSh1c2VybmFtZSkgfTwvc3Ryb25nPiBpcyBhbHJlYWR5IGluIHVzZSA6KGAsIHsgbWV0aG9kOiAnc2V0VXNlcm5hbWUnLCBmaWVsZDogdXNlcm5hbWUgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LnNldFVzZXJuYW1lKHVzZXIuX2lkLCB1c2VybmFtZSkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWNvdWxkLW5vdC1jaGFuZ2UtdXNlcm5hbWUnLCAnQ291bGQgbm90IGNoYW5nZSB1c2VybmFtZScsIHsgbWV0aG9kOiAnc2V0VXNlcm5hbWUnIH0pO1xuXHRcdH1cblxuXHRcdGlmICghdXNlci51c2VybmFtZSkge1xuXHRcdFx0TWV0ZW9yLnJ1bkFzVXNlcih1c2VyLl9pZCwgKCkgPT4gTWV0ZW9yLmNhbGwoJ2pvaW5EZWZhdWx0Q2hhbm5lbHMnLCBqb2luRGVmYXVsdENoYW5uZWxzU2lsZW5jZWQpKTtcblx0XHRcdE1ldGVvci5kZWZlcihmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bignYWZ0ZXJDcmVhdGVVc2VyJywgUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQodXNlci5faWQpKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB1c2VybmFtZTtcblx0fVxufSk7XG5cblJvY2tldENoYXQuUmF0ZUxpbWl0ZXIubGltaXRNZXRob2QoJ3NldFVzZXJuYW1lJywgMSwgMTAwMCwge1xuXHR1c2VySWQoKSB7IHJldHVybiB0cnVlOyB9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0c2V0RW1haWwoZW1haWwpIHtcblxuXHRcdGNoZWNrIChlbWFpbCwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdzZXRFbWFpbCcgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2VyKCk7XG5cblx0XHRpZiAoIVJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19BbGxvd0VtYWlsQ2hhbmdlJykpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsICdDaGFuZ2luZyBlbWFpbCBpcyBub3QgYWxsb3dlZCcsIHsgbWV0aG9kOiAnc2V0RW1haWwnLCBhY3Rpb246ICdDaGFuZ2luZ19lbWFpbCcgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKHVzZXIuZW1haWxzICYmIHVzZXIuZW1haWxzWzBdICYmIHVzZXIuZW1haWxzWzBdLmFkZHJlc3MgPT09IGVtYWlsKSB7XG5cdFx0XHRyZXR1cm4gZW1haWw7XG5cdFx0fVxuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LnNldEVtYWlsKHVzZXIuX2lkLCBlbWFpbCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWNvdWxkLW5vdC1jaGFuZ2UtZW1haWwnLCAnQ291bGQgbm90IGNoYW5nZSBlbWFpbCcsIHsgbWV0aG9kOiAnc2V0RW1haWwnIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBlbWFpbDtcblx0fVxufSk7XG5cblJvY2tldENoYXQuUmF0ZUxpbWl0ZXIubGltaXRNZXRob2QoJ3NldEVtYWlsJywgMSwgMTAwMCwge1xuXHR1c2VySWQoLyp1c2VySWQqLykgeyByZXR1cm4gdHJ1ZTsgfVxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdHVuYXJjaGl2ZVJvb20ocmlkKSB7XG5cblx0XHRjaGVjayhyaWQsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAndW5hcmNoaXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKHJpZCk7XG5cblx0XHRpZiAoIXJvb20pIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtcm9vbScsICdJbnZhbGlkIHJvb20nLCB7IG1ldGhvZDogJ3VuYXJjaGl2ZVJvb20nIH0pO1xuXHRcdH1cblxuXHRcdGlmICghUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ3VuYXJjaGl2ZS1yb29tJywgcm9vbS5faWQpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1ub3QtYXV0aG9yaXplZCcsICdOb3QgYXV0aG9yaXplZCcsIHsgbWV0aG9kOiAndW5hcmNoaXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJvY2tldENoYXQudW5hcmNoaXZlUm9vbShyaWQpO1xuXHR9XG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0dW5ibG9ja1VzZXIoe3JpZCwgYmxvY2tlZH0pIHtcblxuXHRcdGNoZWNrKHJpZCwgU3RyaW5nKTtcblx0XHRjaGVjayhibG9ja2VkLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2Jsb2NrVXNlcicgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lQnlSb29tSWRBbmRVc2VySWQocmlkLCBNZXRlb3IudXNlcklkKCkpO1xuXHRcdGNvbnN0IHN1YnNjcmlwdGlvbjIgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChyaWQsIGJsb2NrZWQpO1xuXG5cdFx0aWYgKCFzdWJzY3JpcHRpb24gfHwgIXN1YnNjcmlwdGlvbjIpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtcm9vbScsICdJbnZhbGlkIHJvb20nLCB7IG1ldGhvZDogJ2Jsb2NrVXNlcicgfSk7XG5cdFx0fVxuXG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy51bnNldEJsb2NrZWRCeVJvb21JZChyaWQsIGJsb2NrZWQsIE1ldGVvci51c2VySWQoKSk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSk7XG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbk1ldGVvci5tZXRob2RzKHtcblx0dXBkYXRlTWVzc2FnZShtZXNzYWdlKSB7XG5cblx0XHRjaGVjayhtZXNzYWdlLCBNYXRjaC5PYmplY3RJbmNsdWRpbmcoe19pZDpTdHJpbmd9KSk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAndXBkYXRlTWVzc2FnZScgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3JpZ2luYWxNZXNzYWdlID0gUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZE9uZUJ5SWQobWVzc2FnZS5faWQpO1xuXG5cdFx0aWYgKCFvcmlnaW5hbE1lc3NhZ2UgfHwgIW9yaWdpbmFsTWVzc2FnZS5faWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBoYXNQZXJtaXNzaW9uID0gUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2VkaXQtbWVzc2FnZScsIG1lc3NhZ2UucmlkKTtcblx0XHRjb25zdCBlZGl0QWxsb3dlZCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX0FsbG93RWRpdGluZycpO1xuXHRcdGNvbnN0IGVkaXRPd24gPSBvcmlnaW5hbE1lc3NhZ2UudSAmJiBvcmlnaW5hbE1lc3NhZ2UudS5faWQgPT09IE1ldGVvci51c2VySWQoKTtcblxuXHRcdGlmICghaGFzUGVybWlzc2lvbiAmJiAoIWVkaXRBbGxvd2VkIHx8ICFlZGl0T3duKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ01lc3NhZ2UgZWRpdGluZyBub3QgYWxsb3dlZCcsIHsgbWV0aG9kOiAndXBkYXRlTWVzc2FnZScsIGFjdGlvbjogJ01lc3NhZ2VfZWRpdGluZycgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgYmxvY2tFZGl0SW5NaW51dGVzID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ01lc3NhZ2VfQWxsb3dFZGl0aW5nX0Jsb2NrRWRpdEluTWludXRlcycpO1xuXHRcdGlmIChNYXRjaC50ZXN0KGJsb2NrRWRpdEluTWludXRlcywgTnVtYmVyKSAmJiBibG9ja0VkaXRJbk1pbnV0ZXMgIT09IDApIHtcblx0XHRcdGxldCBjdXJyZW50VHNEaWZmO1xuXHRcdFx0bGV0IG1zZ1RzO1xuXG5cdFx0XHRpZiAoTWF0Y2gudGVzdChvcmlnaW5hbE1lc3NhZ2UudHMsIE51bWJlcikpIHtcblx0XHRcdFx0bXNnVHMgPSBtb21lbnQob3JpZ2luYWxNZXNzYWdlLnRzKTtcblx0XHRcdH1cblx0XHRcdGlmIChtc2dUcykge1xuXHRcdFx0XHRjdXJyZW50VHNEaWZmID0gbW9tZW50KCkuZGlmZihtc2dUcywgJ21pbnV0ZXMnKTtcblx0XHRcdH1cblx0XHRcdGlmIChjdXJyZW50VHNEaWZmID4gYmxvY2tFZGl0SW5NaW51dGVzKSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW1lc3NhZ2UtZWRpdGluZy1ibG9ja2VkJywgJ01lc3NhZ2UgZWRpdGluZyBpcyBibG9ja2VkJywgeyBtZXRob2Q6ICd1cGRhdGVNZXNzYWdlJyB9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJdCBpcyBwb3NzaWJsZSB0byBoYXZlIGFuIGVtcHR5IGFycmF5IGFzIHRoZSBhdHRhY2htZW50cyBwcm9wZXJ0eSwgc28gZW5zdXJlIGJvdGggdGhpbmdzIGV4aXN0XG5cdFx0aWYgKG9yaWdpbmFsTWVzc2FnZS5hdHRhY2htZW50cyAmJiBvcmlnaW5hbE1lc3NhZ2UuYXR0YWNobWVudHMubGVuZ3RoID4gMCAmJiBvcmlnaW5hbE1lc3NhZ2UuYXR0YWNobWVudHNbMF0uZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0bWVzc2FnZS5hdHRhY2htZW50cyA9IG9yaWdpbmFsTWVzc2FnZS5hdHRhY2htZW50cztcblx0XHRcdG1lc3NhZ2UuYXR0YWNobWVudHNbMF0uZGVzY3JpcHRpb24gPSBtZXNzYWdlLm1zZztcblx0XHRcdG1lc3NhZ2UubXNnID0gb3JpZ2luYWxNZXNzYWdlLm1zZztcblx0XHR9XG5cblx0XHRtZXNzYWdlLnUgPSBvcmlnaW5hbE1lc3NhZ2UudTtcblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LnVwZGF0ZU1lc3NhZ2UobWVzc2FnZSwgTWV0ZW9yLnVzZXIoKSk7XG5cdH1cbn0pO1xuIiwiaW1wb3J0IHtcblx0Q2hhbm5lbHNSb29tVHlwZSxcblx0Q29udmVyc2F0aW9uUm9vbVR5cGUsXG5cdERpcmVjdE1lc3NhZ2VSb29tVHlwZSxcblx0RmF2b3JpdGVSb29tVHlwZSxcblx0UHJpdmF0ZVJvb21UeXBlLFxuXHRQdWJsaWNSb29tVHlwZSxcblx0VW5yZWFkUm9vbVR5cGVcbn0gZnJvbSAnLi4vbGliL3Jvb21UeXBlcyc7XG5cblJvY2tldENoYXQucm9vbVR5cGVzLmFkZChuZXcgVW5yZWFkUm9vbVR5cGUoKSk7XG5Sb2NrZXRDaGF0LnJvb21UeXBlcy5hZGQobmV3IEZhdm9yaXRlUm9vbVR5cGUoKSk7XG5Sb2NrZXRDaGF0LnJvb21UeXBlcy5hZGQobmV3IENvbnZlcnNhdGlvblJvb21UeXBlKCkpO1xuUm9ja2V0Q2hhdC5yb29tVHlwZXMuYWRkKG5ldyBDaGFubmVsc1Jvb21UeXBlKCkpO1xuUm9ja2V0Q2hhdC5yb29tVHlwZXMuYWRkKG5ldyBQdWJsaWNSb29tVHlwZSgpKTtcblJvY2tldENoYXQucm9vbVR5cGVzLmFkZChuZXcgUHJpdmF0ZVJvb21UeXBlKCkpO1xuUm9ja2V0Q2hhdC5yb29tVHlwZXMuYWRkKG5ldyBEaXJlY3RNZXNzYWdlUm9vbVR5cGUoKSk7XG4iXX0=
