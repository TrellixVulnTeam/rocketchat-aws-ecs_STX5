{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-csv/info.js","meteor://ðŸ’»app/packages/rocketchat:importer-csv/server/importer.js","meteor://ðŸ’»app/packages/rocketchat:importer-csv/server/adder.js"],"names":["module","export","CsvImporterInfo","ImporterInfo","watch","require","v","constructor","text","href","CsvImporter","Base","ProgressStep","Selection","SelectionChannel","SelectionUser","info","csvParser","Npm","messages","Map","prepare","dataURI","sentContentType","fileName","uriResult","RocketChatFile","dataURIParse","zip","AdmZip","Buffer","image","zipEntries","getEntries","tempChannels","tempUsers","tempMessages","entry","logger","debug","entryName","indexOf","isDirectory","toLowerCase","updateProgress","PREPARING_CHANNELS","parsedChannels","getData","toString","map","c","id","trim","replace","name","creator","isPrivate","members","split","m","PREPARING_USERS","parsedUsers","u","username","email","item","channelName","msgGroupData","get","set","msgs","e","warn","ts","usersId","collection","insert","importRecord","_id","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","channel","messagesMap","entries","getBSONSize","getMaxBSONSize","getBSONSafeArraysFromAnArray","forEach","splitMsg","i","messagesId","error","ERROR","getProgress","selectionUsers","selectionChannels","selectionMessages","count","USER_SELECTION","startImport","importSelection","started","Date","now","user","user_id","do_import","update","$set","channel_id","startedByUserId","Meteor","userId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","Accounts","createUser","password","toUpperCase","call","joinDefaultChannelsSilenced","setName","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","creatorId","roomInfo","rid","cname","keys","push","ch","csvChannel","getChannelFromName","values","msg","getUserFromUsername","IMPORTING_MESSAGES","room","findOneById","fields","usernames","t","timestamps","isNaN","parseInt","suffix","undefined","msgObj","sendMessage","FINISHING","DONE","timeTook","log","getSelection","Importers","add"],"mappings":"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","file":"/packages/rocketchat_importer-csv.js","sourcesContent":["import { ImporterInfo } from 'meteor/rocketchat:importer';\n\nexport class CsvImporterInfo extends ImporterInfo {\n\tconstructor() {\n\t\tsuper('csv', 'CSV', 'application/zip', [{\n\t\t\ttext: 'Importer_CSV_Information',\n\t\t\thref: 'https://rocket.chat/docs/administrator-guides/import/csv/'\n\t\t}]);\n\t}\n}\n","import {\n\tBase,\n\tProgressStep,\n\tSelection,\n\tSelectionChannel,\n\tSelectionUser\n} from 'meteor/rocketchat:importer';\n\nexport class CsvImporter extends Base {\n\tconstructor(info) {\n\t\tsuper(info);\n\n\t\tthis.csvParser = Npm.require('csv-parse/lib/sync');\n\t\tthis.messages = new Map();\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst uriResult = RocketChatFile.dataURIParse(dataURI);\n\t\tconst zip = new this.AdmZip(new Buffer(uriResult.image, 'base64'));\n\t\tconst zipEntries = zip.getEntries();\n\n\t\tlet tempChannels = [];\n\t\tlet tempUsers = [];\n\t\tconst tempMessages = new Map();\n\t\tfor (const entry of zipEntries) {\n\t\t\tthis.logger.debug(`Entry: ${ entry.entryName }`);\n\n\t\t\t//Ignore anything that has `__MACOSX` in it's name, as sadly these things seem to mess everything up\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\tthis.logger.debug(`Ignoring the file: ${ entry.entryName }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Directories are ignored, since they are \"virtual\" in a zip file\n\t\t\tif (entry.isDirectory) {\n\t\t\t\tthis.logger.debug(`Ignoring the directory entry: ${ entry.entryName }`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Parse the channels\n\t\t\tif (entry.entryName.toLowerCase() === 'channels.csv') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\tconst parsedChannels = this.csvParser(entry.getData().toString());\n\t\t\t\ttempChannels = parsedChannels.map((c) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: c[0].trim().replace('.', '_'),\n\t\t\t\t\t\tname: c[0].trim(),\n\t\t\t\t\t\tcreator: c[1].trim(),\n\t\t\t\t\t\tisPrivate: c[2].trim().toLowerCase() === 'private' ? true : false,\n\t\t\t\t\t\tmembers: c[3].trim().split(';').map((m) => m.trim())\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Parse the users\n\t\t\tif (entry.entryName.toLowerCase() === 'users.csv') {\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\tconst parsedUsers = this.csvParser(entry.getData().toString());\n\t\t\t\ttempUsers = parsedUsers.map((u) => { return { id: u[0].trim().replace('.', '_'), username: u[0].trim(), email: u[1].trim(), name: u[2].trim() }; });\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Parse the messages\n\t\t\tif (entry.entryName.indexOf('/') > -1) {\n\t\t\t\tconst item = entry.entryName.split('/'); //random/messages.csv\n\t\t\t\tconst channelName = item[0]; //random\n\t\t\t\tconst msgGroupData = item[1].split('.')[0]; //2015-10-04\n\n\t\t\t\tif (!tempMessages.get(channelName)) {\n\t\t\t\t\ttempMessages.set(channelName, new Map());\n\t\t\t\t}\n\n\t\t\t\tlet msgs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tmsgs = this.csvParser(entry.getData().toString());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.warn(`The file ${ entry.entryName } contains invalid syntax`, e);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttempMessages.get(channelName).set(msgGroupData, msgs.map((m) => { return { username: m[0], ts: m[1], text: m[2] }; }));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t// if someone tries to import a several thousands users instance\n\t\tconst usersId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'users', 'users': tempUsers });\n\t\tthis.users = this.collection.findOne(usersId);\n\t\tsuper.updateRecord({ 'count.users': tempUsers.length });\n\t\tsuper.addCountToTotal(tempUsers.length);\n\n\t\t// Insert the channels records.\n\t\tconst channelsId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'channels', 'channels': tempChannels });\n\t\tthis.channels = this.collection.findOne(channelsId);\n\t\tsuper.updateRecord({ 'count.channels': tempChannels.length });\n\t\tsuper.addCountToTotal(tempChannels.length);\n\n\t\t// Save the messages records to the import record for `startImport` usage\n\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\tlet messagesCount = 0;\n\t\tfor (const [channel, messagesMap] of tempMessages.entries()) {\n\t\t\tif (!this.messages.get(channel)) {\n\t\t\t\tthis.messages.set(channel, new Map());\n\t\t\t}\n\n\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\tsuper.updateRecord({ 'messagesstatus': `${ channel }/${ msgGroupData }` });\n\n\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\tBase.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ msgGroupData }.${ i }`, 'messages': splitMsg });\n\t\t\t\t\t\tthis.messages.get(channel).set(`${ msgGroupData }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst messagesId = this.collection.insert({ 'import': this.importRecord._id, 'importer': this.name, 'type': 'messages', 'name': `${ channel }/${ msgGroupData }`, 'messages': msgs });\n\t\t\t\t\tthis.messages.get(channel).set(msgGroupData, this.collection.findOne(messagesId));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsuper.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\tsuper.addCountToTotal(messagesCount);\n\n\t\t//Ensure we have at least a single user, channel, or message\n\t\tif (tempUsers.length === 0 && tempChannels.length === 0 && messagesCount === 0) {\n\t\t\tthis.logger.error('No users, channels, or messages found in the import file.');\n\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\treturn super.getProgress();\n\t\t}\n\n\t\tconst selectionUsers = tempUsers.map((u) => new SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = tempChannels.map((c) => new SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\tsuper.updateProgress(ProgressStep.USER_SELECTION);\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst started = Date.now();\n\n\t\t//Ensure we're only going to import the users that the user has selected\n\t\tfor (const user of importSelection.users) {\n\t\t\tfor (const u of this.users.users) {\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t//Ensure we're only importing the channels the user has selected.\n\t\tfor (const channel of importSelection.channels) {\n\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_USERS);\n\n\t\t\ttry {\n\t\t\t\t//Import the users\n\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\tif (!u.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tlet existantUser = RocketChat.models.Users.findOneByEmailAddress(u.email);\n\n\t\t\t\t\t\t//If we couldn't find one by their email address, try to find an existing user by their username\n\t\t\t\t\t\tif (!existantUser) {\n\t\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByUsername(u.username);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\t//since we have an existing user, let's try a few things\n\t\t\t\t\t\t\tu.rocketId = existantUser._id;\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: u.rocketId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst userId = Accounts.createUser({ email: u.email, password: Date.now() + u.name + u.email.toUpperCase() });\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', u.username, {joinDefaultChannelsSilenced: true});\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, u.name);\n\t\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t\t\tu.rocketId = userId;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t\t\t//Import the channels\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\t\tif (!c.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(c.name);\n\t\t\t\t\t\t//If the room exists or the name of it is 'general', then we don't need to create it again\n\t\t\t\t\t\tif (existantRoom || c.name.toUpperCase() === 'GENERAL') {\n\t\t\t\t\t\t\tc.rocketId = c.name.toUpperCase() === 'GENERAL' ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//Find the rocketchatId of the user who created this channel\n\t\t\t\t\t\t\tlet creatorId = startedByUserId;\n\t\t\t\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\t\t\t\tif (u.username === c.creator && u.do_import) {\n\t\t\t\t\t\t\t\t\tcreatorId = u.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Create the channel\n\t\t\t\t\t\t\tMeteor.runAsUser(creatorId, () => {\n\t\t\t\t\t\t\t\tconst roomInfo = Meteor.call(c.isPrivate ? 'createPrivateGroup' : 'createChannel', c.name, c.members);\n\t\t\t\t\t\t\t\tc.rocketId = roomInfo.rid;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\t\t\t//If no channels file, collect channel map from DB for message-only import\n\t\t\t\tif (this.channels.channels.length === 0) {\n\t\t\t\t\tfor (const cname of this.messages.keys()) {\n\t\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(cname);\n\t\t\t\t\t\t\tif (existantRoom || cname.toUpperCase() === 'GENERAL') {\n\t\t\t\t\t\t\t\tthis.channels.channels.push({\n\t\t\t\t\t\t\t\t\tid: cname.replace('.', '_'),\n\t\t\t\t\t\t\t\t\tname: cname,\n\t\t\t\t\t\t\t\t\trocketId: (cname.toUpperCase() === 'GENERAL' ? 'GENERAL' : existantRoom._id),\n\t\t\t\t\t\t\t\t\tdo_import: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//If no users file, collect user map from DB for message-only import\n\t\t\t\tif (this.users.users.length === 0) {\n\t\t\t\t\tfor (const [ch, messagesMap] of this.messages.entries()) {\n\t\t\t\t\t\tconst csvChannel = this.getChannelFromName(ch);\n\t\t\t\t\t\tif (!csvChannel || !csvChannel.do_import) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\t\tfor (const msgs of messagesMap.values()) {\n\t\t\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\t\t\tif (!this.getUserFromUsername(msg.username)) {\n\t\t\t\t\t\t\t\t\t\tconst user = RocketChat.models.Users.findOneByUsername(msg.username);\n\t\t\t\t\t\t\t\t\t\tif (user) {\n\t\t\t\t\t\t\t\t\t\t\tthis.users.users.push({\n\t\t\t\t\t\t\t\t\t\t\t\trocketId: user._id,\n\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Import the Messages\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tfor (const [ch, messagesMap] of this.messages.entries()) {\n\t\t\t\t\tconst csvChannel = this.getChannelFromName(ch);\n\t\t\t\t\tif (!csvChannel || !csvChannel.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(csvChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst timestamps = {};\n\t\t\t\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\t\t\t\tsuper.updateRecord({ 'messagesstatus': `${ ch }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\t\tif (isNaN(new Date(parseInt(msg.ts)))) {\n\t\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ ch }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst creator = this.getUserFromUsername(msg.username);\n\t\t\t\t\t\t\t\tif (creator) {\n\t\t\t\t\t\t\t\t\tlet suffix = '';\n\t\t\t\t\t\t\t\t\tif (timestamps[msg.ts] === undefined) {\n\t\t\t\t\t\t\t\t\t\ttimestamps[msg.ts] = 1;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsuffix = `-${ timestamps[msg.ts] }`;\n\t\t\t\t\t\t\t\t\t\ttimestamps[msg.ts] += 1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t_id: `csv-${ csvChannel.id }-${ msg.ts }${ suffix }`,\n\t\t\t\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t_id: creator._id,\n\t\t\t\t\t\t\t\t\t\t\tusername: creator.username\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(creator, msgObj, room, true);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tsuper.updateProgress(ProgressStep.FINISHING);\n\t\t\t\tsuper.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`CSV Import took ${ timeTook } milliseconds.`);\n\t\t});\n\n\t\treturn super.getProgress();\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map((u) => new SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = this.channels.channels.map((c) => new SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tgetChannelFromName(channelName) {\n\t\tfor (const ch of this.channels.channels) {\n\t\t\tif (ch.name === channelName) {\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetUserFromUsername(username) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (u.username === username) {\n\t\t\t\treturn RocketChat.models.Users.findOneById(u.rocketId, { fields: { username: 1 }});\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Importers } from 'meteor/rocketchat:importer';\nimport { CsvImporterInfo } from '../info';\nimport { CsvImporter } from './importer';\n\nImporters.add(new CsvImporterInfo(), CsvImporter);\n"]}