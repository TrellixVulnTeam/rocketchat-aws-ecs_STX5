{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/logger.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/settings.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/slackbridge.js","meteor://ðŸ’»app/packages/rocketchat:slackbridge/server/slackbridge_import.server.js"],"names":["logger","Logger","sections","connection","events","class","Meteor","startup","RocketChat","settings","addGroup","add","type","i18nLabel","public","enableQuery","_id","value","i18nDescription","_","module","watch","require","default","v","SlackBridge","constructor","util","Npm","slackClient","apiToken","get","aliasFormat","excludeBotnames","rtm","connected","userTags","slackChannelMap","reactionsMap","Map","key","disconnect","connect","info","RtmClient","start","registerForSlackEvents","registerForRocketEvents","unregisterForRocketEvents","populateSlackChannelMap","err","error","convertSlackMsgTxtToRocketTxtFormat","slackMsgTxt","isEmpty","replace","match","userId","findRocketUser","addRocketUser","slack","rocket","findRocketChannel","slackChannelId","models","Rooms","findOneByImportId","addRocketChannel","slackChannelID","hasRetried","debug","slackResults","isGroup","charAt","HTTP","params","token","channel","data","ok","rocketChannelData","group","existingRocketRoom","findOneByName","name","is_general","rocketId","addImportIds","id","rocketUsers","member","members","creator","rocketUser","username","push","rocketUserCreator","rocketChannel","createRoom","rid","e","message","_sleepForMs","console","log","roomUpdate","ts","Date","created","lastSetTopic","topic","last_set","purpose","family","findOneById","slackUserID","Users","user","rocketUserData","isBot","is_bot","email","profile","existingRocketUser","findOneByEmailAddress","findOneByUsername","newUser","password","Random","joinDefaultChannels","Accounts","createUser","userUpdate","utcOffset","tz_offset","roles","real_name","deleted","update","$set","url","image_original","image_512","setUserAvatar","importIds","bot_id","addAliasToRocketMsg","rocketUserName","rocketMsgObj","alias","format","createAndSaveRocketMessage","slackMessage","rocketMsgDataDefaults","isImporting","subtype","processSlackSubtypedMessage","msg","text","u","extend","edited","editedAt","parseInt","split","fields","pinned_to","indexOf","pinned","pinnedAt","now","pinnedBy","pick","setTimeout","Messages","findOneBySlackBotIdAndSlackTs","sendMessage","onSlackReactionRemoved","slackReactionMsg","getRocketUser","rocketMsg","findOneBySlackTs","item","rocketID","createRocketID","rocketReaction","reaction","reactions","theReaction","usernames","set","runAsUser","call","onSlackReactionAdded","includes","onSlackMessage","processSlackMessageDeleted","processSlackMessageChanged","processSlackNewMessage","undefined","bot","attachments","icons","emoji","createUserJoinWithRoomIdAndUser","imported","addUserToRoom","inviter","createUserAddedWithRoomIdAndUser","createUserLeaveWithRoomIdAndUser","removeUserFromRoom","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","saveRoomTopic","createRoomRenamedWithRoomIdRoomNameAndUser","saveRoomName","archiveRoom","unarchiveRoom","file","url_private_download","details","message_id","size","mimetype","uploadFileFromSlack","t","author_subname","getAvatarUrlFromUsername","setPinnedByIdAndUserId","channel_id","slackFileURL","timeStamp","requestModule","test","parsedUrl","parse","headers","bindEnvironment","stream","fileStore","FileUpload","getStore","insert","Error","absoluteUrl","attachment","title","title_link","image_url","image_type","image_size","image_dimensions","identify","audio_url","audio_type","audio_size","video_url","video_type","video_size","groupable","callbacks","onRocketMessage","bind","priority","LOW","onRocketMessageDelete","onRocketSetReaction","onRocketUnSetReaction","remove","CLIENT_EVENTS","on","RTM","AUTHENTICATED","UNABLE_TO_RTM_START","DISCONNECT","RTM_EVENTS","MESSAGE","REACTION_ADDED","reactionMsg","REACTION_REMOVED","CHANNEL_CREATED","CHANNEL_JOINED","CHANNEL_LEFT","CHANNEL_DELETED","CHANNEL_RENAME","GROUP_JOINED","GROUP_LEFT","GROUP_RENAME","TEAM_JOIN","findSlackChannel","rocketChannelName","response","isArray","channels","length","is_member","groups","importFromHistory","options","messages","latest","reverse","has_more","copySlackChannelInfo","channelMap","topic_last_set","topic_creator","copyPins","items","pin","msgObj","importMessages","callback","rocketchat_room","results","oldest","slack_room","slackChannel","slackGroup","rocketMessageDeleted","postDeleteMessageToSlack","rocketMsgID","delete","slackTS","getSlackTS","postReactionAddedToSlack","postReactionRemoveToSlack","rocketMessage","processRocketMessageChanged","outSlackChannels","keys","pluck","postMessageToSlack","timestamp","postResult","post","statusCode","as_user","iconUrl","icon_url","link_names","setSlackBotIdAndSlackTs","postMessageUpdateToSlack","updatedBySlack","previous_message","getRocketChannel","deleteMessage","currentMsg","updateMessage","msgDataDefaults","code","index","substr","slackTs","slackUser","SlackBridgeImport","command","Match","String","room","users","findOne","msgStream","emit","TAPi18n","__","postProcess","sprintf","language","slashCommands"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yB,CACA,qBAEAA,SAAS,IAAIC,MAAJ,CAAW,aAAX,EAA0B;AAClCC,WAAU;AACTC,cAAY,YADH;AAETC,UAAQ,QAFC;AAGTC,SAAO;AAHE;AADwB,CAA1B,CAAT,C;;;;;;;;;;;ACHAC,OAAOC,OAAP,CAAe,YAAW;AACzBC,YAAWC,QAAX,CAAoBC,QAApB,CAA6B,aAA7B,EAA4C,YAAW;AACtD,OAAKC,GAAL,CAAS,qBAAT,EAAgC,KAAhC,EAAuC;AACtCC,SAAM,SADgC;AAEtCC,cAAW,SAF2B;AAGtCC,WAAQ;AAH8B,GAAvC;AAMA,OAAKH,GAAL,CAAS,sBAAT,EAAiC,EAAjC,EAAqC;AACpCC,SAAM,QAD8B;AAEpCG,gBAAa;AACZC,SAAK,qBADO;AAEZC,WAAO;AAFK,IAFuB;AAMpCJ,cAAW;AANyB,GAArC;AASA,OAAKF,GAAL,CAAS,yBAAT,EAAoC,EAApC,EAAwC;AACvCC,SAAM,QADiC;AAEvCG,gBAAa;AACZC,SAAK,qBADO;AAEZC,WAAO;AAFK,IAF0B;AAMvCJ,cAAW,cAN4B;AAOvCK,oBAAiB;AAPsB,GAAxC;AAUA,OAAKP,GAAL,CAAS,6BAAT,EAAwC,EAAxC,EAA4C;AAC3CC,SAAM,QADqC;AAE3CG,gBAAa;AACZC,SAAK,qBADO;AAEZC,WAAO;AAFK,IAF8B;AAM3CJ,cAAW,kBANgC;AAO3CK,oBAAiB;AAP0B,GAA5C;AAUA,OAAKP,GAAL,CAAS,yBAAT,EAAoC,KAApC,EAA2C;AAC1CC,SAAM,SADoC;AAE1CG,gBAAa;AACZC,SAAK,qBADO;AAEZC,WAAO;AAFK;AAF6B,GAA3C;AAQA,OAAKN,GAAL,CAAS,qBAAT,EAAgC,KAAhC,EAAuC;AACtCC,SAAM,SADgC;AAEtCG,gBAAa,CAAC;AACbC,SAAK,qBADQ;AAEbC,WAAO;AAFM,IAAD,EAGV;AACFD,SAAK,yBADH;AAEFC,WAAO;AAFL,IAHU;AAFyB,GAAvC;AAWA,OAAKN,GAAL,CAAS,0BAAT,EAAqC,EAArC,EAAyC;AACxCC,SAAM,UADkC;AAExCG,gBAAa,CAAC;AACbC,SAAK,qBADQ;AAEbC,WAAO;AAFM,IAAD,EAGV;AACFD,SAAK,yBADH;AAEFC,WAAO;AAFL,IAHU,EAMV;AACFD,SAAK,qBADH;AAEFC,WAAO;AAFL,IANU;AAF2B,GAAzC;AAaA,EApED;AAqEA,CAtED,E;;;;;;;;;;;ACAA,IAAIE,CAAJ;;AAAMC,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAACC,SAAQC,CAAR,EAAU;AAACL,MAAEK,CAAF;AAAI;;AAAhB,CAAnC,EAAqD,CAArD;;AAGN,MAAMC,WAAN,CAAkB;AAEjBC,eAAc;AACb,OAAKC,IAAL,GAAYC,IAAIN,OAAJ,CAAY,MAAZ,CAAZ;AACA,OAAKO,WAAL,GAAmBD,IAAIN,OAAJ,CAAY,cAAZ,CAAnB;AACA,OAAKQ,QAAL,GAAgBtB,WAAWC,QAAX,CAAoBsB,GAApB,CAAwB,sBAAxB,CAAhB;AACA,OAAKC,WAAL,GAAmBxB,WAAWC,QAAX,CAAoBsB,GAApB,CAAwB,yBAAxB,CAAnB;AACA,OAAKE,eAAL,GAAuBzB,WAAWC,QAAX,CAAoBsB,GAApB,CAAwB,sBAAxB,CAAvB;AACA,OAAKG,GAAL,GAAW,EAAX;AACA,OAAKC,SAAL,GAAiB,KAAjB;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,eAAL,GAAuB,EAAvB;AACA,OAAKC,YAAL,GAAoB,IAAIC,GAAJ,EAApB;AAEA/B,aAAWC,QAAX,CAAoBsB,GAApB,CAAwB,sBAAxB,EAAgD,CAACS,GAAD,EAAMvB,KAAN,KAAgB;AAC/D,OAAIA,UAAU,KAAKa,QAAnB,EAA6B;AAC5B,SAAKA,QAAL,GAAgBb,KAAhB;;AACA,QAAI,KAAKkB,SAAT,EAAoB;AACnB,UAAKM,UAAL;AACA,UAAKC,OAAL;AACA;AACD;AACD,GARD;AAUAlC,aAAWC,QAAX,CAAoBsB,GAApB,CAAwB,yBAAxB,EAAmD,CAACS,GAAD,EAAMvB,KAAN,KAAgB;AAClE,QAAKe,WAAL,GAAmBf,KAAnB;AACA,GAFD;AAIAT,aAAWC,QAAX,CAAoBsB,GAApB,CAAwB,6BAAxB,EAAuD,CAACS,GAAD,EAAMvB,KAAN,KAAgB;AACtE,QAAKgB,eAAL,GAAuBhB,KAAvB;AACA,GAFD;AAIAT,aAAWC,QAAX,CAAoBsB,GAApB,CAAwB,qBAAxB,EAA+C,CAACS,GAAD,EAAMvB,KAAN,KAAgB;AAC9D,OAAIA,SAAS,KAAKa,QAAlB,EAA4B;AAC3B,SAAKY,OAAL;AACA,IAFD,MAEO;AACN,SAAKD,UAAL;AACA;AACD,GAND;AAOA;;AAEDC,WAAU;AACT,MAAI,KAAKP,SAAL,KAAmB,KAAvB,EAA8B;AAC7B,QAAKA,SAAL,GAAiB,IAAjB;AACAnC,UAAOG,UAAP,CAAkBwC,IAAlB,CAAuB,wBAAvB,EAAiD,KAAKb,QAAtD;AACA,SAAMc,YAAY,KAAKf,WAAL,CAAiBe,SAAnC;AACA,QAAKV,GAAL,GAAW,IAAIU,SAAJ,CAAc,KAAKd,QAAnB,CAAX;AACA,QAAKI,GAAL,CAASW,KAAT;AACA,QAAKC,sBAAL;AACAtC,cAAWC,QAAX,CAAoBsB,GAApB,CAAwB,yBAAxB,EAAmD,CAACS,GAAD,EAAMvB,KAAN,KAAgB;AAClE,QAAIA,KAAJ,EAAW;AACV,UAAK8B,uBAAL;AACA,KAFD,MAEO;AACN,UAAKC,yBAAL;AACA;AACD,IAND;AAOA1C,UAAOC,OAAP,CAAe,MAAM;AACpB,QAAI;AACH,UAAK0C,uBAAL,GADG,CAC6B;AAChC,KAFD,CAEE,OAAOC,GAAP,EAAY;AACblD,YAAOK,KAAP,CAAa8C,KAAb,CAAmB,sCAAnB,EAA2DD,GAA3D;AACA,UAAKT,UAAL;AACA;AACD,IAPD;AAQA;AACD;;AAEDA,cAAa;AACZ,MAAI,KAAKN,SAAL,KAAmB,IAAvB,EAA6B;AAC5B,QAAKA,SAAL,GAAiB,KAAjB;AACA,QAAKD,GAAL,CAASO,UAAT,IAAuB,KAAKP,GAAL,CAASO,UAAT,EAAvB;AACAzC,UAAOG,UAAP,CAAkBwC,IAAlB,CAAuB,cAAvB;AACA,QAAKK,yBAAL;AACA;AACD;;AAEDI,qCAAoCC,WAApC,EAAiD;AAChD,MAAI,CAAClC,EAAEmC,OAAF,CAAUD,WAAV,CAAL,EAA6B;AAC5BA,iBAAcA,YAAYE,OAAZ,CAAoB,cAApB,EAAoC,MAApC,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,aAApB,EAAmC,MAAnC,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,UAApB,EAAgC,OAAhC,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,OAApB,EAA6B,GAA7B,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,OAApB,EAA6B,GAA7B,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,QAApB,EAA8B,GAA9B,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,iBAApB,EAAuC,SAAvC,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,SAApB,EAA+B,UAA/B,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,UAApB,EAAgC,OAAhC,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,OAApB,EAA6B,MAA7B,CAAd;AACAF,iBAAcA,YAAYE,OAAZ,CAAoB,qBAApB,EAA2C,IAA3C,CAAd;AAEAF,eAAYE,OAAZ,CAAoB,qCAApB,EAA2D,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7E,QAAI,CAAC,KAAKrB,QAAL,CAAcqB,MAAd,CAAL,EAA4B;AAC3B,UAAKC,cAAL,CAAoBD,MAApB,KAA+B,KAAKE,aAAL,CAAmBF,MAAnB,CAA/B,CAD2B,CACgC;AAC3D;;AACD,UAAMrB,WAAW,KAAKA,QAAL,CAAcqB,MAAd,CAAjB;;AACA,QAAIrB,QAAJ,EAAc;AACbiB,mBAAcA,YAAYE,OAAZ,CAAoBnB,SAASwB,KAA7B,EAAoCxB,SAASyB,MAA7C,CAAd;AACA;AACD,IARD;AASA,GAtBD,MAsBO;AACNR,iBAAc,EAAd;AACA;;AACD,SAAOA,WAAP;AACA;;AAEDS,mBAAkBC,cAAlB,EAAkC;AACjC,SAAOvD,WAAWwD,MAAX,CAAkBC,KAAlB,CAAwBC,iBAAxB,CAA0CH,cAA1C,CAAP;AACA;;AAEDI,kBAAiBC,cAAjB,EAAiCC,aAAa,KAA9C,EAAqD;AACpDrE,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,uCAAnB,EAA4DF,cAA5D;AACA,MAAIG,eAAe,IAAnB;AACA,MAAIC,UAAU,KAAd;;AACA,MAAIJ,eAAeK,MAAf,CAAsB,CAAtB,MAA6B,GAAjC,EAAsC;AACrCF,kBAAeG,KAAK3C,GAAL,CAAS,qCAAT,EAAgD;AAAE4C,YAAQ;AAAEC,YAAO,KAAK9C,QAAd;AAAwB+C,cAAST;AAAjC;AAAV,IAAhD,CAAf;AACA,GAFD,MAEO,IAAIA,eAAeK,MAAf,CAAsB,CAAtB,MAA6B,GAAjC,EAAsC;AAC5CF,kBAAeG,KAAK3C,GAAL,CAAS,mCAAT,EAA8C;AAAE4C,YAAQ;AAAEC,YAAO,KAAK9C,QAAd;AAAwB+C,cAAST;AAAjC;AAAV,IAA9C,CAAf;AACAI,aAAU,IAAV;AACA;;AACD,MAAID,gBAAgBA,aAAaO,IAA7B,IAAqCP,aAAaO,IAAb,CAAkBC,EAAlB,KAAyB,IAAlE,EAAwE;AACvE,SAAMC,oBAAoBR,UAAUD,aAAaO,IAAb,CAAkBG,KAA5B,GAAoCV,aAAaO,IAAb,CAAkBD,OAAhF;AACA,SAAMK,qBAAqB1E,WAAWwD,MAAX,CAAkBC,KAAlB,CAAwBkB,aAAxB,CAAsCH,kBAAkBI,IAAxD,CAA3B,CAFuE,CAIvE;;AACA,OAAIF,sBAAsBF,kBAAkBK,UAA5C,EAAwD;AACvDL,sBAAkBM,QAAlB,GAA6BN,kBAAkBK,UAAlB,GAA+B,SAA/B,GAA2CH,mBAAmBlE,GAA3F;AACAR,eAAWwD,MAAX,CAAkBC,KAAlB,CAAwBsB,YAAxB,CAAqCP,kBAAkBM,QAAvD,EAAiEN,kBAAkBQ,EAAnF;AACA,IAHD,MAGO;AACN,UAAMC,cAAc,EAApB;;AACA,SAAK,MAAMC,MAAX,IAAqBV,kBAAkBW,OAAvC,EAAgD;AAC/C,SAAID,WAAWV,kBAAkBY,OAAjC,EAA0C;AACzC,YAAMC,aAAa,KAAKnC,cAAL,CAAoBgC,MAApB,KAA+B,KAAK/B,aAAL,CAAmB+B,MAAnB,CAAlD;;AACA,UAAIG,cAAcA,WAAWC,QAA7B,EAAuC;AACtCL,mBAAYM,IAAZ,CAAiBF,WAAWC,QAA5B;AACA;AACD;AACD;;AACD,UAAME,oBAAoBhB,kBAAkBY,OAAlB,GAA4B,KAAKlC,cAAL,CAAoBsB,kBAAkBY,OAAtC,KAAkD,KAAKjC,aAAL,CAAmBqB,kBAAkBY,OAArC,CAA9E,GAA8H,IAAxJ;;AACA,QAAI,CAACI,iBAAL,EAAwB;AACvBhG,YAAOK,KAAP,CAAa8C,KAAb,CAAmB,0CAAnB,EAA+D6B,kBAAkBY,OAAjF;AACA;AACA;;AAED,QAAI;AACH,WAAMK,gBAAgBzF,WAAW0F,UAAX,CAAsB1B,UAAU,GAAV,GAAgB,GAAtC,EAA2CQ,kBAAkBI,IAA7D,EAAmEY,kBAAkBF,QAArF,EAA+FL,WAA/F,CAAtB;AACAT,uBAAkBM,QAAlB,GAA6BW,cAAcE,GAA3C;AACA,KAHD,CAGE,OAAOC,CAAP,EAAU;AACX,SAAI,CAAC/B,UAAL,EAAiB;AAChBrE,aAAOK,KAAP,CAAaiE,KAAb,CAAmB,oDAAnB,EAAyE8B,EAAEC,OAA3E,EADgB,CAEhB;;AACA/F,aAAOgG,WAAP,CAAmB,IAAnB;;AACA,aAAO,KAAKxC,iBAAL,CAAuBM,cAAvB,KAA0C,KAAKD,gBAAL,CAAsBC,cAAtB,EAAsC,IAAtC,CAAjD;AACA,MALD,MAKO;AACNmC,cAAQC,GAAR,CAAYJ,EAAEC,OAAd;AACA;AACD;;AAED,UAAMI,aAAa;AAClBC,SAAI,IAAIC,IAAJ,CAAS3B,kBAAkB4B,OAAlB,GAA4B,IAArC;AADc,KAAnB;AAGA,QAAIC,eAAe,CAAnB;;AACA,QAAI,CAAC1F,EAAEmC,OAAF,CAAU0B,kBAAkB8B,KAAlB,IAA2B9B,kBAAkB8B,KAAlB,CAAwB7F,KAA7D,CAAL,EAA0E;AACzEwF,gBAAWK,KAAX,GAAmB9B,kBAAkB8B,KAAlB,CAAwB7F,KAA3C;AACA4F,oBAAe7B,kBAAkB8B,KAAlB,CAAwBC,QAAvC;AACA;;AACD,QAAI,CAAC5F,EAAEmC,OAAF,CAAU0B,kBAAkBgC,OAAlB,IAA6BhC,kBAAkBgC,OAAlB,CAA0B/F,KAAjE,CAAD,IAA4E+D,kBAAkBgC,OAAlB,CAA0BD,QAA1B,GAAqCF,YAArH,EAAmI;AAClIJ,gBAAWK,KAAX,GAAmB9B,kBAAkBgC,OAAlB,CAA0B/F,KAA7C;AACA;;AACDT,eAAWwD,MAAX,CAAkBC,KAAlB,CAAwBsB,YAAxB,CAAqCP,kBAAkBM,QAAvD,EAAiEN,kBAAkBQ,EAAnF;AACA,SAAKnD,eAAL,CAAqB2C,kBAAkBM,QAAvC,IAAmD;AAAEE,SAAIpB,cAAN;AAAsB6C,aAAQ7C,eAAeK,MAAf,CAAsB,CAAtB,MAA6B,GAA7B,GAAmC,UAAnC,GAAgD;AAA9E,KAAnD;AACA;;AACD,UAAOjE,WAAWwD,MAAX,CAAkBC,KAAlB,CAAwBiD,WAAxB,CAAoClC,kBAAkBM,QAAtD,CAAP;AACA;;AACDtF,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,mBAAnB;AACA;AACA;;AAEDZ,gBAAeyD,WAAf,EAA4B;AAC3B,QAAMtB,aAAarF,WAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBlD,iBAAxB,CAA0CiD,WAA1C,CAAnB;;AACA,MAAItB,cAAc,CAAC,KAAKzD,QAAL,CAAc+E,WAAd,CAAnB,EAA+C;AAC9C,QAAK/E,QAAL,CAAc+E,WAAd,IAA6B;AAAEvD,WAAQ,KAAKuD,WAAa,GAA5B;AAAgCtD,YAAS,IAAIgC,WAAWC,QAAU;AAAlE,IAA7B;AACA;;AACD,SAAOD,UAAP;AACA;;AAEDlC,eAAcwD,WAAd,EAA2B;AAC1BnH,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,oCAAnB,EAAyD6C,WAAzD;AACA,QAAM5C,eAAeG,KAAK3C,GAAL,CAAS,kCAAT,EAA6C;AAAE4C,WAAQ;AAAEC,WAAO,KAAK9C,QAAd;AAAwBuF,UAAMF;AAA9B;AAAV,GAA7C,CAArB;;AACA,MAAI5C,gBAAgBA,aAAaO,IAA7B,IAAqCP,aAAaO,IAAb,CAAkBC,EAAlB,KAAyB,IAA9D,IAAsER,aAAaO,IAAb,CAAkBuC,IAA5F,EAAkG;AACjG,SAAMC,iBAAiB/C,aAAaO,IAAb,CAAkBuC,IAAzC;AACA,SAAME,QAAQD,eAAeE,MAAf,KAA0B,IAAxC;AACA,SAAMC,QAAQH,eAAeI,OAAf,IAA0BJ,eAAeI,OAAf,CAAuBD,KAAjD,IAA0D,EAAxE;AACA,OAAIE,kBAAJ;;AACA,OAAI,CAACJ,KAAL,EAAY;AACXI,yBAAqBnH,WAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBQ,qBAAxB,CAA8CH,KAA9C,KAAwDjH,WAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBS,iBAAxB,CAA0CP,eAAelC,IAAzD,CAA7E;AACA,IAFD,MAEO;AACNuC,yBAAqBnH,WAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBS,iBAAxB,CAA0CP,eAAelC,IAAzD,CAArB;AACA;;AAED,OAAIuC,kBAAJ,EAAwB;AACvBL,mBAAehC,QAAf,GAA0BqC,mBAAmB3G,GAA7C;AACAsG,mBAAelC,IAAf,GAAsBuC,mBAAmB7B,QAAzC;AACA,IAHD,MAGO;AACN,UAAMgC,UAAU;AACfC,eAAUC,OAAOxC,EAAP,EADK;AAEfM,eAAUwB,eAAelC;AAFV,KAAhB;;AAKA,QAAI,CAACmC,KAAD,IAAUE,KAAd,EAAqB;AACpBK,aAAQL,KAAR,GAAgBA,KAAhB;AACA;;AAED,QAAIF,KAAJ,EAAW;AACVO,aAAQG,mBAAR,GAA8B,KAA9B;AACA;;AAEDX,mBAAehC,QAAf,GAA0B4C,SAASC,UAAT,CAAoBL,OAApB,CAA1B;AACA,UAAMM,aAAa;AAClBC,gBAAWf,eAAegB,SAAf,GAA2B,IADpB;AAC0B;AAC5CC,YAAOhB,QAAQ,CAAE,KAAF,CAAR,GAAoB,CAAE,MAAF;AAFT,KAAnB;;AAKA,QAAID,eAAeI,OAAf,IAA0BJ,eAAeI,OAAf,CAAuBc,SAArD,EAAgE;AAC/DJ,gBAAW,MAAX,IAAqBd,eAAeI,OAAf,CAAuBc,SAA5C;AACA;;AAED,QAAIlB,eAAemB,OAAnB,EAA4B;AAC3BL,gBAAW,QAAX,IAAuB,KAAvB;AACAA,gBAAW,6BAAX,IAA4C,EAA5C;AACA;;AAED5H,eAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBsB,MAAxB,CAA+B;AAAE1H,UAAKsG,eAAehC;AAAtB,KAA/B,EAAiE;AAAEqD,WAAMP;AAAR,KAAjE;AAEA,UAAMf,OAAO7G,WAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoCI,eAAehC,QAAnD,CAAb;AAEA,QAAIsD,MAAM,IAAV;;AACA,QAAItB,eAAeI,OAAnB,EAA4B;AAC3B,SAAIJ,eAAeI,OAAf,CAAuBmB,cAA3B,EAA2C;AAC1CD,YAAMtB,eAAeI,OAAf,CAAuBmB,cAA7B;AACA,MAFD,MAEO,IAAIvB,eAAeI,OAAf,CAAuBoB,SAA3B,EAAsC;AAC5CF,YAAMtB,eAAeI,OAAf,CAAuBoB,SAA7B;AACA;AACD;;AACD,QAAIF,GAAJ,EAAS;AACR,SAAI;AACHpI,iBAAWuI,aAAX,CAAyB1B,IAAzB,EAA+BuB,GAA/B,EAAoC,IAApC,EAA0C,KAA1C;AACA,MAFD,CAEE,OAAOzF,KAAP,EAAc;AACfnD,aAAOK,KAAP,CAAaiE,KAAb,CAAmB,2BAAnB,EAAgDnB,MAAMkD,OAAtD;AACA;AACD;AACD;;AAED,SAAM2C,YAAY,CAAE1B,eAAe9B,EAAjB,CAAlB;;AACA,OAAI+B,SAASD,eAAeI,OAAxB,IAAmCJ,eAAeI,OAAf,CAAuBuB,MAA9D,EAAsE;AACrED,cAAUjD,IAAV,CAAeuB,eAAeI,OAAf,CAAuBuB,MAAtC;AACA;;AACDzI,cAAWwD,MAAX,CAAkBoD,KAAlB,CAAwB7B,YAAxB,CAAqC+B,eAAehC,QAApD,EAA8D0D,SAA9D;;AACA,OAAI,CAAC,KAAK5G,QAAL,CAAc+E,WAAd,CAAL,EAAiC;AAChC,SAAK/E,QAAL,CAAc+E,WAAd,IAA6B;AAAEvD,YAAQ,KAAKuD,WAAa,GAA5B;AAAgCtD,aAAS,IAAIyD,eAAelC,IAAM;AAAlE,KAA7B;AACA;;AACD,UAAO5E,WAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoCI,eAAehC,QAAnD,CAAP;AACA;;AACDtF,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,gBAAnB;AACA;AACA;;AAED4E,qBAAoBC,cAApB,EAAoCC,YAApC,EAAkD;AACjD,MAAI,KAAKpH,WAAT,EAAsB;AACrB,SAAMqH,QAAQ,KAAK1H,IAAL,CAAU2H,MAAV,CAAiB,KAAKtH,WAAtB,EAAmCmH,cAAnC,CAAd;;AAEA,OAAIE,UAAUF,cAAd,EAA8B;AAC7BC,iBAAaC,KAAb,GAAqBA,KAArB;AACA;AACD;;AAED,SAAOD,YAAP;AACA;;AAEDG,4BAA2BtD,aAA3B,EAA0CJ,UAA1C,EAAsD2D,YAAtD,EAAoEC,qBAApE,EAA2FC,WAA3F,EAAwG;AACvG,MAAIF,aAAa5I,IAAb,KAAsB,SAA1B,EAAqC;AACpC,OAAIwI,eAAe,EAAnB;;AACA,OAAI,CAACjI,EAAEmC,OAAF,CAAUkG,aAAaG,OAAvB,CAAL,EAAsC;AACrCP,mBAAe,KAAKQ,2BAAL,CAAiC3D,aAAjC,EAAgDJ,UAAhD,EAA4D2D,YAA5D,EAA0EE,WAA1E,CAAf;;AACA,QAAI,CAACN,YAAL,EAAmB;AAClB;AACA;AACD,IALD,MAKO;AACNA,mBAAe;AACdS,UAAK,KAAKzG,mCAAL,CAAyCoG,aAAaM,IAAtD,CADS;AAEd3D,UAAKF,cAAcjF,GAFL;AAGd+I,QAAG;AACF/I,WAAK6E,WAAW7E,GADd;AAEF8E,gBAAUD,WAAWC;AAFnB;AAHW,KAAf;AASA,SAAKoD,mBAAL,CAAyBrD,WAAWC,QAApC,EAA8CsD,YAA9C;AACA;;AACDjI,KAAE6I,MAAF,CAASZ,YAAT,EAAuBK,qBAAvB;;AACA,OAAID,aAAaS,MAAjB,EAAyB;AACxBb,iBAAac,QAAb,GAAwB,IAAIvD,IAAJ,CAASwD,SAASX,aAAaS,MAAb,CAAoBvD,EAApB,CAAuB0D,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAT,IAAiD,IAA1D,CAAxB;AACA;;AACD,OAAIZ,aAAaG,OAAb,KAAyB,aAA7B,EAA4C;AAC3C9D,iBAAarF,WAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoC,YAApC,EAAkD;AAAEmD,aAAQ;AAAEvE,gBAAU;AAAZ;AAAV,KAAlD,CAAb;AACA;;AAED,OAAI0D,aAAac,SAAb,IAA0Bd,aAAac,SAAb,CAAuBC,OAAvB,CAA+Bf,aAAa3E,OAA5C,MAAyD,CAAC,CAAxF,EAA2F;AAC1FuE,iBAAaoB,MAAb,GAAsB,IAAtB;AACApB,iBAAaqB,QAAb,GAAwB9D,KAAK+D,GAA7B;AACAtB,iBAAauB,QAAb,GAAwBxJ,EAAEyJ,IAAF,CAAO/E,UAAP,EAAmB,KAAnB,EAA0B,UAA1B,CAAxB;AACA;;AACD,OAAI2D,aAAaG,OAAb,KAAyB,aAA7B,EAA4C;AAC3CrJ,WAAOuK,UAAP,CAAkB,MAAM;AACvB,SAAIrB,aAAaP,MAAb,IAAuBO,aAAa9C,EAApC,IAA0C,CAAClG,WAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BC,6BAA3B,CAAyDvB,aAAaP,MAAtE,EAA8EO,aAAa9C,EAA3F,CAA/C,EAA+I;AAC9IlG,iBAAWwK,WAAX,CAAuBnF,UAAvB,EAAmCuD,YAAnC,EAAiDnD,aAAjD,EAAgE,IAAhE;AACA;AACD,KAJD,EAIG,GAJH;AAKA,IAND,MAMO;AACNjG,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,6BAAnB;AACA9D,eAAWwK,WAAX,CAAuBnF,UAAvB,EAAmCuD,YAAnC,EAAiDnD,aAAjD,EAAgE,IAAhE;AACA;AACD;AACD,EAlUgB,CAoUjB;;;;AAGAgF,wBAAuBC,gBAAvB,EAAyC;AACxC,MAAIA,gBAAJ,EAAsB;AACrB,SAAMrF,aAAa,KAAKsF,aAAL,CAAmBD,iBAAiB7D,IAApC,CAAnB,CADqB,CAErB;;AACA,OAAI+D,YAAY5K,WAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BO,gBAA3B,CAA4CH,iBAAiBI,IAAjB,CAAsB5E,EAAlE,CAAhB;;AAEA,OAAI,CAAC0E,SAAL,EAAgB;AACf;AACA,UAAMG,WAAW,KAAKC,cAAL,CAAoBN,iBAAiBI,IAAjB,CAAsBzG,OAA1C,EAAmDqG,iBAAiBI,IAAjB,CAAsB5E,EAAzE,CAAjB;AACA0E,gBAAY5K,WAAWwD,MAAX,CAAkB8G,QAAlB,CAA2B5D,WAA3B,CAAuCqE,QAAvC,CAAZ;AACA;;AAED,OAAIH,aAAavF,UAAjB,EAA6B;AAC5B,UAAM4F,iBAAkB,IAAIP,iBAAiBQ,QAAU,GAAvD,CAD4B,CAG5B;;AACA,QAAIN,UAAUO,SAAd,EAAyB;AACxB,WAAMC,cAAcR,UAAUO,SAAV,CAAoBF,cAApB,CAApB;;AACA,SAAIG,WAAJ,EAAiB;AAChB,UAAIA,YAAYC,SAAZ,CAAsBtB,OAAtB,CAA8B1E,WAAWC,QAAzC,MAAuD,CAAC,CAA5D,EAA+D;AAC9D,cAD8D,CACtD;AACR;AACD;AACD,KAPD,MAOO;AACN;AACA;AACA,KAd2B,CAgB5B;;;AACA,SAAKxD,YAAL,CAAkBwJ,GAAlB,CAAuB,QAAQV,UAAUpK,GAAK,GAAGyK,cAAgB,EAAjE,EAAoE5F,UAApE;AACA7F,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,8BAAnB;AACAhE,WAAOyL,SAAP,CAAiBlG,WAAW7E,GAA5B,EAAiC,MAAM;AACtCV,YAAO0L,IAAP,CAAY,aAAZ,EAA2BP,cAA3B,EAA2CL,UAAUpK,GAArD;AACA,KAFD;AAGA;AACD;AACD,EA3WgB,CA6WjB;;;;AAGAiL,sBAAqBf,gBAArB,EAAuC;AACtC,MAAIA,gBAAJ,EAAsB;AACrB,SAAMrF,aAAa,KAAKsF,aAAL,CAAmBD,iBAAiB7D,IAApC,CAAnB;;AAEA,OAAIxB,WAAW0C,KAAX,CAAiB2D,QAAjB,CAA0B,KAA1B,CAAJ,EAAsC;AACrC;AACA,IALoB,CAOrB;;;AACA,OAAId,YAAY5K,WAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BO,gBAA3B,CAA4CH,iBAAiBI,IAAjB,CAAsB5E,EAAlE,CAAhB;;AAEA,OAAI,CAAC0E,SAAL,EAAgB;AACf;AACA,UAAMG,WAAW,KAAKC,cAAL,CAAoBN,iBAAiBI,IAAjB,CAAsBzG,OAA1C,EAAmDqG,iBAAiBI,IAAjB,CAAsB5E,EAAzE,CAAjB;AACA0E,gBAAY5K,WAAWwD,MAAX,CAAkB8G,QAAlB,CAA2B5D,WAA3B,CAAuCqE,QAAvC,CAAZ;AACA;;AAED,OAAIH,aAAavF,UAAjB,EAA6B;AAC5B,UAAM4F,iBAAkB,IAAIP,iBAAiBQ,QAAU,GAAvD,CAD4B,CAG5B;;AACA,QAAIN,UAAUO,SAAd,EAAyB;AACxB,WAAMC,cAAcR,UAAUO,SAAV,CAAoBF,cAApB,CAApB;;AACA,SAAIG,WAAJ,EAAiB;AAChB,UAAIA,YAAYC,SAAZ,CAAsBtB,OAAtB,CAA8B1E,WAAWC,QAAzC,MAAuD,CAAC,CAA5D,EAA+D;AAC9D,cAD8D,CACtD;AACR;AACD;AACD,KAX2B,CAa5B;;;AACA,SAAKxD,YAAL,CAAkBwJ,GAAlB,CAAuB,MAAMV,UAAUpK,GAAK,GAAGyK,cAAgB,EAA/D,EAAkE5F,UAAlE;AACA7F,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,4BAAnB;AACAhE,WAAOyL,SAAP,CAAiBlG,WAAW7E,GAA5B,EAAiC,MAAM;AACtCV,YAAO0L,IAAP,CAAY,aAAZ,EAA2BP,cAA3B,EAA2CL,UAAUpK,GAArD;AACA,KAFD;AAGA;AACD;AACD,EAtZgB,CAwZjB;;;;;AAIAmL,gBAAe3C,YAAf,EAA6BE,WAA7B,EAA0C;AACzC,MAAIF,aAAaG,OAAjB,EAA0B;AACzB,WAAQH,aAAaG,OAArB;AACC,SAAK,iBAAL;AACC,UAAKyC,0BAAL,CAAgC5C,YAAhC;AACA;;AACD,SAAK,iBAAL;AACC,UAAK6C,0BAAL,CAAgC7C,YAAhC;AACA;;AACD;AACC;AACA,UAAK8C,sBAAL,CAA4B9C,YAA5B,EAA0CE,WAA1C;AATF;AAWA,GAZD,MAYO;AACN;AACA,QAAK4C,sBAAL,CAA4B9C,YAA5B,EAA0CE,WAA1C;AACA;AACD;;AAEDE,6BAA4B3D,aAA5B,EAA2CJ,UAA3C,EAAuD2D,YAAvD,EAAqEE,WAArE,EAAkF;AACjF,MAAIN,eAAe,IAAnB;;AACA,UAAQI,aAAaG,OAArB;AACC,QAAK,aAAL;AACC,QAAIH,aAAa1D,QAAb,KAA0ByG,SAA1B,IAAuC,KAAKtK,eAA5C,IAA+DuH,aAAa1D,QAAb,CAAsBtC,KAAtB,CAA4B,KAAKvB,eAAjC,CAAnE,EAAsH;AACrH;AACA;;AAEDmH,mBAAe;AACdS,UAAK,KAAKzG,mCAAL,CAAyCoG,aAAaM,IAAtD,CADS;AAEd3D,UAAKF,cAAcjF,GAFL;AAGdwL,UAAK,IAHS;AAIdC,kBAAajD,aAAaiD,WAJZ;AAKd3G,eAAU0D,aAAa1D,QAAb,IAAyB0D,aAAaP;AALlC,KAAf;AAOA,SAAKC,mBAAL,CAAyBM,aAAa1D,QAAb,IAAyB0D,aAAaP,MAA/D,EAAuEG,YAAvE;;AACA,QAAII,aAAakD,KAAjB,EAAwB;AACvBtD,kBAAauD,KAAb,GAAqBnD,aAAakD,KAAb,CAAmBC,KAAxC;AACA;;AACD,WAAOvD,YAAP;;AACD,QAAK,YAAL;AACC,WAAO,KAAKF,mBAAL,CAAyBrD,WAAWC,QAApC,EAA8C;AACpD+D,UAAM,IAAI,KAAKzG,mCAAL,CAAyCoG,aAAaM,IAAtD,CAA6D;AADnB,KAA9C,CAAP;;AAGD,QAAK,cAAL;AACC,QAAIJ,WAAJ,EAAiB;AAChBlJ,gBAAWwD,MAAX,CAAkB8G,QAAlB,CAA2B8B,+BAA3B,CAA2D3G,cAAcjF,GAAzE,EAA8E6E,UAA9E,EAA0F;AAAEa,UAAI,IAAIC,IAAJ,CAASwD,SAASX,aAAa9C,EAAb,CAAgB0D,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAAN;AAAgEyC,gBAAU;AAA1E,MAA1F;AACA,KAFD,MAEO;AACNrM,gBAAWsM,aAAX,CAAyB7G,cAAcjF,GAAvC,EAA4C6E,UAA5C;AACA;;AACD;;AACD,QAAK,YAAL;AACC,QAAI2D,aAAauD,OAAjB,EAA0B;AACzB,WAAMA,UAAUvD,aAAauD,OAAb,GAAuB,KAAKrJ,cAAL,CAAoB8F,aAAauD,OAAjC,KAA6C,KAAKpJ,aAAL,CAAmB6F,aAAauD,OAAhC,CAApE,GAA+G,IAA/H;;AACA,SAAIrD,WAAJ,EAAiB;AAChBlJ,iBAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BkC,gCAA3B,CAA4D/G,cAAcjF,GAA1E,EAA+E6E,UAA/E,EAA2F;AAC1Fa,WAAI,IAAIC,IAAJ,CAASwD,SAASX,aAAa9C,EAAb,CAAgB0D,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CADsF;AAE1FL,UAAG;AACF/I,aAAK+L,QAAQ/L,GADX;AAEF8E,kBAAUiH,QAAQjH;AAFhB,QAFuF;AAM1F+G,iBAAU;AANgF,OAA3F;AAQA,MATD,MASO;AACNrM,iBAAWsM,aAAX,CAAyB7G,cAAcjF,GAAvC,EAA4C6E,UAA5C,EAAwDkH,OAAxD;AACA;AACD;;AACD;;AACD,QAAK,eAAL;AACA,QAAK,aAAL;AACC,QAAIrD,WAAJ,EAAiB;AAChBlJ,gBAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BmC,gCAA3B,CAA4DhH,cAAcjF,GAA1E,EAA+E6E,UAA/E,EAA2F;AAC1Fa,UAAI,IAAIC,IAAJ,CAASwD,SAASX,aAAa9C,EAAb,CAAgB0D,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CADsF;AAE1FyC,gBAAU;AAFgF,MAA3F;AAIA,KALD,MAKO;AACNrM,gBAAW0M,kBAAX,CAA8BjH,cAAcjF,GAA5C,EAAiD6E,UAAjD;AACA;;AACD;;AACD,QAAK,eAAL;AACA,QAAK,aAAL;AACC,QAAI6D,WAAJ,EAAiB;AAChBlJ,gBAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BqC,qDAA3B,CAAiF,oBAAjF,EAAuGlH,cAAcjF,GAArH,EAA0HwI,aAAa1C,KAAvI,EAA8IjB,UAA9I,EAA0J;AAAEa,UAAI,IAAIC,IAAJ,CAASwD,SAASX,aAAa9C,EAAb,CAAgB0D,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAAN;AAAgEyC,gBAAU;AAA1E,MAA1J;AACA,KAFD,MAEO;AACNrM,gBAAW4M,aAAX,CAAyBnH,cAAcjF,GAAvC,EAA4CwI,aAAa1C,KAAzD,EAAgEjB,UAAhE,EAA4E,KAA5E;AACA;;AACD;;AACD,QAAK,iBAAL;AACA,QAAK,eAAL;AACC,QAAI6D,WAAJ,EAAiB;AAChBlJ,gBAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BqC,qDAA3B,CAAiF,oBAAjF,EAAuGlH,cAAcjF,GAArH,EAA0HwI,aAAaxC,OAAvI,EAAgJnB,UAAhJ,EAA4J;AAAEa,UAAI,IAAIC,IAAJ,CAASwD,SAASX,aAAa9C,EAAb,CAAgB0D,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAAN;AAAgEyC,gBAAU;AAA1E,MAA5J;AACA,KAFD,MAEO;AACNrM,gBAAW4M,aAAX,CAAyBnH,cAAcjF,GAAvC,EAA4CwI,aAAaxC,OAAzD,EAAkEnB,UAAlE,EAA8E,KAA9E;AACA;;AACD;;AACD,QAAK,cAAL;AACA,QAAK,YAAL;AACC,QAAI6D,WAAJ,EAAiB;AAChBlJ,gBAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BuC,0CAA3B,CAAsEpH,cAAcjF,GAApF,EAAyFwI,aAAapE,IAAtG,EAA4GS,UAA5G,EAAwH;AAAEa,UAAI,IAAIC,IAAJ,CAASwD,SAASX,aAAa9C,EAAb,CAAgB0D,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAAN;AAAgEyC,gBAAU;AAA1E,MAAxH;AACA,KAFD,MAEO;AACNrM,gBAAW8M,YAAX,CAAwBrH,cAAcjF,GAAtC,EAA2CwI,aAAapE,IAAxD,EAA8DS,UAA9D,EAA0E,KAA1E;AACA;;AACD;;AACD,QAAK,iBAAL;AACA,QAAK,eAAL;AACC,QAAI,CAAC6D,WAAL,EAAkB;AACjBlJ,gBAAW+M,WAAX,CAAuBtH,aAAvB;AACA;;AACD;;AACD,QAAK,mBAAL;AACA,QAAK,iBAAL;AACC,QAAI,CAACyD,WAAL,EAAkB;AACjBlJ,gBAAWgN,aAAX,CAAyBvH,aAAzB;AACA;;AACD;;AACD,QAAK,YAAL;AACC,QAAIuD,aAAaiE,IAAb,IAAqBjE,aAAaiE,IAAb,CAAkBC,oBAAlB,KAA2CnB,SAApE,EAA+E;AAC9E,WAAMoB,UAAU;AACfC,kBAAa,SAASpE,aAAa9C,EAAb,CAAgBnD,OAAhB,CAAwB,KAAxB,EAA+B,GAA/B,CAAqC,EAD5C;AAEf6B,YAAMoE,aAAaiE,IAAb,CAAkBrI,IAFT;AAGfyI,YAAMrE,aAAaiE,IAAb,CAAkBI,IAHT;AAIfjN,YAAM4I,aAAaiE,IAAb,CAAkBK,QAJT;AAKf3H,WAAKF,cAAcjF;AALJ,MAAhB;AAOA,YAAO,KAAK+M,mBAAL,CAAyBJ,OAAzB,EAAkCnE,aAAaiE,IAAb,CAAkBC,oBAApD,EAA0E7H,UAA1E,EAAsFI,aAAtF,EAAqG,IAAIU,IAAJ,CAASwD,SAASX,aAAa9C,EAAb,CAAgB0D,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAArG,EAA+JV,WAA/J,CAAP;AACA;;AACD;;AACD,QAAK,cAAL;AACC1J,WAAOK,KAAP,CAAa8C,KAAb,CAAmB,8BAAnB;AACA;;AACD,QAAK,cAAL;AACCnD,WAAOK,KAAP,CAAa8C,KAAb,CAAmB,gCAAnB;AACA;;AACD,QAAK,aAAL;AACC,QAAIqG,aAAaiD,WAAb,IAA4BjD,aAAaiD,WAAb,CAAyB,CAAzB,CAA5B,IAA2DjD,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B3C,IAA3F,EAAiG;AAChGV,oBAAe;AACdjD,WAAKF,cAAcjF,GADL;AAEdgN,SAAG,gBAFW;AAGdnE,WAAK,EAHS;AAIdE,SAAG;AACF/I,YAAK6E,WAAW7E,GADd;AAEF8E,iBAAUD,WAAWC;AAFnB,OAJW;AAQd2G,mBAAa,CAAC;AACb,eAAS,KAAKrJ,mCAAL,CAAyCoG,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B3C,IAArE,CADI;AAEb,sBAAgBN,aAAaiD,WAAb,CAAyB,CAAzB,EAA4BwB,cAF/B;AAGb,sBAAgBC,yBAAyB1E,aAAaiD,WAAb,CAAyB,CAAzB,EAA4BwB,cAArD,CAHH;AAIb,aAAO,IAAItH,IAAJ,CAASwD,SAASX,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B/F,EAA5B,CAA+B0D,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAAT,IAAyD,IAAlE;AAJM,OAAD;AARC,MAAf;;AAgBA,SAAI,CAACV,WAAL,EAAkB;AACjBlJ,iBAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BqD,sBAA3B,CAAmD,SAAS3E,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B2B,UAAY,IAAI5E,aAAaiD,WAAb,CAAyB,CAAzB,EAA4B/F,EAA5B,CAA+BnD,OAA/B,CAAuC,KAAvC,EAA8C,GAA9C,CAAoD,EAA5J,EAA+J6F,aAAaW,CAA5K,EAA+K,IAA/K,EAAqL,IAAIpD,IAAJ,CAASwD,SAASX,aAAa9C,EAAb,CAAgB0D,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD,CAArL;AACA;;AAED,YAAOhB,YAAP;AACA,KAtBD,MAsBO;AACNpJ,YAAOK,KAAP,CAAa8C,KAAb,CAAmB,gCAAnB;AACA;;AACD;;AACD,QAAK,eAAL;AACCnD,WAAOK,KAAP,CAAa8C,KAAb,CAAmB,+BAAnB;AACA;AA5IF;AA8IA,EA/jBgB,CAikBjB;;;;;;;MAjkBiB,CAykBjB;;;AACA4K,qBAAoBJ,OAApB,EAA6BU,YAA7B,EAA2CxI,UAA3C,EAAuDI,aAAvD,EAAsEqI,SAAtE,EAAiF5E,WAAjF,EAA8F;AAC7F,QAAMd,MAAMhH,IAAIN,OAAJ,CAAY,KAAZ,CAAZ;;AACA,QAAMiN,gBAAgB,SAASC,IAAT,CAAcH,YAAd,IAA8BzM,IAAIN,OAAJ,CAAY,OAAZ,CAA9B,GAAqDM,IAAIN,OAAJ,CAAY,MAAZ,CAA3E;AACA,QAAMmN,YAAY7F,IAAI8F,KAAJ,CAAUL,YAAV,EAAwB,IAAxB,CAAlB;AACAI,YAAUE,OAAV,GAAoB;AAAE,oBAAkB,UAAU,KAAK7M,QAAU;AAA7C,GAApB;AACAyM,gBAAcxM,GAAd,CAAkB0M,SAAlB,EAA6BnO,OAAOsO,eAAP,CAAwBC,MAAD,IAAY;AAC/D,SAAMC,YAAYC,WAAWC,QAAX,CAAoB,SAApB,CAAlB;AAEAF,aAAUG,MAAV,CAAiBtB,OAAjB,EAA0BkB,MAA1B,EAAkC,CAAC3L,GAAD,EAAMuK,IAAN,KAAe;AAChD,QAAIvK,GAAJ,EAAS;AACR,WAAM,IAAIgM,KAAJ,CAAUhM,GAAV,CAAN;AACA,KAFD,MAEO;AACN,WAAM0F,MAAM6E,KAAK7E,GAAL,CAASrF,OAAT,CAAiBjD,OAAO6O,WAAP,EAAjB,EAAuC,GAAvC,CAAZ;AACA,WAAMC,aAAa;AAClBC,aAAO5B,KAAKrI,IADM;AAElBkK,kBAAY1G;AAFM,MAAnB;;AAKA,SAAI,aAAa4F,IAAb,CAAkBf,KAAK7M,IAAvB,CAAJ,EAAkC;AACjCwO,iBAAWG,SAAX,GAAuB3G,GAAvB;AACAwG,iBAAWI,UAAX,GAAwB/B,KAAK7M,IAA7B;AACAwO,iBAAWK,UAAX,GAAwBhC,KAAKI,IAA7B;AACAuB,iBAAWM,gBAAX,GAA8BjC,KAAKkC,QAAL,IAAiBlC,KAAKkC,QAAL,CAAc9B,IAA7D;AACA;;AACD,SAAI,aAAaW,IAAb,CAAkBf,KAAK7M,IAAvB,CAAJ,EAAkC;AACjCwO,iBAAWQ,SAAX,GAAuBhH,GAAvB;AACAwG,iBAAWS,UAAX,GAAwBpC,KAAK7M,IAA7B;AACAwO,iBAAWU,UAAX,GAAwBrC,KAAKI,IAA7B;AACA;;AACD,SAAI,aAAaW,IAAb,CAAkBf,KAAK7M,IAAvB,CAAJ,EAAkC;AACjCwO,iBAAWW,SAAX,GAAuBnH,GAAvB;AACAwG,iBAAWY,UAAX,GAAwBvC,KAAK7M,IAA7B;AACAwO,iBAAWa,UAAX,GAAwBxC,KAAKI,IAA7B;AACA;;AAED,WAAMhE,MAAM;AACX1D,WAAKwH,QAAQxH,GADF;AAEXO,UAAI4H,SAFO;AAGXzE,WAAK,EAHM;AAIX4D,YAAM;AACLzM,YAAKyM,KAAKzM;AADL,OAJK;AAOXkP,iBAAW,KAPA;AAQXzD,mBAAa,CAAC2C,UAAD;AARF,MAAZ;;AAWA,SAAI1F,WAAJ,EAAiB;AAChBG,UAAIgD,QAAJ,GAAe,aAAf;AACA;;AAED,SAAIc,QAAQC,UAAR,IAAuB,OAAOD,QAAQC,UAAf,KAA8B,QAAzD,EAAoE;AACnE/D,UAAI,KAAJ,IAAa8D,QAAQC,UAArB;AACA;;AAED,YAAOpN,WAAWwK,WAAX,CAAuBnF,UAAvB,EAAmCgE,GAAnC,EAAwC5D,aAAxC,EAAuD,IAAvD,CAAP;AACA;AACD,IAhDD;AAiDA,GApD4B,CAA7B;AAqDA;;AAEDlD,2BAA0B;AACzBvC,aAAW2P,SAAX,CAAqBxP,GAArB,CAAyB,kBAAzB,EAA6C,KAAKyP,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAA7C,EAA8E7P,WAAW2P,SAAX,CAAqBG,QAArB,CAA8BC,GAA5G,EAAiH,iBAAjH;AACA/P,aAAW2P,SAAX,CAAqBxP,GAArB,CAAyB,oBAAzB,EAA+C,KAAK6P,qBAAL,CAA2BH,IAA3B,CAAgC,IAAhC,CAA/C,EAAsF7P,WAAW2P,SAAX,CAAqBG,QAArB,CAA8BC,GAApH,EAAyH,oBAAzH;AACA/P,aAAW2P,SAAX,CAAqBxP,GAArB,CAAyB,aAAzB,EAAwC,KAAK8P,mBAAL,CAAyBJ,IAAzB,CAA8B,IAA9B,CAAxC,EAA6E7P,WAAW2P,SAAX,CAAqBG,QAArB,CAA8BC,GAA3G,EAAgH,yBAAhH;AACA/P,aAAW2P,SAAX,CAAqBxP,GAArB,CAAyB,eAAzB,EAA0C,KAAK+P,qBAAL,CAA2BL,IAA3B,CAAgC,IAAhC,CAA1C,EAAiF7P,WAAW2P,SAAX,CAAqBG,QAArB,CAA8BC,GAA/G,EAAoH,2BAApH;AACA;;AAEDvN,6BAA4B;AAC3BxC,aAAW2P,SAAX,CAAqBQ,MAArB,CAA4B,kBAA5B,EAAgD,iBAAhD;AACAnQ,aAAW2P,SAAX,CAAqBQ,MAArB,CAA4B,oBAA5B,EAAkD,oBAAlD;AACAnQ,aAAW2P,SAAX,CAAqBQ,MAArB,CAA4B,aAA5B,EAA2C,yBAA3C;AACAnQ,aAAW2P,SAAX,CAAqBQ,MAArB,CAA4B,eAA5B,EAA6C,2BAA7C;AACA;;AAED7N,0BAAyB;AACxB,QAAM8N,gBAAgB,KAAK/O,WAAL,CAAiB+O,aAAvC;AACA,OAAK1O,GAAL,CAAS2O,EAAT,CAAYD,cAAcE,GAAd,CAAkBC,aAA9B,EAA6C,MAAM;AAClD/Q,UAAOG,UAAP,CAAkBwC,IAAlB,CAAuB,oBAAvB;AACA,GAFD;AAIA,OAAKT,GAAL,CAAS2O,EAAT,CAAYD,cAAcE,GAAd,CAAkBE,mBAA9B,EAAmD,MAAM;AACxD,QAAKvO,UAAL;AACA,GAFD;AAIA,OAAKP,GAAL,CAAS2O,EAAT,CAAYD,cAAcE,GAAd,CAAkBG,UAA9B,EAA0C,MAAM;AAC/C,QAAKxO,UAAL;AACA,GAFD;AAIA,QAAMyO,aAAa,KAAKrP,WAAL,CAAiBqP,UAApC,CAdwB,CAgBxB;;;;;;;;;;;;;AAaA,OAAKhP,GAAL,CAAS2O,EAAT,CAAYK,WAAWC,OAAvB,EAAgC7Q,OAAOsO,eAAP,CAAwBpF,YAAD,IAAkB;AACxExJ,UAAOI,MAAP,CAAckE,KAAd,CAAoB,wBAApB,EAA8CkF,YAA9C;;AACA,OAAIA,YAAJ,EAAkB;AACjB,SAAK2C,cAAL,CAAoB3C,YAApB;AACA;AACD,GAL+B,CAAhC;AAOA,OAAKtH,GAAL,CAAS2O,EAAT,CAAYK,WAAWE,cAAvB,EAAuC9Q,OAAOsO,eAAP,CAAwByC,WAAD,IAAiB;AAC9ErR,UAAOI,MAAP,CAAckE,KAAd,CAAoB,+BAApB,EAAqD+M,WAArD;;AACA,OAAIA,WAAJ,EAAiB;AAChB,SAAKpF,oBAAL,CAA0BoF,WAA1B;AACA;AACD,GALsC,CAAvC;AAOA,OAAKnP,GAAL,CAAS2O,EAAT,CAAYK,WAAWI,gBAAvB,EAAyChR,OAAOsO,eAAP,CAAwByC,WAAD,IAAiB;AAChFrR,UAAOI,MAAP,CAAckE,KAAd,CAAoB,iCAApB,EAAuD+M,WAAvD;;AACA,OAAIA,WAAJ,EAAiB;AAChB,SAAKpG,sBAAL,CAA4BoG,WAA5B;AACA;AACD,GALwC,CAAzC,EA3CwB,CAkDxB;;;;;;;;;;;;;;;;AAgBA,OAAKnP,GAAL,CAAS2O,EAAT,CAAYK,WAAWK,eAAvB,EAAwCjR,OAAOsO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAxC,EAlEwB,CAoExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAK1M,GAAL,CAAS2O,EAAT,CAAYK,WAAWM,cAAvB,EAAuClR,OAAOsO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAvC,EAnGwB,CAqGxB;;;;;;;AAOA,OAAK1M,GAAL,CAAS2O,EAAT,CAAYK,WAAWO,YAAvB,EAAqCnR,OAAOsO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAArC,EA5GwB,CA8GxB;;;;;;;;AAQA,OAAK1M,GAAL,CAAS2O,EAAT,CAAYK,WAAWQ,eAAvB,EAAwCpR,OAAOsO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAxC,EAtHwB,CAwHxB;;;;;;;;;;;;;AAaA,OAAK1M,GAAL,CAAS2O,EAAT,CAAYK,WAAWS,cAAvB,EAAuCrR,OAAOsO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAvC,EArIwB,CAuIxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAK1M,GAAL,CAAS2O,EAAT,CAAYK,WAAWU,YAAvB,EAAqCtR,OAAOsO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAArC,EAtKwB,CAwKxB;;;;;;;AAOA,OAAK1M,GAAL,CAAS2O,EAAT,CAAYK,WAAWW,UAAvB,EAAmCvR,OAAOsO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAnC,EA/KwB,CAiLxB;;;;;;;;;;;;;AAaA,OAAK1M,GAAL,CAAS2O,EAAT,CAAYK,WAAWY,YAAvB,EAAqCxR,OAAOsO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAArC,EA9LwB,CAgMxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,OAAK1M,GAAL,CAAS2O,EAAT,CAAYK,WAAWa,SAAvB,EAAkCzR,OAAOsO,eAAP,CAAuB,MAAM,CAAE,CAA/B,CAAlC;AACA;;AAEDoD,kBAAiBC,iBAAjB,EAAoC;AACnCjS,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,sCAAnB,EAA2D2N,iBAA3D;AACA,MAAIC,WAAWxN,KAAK3C,GAAL,CAAS,qCAAT,EAAgD;AAAE4C,WAAQ;AAAEC,WAAO,KAAK9C;AAAd;AAAV,GAAhD,CAAf;;AACA,MAAIoQ,YAAYA,SAASpN,IAArB,IAA6B3D,EAAEgR,OAAF,CAAUD,SAASpN,IAAT,CAAcsN,QAAxB,CAA7B,IAAkEF,SAASpN,IAAT,CAAcsN,QAAd,CAAuBC,MAAvB,GAAgC,CAAtG,EAAyG;AACxG,QAAK,MAAMxN,OAAX,IAAsBqN,SAASpN,IAAT,CAAcsN,QAApC,EAA8C;AAC7C,QAAIvN,QAAQO,IAAR,KAAiB6M,iBAAjB,IAAsCpN,QAAQyN,SAAR,KAAsB,IAAhE,EAAsE;AACrE,YAAOzN,OAAP;AACA;AACD;AACD;;AACDqN,aAAWxN,KAAK3C,GAAL,CAAS,mCAAT,EAA8C;AAAE4C,WAAQ;AAAEC,WAAO,KAAK9C;AAAd;AAAV,GAA9C,CAAX;;AACA,MAAIoQ,YAAYA,SAASpN,IAArB,IAA6B3D,EAAEgR,OAAF,CAAUD,SAASpN,IAAT,CAAcyN,MAAxB,CAA7B,IAAgEL,SAASpN,IAAT,CAAcyN,MAAd,CAAqBF,MAArB,GAA8B,CAAlG,EAAqG;AACpG,QAAK,MAAMpN,KAAX,IAAoBiN,SAASpN,IAAT,CAAcyN,MAAlC,EAA0C;AACzC,QAAItN,MAAMG,IAAN,KAAe6M,iBAAnB,EAAsC;AACrC,YAAOhN,KAAP;AACA;AACD;AACD;AACD;;AAEDuN,mBAAkBvL,MAAlB,EAA0BwL,OAA1B,EAAmC;AAClCzS,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,4BAAnB;AACA,QAAM4N,WAAWxN,KAAK3C,GAAL,CAAU,yBAAyBkF,MAAQ,UAA3C,EAAsD;AAAEtC,WAAQxD,EAAE6I,MAAF,CAAS;AAAEpF,WAAO,KAAK9C;AAAd,IAAT,EAAmC2Q,OAAnC;AAAV,GAAtD,CAAjB;;AACA,MAAIP,YAAYA,SAASpN,IAArB,IAA6B3D,EAAEgR,OAAF,CAAUD,SAASpN,IAAT,CAAc4N,QAAxB,CAA7B,IAAkER,SAASpN,IAAT,CAAc4N,QAAd,CAAuBL,MAAvB,GAAgC,CAAtG,EAAyG;AACxG,OAAIM,SAAS,CAAb;;AACA,QAAK,MAAMtM,OAAX,IAAsB6L,SAASpN,IAAT,CAAc4N,QAAd,CAAuBE,OAAvB,EAAtB,EAAwD;AACvD5S,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,WAAnB,EAAgC+B,OAAhC;;AACA,QAAI,CAACsM,MAAD,IAAWtM,QAAQK,EAAR,GAAaiM,MAA5B,EAAoC;AACnCA,cAAStM,QAAQK,EAAjB;AACA;;AACDL,YAAQxB,OAAR,GAAkB4N,QAAQ5N,OAA1B;AACA,SAAKsH,cAAL,CAAoB9F,OAApB,EAA6B,IAA7B;AACA;;AACD,UAAO;AAAEwM,cAAUX,SAASpN,IAAT,CAAc+N,QAA1B;AAAoCnM,QAAIiM;AAAxC,IAAP;AACA;AACD;;AAEDG,sBAAqB3M,GAArB,EAA0B4M,UAA1B,EAAsC;AACrC/S,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,iDAAnB,EAAsEyO,WAAWvN,EAAjF,EAAqFW,GAArF;AACA,QAAM+L,WAAWxN,KAAK3C,GAAL,CAAU,yBAAyBgR,WAAW9L,MAAQ,OAAtD,EAA8D;AAAEtC,WAAQ;AAAEC,WAAO,KAAK9C,QAAd;AAAwB+C,aAASkO,WAAWvN;AAA5C;AAAV,GAA9D,CAAjB;;AACA,MAAI0M,YAAYA,SAASpN,IAAzB,EAA+B;AAC9B,SAAMA,OAAOiO,WAAW9L,MAAX,KAAsB,UAAtB,GAAmCiL,SAASpN,IAAT,CAAcD,OAAjD,GAA2DqN,SAASpN,IAAT,CAAcG,KAAtF;;AACA,OAAIH,QAAQ3D,EAAEgR,OAAF,CAAUrN,KAAKa,OAAf,CAAR,IAAmCb,KAAKa,OAAL,CAAa0M,MAAb,GAAsB,CAA7D,EAAgE;AAC/D,SAAK,MAAM3M,MAAX,IAAqBZ,KAAKa,OAA1B,EAAmC;AAClC,WAAM0B,OAAO,KAAK3D,cAAL,CAAoBgC,MAApB,KAA+B,KAAK/B,aAAL,CAAmB+B,MAAnB,CAA5C;;AACA,SAAI2B,IAAJ,EAAU;AACTrH,aAAOK,KAAP,CAAaiE,KAAb,CAAmB,qBAAnB,EAA0C+C,KAAKvB,QAA/C,EAAyDK,GAAzD;AACA3F,iBAAWsM,aAAX,CAAyB3G,GAAzB,EAA8BkB,IAA9B,EAAoC,IAApC,EAA0C,IAA1C;AACA;AACD;AACD;;AAED,OAAIP,QAAQ,EAAZ;AACA,OAAIkM,iBAAiB,CAArB;AACA,OAAIC,gBAAgB,IAApB;;AACA,OAAInO,QAAQA,KAAKgC,KAAb,IAAsBhC,KAAKgC,KAAL,CAAW7F,KAArC,EAA4C;AAC3C6F,YAAQhC,KAAKgC,KAAL,CAAW7F,KAAnB;AACA+R,qBAAiBlO,KAAKgC,KAAL,CAAWC,QAA5B;AACAkM,oBAAgBnO,KAAKgC,KAAL,CAAWlB,OAA3B;AACA;;AAED,OAAId,QAAQA,KAAKkC,OAAb,IAAwBlC,KAAKkC,OAAL,CAAa/F,KAAzC,EAAgD;AAC/C,QAAI+R,cAAJ,EAAoB;AACnB,SAAIA,iBAAiBlO,KAAKkC,OAAL,CAAaD,QAAlC,EAA4C;AAC3CD,cAAQhC,KAAKkC,OAAL,CAAaF,KAArB;AACAmM,sBAAgBnO,KAAKkC,OAAL,CAAapB,OAA7B;AACA;AACD,KALD,MAKO;AACNkB,aAAQhC,KAAKkC,OAAL,CAAaF,KAArB;AACAmM,qBAAgBnO,KAAKkC,OAAL,CAAapB,OAA7B;AACA;AACD;;AAED,OAAIkB,KAAJ,EAAW;AACV,UAAMlB,UAAU,KAAKlC,cAAL,CAAoBuP,aAApB,KAAsC,KAAKtP,aAAL,CAAmBsP,aAAnB,CAAtD;AACAjT,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,oBAAnB,EAAyC6B,GAAzC,EAA8CW,KAA9C,EAAqDlB,QAAQE,QAA7D;AACAtF,eAAW4M,aAAX,CAAyBjH,GAAzB,EAA8BW,KAA9B,EAAqClB,OAArC,EAA8C,KAA9C;AACA;AACD;AACD;;AAEDsN,UAAS/M,GAAT,EAAc4M,UAAd,EAA0B;AACzB,QAAMb,WAAWxN,KAAK3C,GAAL,CAAS,iCAAT,EAA4C;AAAE4C,WAAQ;AAAEC,WAAO,KAAK9C,QAAd;AAAwB+C,aAASkO,WAAWvN;AAA5C;AAAV,GAA5C,CAAjB;;AACA,MAAI0M,YAAYA,SAASpN,IAArB,IAA6B3D,EAAEgR,OAAF,CAAUD,SAASpN,IAAT,CAAcqO,KAAxB,CAA7B,IAA+DjB,SAASpN,IAAT,CAAcqO,KAAd,CAAoBd,MAApB,GAA6B,CAAhG,EAAmG;AAClG,QAAK,MAAMe,GAAX,IAAkBlB,SAASpN,IAAT,CAAcqO,KAAhC,EAAuC;AACtC,QAAIC,IAAI/M,OAAR,EAAiB;AAChB,WAAMgB,OAAO,KAAK3D,cAAL,CAAoB0P,IAAI/M,OAAJ,CAAYgB,IAAhC,CAAb;AACA,WAAMgM,SAAS;AACdlN,SADc;AAEd6H,SAAG,gBAFW;AAGdnE,WAAK,EAHS;AAIdE,SAAG;AACF/I,YAAKqG,KAAKrG,GADR;AAEF8E,iBAAUuB,KAAKvB;AAFb,OAJW;AAQd2G,mBAAa,CAAC;AACb,eAAS,KAAKrJ,mCAAL,CAAyCgQ,IAAI/M,OAAJ,CAAYyD,IAArD,CADI;AAEb,sBAAgBzC,KAAKvB,QAFR;AAGb,sBAAgBoI,yBAAyB7G,KAAKvB,QAA9B,CAHH;AAIb,aAAO,IAAIa,IAAJ,CAASwD,SAASiJ,IAAI/M,OAAJ,CAAYK,EAAZ,CAAe0D,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAT,IAAyC,IAAlD;AAJM,OAAD;AARC,MAAf;AAgBA5J,gBAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BqD,sBAA3B,CAAmD,SAASiF,IAAIvO,OAAS,IAAIuO,IAAI/M,OAAJ,CAAYK,EAAZ,CAAenD,OAAf,CAAuB,KAAvB,EAA8B,GAA9B,CAAoC,EAAjH,EAAoH8P,OAAOtJ,CAA3H,EAA8H,IAA9H,EAAoI,IAAIpD,IAAJ,CAASwD,SAASiJ,IAAI/M,OAAJ,CAAYK,EAAZ,CAAe0D,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAT,IAAyC,IAAlD,CAApI;AACA;AACD;AACD;AACD;;AAEDkJ,gBAAenN,GAAf,EAAoBoN,QAApB,EAA8B;AAC7BvT,SAAOK,KAAP,CAAasC,IAAb,CAAkB,kBAAlB,EAAsCwD,GAAtC;AACA,QAAMqN,kBAAkBhT,WAAWwD,MAAX,CAAkBC,KAAlB,CAAwBiD,WAAxB,CAAoCf,GAApC,CAAxB;;AACA,MAAIqN,eAAJ,EAAqB;AACpB,OAAI,KAAKnR,eAAL,CAAqB8D,GAArB,CAAJ,EAA+B;AAC9B,SAAK2M,oBAAL,CAA0B3M,GAA1B,EAA+B,KAAK9D,eAAL,CAAqB8D,GAArB,CAA/B;AAEAnG,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,8CAAnB,EAAmE,KAAKjC,eAAL,CAAqB8D,GAArB,CAAnE,EAA8FA,GAA9F;AACA,QAAIsN,UAAU,KAAKjB,iBAAL,CAAuB,KAAKnQ,eAAL,CAAqB8D,GAArB,EAA0Bc,MAAjD,EAAyD;AAAEpC,cAAS,KAAKxC,eAAL,CAAqB8D,GAArB,EAA0BX,EAArC;AAAyCkO,aAAQ;AAAjD,KAAzD,CAAd;;AACA,WAAOD,WAAWA,QAAQZ,QAA1B,EAAoC;AACnCY,eAAU,KAAKjB,iBAAL,CAAuB,KAAKnQ,eAAL,CAAqB8D,GAArB,EAA0Bc,MAAjD,EAAyD;AAAEpC,eAAS,KAAKxC,eAAL,CAAqB8D,GAArB,EAA0BX,EAArC;AAAyCkO,cAAQD,QAAQ/M;AAAzD,MAAzD,CAAV;AACA;;AAED1G,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,+CAAnB,EAAoE,KAAKjC,eAAL,CAAqB8D,GAArB,CAApE,EAA+FA,GAA/F;AACA,SAAK+M,QAAL,CAAc/M,GAAd,EAAmB,KAAK9D,eAAL,CAAqB8D,GAArB,CAAnB;AAEA,WAAOoN,UAAP;AACA,IAbD,MAaO;AACN,UAAMI,aAAa,KAAK3B,gBAAL,CAAsBwB,gBAAgBpO,IAAtC,CAAnB;;AACA,QAAIuO,UAAJ,EAAgB;AACf,UAAKtR,eAAL,CAAqB8D,GAArB,IAA4B;AAAEX,UAAImO,WAAWnO,EAAjB;AAAqByB,cAAQ0M,WAAWnO,EAAX,CAAcf,MAAd,CAAqB,CAArB,MAA4B,GAA5B,GAAkC,UAAlC,GAA+C;AAA5E,MAA5B;AACA,YAAO,KAAK6O,cAAL,CAAoBnN,GAApB,EAAyBoN,QAAzB,CAAP;AACA,KAHD,MAGO;AACNvT,YAAOK,KAAP,CAAa8C,KAAb,CAAmB,+CAAnB,EAAoEqQ,gBAAgBpO,IAApF;AACA,YAAOmO,SAAS,IAAIjT,OAAO4O,KAAX,CAAiB,4BAAjB,EAA+C,+CAA/C,CAAT,CAAP;AACA;AACD;AACD,GAxBD,MAwBO;AACNlP,UAAOK,KAAP,CAAa8C,KAAb,CAAmB,mDAAnB,EAAwEgD,GAAxE;AACA,UAAOoN,SAAS,IAAIjT,OAAO4O,KAAX,CAAiB,oBAAjB,EAAuC,cAAvC,CAAT,CAAP;AACA;AACD;;AAEDjM,2BAA0B;AACzBjD,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,wBAAnB;AACA,MAAI4N,WAAWxN,KAAK3C,GAAL,CAAS,qCAAT,EAAgD;AAAE4C,WAAQ;AAAEC,WAAO,KAAK9C;AAAd;AAAV,GAAhD,CAAf;;AACA,MAAIoQ,YAAYA,SAASpN,IAArB,IAA6B3D,EAAEgR,OAAF,CAAUD,SAASpN,IAAT,CAAcsN,QAAxB,CAA7B,IAAkEF,SAASpN,IAAT,CAAcsN,QAAd,CAAuBC,MAAvB,GAAgC,CAAtG,EAAyG;AACxG,QAAK,MAAMuB,YAAX,IAA2B1B,SAASpN,IAAT,CAAcsN,QAAzC,EAAmD;AAClD,UAAMoB,kBAAkBhT,WAAWwD,MAAX,CAAkBC,KAAlB,CAAwBkB,aAAxB,CAAsCyO,aAAaxO,IAAnD,EAAyD;AAAEiF,aAAQ;AAAErJ,WAAK;AAAP;AAAV,KAAzD,CAAxB;;AACA,QAAIwS,eAAJ,EAAqB;AACpB,UAAKnR,eAAL,CAAqBmR,gBAAgBxS,GAArC,IAA4C;AAAEwE,UAAIoO,aAAapO,EAAnB;AAAuByB,cAAQ2M,aAAapO,EAAb,CAAgBf,MAAhB,CAAuB,CAAvB,MAA8B,GAA9B,GAAoC,UAApC,GAAiD;AAAhF,MAA5C;AACA;AACD;AACD;;AACDyN,aAAWxN,KAAK3C,GAAL,CAAS,mCAAT,EAA8C;AAAE4C,WAAQ;AAAEC,WAAO,KAAK9C;AAAd;AAAV,GAA9C,CAAX;;AACA,MAAIoQ,YAAYA,SAASpN,IAArB,IAA6B3D,EAAEgR,OAAF,CAAUD,SAASpN,IAAT,CAAcyN,MAAxB,CAA7B,IAAgEL,SAASpN,IAAT,CAAcyN,MAAd,CAAqBF,MAArB,GAA8B,CAAlG,EAAqG;AACpG,QAAK,MAAMwB,UAAX,IAAyB3B,SAASpN,IAAT,CAAcyN,MAAvC,EAA+C;AAC9C,UAAMiB,kBAAkBhT,WAAWwD,MAAX,CAAkBC,KAAlB,CAAwBkB,aAAxB,CAAsC0O,WAAWzO,IAAjD,EAAuD;AAAEiF,aAAQ;AAAErJ,WAAK;AAAP;AAAV,KAAvD,CAAxB;;AACA,QAAIwS,eAAJ,EAAqB;AACpB,UAAKnR,eAAL,CAAqBmR,gBAAgBxS,GAArC,IAA4C;AAAEwE,UAAIqO,WAAWrO,EAAjB;AAAqByB,cAAQ4M,WAAWrO,EAAX,CAAcf,MAAd,CAAqB,CAArB,MAA4B,GAA5B,GAAkC,UAAlC,GAA+C;AAA5E,MAA5C;AACA;AACD;AACD;AACD;;AAED+L,uBAAsBsD,oBAAtB,EAA4C;AAC3C9T,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,uBAAnB,EAA4CwP,oBAA5C;AAEA,OAAKC,wBAAL,CAA8BD,oBAA9B;AACA;;AAEDrD,qBAAoBuD,WAApB,EAAiCtI,QAAjC,EAA2C;AAC1C1L,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,qBAAnB;;AAEA,MAAI0P,eAAetI,QAAnB,EAA6B;AAC5B,OAAI,KAAKpJ,YAAL,CAAkB2R,MAAlB,CAA0B,MAAMD,WAAa,GAAGtI,QAAU,EAA1D,CAAJ,EAAkE;AACjE;AACA;AACA;;AACD,SAAMN,YAAY5K,WAAWwD,MAAX,CAAkB8G,QAAlB,CAA2B5D,WAA3B,CAAuC8M,WAAvC,CAAlB;;AACA,OAAI5I,SAAJ,EAAe;AACd,UAAMwI,eAAe,KAAKvR,eAAL,CAAqB+I,UAAUjF,GAA/B,EAAoCX,EAAzD;AACA,UAAM0O,UAAU,KAAKC,UAAL,CAAgB/I,SAAhB,CAAhB;AACA,SAAKgJ,wBAAL,CAA8B1I,SAASnI,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAA9B,EAA0DqQ,YAA1D,EAAwEM,OAAxE;AACA;AACD;AACD;;AAEDxD,uBAAsBsD,WAAtB,EAAmCtI,QAAnC,EAA6C;AAC5C1L,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,uBAAnB;;AAEA,MAAI0P,eAAetI,QAAnB,EAA6B;AAC5B,OAAI,KAAKpJ,YAAL,CAAkB2R,MAAlB,CAA0B,QAAQD,WAAa,GAAGtI,QAAU,EAA5D,CAAJ,EAAoE;AACnE;AACA;AACA;;AAED,SAAMN,YAAY5K,WAAWwD,MAAX,CAAkB8G,QAAlB,CAA2B5D,WAA3B,CAAuC8M,WAAvC,CAAlB;;AACA,OAAI5I,SAAJ,EAAe;AACd,UAAMwI,eAAe,KAAKvR,eAAL,CAAqB+I,UAAUjF,GAA/B,EAAoCX,EAAzD;AACA,UAAM0O,UAAU,KAAKC,UAAL,CAAgB/I,SAAhB,CAAhB;AACA,SAAKiJ,yBAAL,CAA+B3I,SAASnI,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAA/B,EAA2DqQ,YAA3D,EAAyEM,OAAzE;AACA;AACD;AACD;;AAED9D,iBAAgBkE,aAAhB,EAA+B;AAC9BtU,SAAOK,KAAP,CAAaiE,KAAb,CAAmB,iBAAnB,EAAsCgQ,aAAtC;;AAEA,MAAIA,cAAcpK,QAAlB,EAA4B;AAC3B;AACA,QAAKqK,2BAAL,CAAiCD,aAAjC;AACA,UAAOA,aAAP;AACA,GAP6B,CAQ9B;;;AACA,MAAIA,cAActT,GAAd,CAAkBuJ,OAAlB,CAA0B,QAA1B,MAAwC,CAA5C,EAA+C;AAC9C,UAAO+J,aAAP;AACA,GAX6B,CAa9B;;;AACA,QAAME,mBAAmBhU,WAAWC,QAAX,CAAoBsB,GAApB,CAAwB,qBAAxB,IAAiDZ,EAAEsT,IAAF,CAAO,KAAKpS,eAAZ,CAAjD,GAAgFlB,EAAEuT,KAAF,CAAQlU,WAAWC,QAAX,CAAoBsB,GAApB,CAAwB,0BAAxB,CAAR,EAA6D,KAA7D,KAAuE,EAAhL,CAd8B,CAe9B;;AACA,MAAIyS,iBAAiBjK,OAAjB,CAAyB+J,cAAcnO,GAAvC,MAAgD,CAAC,CAArD,EAAwD;AACvD,QAAKwO,kBAAL,CAAwB,KAAKtS,eAAL,CAAqBiS,cAAcnO,GAAnC,CAAxB,EAAiEmO,aAAjE;AACA;;AACD,SAAOA,aAAP;AACA,EAjmCgB,CAmmCjB;;;;AAGAF,0BAAyB1I,QAAzB,EAAmCkI,YAAnC,EAAiDM,OAAjD,EAA0D;AACzD,MAAIxI,YAAYkI,YAAZ,IAA4BM,OAAhC,EAAyC;AACxC,SAAMpP,OAAO;AACZF,WAAO,KAAK9C,QADA;AAEZsD,UAAMsG,QAFM;AAGZ7G,aAAS+O,YAHG;AAIZgB,eAAWV;AAJC,IAAb;AAOAlU,UAAOK,KAAP,CAAaiE,KAAb,CAAmB,+BAAnB;AACA,SAAMuQ,aAAanQ,KAAKoQ,IAAL,CAAU,qCAAV,EAAiD;AAAEnQ,YAAQG;AAAV,IAAjD,CAAnB;;AACA,OAAI+P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW/P,IAA5C,IAAoD+P,WAAW/P,IAAX,CAAgBC,EAAhB,KAAuB,IAA/E,EAAqF;AACpF/E,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,yBAAnB;AACA;AACD;AACD,EArnCgB,CAunCjB;;;;AAGA+P,2BAA0B3I,QAA1B,EAAoCkI,YAApC,EAAkDM,OAAlD,EAA2D;AAC1D,MAAIxI,YAAYkI,YAAZ,IAA4BM,OAAhC,EAAyC;AACxC,SAAMpP,OAAO;AACZF,WAAO,KAAK9C,QADA;AAEZsD,UAAMsG,QAFM;AAGZ7G,aAAS+O,YAHG;AAIZgB,eAAWV;AAJC,IAAb;AAOAlU,UAAOK,KAAP,CAAaiE,KAAb,CAAmB,kCAAnB;AACA,SAAMuQ,aAAanQ,KAAKoQ,IAAL,CAAU,wCAAV,EAAoD;AAAEnQ,YAAQG;AAAV,IAApD,CAAnB;;AACA,OAAI+P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW/P,IAA5C,IAAoD+P,WAAW/P,IAAX,CAAgBC,EAAhB,KAAuB,IAA/E,EAAqF;AACpF/E,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,6BAAnB;AACA;AACD;AACD;;AAEDyP,0BAAyBO,aAAzB,EAAwC;AACvC,MAAIA,aAAJ,EAAmB;AAClB,SAAMxP,OAAO;AACZF,WAAO,KAAK9C,QADA;AAEZ4E,QAAI,KAAKyN,UAAL,CAAgBG,aAAhB,CAFQ;AAGZzP,aAAS,KAAKxC,eAAL,CAAqBiS,cAAcnO,GAAnC,EAAwCX,EAHrC;AAIZwP,aAAS;AAJG,IAAb;AAOAhV,UAAOK,KAAP,CAAaiE,KAAb,CAAmB,8BAAnB,EAAmDQ,IAAnD;AACA,SAAM+P,aAAanQ,KAAKoQ,IAAL,CAAU,mCAAV,EAA+C;AAAEnQ,YAAQG;AAAV,IAA/C,CAAnB;;AACA,OAAI+P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW/P,IAA5C,IAAoD+P,WAAW/P,IAAX,CAAgBC,EAAhB,KAAuB,IAA/E,EAAqF;AACpF/E,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,0BAAnB;AACA;AACD;AACD;;AAEDqQ,oBAAmBf,YAAnB,EAAiCU,aAAjC,EAAgD;AAC/C,MAAIV,gBAAgBA,aAAapO,EAAjC,EAAqC;AACpC,OAAIyP,UAAU/G,yBAAyBoG,cAAcvK,CAAd,IAAmBuK,cAAcvK,CAAd,CAAgBjE,QAA5D,CAAd;;AACA,OAAImP,OAAJ,EAAa;AACZA,cAAU3U,OAAO6O,WAAP,GAAqB5L,OAArB,CAA6B,KAA7B,EAAoC,EAApC,IAA0C0R,OAApD;AACA;;AACD,SAAMnQ,OAAO;AACZF,WAAO,KAAK9C,QADA;AAEZgI,UAAMwK,cAAczK,GAFR;AAGZhF,aAAS+O,aAAapO,EAHV;AAIZM,cAAUwO,cAAcvK,CAAd,IAAmBuK,cAAcvK,CAAd,CAAgBjE,QAJjC;AAKZoP,cAAUD,OALE;AAMZE,gBAAY;AANA,IAAb;AAQAnV,UAAOK,KAAP,CAAaiE,KAAb,CAAmB,uBAAnB,EAA4CQ,IAA5C;AACA,SAAM+P,aAAanQ,KAAKoQ,IAAL,CAAU,wCAAV,EAAoD;AAAEnQ,YAAQG;AAAV,IAApD,CAAnB;;AACA,OAAI+P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW/P,IAA5C,IAAoD+P,WAAW/P,IAAX,CAAgBuB,OAApE,IAA+EwO,WAAW/P,IAAX,CAAgBuB,OAAhB,CAAwB4C,MAAvG,IAAiH4L,WAAW/P,IAAX,CAAgBuB,OAAhB,CAAwBK,EAA7I,EAAiJ;AAChJlG,eAAWwD,MAAX,CAAkB8G,QAAlB,CAA2BsK,uBAA3B,CAAmDd,cAActT,GAAjE,EAAsE6T,WAAW/P,IAAX,CAAgBuB,OAAhB,CAAwB4C,MAA9F,EAAsG4L,WAAW/P,IAAX,CAAgBuB,OAAhB,CAAwBK,EAA9H;AACA1G,WAAOK,KAAP,CAAaiE,KAAb,CAAoB,eAAegQ,cAActT,GAAK,eAAe6T,WAAW/P,IAAX,CAAgBuB,OAAhB,CAAwBK,EAAI,eAAemO,WAAW/P,IAAX,CAAgBuB,OAAhB,CAAwB4C,MAAQ,EAAhJ;AACA;AACD;AACD,EAjrCgB,CAmrCjB;;;;AAGAoM,0BAAyBzB,YAAzB,EAAuCU,aAAvC,EAAsD;AACrD,MAAIV,gBAAgBA,aAAapO,EAAjC,EAAqC;AACpC,SAAMV,OAAO;AACZF,WAAO,KAAK9C,QADA;AAEZ4E,QAAI,KAAKyN,UAAL,CAAgBG,aAAhB,CAFQ;AAGZzP,aAAS+O,aAAapO,EAHV;AAIZsE,UAAMwK,cAAczK,GAJR;AAKZmL,aAAS;AALG,IAAb;AAOAhV,UAAOK,KAAP,CAAaiE,KAAb,CAAmB,6BAAnB,EAAkDQ,IAAlD;AACA,SAAM+P,aAAanQ,KAAKoQ,IAAL,CAAU,mCAAV,EAA+C;AAAEnQ,YAAQG;AAAV,IAA/C,CAAnB;;AACA,OAAI+P,WAAWE,UAAX,KAA0B,GAA1B,IAAiCF,WAAW/P,IAA5C,IAAoD+P,WAAW/P,IAAX,CAAgBC,EAAhB,KAAuB,IAA/E,EAAqF;AACpF/E,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,0BAAnB;AACA;AACD;AACD;;AAEDiQ,6BAA4BD,aAA5B,EAA2C;AAC1C,MAAIA,aAAJ,EAAmB;AAClB,OAAIA,cAAcgB,cAAlB,EAAkC;AACjC;AACA,WAAOhB,cAAcgB,cAArB;AACA;AACA,IALiB,CAOlB;;;AACA,SAAM1B,eAAe,KAAKvR,eAAL,CAAqBiS,cAAcnO,GAAnC,CAArB;AACA,QAAKkP,wBAAL,CAA8BzB,YAA9B,EAA4CU,aAA5C;AACA;AACD,EAntCgB,CAqtCjB;;;;AAGAlI,4BAA2B5C,YAA3B,EAAyC;AACxC,MAAIA,aAAa+L,gBAAjB,EAAmC;AAClC,SAAMtP,gBAAgB,KAAKuP,gBAAL,CAAsBhM,YAAtB,CAAtB;AACA,SAAM3D,aAAarF,WAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoC,YAApC,EAAkD;AAAEmD,YAAQ;AAAEvE,eAAU;AAAZ;AAAV,IAAlD,CAAnB;;AAEA,OAAIG,iBAAiBJ,UAArB,EAAiC;AAChC;AACA,QAAIuD,eAAe5I,WAAWwD,MAAX,CAAkB8G,QAAlB,CACjBC,6BADiB,CACavB,aAAa+L,gBAAb,CAA8BtM,MAD3C,EACmDO,aAAa+L,gBAAb,CAA8B7O,EADjF,CAAnB;;AAGA,QAAI,CAAC0C,YAAL,EAAmB;AAClB;AACA,WAAMpI,MAAM,KAAKwK,cAAL,CAAoBhC,aAAa3E,OAAjC,EAA0C2E,aAAa+L,gBAAb,CAA8B7O,EAAxE,CAAZ;;AACA0C,oBAAe5I,WAAWwD,MAAX,CAAkB8G,QAAlB,CAA2B5D,WAA3B,CAAuClG,GAAvC,CAAf;AACA;;AAED,QAAIoI,YAAJ,EAAkB;AACjB5I,gBAAWiV,aAAX,CAAyBrM,YAAzB,EAAuCvD,UAAvC;AACA7F,YAAOK,KAAP,CAAaiE,KAAb,CAAmB,iCAAnB;AACA;AACD;AACD;AACD,EA9uCgB,CAgvCjB;;;;AAGA+H,4BAA2B7C,YAA3B,EAAyC;AACxC,MAAIA,aAAa+L,gBAAjB,EAAmC;AAClC,SAAMG,aAAalV,WAAWwD,MAAX,CAAkB8G,QAAlB,CAA2B5D,WAA3B,CAAuC,KAAKsE,cAAL,CAAoBhC,aAAa3E,OAAjC,EAA0C2E,aAAanD,OAAb,CAAqBK,EAA/D,CAAvC,CAAnB,CADkC,CAGlC;;AACA,OAAIgP,cAAelM,aAAanD,OAAb,CAAqByD,IAArB,KAA8B4L,WAAW7L,GAA5D,EAAkE;AACjE,UAAM5D,gBAAgB,KAAKuP,gBAAL,CAAsBhM,YAAtB,CAAtB;AACA,UAAM3D,aAAa2D,aAAa+L,gBAAb,CAA8BlO,IAA9B,GAAqC,KAAK3D,cAAL,CAAoB8F,aAAa+L,gBAAb,CAA8BlO,IAAlD,KAA2D,KAAK1D,aAAL,CAAmB6F,aAAa+L,gBAAb,CAA8BlO,IAAjD,CAAhG,GAAyJ,IAA5K;AAEA,UAAM+B,eAAe;AACpB;AACApI,UAAK,KAAKwK,cAAL,CAAoBhC,aAAa3E,OAAjC,EAA0C2E,aAAa+L,gBAAb,CAA8B7O,EAAxE,CAFe;AAGpBP,UAAKF,cAAcjF,GAHC;AAIpB6I,UAAK,KAAKzG,mCAAL,CAAyCoG,aAAanD,OAAb,CAAqByD,IAA9D,CAJe;AAKpBwL,qBAAgB,IALI,CAKC;;AALD,KAArB;AAQA9U,eAAWmV,aAAX,CAAyBvM,YAAzB,EAAuCvD,UAAvC;AACA7F,WAAOK,KAAP,CAAaiE,KAAb,CAAmB,iCAAnB;AACA;AACD;AACD,EAxwCgB,CA0wCjB;;;;AAGAgI,wBAAuB9C,YAAvB,EAAqCE,WAArC,EAAkD;AACjD,QAAMzD,gBAAgB,KAAKuP,gBAAL,CAAsBhM,YAAtB,CAAtB;AACA,MAAI3D,aAAa,IAAjB;;AACA,MAAI2D,aAAaG,OAAb,KAAyB,aAA7B,EAA4C;AAC3C9D,gBAAarF,WAAWwD,MAAX,CAAkBoD,KAAlB,CAAwBF,WAAxB,CAAoC,YAApC,EAAkD;AAAEmD,YAAQ;AAAEvE,eAAU;AAAZ;AAAV,IAAlD,CAAb;AACA,GAFD,MAEO;AACND,gBAAa2D,aAAanC,IAAb,GAAoB,KAAK3D,cAAL,CAAoB8F,aAAanC,IAAjC,KAA0C,KAAK1D,aAAL,CAAmB6F,aAAanC,IAAhC,CAA9D,GAAsG,IAAnH;AACA;;AACD,MAAIpB,iBAAiBJ,UAArB,EAAiC;AAChC,SAAM+P,kBAAkB;AACvB5U,SAAK,KAAKwK,cAAL,CAAoBhC,aAAa3E,OAAjC,EAA0C2E,aAAa9C,EAAvD,CADkB;AAEvBA,QAAI,IAAIC,IAAJ,CAASwD,SAASX,aAAa9C,EAAb,CAAgB0D,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAT,IAA0C,IAAnD;AAFmB,IAAxB;;AAIA,OAAIV,WAAJ,EAAiB;AAChBkM,oBAAgB,UAAhB,IAA8B,aAA9B;AACA;;AACD,OAAI;AACH,SAAKrM,0BAAL,CAAgCtD,aAAhC,EAA+CJ,UAA/C,EAA2D2D,YAA3D,EAAyEoM,eAAzE,EAA0FlM,WAA1F;AACA,IAFD,CAEE,OAAOtD,CAAP,EAAU;AACX;AACA;AACA,QAAIA,EAAEhB,IAAF,KAAW,YAAX,IAA2BgB,EAAEyP,IAAF,KAAW,KAA1C,EAAiD;AAChD;AACA;;AAED,UAAMzP,CAAN;AACA;AACD;AACD,EAzyCgB,CA2yCjB;;;;;;;AAMA+N,YAAW/I,SAAX,EAAsB;AACrB;AACA,MAAI8I,OAAJ;;AACA,MAAI4B,QAAQ1K,UAAUpK,GAAV,CAAcuJ,OAAd,CAAsB,QAAtB,CAAZ;;AACA,MAAIuL,UAAU,CAAd,EAAiB;AAChB;AACA5B,aAAU9I,UAAUpK,GAAV,CAAc+U,MAAd,CAAqB,CAArB,EAAwB3K,UAAUpK,GAAV,CAAcqR,MAAtC,CAAV;AACAyD,WAAQ5B,QAAQ3J,OAAR,CAAgB,GAAhB,CAAR;AACA2J,aAAUA,QAAQ6B,MAAR,CAAeD,QAAM,CAArB,EAAwB5B,QAAQ7B,MAAhC,CAAV;AACA6B,aAAUA,QAAQ3Q,OAAR,CAAgB,GAAhB,EAAqB,GAArB,CAAV;AACA,GAND,MAMO;AACN;AACA2Q,aAAU9I,UAAU4K,OAApB;AACA;;AAED,SAAO9B,OAAP;AACA;;AAEDsB,kBAAiBhM,YAAjB,EAA+B;AAC9B,SAAOA,aAAa3E,OAAb,GAAuB,KAAKf,iBAAL,CAAuB0F,aAAa3E,OAApC,KAAgD,KAAKV,gBAAL,CAAsBqF,aAAa3E,OAAnC,CAAvE,GAAqH,IAA5H;AACA;;AAEDsG,eAAc8K,SAAd,EAAyB;AACxB,SAAOA,YAAY,KAAKvS,cAAL,CAAoBuS,SAApB,KAAkC,KAAKtS,aAAL,CAAmBsS,SAAnB,CAA9C,GAA8E,IAArF;AACA;;AAEDzK,gBAAeoI,YAAf,EAA6BlN,EAA7B,EAAiC;AAChC,SAAQ,SAASkN,YAAc,IAAIlN,GAAGnD,OAAH,CAAW,KAAX,EAAkB,GAAlB,CAAwB,EAA3D;AACA;;AA70CgB;;AAi1ClB/C,WAAWiB,WAAX,GAAyB,IAAIA,WAAJ,EAAzB,C;;;;;;;;;;;ACp1CA,uBACA,SAASyU,iBAAT,CAA2BC,OAA3B,EAAoCxR,MAApC,EAA4C2G,IAA5C,EAAkD;AACjD,KAAI6K,YAAY,oBAAZ,IAAoC,CAACC,MAAM5H,IAAN,CAAW7J,MAAX,EAAmB0R,MAAnB,CAAzC,EAAqE;AACpE;AACA;;AAED,OAAMC,OAAO9V,WAAWwD,MAAX,CAAkBC,KAAlB,CAAwBiD,WAAxB,CAAoCoE,KAAKnF,GAAzC,CAAb;AACA,OAAMtB,UAAUyR,KAAKlR,IAArB;AACA,OAAMiC,OAAO/G,OAAOiW,KAAP,CAAaC,OAAb,CAAqBlW,OAAOmD,MAAP,EAArB,CAAb;AAEAgT,WAAUC,IAAV,CAAepL,KAAKnF,GAApB,EAAyB;AACxBnF,OAAKgH,OAAOxC,EAAP,EADmB;AAExBW,OAAKmF,KAAKnF,GAFc;AAGxB4D,KAAG;AAAEjE,aAAU;AAAZ,GAHqB;AAIxBY,MAAI,IAAIC,IAAJ,EAJoB;AAKxBkD,OAAK8M,QAAQC,EAAR,CAAW,mBAAX,EAAgC;AACpCC,gBAAa,SADuB;AAEpCC,YAAS,CAACzP,KAAKvB,QAAN,EAAgBjB,OAAhB;AAF2B,GAAhC,EAGFwC,KAAK0P,QAHH;AALmB,EAAzB;;AAWA,KAAI;AACHvW,aAAWiB,WAAX,CAAuB6R,cAAvB,CAAsChI,KAAKnF,GAA3C,EAAgDhD,SAAS;AACxD,OAAIA,KAAJ,EAAW;AACVsT,cAAUC,IAAV,CAAepL,KAAKnF,GAApB,EAAyB;AACxBnF,UAAKgH,OAAOxC,EAAP,EADmB;AAExBW,UAAKmF,KAAKnF,GAFc;AAGxB4D,QAAG;AAAEjE,gBAAU;AAAZ,MAHqB;AAIxBY,SAAI,IAAIC,IAAJ,EAJoB;AAKxBkD,UAAK8M,QAAQC,EAAR,CAAW,mBAAX,EAAgC;AACpCC,mBAAa,SADuB;AAEpCC,eAAS,CAACjS,OAAD,EAAU1B,MAAMkD,OAAhB;AAF2B,MAAhC,EAGFgB,KAAK0P,QAHH;AALmB,KAAzB;AAUA,IAXD,MAWO;AACNN,cAAUC,IAAV,CAAepL,KAAKnF,GAApB,EAAyB;AACxBnF,UAAKgH,OAAOxC,EAAP,EADmB;AAExBW,UAAKmF,KAAKnF,GAFc;AAGxB4D,QAAG;AAAEjE,gBAAU;AAAZ,MAHqB;AAIxBY,SAAI,IAAIC,IAAJ,EAJoB;AAKxBkD,UAAK8M,QAAQC,EAAR,CAAW,oBAAX,EAAiC;AACrCC,mBAAa,SADwB;AAErCC,eAAS,CAACjS,OAAD;AAF4B,MAAjC,EAGFwC,KAAK0P,QAHH;AALmB,KAAzB;AAUA;AACD,GAxBD;AAyBA,EA1BD,CA0BE,OAAO5T,KAAP,EAAc;AACfsT,YAAUC,IAAV,CAAepL,KAAKnF,GAApB,EAAyB;AACxBnF,QAAKgH,OAAOxC,EAAP,EADmB;AAExBW,QAAKmF,KAAKnF,GAFc;AAGxB4D,MAAG;AAAEjE,cAAU;AAAZ,IAHqB;AAIxBY,OAAI,IAAIC,IAAJ,EAJoB;AAKxBkD,QAAK8M,QAAQC,EAAR,CAAW,mBAAX,EAAgC;AACpCC,iBAAa,SADuB;AAEpCC,aAAS,CAACjS,OAAD,EAAU1B,MAAMkD,OAAhB;AAF2B,IAAhC,EAGFgB,KAAK0P,QAHH;AALmB,GAAzB;AAUA,QAAM5T,KAAN;AACA;;AACD,QAAO+S,iBAAP;AACA;;AAED1V,WAAWwW,aAAX,CAAyBrW,GAAzB,CAA6B,oBAA7B,EAAmDuV,iBAAnD,E","file":"/packages/rocketchat_slackbridge.js","sourcesContent":["/* globals logger:true */\n/* exported logger */\n\nlogger = new Logger('SlackBridge', {\n\tsections: {\n\t\tconnection: 'Connection',\n\t\tevents: 'Events',\n\t\tclass: 'Class'\n\t}\n});\n","Meteor.startup(function() {\n\tRocketChat.settings.addGroup('SlackBridge', function() {\n\t\tthis.add('SlackBridge_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nLabel: 'Enabled',\n\t\t\tpublic: true\n\t\t});\n\n\t\tthis.add('SlackBridge_APIToken', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'API_Token'\n\t\t});\n\n\t\tthis.add('SlackBridge_AliasFormat', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'Alias_Format',\n\t\t\ti18nDescription: 'Alias_Format_Description'\n\t\t});\n\n\t\tthis.add('SlackBridge_ExcludeBotnames', '', {\n\t\t\ttype: 'string',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t},\n\t\t\ti18nLabel: 'Exclude_Botnames',\n\t\t\ti18nDescription: 'Exclude_Botnames_Description'\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Enabled', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: {\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_All', false, {\n\t\t\ttype: 'boolean',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}]\n\t\t});\n\n\t\tthis.add('SlackBridge_Out_Channels', '', {\n\t\t\ttype: 'roomPick',\n\t\t\tenableQuery: [{\n\t\t\t\t_id: 'SlackBridge_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_Enabled',\n\t\t\t\tvalue: true\n\t\t\t}, {\n\t\t\t\t_id: 'SlackBridge_Out_All',\n\t\t\t\tvalue: false\n\t\t\t}]\n\t\t});\n\t});\n});\n","/* globals logger */\nimport _ from 'underscore';\n\nclass SlackBridge {\n\n\tconstructor() {\n\t\tthis.util = Npm.require('util');\n\t\tthis.slackClient = Npm.require('slack-client');\n\t\tthis.apiToken = RocketChat.settings.get('SlackBridge_APIToken');\n\t\tthis.aliasFormat = RocketChat.settings.get('SlackBridge_AliasFormat');\n\t\tthis.excludeBotnames = RocketChat.settings.get('SlackBridge_Botnames');\n\t\tthis.rtm = {};\n\t\tthis.connected = false;\n\t\tthis.userTags = {};\n\t\tthis.slackChannelMap = {};\n\t\tthis.reactionsMap = new Map();\n\n\t\tRocketChat.settings.get('SlackBridge_APIToken', (key, value) => {\n\t\t\tif (value !== this.apiToken) {\n\t\t\t\tthis.apiToken = value;\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t\tthis.connect();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tRocketChat.settings.get('SlackBridge_AliasFormat', (key, value) => {\n\t\t\tthis.aliasFormat = value;\n\t\t});\n\n\t\tRocketChat.settings.get('SlackBridge_ExcludeBotnames', (key, value) => {\n\t\t\tthis.excludeBotnames = value;\n\t\t});\n\n\t\tRocketChat.settings.get('SlackBridge_Enabled', (key, value) => {\n\t\t\tif (value && this.apiToken) {\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.disconnect();\n\t\t\t}\n\t\t});\n\t}\n\n\tconnect() {\n\t\tif (this.connected === false) {\n\t\t\tthis.connected = true;\n\t\t\tlogger.connection.info('Connecting via token: ', this.apiToken);\n\t\t\tconst RtmClient = this.slackClient.RtmClient;\n\t\t\tthis.rtm = new RtmClient(this.apiToken);\n\t\t\tthis.rtm.start();\n\t\t\tthis.registerForSlackEvents();\n\t\t\tRocketChat.settings.get('SlackBridge_Out_Enabled', (key, value) => {\n\t\t\t\tif (value) {\n\t\t\t\t\tthis.registerForRocketEvents();\n\t\t\t\t} else {\n\t\t\t\t\tthis.unregisterForRocketEvents();\n\t\t\t\t}\n\t\t\t});\n\t\t\tMeteor.startup(() => {\n\t\t\t\ttry {\n\t\t\t\t\tthis.populateSlackChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.class.error('Error attempting to connect to Slack', err);\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tdisconnect() {\n\t\tif (this.connected === true) {\n\t\t\tthis.connected = false;\n\t\t\tthis.rtm.disconnect && this.rtm.disconnect();\n\t\t\tlogger.connection.info('Disconnected');\n\t\t\tthis.unregisterForRocketEvents();\n\t\t}\n\t}\n\n\tconvertSlackMsgTxtToRocketTxtFormat(slackMsgTxt) {\n\t\tif (!_.isEmpty(slackMsgTxt)) {\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!everyone>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!channel>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!here>/g, '@here');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&gt;/g, '>');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&lt;/g, '<');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&amp;/g, '&');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:simple_smile:/g, ':smile:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:memo:/g, ':pencil:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:piggy:/g, ':pig:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:uk:/g, ':gb:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\n\t\t\tslackMsgTxt.replace(/(?:<@)([a-zA-Z0-9]+)(?:\\|.+)?(?:>)/g, (match, userId) => {\n\t\t\t\tif (!this.userTags[userId]) {\n\t\t\t\t\tthis.findRocketUser(userId) || this.addRocketUser(userId); // This adds userTags for the userId\n\t\t\t\t}\n\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tif (userTags) {\n\t\t\t\t\tslackMsgTxt = slackMsgTxt.replace(userTags.slack, userTags.rocket);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tslackMsgTxt = '';\n\t\t}\n\t\treturn slackMsgTxt;\n\t}\n\n\tfindRocketChannel(slackChannelId) {\n\t\treturn RocketChat.models.Rooms.findOneByImportId(slackChannelId);\n\t}\n\n\taddRocketChannel(slackChannelID, hasRetried = false) {\n\t\tlogger.class.debug('Adding Rocket.Chat channel from Slack', slackChannelID);\n\t\tlet slackResults = null;\n\t\tlet isGroup = false;\n\t\tif (slackChannelID.charAt(0) === 'C') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/channels.info', { params: { token: this.apiToken, channel: slackChannelID } });\n\t\t} else if (slackChannelID.charAt(0) === 'G') {\n\t\t\tslackResults = HTTP.get('https://slack.com/api/groups.info', { params: { token: this.apiToken, channel: slackChannelID } });\n\t\t\tisGroup = true;\n\t\t}\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true) {\n\t\t\tconst rocketChannelData = isGroup ? slackResults.data.group : slackResults.data.channel;\n\t\t\tconst existingRocketRoom = RocketChat.models.Rooms.findOneByName(rocketChannelData.name);\n\n\t\t\t// If the room exists, make sure we have its id in importIds\n\t\t\tif (existingRocketRoom || rocketChannelData.is_general) {\n\t\t\t\trocketChannelData.rocketId = rocketChannelData.is_general ? 'GENERAL' : existingRocketRoom._id;\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t} else {\n\t\t\t\tconst rocketUsers = [];\n\t\t\t\tfor (const member of rocketChannelData.members) {\n\t\t\t\t\tif (member !== rocketChannelData.creator) {\n\t\t\t\t\t\tconst rocketUser = this.findRocketUser(member) || this.addRocketUser(member);\n\t\t\t\t\t\tif (rocketUser && rocketUser.username) {\n\t\t\t\t\t\t\trocketUsers.push(rocketUser.username);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst rocketUserCreator = rocketChannelData.creator ? this.findRocketUser(rocketChannelData.creator) || this.addRocketUser(rocketChannelData.creator) : null;\n\t\t\t\tif (!rocketUserCreator) {\n\t\t\t\t\tlogger.class.error('Could not fetch room creator information', rocketChannelData.creator);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst rocketChannel = RocketChat.createRoom(isGroup ? 'p' : 'c', rocketChannelData.name, rocketUserCreator.username, rocketUsers);\n\t\t\t\t\trocketChannelData.rocketId = rocketChannel.rid;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (!hasRetried) {\n\t\t\t\t\t\tlogger.class.debug('Error adding channel from Slack. Will retry in 1s.', e.message);\n\t\t\t\t\t\t// If first time trying to create channel fails, could be because of multiple messages received at the same time. Try again once after 1s.\n\t\t\t\t\t\tMeteor._sleepForMs(1000);\n\t\t\t\t\t\treturn this.findRocketChannel(slackChannelID) || this.addRocketChannel(slackChannelID, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(e.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst roomUpdate = {\n\t\t\t\t\tts: new Date(rocketChannelData.created * 1000)\n\t\t\t\t};\n\t\t\t\tlet lastSetTopic = 0;\n\t\t\t\tif (!_.isEmpty(rocketChannelData.topic && rocketChannelData.topic.value)) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.topic.value;\n\t\t\t\t\tlastSetTopic = rocketChannelData.topic.last_set;\n\t\t\t\t}\n\t\t\t\tif (!_.isEmpty(rocketChannelData.purpose && rocketChannelData.purpose.value) && rocketChannelData.purpose.last_set > lastSetTopic) {\n\t\t\t\t\troomUpdate.topic = rocketChannelData.purpose.value;\n\t\t\t\t}\n\t\t\t\tRocketChat.models.Rooms.addImportIds(rocketChannelData.rocketId, rocketChannelData.id);\n\t\t\t\tthis.slackChannelMap[rocketChannelData.rocketId] = { id: slackChannelID, family: slackChannelID.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t}\n\t\t\treturn RocketChat.models.Rooms.findOneById(rocketChannelData.rocketId);\n\t\t}\n\t\tlogger.class.debug('Channel not added');\n\t\treturn;\n\t}\n\n\tfindRocketUser(slackUserID) {\n\t\tconst rocketUser = RocketChat.models.Users.findOneByImportId(slackUserID);\n\t\tif (rocketUser && !this.userTags[slackUserID]) {\n\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUser.username }` };\n\t\t}\n\t\treturn rocketUser;\n\t}\n\n\taddRocketUser(slackUserID) {\n\t\tlogger.class.debug('Adding Rocket.Chat user from Slack', slackUserID);\n\t\tconst slackResults = HTTP.get('https://slack.com/api/users.info', { params: { token: this.apiToken, user: slackUserID } });\n\t\tif (slackResults && slackResults.data && slackResults.data.ok === true && slackResults.data.user) {\n\t\t\tconst rocketUserData = slackResults.data.user;\n\t\t\tconst isBot = rocketUserData.is_bot === true;\n\t\t\tconst email = rocketUserData.profile && rocketUserData.profile.email || '';\n\t\t\tlet existingRocketUser;\n\t\t\tif (!isBot) {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByEmailAddress(email) || RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t} else {\n\t\t\t\texistingRocketUser = RocketChat.models.Users.findOneByUsername(rocketUserData.name);\n\t\t\t}\n\n\t\t\tif (existingRocketUser) {\n\t\t\t\trocketUserData.rocketId = existingRocketUser._id;\n\t\t\t\trocketUserData.name = existingRocketUser.username;\n\t\t\t} else {\n\t\t\t\tconst newUser = {\n\t\t\t\t\tpassword: Random.id(),\n\t\t\t\t\tusername: rocketUserData.name\n\t\t\t\t};\n\n\t\t\t\tif (!isBot && email) {\n\t\t\t\t\tnewUser.email = email;\n\t\t\t\t}\n\n\t\t\t\tif (isBot) {\n\t\t\t\t\tnewUser.joinDefaultChannels = false;\n\t\t\t\t}\n\n\t\t\t\trocketUserData.rocketId = Accounts.createUser(newUser);\n\t\t\t\tconst userUpdate = {\n\t\t\t\t\tutcOffset: rocketUserData.tz_offset / 3600, // Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600,\n\t\t\t\t\troles: isBot ? [ 'bot' ] : [ 'user' ]\n\t\t\t\t};\n\n\t\t\t\tif (rocketUserData.profile && rocketUserData.profile.real_name) {\n\t\t\t\t\tuserUpdate['name'] = rocketUserData.profile.real_name;\n\t\t\t\t}\n\n\t\t\t\tif (rocketUserData.deleted) {\n\t\t\t\t\tuserUpdate['active'] = false;\n\t\t\t\t\tuserUpdate['services.resume.loginTokens'] = [];\n\t\t\t\t}\n\n\t\t\t\tRocketChat.models.Users.update({ _id: rocketUserData.rocketId }, { $set: userUpdate });\n\n\t\t\t\tconst user = RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\n\t\t\t\tlet url = null;\n\t\t\t\tif (rocketUserData.profile) {\n\t\t\t\t\tif (rocketUserData.profile.image_original) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_original;\n\t\t\t\t\t} else if (rocketUserData.profile.image_512) {\n\t\t\t\t\t\turl = rocketUserData.profile.image_512;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (url) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tRocketChat.setUserAvatar(user, url, null, 'url');\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlogger.class.debug('Error setting user avatar', error.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst importIds = [ rocketUserData.id ];\n\t\t\tif (isBot && rocketUserData.profile && rocketUserData.profile.bot_id) {\n\t\t\t\timportIds.push(rocketUserData.profile.bot_id);\n\t\t\t}\n\t\t\tRocketChat.models.Users.addImportIds(rocketUserData.rocketId, importIds);\n\t\t\tif (!this.userTags[slackUserID]) {\n\t\t\t\tthis.userTags[slackUserID] = { slack: `<@${ slackUserID }>`, rocket: `@${ rocketUserData.name }` };\n\t\t\t}\n\t\t\treturn RocketChat.models.Users.findOneById(rocketUserData.rocketId);\n\t\t}\n\t\tlogger.class.debug('User not added');\n\t\treturn;\n\t}\n\n\taddAliasToRocketMsg(rocketUserName, rocketMsgObj) {\n\t\tif (this.aliasFormat) {\n\t\t\tconst alias = this.util.format(this.aliasFormat, rocketUserName);\n\n\t\t\tif (alias !== rocketUserName) {\n\t\t\t\trocketMsgObj.alias = alias;\n\t\t\t}\n\t\t}\n\n\t\treturn rocketMsgObj;\n\t}\n\n\tcreateAndSaveRocketMessage(rocketChannel, rocketUser, slackMessage, rocketMsgDataDefaults, isImporting) {\n\t\tif (slackMessage.type === 'message') {\n\t\t\tlet rocketMsgObj = {};\n\t\t\tif (!_.isEmpty(slackMessage.subtype)) {\n\t\t\t\trocketMsgObj = this.processSlackSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\tusername: rocketUser.username\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.addAliasToRocketMsg(rocketUser.username, rocketMsgObj);\n\t\t\t}\n\t\t\t_.extend(rocketMsgObj, rocketMsgDataDefaults);\n\t\t\tif (slackMessage.edited) {\n\t\t\t\trocketMsgObj.editedAt = new Date(parseInt(slackMessage.edited.ts.split('.')[0]) * 1000);\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t\t}\n\n\t\t\tif (slackMessage.pinned_to && slackMessage.pinned_to.indexOf(slackMessage.channel) !== -1) {\n\t\t\t\trocketMsgObj.pinned = true;\n\t\t\t\trocketMsgObj.pinnedAt = Date.now;\n\t\t\t\trocketMsgObj.pinnedBy = _.pick(rocketUser, '_id', 'username');\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\tMeteor.setTimeout(() => {\n\t\t\t\t\tif (slackMessage.bot_id && slackMessage.ts && !RocketChat.models.Messages.findOneBySlackBotIdAndSlackTs(slackMessage.bot_id, slackMessage.ts)) {\n\t\t\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t\t\t}\n\t\t\t\t}, 500);\n\t\t\t} else {\n\t\t\t\tlogger.class.debug('Send message to Rocket.Chat');\n\t\t\t\tRocketChat.sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_removed\n\t */\n\tonSlackReactionRemoved(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tconst rocketUser = this.getRocketUser(slackReactionMsg.user);\n\t\t\t//Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t//Must have originated from Slack\n\t\t\t\tconst rocketID = this.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t//If the Rocket user has already been removed, then this is an echo back from slack\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) === -1) {\n\t\t\t\t\t\t\treturn; //Reaction already removed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//Reaction already removed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t//Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.reactionsMap.set(`unset${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.class.debug('Removing reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_added\n\t */\n\tonSlackReactionAdded(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tconst rocketUser = this.getRocketUser(slackReactionMsg.user);\n\n\t\t\tif (rocketUser.roles.includes('bot')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//Lets find our Rocket originated message\n\t\t\tlet rocketMsg = RocketChat.models.Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t//Must have originated from Slack\n\t\t\t\tconst rocketID = this.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = RocketChat.models.Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${ slackReactionMsg.reaction }:`;\n\n\t\t\t\t//If the Rocket user has already reacted, then this is Slack echoing back to us\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) !== -1) {\n\t\t\t\t\t\t\treturn; //Already reacted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.reactionsMap.set(`set${ rocketMsg._id }${ rocketReaction }`, rocketUser);\n\t\t\t\tlogger.class.debug('Adding reaction from Slack');\n\t\t\t\tMeteor.runAsUser(rocketUser._id, () => {\n\t\t\t\t\tMeteor.call('setReaction', rocketReaction, rocketMsg._id);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * We have received a message from slack and we need to save/delete/update it into rocket\n\t * https://api.slack.com/events/message\n\t */\n\tonSlackMessage(slackMessage, isImporting) {\n\t\tif (slackMessage.subtype) {\n\t\t\tswitch (slackMessage.subtype) {\n\t\t\t\tcase 'message_deleted':\n\t\t\t\t\tthis.processSlackMessageDeleted(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'message_changed':\n\t\t\t\t\tthis.processSlackMessageChanged(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//Keeping backwards compatability for now, refactor later\n\t\t\t\t\tthis.processSlackNewMessage(slackMessage, isImporting);\n\t\t\t}\n\t\t} else {\n\t\t\t//Simple message\n\t\t\tthis.processSlackNewMessage(slackMessage, isImporting);\n\t\t}\n\t}\n\n\tprocessSlackSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tlet rocketMsgObj = null;\n\t\tswitch (slackMessage.subtype) {\n\t\t\tcase 'bot_message':\n\t\t\t\tif (slackMessage.username !== undefined && this.excludeBotnames && slackMessage.username.match(this.excludeBotnames)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tbot: true,\n\t\t\t\t\tattachments: slackMessage.attachments,\n\t\t\t\t\tusername: slackMessage.username || slackMessage.bot_id\n\t\t\t\t};\n\t\t\t\tthis.addAliasToRocketMsg(slackMessage.username || slackMessage.bot_id, rocketMsgObj);\n\t\t\t\tif (slackMessage.icons) {\n\t\t\t\t\trocketMsgObj.emoji = slackMessage.icons.emoji;\n\t\t\t\t}\n\t\t\t\treturn rocketMsgObj;\n\t\t\tcase 'me_message':\n\t\t\t\treturn this.addAliasToRocketMsg(rocketUser.username, {\n\t\t\t\t\tmsg: `_${ this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text) }_`\n\t\t\t\t});\n\t\t\tcase 'channel_join':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createUserJoinWithRoomIdAndUser(rocketChannel._id, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'group_join':\n\t\t\t\tif (slackMessage.inviter) {\n\t\t\t\t\tconst inviter = slackMessage.inviter ? this.findRocketUser(slackMessage.inviter) || this.addRocketUser(slackMessage.inviter) : null;\n\t\t\t\t\tif (isImporting) {\n\t\t\t\t\t\tRocketChat.models.Messages.createUserAddedWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: inviter._id,\n\t\t\t\t\t\t\t\tusername: inviter.username\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\timported: 'slackbridge'\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tRocketChat.addUserToRoom(rocketChannel._id, rocketUser, inviter);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(rocketChannel._id, rocketUser, {\n\t\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\timported: 'slackbridge'\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.removeUserFromRoom(rocketChannel._id, rocketUser);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.topic, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.topic, rocketUser, false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', rocketChannel._id, slackMessage.purpose, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.saveRoomTopic(rocketChannel._id, slackMessage.purpose, rocketUser, false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\tif (isImporting) {\n\t\t\t\t\tRocketChat.models.Messages.createRoomRenamedWithRoomIdRoomNameAndUser(rocketChannel._id, slackMessage.name, rocketUser, { ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), imported: 'slackbridge' });\n\t\t\t\t} else {\n\t\t\t\t\tRocketChat.saveRoomName(rocketChannel._id, slackMessage.name, rocketUser, false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_archive':\n\t\t\tcase 'group_archive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.archiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_unarchive':\n\t\t\tcase 'group_unarchive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tRocketChat.unarchiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'file_share':\n\t\t\t\tif (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n\t\t\t\t\tconst details = {\n\t\t\t\t\t\tmessage_id: `slack-${ slackMessage.ts.replace(/\\./g, '-') }`,\n\t\t\t\t\t\tname: slackMessage.file.name,\n\t\t\t\t\t\tsize: slackMessage.file.size,\n\t\t\t\t\t\ttype: slackMessage.file.mimetype,\n\t\t\t\t\t\trid: rocketChannel._id\n\t\t\t\t\t};\n\t\t\t\t\treturn this.uploadFileFromSlack(details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'file_comment':\n\t\t\t\tlogger.class.error('File comment not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'file_mention':\n\t\t\t\tlogger.class.error('File mentioned not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'pinned_item':\n\t\t\t\tif (slackMessage.attachments && slackMessage.attachments[0] && slackMessage.attachments[0].text) {\n\t\t\t\t\trocketMsgObj = {\n\t\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\t\tusername: rocketUser.username\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t'text' : this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.attachments[0].text),\n\t\t\t\t\t\t\t'author_name' : slackMessage.attachments[0].author_subname,\n\t\t\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(slackMessage.attachments[0].author_subname),\n\t\t\t\t\t\t\t'ts' : new Date(parseInt(slackMessage.attachments[0].ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t}]\n\t\t\t\t\t};\n\n\t\t\t\t\tif (!isImporting) {\n\t\t\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ slackMessage.attachments[0].channel_id }-${ slackMessage.attachments[0].ts.replace(/\\./g, '-') }`, rocketMsgObj.u, true, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn rocketMsgObj;\n\t\t\t\t} else {\n\t\t\t\t\tlogger.class.error('Pinned item with no attachment');\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'unpinned_item':\n\t\t\t\tlogger.class.error('Unpinned item not implemented');\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\tUploads the file to the storage.\n\t@param [Object] details an object with details about the upload. name, size, type, and rid\n\t@param [String] fileUrl url of the file to download/import\n\t@param [Object] user the Rocket.Chat user\n\t@param [Object] room the Rocket.Chat room\n\t@param [Date] timeStamp the timestamp the file was uploaded\n\t**/\n\t//details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\tuploadFileFromSlack(details, slackFileURL, rocketUser, rocketChannel, timeStamp, isImporting) {\n\t\tconst url = Npm.require('url');\n\t\tconst requestModule = /https/i.test(slackFileURL) ? Npm.require('https') : Npm.require('http');\n\t\tconst parsedUrl = url.parse(slackFileURL, true);\n\t\tparsedUrl.headers = { 'Authorization': `Bearer ${ this.apiToken }` };\n\t\trequestModule.get(parsedUrl, Meteor.bindEnvironment((stream) => {\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\t\tfileStore.insert(details, stream, (err, file) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthrow new Error(err);\n\t\t\t\t} else {\n\t\t\t\t\tconst url = file.url.replace(Meteor.absoluteUrl(), '/');\n\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttitle_link: url\n\t\t\t\t\t};\n\n\t\t\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.image_url = url;\n\t\t\t\t\t\tattachment.image_type = file.type;\n\t\t\t\t\t\tattachment.image_size = file.size;\n\t\t\t\t\t\tattachment.image_dimensions = file.identify && file.identify.size;\n\t\t\t\t\t}\n\t\t\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.audio_url = url;\n\t\t\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\t\t\tattachment.audio_size = file.size;\n\t\t\t\t\t}\n\t\t\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\t\t\tattachment.video_url = url;\n\t\t\t\t\t\tattachment.video_type = file.type;\n\t\t\t\t\t\tattachment.video_size = file.size;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst msg = {\n\t\t\t\t\t\trid: details.rid,\n\t\t\t\t\t\tts: timeStamp,\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t_id: file._id\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgroupable: false,\n\t\t\t\t\t\tattachments: [attachment]\n\t\t\t\t\t};\n\n\t\t\t\t\tif (isImporting) {\n\t\t\t\t\t\tmsg.imported = 'slackbridge';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (details.message_id && (typeof details.message_id === 'string')) {\n\t\t\t\t\t\tmsg['_id'] = details.message_id;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn RocketChat.sendMessage(rocketUser, msg, rocketChannel, true);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\t}\n\n\tregisterForRocketEvents() {\n\t\tRocketChat.callbacks.add('afterSaveMessage', this.onRocketMessage.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Out');\n\t\tRocketChat.callbacks.add('afterDeleteMessage', this.onRocketMessageDelete.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.add('setReaction', this.onRocketSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.add('unsetReaction', this.onRocketUnSetReaction.bind(this), RocketChat.callbacks.priority.LOW, 'SlackBridge_UnSetReaction');\n\t}\n\n\tunregisterForRocketEvents() {\n\t\tRocketChat.callbacks.remove('afterSaveMessage', 'SlackBridge_Out');\n\t\tRocketChat.callbacks.remove('afterDeleteMessage', 'SlackBridge_Delete');\n\t\tRocketChat.callbacks.remove('setReaction', 'SlackBridge_SetReaction');\n\t\tRocketChat.callbacks.remove('unsetReaction', 'SlackBridge_UnSetReaction');\n\t}\n\n\tregisterForSlackEvents() {\n\t\tconst CLIENT_EVENTS = this.slackClient.CLIENT_EVENTS;\n\t\tthis.rtm.on(CLIENT_EVENTS.RTM.AUTHENTICATED, () => {\n\t\t\tlogger.connection.info('Connected to Slack');\n\t\t});\n\n\t\tthis.rtm.on(CLIENT_EVENTS.RTM.UNABLE_TO_RTM_START, () => {\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tthis.rtm.on(CLIENT_EVENTS.RTM.DISCONNECT, () => {\n\t\t\tthis.disconnect();\n\t\t});\n\n\t\tconst RTM_EVENTS = this.slackClient.RTM_EVENTS;\n\n\t\t/**\n\t\t* Event fired when someone messages a channel the bot is in\n\t\t* {\n\t\t*\ttype: 'message',\n\t\t* \tchannel: [channel_id],\n\t\t* \tuser: [user_id],\n\t\t* \ttext: [message],\n\t\t* \tts: [ts.milli],\n\t\t* \tteam: [team_id],\n\t\t* \tsubtype: [message_subtype],\n\t\t* \tinviter: [message_subtype = 'group_join|channel_join' -> user_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.MESSAGE, Meteor.bindEnvironment((slackMessage) => {\n\t\t\tlogger.events.debug('OnSlackEvent-MESSAGE: ', slackMessage);\n\t\t\tif (slackMessage) {\n\t\t\t\tthis.onSlackMessage(slackMessage);\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on(RTM_EVENTS.REACTION_ADDED, Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.events.debug('OnSlackEvent-REACTION_ADDED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\tthis.onSlackReactionAdded(reactionMsg);\n\t\t\t}\n\t\t}));\n\n\t\tthis.rtm.on(RTM_EVENTS.REACTION_REMOVED, Meteor.bindEnvironment((reactionMsg) => {\n\t\t\tlogger.events.debug('OnSlackEvent-REACTION_REMOVED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\tthis.onSlackReactionRemoved(reactionMsg);\n\t\t\t}\n\t\t}));\n\n\t\t/**\n\t\t* Event fired when someone creates a public channel\n\t\t* {\n\t\t*\ttype: 'channel_created',\n\t\t*\tchannel: {\n\t\t*\t\tid: [channel_id],\n\t\t*\t\tis_channel: true,\n\t\t*\t\tname: [channel_name],\n\t\t*\t\tcreated: [ts],\n\t\t*\t\tcreator: [user_id],\n\t\t*\t\tis_shared: false,\n\t\t*\t\tis_org_shared: false\n\t\t*\t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_CREATED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot joins a public channel\n\t\t* {\n\t\t* \ttype: 'channel_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_general: false,\n\t\t* \t\tis_member: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_JOINED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot leaves (or is removed from) a public channel\n\t\t* {\n\t\t* \ttype: 'channel_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_LEFT, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when an archived channel is deleted by an admin\n\t\t* {\n\t\t* \ttype: 'channel_deleted',\n\t\t* \tchannel: [channel_id],\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_DELETED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the channel has its name changed\n\t\t* {\n\t\t* \ttype: 'channel_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_channel: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.CHANNEL_RENAME, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot joins a private channel\n\t\t* {\n\t\t* \ttype: 'group_joined',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts],\n\t\t* \t\tcreator: [user_id],\n\t\t* \t\tis_archived: false,\n\t\t* \t\tis_mpim: false,\n\t\t* \t\tis_open: true,\n\t\t* \t\tlast_read: [ts.milli],\n\t\t* \t\tlatest: [message_obj],\n\t\t* \t\tunread_count: 0,\n\t\t* \t\tunread_count_display: 0,\n\t\t* \t\tmembers: [ user_ids ],\n\t\t* \t\ttopic: {\n\t\t* \t\t\tvalue: [channel_topic],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t},\n\t\t* \t\tpurpose: {\n\t\t* \t\t\tvalue: [channel_purpose],\n\t\t* \t\t\tcreator: [user_id],\n\t\t* \t\t\tlast_set: 0\n\t\t* \t\t}\n\t\t* \t}\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.GROUP_JOINED, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the bot leaves (or is removed from) a private channel\n\t\t* {\n\t\t* \ttype: 'group_left',\n\t\t* \tchannel: [channel_id]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.GROUP_LEFT, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when the private channel has its name changed\n\t\t* {\n\t\t* \ttype: 'group_rename',\n\t\t* \tchannel: {\n\t\t* \t\tid: [channel_id],\n\t\t* \t\tname: [channel_name],\n\t\t* \t\tis_group: true,\n\t\t* \t\tcreated: [ts]\n\t\t* \t},\n\t\t*\tevent_ts: [ts.milli]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.GROUP_RENAME, Meteor.bindEnvironment(() => {}));\n\n\t\t/**\n\t\t* Event fired when a new user joins the team\n\t\t* {\n\t\t* \ttype: 'team_join',\n\t\t* \tuser:\n\t\t* \t{\n\t\t* \t\tid: [user_id],\n\t\t* \t\tteam_id: [team_id],\n\t\t* \t\tname: [user_name],\n\t\t* \t\tdeleted: false,\n\t\t* \t\tstatus: null,\n\t\t* \t\tcolor: [color_code],\n\t\t* \t\treal_name: '',\n\t\t* \t\ttz: [timezone],\n\t\t* \t\ttz_label: [timezone_label],\n\t\t* \t\ttz_offset: [timezone_offset],\n\t\t* \t\tprofile:\n\t\t* \t\t{\n\t\t* \t\t\tavatar_hash: '',\n\t\t* \t\t\treal_name: '',\n\t\t* \t\t\treal_name_normalized: '',\n\t\t* \t\t\temail: '',\n\t\t* \t\t\timage_24: '',\n\t\t* \t\t\timage_32: '',\n\t\t* \t\t\timage_48: '',\n\t\t* \t\t\timage_72: '',\n\t\t* \t\t\timage_192: '',\n\t\t* \t\t\timage_512: '',\n\t\t* \t\t\tfields: null\n\t\t* \t\t},\n\t\t* \t\tis_admin: false,\n\t\t* \t\tis_owner: false,\n\t\t* \t\tis_primary_owner: false,\n\t\t* \t\tis_restricted: false,\n\t\t* \t\tis_ultra_restricted: false,\n\t\t* \t\tis_bot: false,\n\t\t* \t\tpresence: [user_presence]\n\t\t* \t},\n\t\t* \tcache_ts: [ts]\n\t\t* }\n\t\t**/\n\t\tthis.rtm.on(RTM_EVENTS.TEAM_JOIN, Meteor.bindEnvironment(() => {}));\n\t}\n\n\tfindSlackChannel(rocketChannelName) {\n\t\tlogger.class.debug('Searching for Slack channel or group', rocketChannelName);\n\t\tlet response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const channel of response.data.channels) {\n\t\t\t\tif (channel.name === rocketChannelName && channel.is_member === true) {\n\t\t\t\t\treturn channel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponse = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const group of response.data.groups) {\n\t\t\t\tif (group.name === rocketChannelName) {\n\t\t\t\t\treturn group;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\timportFromHistory(family, options) {\n\t\tlogger.class.debug('Importing messages history');\n\t\tconst response = HTTP.get(`https://slack.com/api/${ family }.history`, { params: _.extend({ token: this.apiToken }, options) });\n\t\tif (response && response.data && _.isArray(response.data.messages) && response.data.messages.length > 0) {\n\t\t\tlet latest = 0;\n\t\t\tfor (const message of response.data.messages.reverse()) {\n\t\t\t\tlogger.class.debug('MESSAGE: ', message);\n\t\t\t\tif (!latest || message.ts > latest) {\n\t\t\t\t\tlatest = message.ts;\n\t\t\t\t}\n\t\t\t\tmessage.channel = options.channel;\n\t\t\t\tthis.onSlackMessage(message, true);\n\t\t\t}\n\t\t\treturn { has_more: response.data.has_more, ts: latest };\n\t\t}\n\t}\n\n\tcopySlackChannelInfo(rid, channelMap) {\n\t\tlogger.class.debug('Copying users from Slack channel to Rocket.Chat', channelMap.id, rid);\n\t\tconst response = HTTP.get(`https://slack.com/api/${ channelMap.family }.info`, { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data) {\n\t\t\tconst data = channelMap.family === 'channels' ? response.data.channel : response.data.group;\n\t\t\tif (data && _.isArray(data.members) && data.members.length > 0) {\n\t\t\t\tfor (const member of data.members) {\n\t\t\t\t\tconst user = this.findRocketUser(member) || this.addRocketUser(member);\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tlogger.class.debug('Adding user to room', user.username, rid);\n\t\t\t\t\t\tRocketChat.addUserToRoom(rid, user, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet topic = '';\n\t\t\tlet topic_last_set = 0;\n\t\t\tlet topic_creator = null;\n\t\t\tif (data && data.topic && data.topic.value) {\n\t\t\t\ttopic = data.topic.value;\n\t\t\t\ttopic_last_set = data.topic.last_set;\n\t\t\t\ttopic_creator = data.topic.creator;\n\t\t\t}\n\n\t\t\tif (data && data.purpose && data.purpose.value) {\n\t\t\t\tif (topic_last_set) {\n\t\t\t\t\tif (topic_last_set < data.purpose.last_set) {\n\t\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttopic = data.purpose.topic;\n\t\t\t\t\ttopic_creator = data.purpose.creator;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic) {\n\t\t\t\tconst creator = this.findRocketUser(topic_creator) || this.addRocketUser(topic_creator);\n\t\t\t\tlogger.class.debug('Setting room topic', rid, topic, creator.username);\n\t\t\t\tRocketChat.saveRoomTopic(rid, topic, creator, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tcopyPins(rid, channelMap) {\n\t\tconst response = HTTP.get('https://slack.com/api/pins.list', { params: { token: this.apiToken, channel: channelMap.id } });\n\t\tif (response && response.data && _.isArray(response.data.items) && response.data.items.length > 0) {\n\t\t\tfor (const pin of response.data.items) {\n\t\t\t\tif (pin.message) {\n\t\t\t\t\tconst user = this.findRocketUser(pin.message.user);\n\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [{\n\t\t\t\t\t\t\t'text' : this.convertSlackMsgTxtToRocketTxtFormat(pin.message.text),\n\t\t\t\t\t\t\t'author_name' : user.username,\n\t\t\t\t\t\t\t'author_icon' : getAvatarUrlFromUsername(user.username),\n\t\t\t\t\t\t\t'ts' : new Date(parseInt(pin.message.ts.split('.')[0]) * 1000)\n\t\t\t\t\t\t}]\n\t\t\t\t\t};\n\n\t\t\t\t\tRocketChat.models.Messages.setPinnedByIdAndUserId(`slack-${ pin.channel }-${ pin.message.ts.replace(/\\./g, '-') }`, msgObj.u, true, new Date(parseInt(pin.message.ts.split('.')[0]) * 1000));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\timportMessages(rid, callback) {\n\t\tlogger.class.info('importMessages: ', rid);\n\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneById(rid);\n\t\tif (rocketchat_room) {\n\t\t\tif (this.slackChannelMap[rid]) {\n\t\t\t\tthis.copySlackChannelInfo(rid, this.slackChannelMap[rid]);\n\n\t\t\t\tlogger.class.debug('Importing messages from Slack to Rocket.Chat', this.slackChannelMap[rid], rid);\n\t\t\t\tlet results = this.importFromHistory(this.slackChannelMap[rid].family, { channel: this.slackChannelMap[rid].id, oldest: 1 });\n\t\t\t\twhile (results && results.has_more) {\n\t\t\t\t\tresults = this.importFromHistory(this.slackChannelMap[rid].family, { channel: this.slackChannelMap[rid].id, oldest: results.ts });\n\t\t\t\t}\n\n\t\t\t\tlogger.class.debug('Pinning Slack channel messages to Rocket.Chat', this.slackChannelMap[rid], rid);\n\t\t\t\tthis.copyPins(rid, this.slackChannelMap[rid]);\n\n\t\t\t\treturn callback();\n\t\t\t} else {\n\t\t\t\tconst slack_room = this.findSlackChannel(rocketchat_room.name);\n\t\t\t\tif (slack_room) {\n\t\t\t\t\tthis.slackChannelMap[rid] = { id: slack_room.id, family: slack_room.id.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t\t\treturn this.importMessages(rid, callback);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.class.error('Could not find Slack room with specified name', rocketchat_room.name);\n\t\t\t\t\treturn callback(new Meteor.Error('error-slack-room-not-found', 'Could not find Slack room with specified name'));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.class.error('Could not find Rocket.Chat room with specified id', rid);\n\t\t\treturn callback(new Meteor.Error('error-invalid-room', 'Invalid room'));\n\t\t}\n\t}\n\n\tpopulateSlackChannelMap() {\n\t\tlogger.class.debug('Populating channel map');\n\t\tlet response = HTTP.get('https://slack.com/api/channels.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.channels) && response.data.channels.length > 0) {\n\t\t\tfor (const slackChannel of response.data.channels) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackChannel.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tthis.slackChannelMap[rocketchat_room._id] = { id: slackChannel.id, family: slackChannel.id.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponse = HTTP.get('https://slack.com/api/groups.list', { params: { token: this.apiToken } });\n\t\tif (response && response.data && _.isArray(response.data.groups) && response.data.groups.length > 0) {\n\t\t\tfor (const slackGroup of response.data.groups) {\n\t\t\t\tconst rocketchat_room = RocketChat.models.Rooms.findOneByName(slackGroup.name, { fields: { _id: 1 } });\n\t\t\t\tif (rocketchat_room) {\n\t\t\t\t\tthis.slackChannelMap[rocketchat_room._id] = { id: slackGroup.id, family: slackGroup.id.charAt(0) === 'C' ? 'channels' : 'groups' };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tonRocketMessageDelete(rocketMessageDeleted) {\n\t\tlogger.class.debug('onRocketMessageDelete', rocketMessageDeleted);\n\n\t\tthis.postDeleteMessageToSlack(rocketMessageDeleted);\n\t}\n\n\tonRocketSetReaction(rocketMsgID, reaction) {\n\t\tlogger.class.debug('onRocketSetReaction');\n\n\t\tif (rocketMsgID && reaction) {\n\t\t\tif (this.reactionsMap.delete(`set${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t//This was a Slack reaction, we don't need to tell Slack about it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\tif (rocketMsg) {\n\t\t\t\tconst slackChannel = this.slackChannelMap[rocketMsg.rid].id;\n\t\t\t\tconst slackTS = this.getSlackTS(rocketMsg);\n\t\t\t\tthis.postReactionAddedToSlack(reaction.replace(/:/g, ''), slackChannel, slackTS);\n\t\t\t}\n\t\t}\n\t}\n\n\tonRocketUnSetReaction(rocketMsgID, reaction) {\n\t\tlogger.class.debug('onRocketUnSetReaction');\n\n\t\tif (rocketMsgID && reaction) {\n\t\t\tif (this.reactionsMap.delete(`unset${ rocketMsgID }${ reaction }`)) {\n\t\t\t\t//This was a Slack unset reaction, we don't need to tell Slack about it\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst rocketMsg = RocketChat.models.Messages.findOneById(rocketMsgID);\n\t\t\tif (rocketMsg) {\n\t\t\t\tconst slackChannel = this.slackChannelMap[rocketMsg.rid].id;\n\t\t\t\tconst slackTS = this.getSlackTS(rocketMsg);\n\t\t\t\tthis.postReactionRemoveToSlack(reaction.replace(/:/g, ''), slackChannel, slackTS);\n\t\t\t}\n\t\t}\n\t}\n\n\tonRocketMessage(rocketMessage) {\n\t\tlogger.class.debug('onRocketMessage', rocketMessage);\n\n\t\tif (rocketMessage.editedAt) {\n\t\t\t//This is an Edit Event\n\t\t\tthis.processRocketMessageChanged(rocketMessage);\n\t\t\treturn rocketMessage;\n\t\t}\n\t\t// Ignore messages originating from Slack\n\t\tif (rocketMessage._id.indexOf('slack-') === 0) {\n\t\t\treturn rocketMessage;\n\t\t}\n\n\t\t//Probably a new message from Rocket.Chat\n\t\tconst outSlackChannels = RocketChat.settings.get('SlackBridge_Out_All') ? _.keys(this.slackChannelMap) : _.pluck(RocketChat.settings.get('SlackBridge_Out_Channels'), '_id') || [];\n\t\t//logger.class.debug('Out SlackChannels: ', outSlackChannels);\n\t\tif (outSlackChannels.indexOf(rocketMessage.rid) !== -1) {\n\t\t\tthis.postMessageToSlack(this.slackChannelMap[rocketMessage.rid], rocketMessage);\n\t\t}\n\t\treturn rocketMessage;\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.add\n\t */\n\tpostReactionAddedToSlack(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS\n\t\t\t};\n\n\t\t\tlogger.class.debug('Posting Add Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.add', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Reaction added to Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.remove\n\t */\n\tpostReactionRemoveToSlack(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS\n\t\t\t};\n\n\t\t\tlogger.class.debug('Posting Remove Reaction to Slack');\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/reactions.remove', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Reaction removed from Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tpostDeleteMessageToSlack(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tts: this.getSlackTS(rocketMessage),\n\t\t\t\tchannel: this.slackChannelMap[rocketMessage.rid].id,\n\t\t\t\tas_user: true\n\t\t\t};\n\n\t\t\tlogger.class.debug('Post Delete Message to Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.delete', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Message deleted on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tpostMessageToSlack(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tlet iconUrl = getAvatarUrlFromUsername(rocketMessage.u && rocketMessage.u.username);\n\t\t\tif (iconUrl) {\n\t\t\t\ticonUrl = Meteor.absoluteUrl().replace(/\\/$/, '') + iconUrl;\n\t\t\t}\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\tusername: rocketMessage.u && rocketMessage.u.username,\n\t\t\t\ticon_url: iconUrl,\n\t\t\t\tlink_names: 1\n\t\t\t};\n\t\t\tlogger.class.debug('Post Message To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.postMessage', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.message && postResult.data.message.bot_id && postResult.data.message.ts) {\n\t\t\t\tRocketChat.models.Messages.setSlackBotIdAndSlackTs(rocketMessage._id, postResult.data.message.bot_id, postResult.data.message.ts);\n\t\t\t\tlogger.class.debug(`RocketMsgID=${ rocketMessage._id } SlackMsgID=${ postResult.data.message.ts } SlackBotID=${ postResult.data.message.bot_id }`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/chat.update\n\t */\n\tpostMessageUpdateToSlack(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tconst data = {\n\t\t\t\ttoken: this.apiToken,\n\t\t\t\tts: this.getSlackTS(rocketMessage),\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tas_user: true\n\t\t\t};\n\t\t\tlogger.class.debug('Post UpdateMessage To Slack', data);\n\t\t\tconst postResult = HTTP.post('https://slack.com/api/chat.update', { params: data });\n\t\t\tif (postResult.statusCode === 200 && postResult.data && postResult.data.ok === true) {\n\t\t\t\tlogger.class.debug('Message updated on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessRocketMessageChanged(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tif (rocketMessage.updatedBySlack) {\n\t\t\t\t//We have already processed this\n\t\t\t\tdelete rocketMessage.updatedBySlack;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//This was a change from Rocket.Chat\n\t\t\tconst slackChannel = this.slackChannelMap[rocketMessage.rid];\n\t\t\tthis.postMessageUpdateToSlack(slackChannel, rocketMessage);\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_deleted\n\t */\n\tprocessSlackMessageDeleted(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst rocketChannel = this.getRocketChannel(slackMessage);\n\t\t\tconst rocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\n\t\t\tif (rocketChannel && rocketUser) {\n\t\t\t\t//Find the Rocket message to delete\n\t\t\t\tlet rocketMsgObj = RocketChat.models.Messages\n\t\t\t\t\t.findOneBySlackBotIdAndSlackTs(slackMessage.previous_message.bot_id, slackMessage.previous_message.ts);\n\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\t//Must have been a Slack originated msg\n\t\t\t\t\tconst _id = this.createRocketID(slackMessage.channel, slackMessage.previous_message.ts);\n\t\t\t\t\trocketMsgObj = RocketChat.models.Messages.findOneById(_id);\n\t\t\t\t}\n\n\t\t\t\tif (rocketMsgObj) {\n\t\t\t\t\tRocketChat.deleteMessage(rocketMsgObj, rocketUser);\n\t\t\t\t\tlogger.class.debug('Rocket message deleted by Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_changed\n\t */\n\tprocessSlackMessageChanged(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst currentMsg = RocketChat.models.Messages.findOneById(this.createRocketID(slackMessage.channel, slackMessage.message.ts));\n\n\t\t\t//Only process this change, if its an actual update (not just Slack repeating back our Rocket original change)\n\t\t\tif (currentMsg && (slackMessage.message.text !== currentMsg.msg)) {\n\t\t\t\tconst rocketChannel = this.getRocketChannel(slackMessage);\n\t\t\t\tconst rocketUser = slackMessage.previous_message.user ? this.findRocketUser(slackMessage.previous_message.user) || this.addRocketUser(slackMessage.previous_message.user) : null;\n\n\t\t\t\tconst rocketMsgObj = {\n\t\t\t\t\t//@TODO _id\n\t\t\t\t\t_id: this.createRocketID(slackMessage.channel, slackMessage.previous_message.ts),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tmsg: this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.message.text),\n\t\t\t\t\tupdatedBySlack: true\t//We don't want to notify slack about this change since Slack initiated it\n\t\t\t\t};\n\n\t\t\t\tRocketChat.updateMessage(rocketMsgObj, rocketUser);\n\t\t\t\tlogger.class.debug('Rocket message updated by Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t This method will get refactored and broken down into single responsibilities\n\t */\n\tprocessSlackNewMessage(slackMessage, isImporting) {\n\t\tconst rocketChannel = this.getRocketChannel(slackMessage);\n\t\tlet rocketUser = null;\n\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\trocketUser = RocketChat.models.Users.findOneById('rocket.cat', { fields: { username: 1 } });\n\t\t} else {\n\t\t\trocketUser = slackMessage.user ? this.findRocketUser(slackMessage.user) || this.addRocketUser(slackMessage.user) : null;\n\t\t}\n\t\tif (rocketChannel && rocketUser) {\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000)\n\t\t\t};\n\t\t\tif (isImporting) {\n\t\t\t\tmsgDataDefaults['imported'] = 'slackbridge';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tthis.createAndSaveRocketMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, isImporting);\n\t\t\t} catch (e) {\n\t\t\t\t// http://www.mongodb.org/about/contributors/error-codes/\n\t\t\t\t// 11000 == duplicate key error\n\t\t\t\tif (e.name === 'MongoError' && e.code === 11000) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the Slack TS from a Rocket msg that originated from Slack\n\t * @param rocketMsg\n\t * @returns Slack TS or undefined if not a message that originated from slack\n\t * @private\n\t */\n\tgetSlackTS(rocketMsg) {\n\t\t//slack-G3KJGGE15-1483081061-000169\n\t\tlet slackTS;\n\t\tlet index = rocketMsg._id.indexOf('slack-');\n\t\tif (index === 0) {\n\t\t\t//This is a msg that originated from Slack\n\t\t\tslackTS = rocketMsg._id.substr(6, rocketMsg._id.length);\n\t\t\tindex = slackTS.indexOf('-');\n\t\t\tslackTS = slackTS.substr(index+1, slackTS.length);\n\t\t\tslackTS = slackTS.replace('-', '.');\n\t\t} else {\n\t\t\t//This probably originated as a Rocket msg, but has been sent to Slack\n\t\t\tslackTS = rocketMsg.slackTs;\n\t\t}\n\n\t\treturn slackTS;\n\t}\n\n\tgetRocketChannel(slackMessage) {\n\t\treturn slackMessage.channel ? this.findRocketChannel(slackMessage.channel) || this.addRocketChannel(slackMessage.channel) : null;\n\t}\n\n\tgetRocketUser(slackUser) {\n\t\treturn slackUser ? this.findRocketUser(slackUser) || this.addRocketUser(slackUser) : null;\n\t}\n\n\tcreateRocketID(slackChannel, ts) {\n\t\treturn `slack-${ slackChannel }-${ ts.replace(/\\./g, '-') }`;\n\t}\n\n}\n\nRocketChat.SlackBridge = new SlackBridge;\n","/* globals msgStream */\nfunction SlackBridgeImport(command, params, item) {\n\tif (command !== 'slackbridge-import' || !Match.test(params, String)) {\n\t\treturn;\n\t}\n\n\tconst room = RocketChat.models.Rooms.findOneById(item.rid);\n\tconst channel = room.name;\n\tconst user = Meteor.users.findOne(Meteor.userId());\n\n\tmsgStream.emit(item.rid, {\n\t\t_id: Random.id(),\n\t\trid: item.rid,\n\t\tu: { username: 'rocket.cat' },\n\t\tts: new Date(),\n\t\tmsg: TAPi18n.__('SlackBridge_start', {\n\t\t\tpostProcess: 'sprintf',\n\t\t\tsprintf: [user.username, channel]\n\t\t}, user.language)\n\t});\n\n\ttry {\n\t\tRocketChat.SlackBridge.importMessages(item.rid, error => {\n\t\t\tif (error) {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel, error.message]\n\t\t\t\t\t}, user.language)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmsgStream.emit(item.rid, {\n\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\trid: item.rid,\n\t\t\t\t\tu: { username: 'rocket.cat' },\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\tmsg: TAPi18n.__('SlackBridge_finish', {\n\t\t\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\t\t\tsprintf: [channel]\n\t\t\t\t\t}, user.language)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} catch (error) {\n\t\tmsgStream.emit(item.rid, {\n\t\t\t_id: Random.id(),\n\t\t\trid: item.rid,\n\t\t\tu: { username: 'rocket.cat' },\n\t\t\tts: new Date(),\n\t\t\tmsg: TAPi18n.__('SlackBridge_error', {\n\t\t\t\tpostProcess: 'sprintf',\n\t\t\t\tsprintf: [channel, error.message]\n\t\t\t}, user.language)\n\t\t});\n\t\tthrow error;\n\t}\n\treturn SlackBridgeImport;\n}\n\nRocketChat.slashCommands.add('slackbridge-import', SlackBridgeImport);\n"]}