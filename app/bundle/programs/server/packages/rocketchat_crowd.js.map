{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:crowd/server/crowd.js","meteor://ðŸ’»app/packages/rocketchat:crowd/server/settings.js"],"names":["logger","Logger","fallbackDefaultAccountSystem","bind","username","password","indexOf","email","info","loginRequest","user","digest","SHA256","algorithm","Accounts","_runLoginHandlers","CROWD","constructor","AtlassianCrowd","Npm","require","url","RocketChat","settings","get","urlLastChar","slice","options","crowd","base","application","name","rejectUnauthorized","crowdClient","authenticateSync","Meteor","wrapAsync","authenticate","findSync","find","pingSync","ping","checkConnection","error","auth","userResponse","displayname","active","syncDataToUser","crowdUser","id","emails","address","verified","_setRealName","users","update","$set","sync","self","models","Users","findCrowdUsers","forEach","_id","addNewUser","userQuery","findOne","stampedToken","_generateStampedLoginToken","$push","_hashStampedToken","userId","token","createUser","updateUser","registerLoginHandler","undefined","crowdPassword","interval","timeout","key","value","clearInterval","clearTimeout","setInterval","setTimeout","methods","crowd_test_connection","Error","method","authz","hasRole","message","params","startup","addGroup","enableQuery","add","type","public","i18nLabel","actionText"],"mappings":"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","file":"/packages/rocketchat_crowd.js","sourcesContent":["/* globals:CROWD:true */\n/* eslint new-cap: [2, {\"capIsNewExceptions\": [\"SHA256\"]}] */\nconst logger = new Logger('CROWD', {});\n\nfunction fallbackDefaultAccountSystem(bind, username, password) {\n\tif (typeof username === 'string') {\n\t\tif (username.indexOf('@') === -1) {\n\t\t\tusername = {username};\n\t\t} else {\n\t\t\tusername = {email: username};\n\t\t}\n\t}\n\n\tlogger.info('Fallback to default account system', username);\n\n\tconst loginRequest = {\n\t\tuser: username,\n\t\tpassword: {\n\t\t\tdigest: SHA256(password),\n\t\t\talgorithm: 'sha-256'\n\t\t}\n\t};\n\n\treturn Accounts._runLoginHandlers(bind, loginRequest);\n}\n\nconst CROWD = class CROWD {\n\tconstructor() {\n\t\tconst AtlassianCrowd = Npm.require('atlassian-crowd');\n\n\t\tlet url = RocketChat.settings.get('CROWD_URL');\n\t\tconst urlLastChar = url.slice(-1);\n\n\t\tif (urlLastChar !== '/') {\n\t\t\turl += '/';\n\t\t}\n\n\t\tthis.options = {\n\t\t\tcrowd: {\n\t\t\t\tbase: url\n\t\t\t},\n\t\t\tapplication: {\n\t\t\t\tname: RocketChat.settings.get('CROWD_APP_USERNAME'),\n\t\t\t\tpassword: RocketChat.settings.get('CROWD_APP_PASSWORD')\n\t\t\t},\n\t\t\trejectUnauthorized: RocketChat.settings.get('CROWD_Reject_Unauthorized')\n\t\t};\n\n\t\tthis.crowdClient = new AtlassianCrowd(this.options);\n\n\t\tthis.crowdClient.user.authenticateSync = Meteor.wrapAsync(this.crowdClient.user.authenticate, this);\n\t\tthis.crowdClient.user.findSync = Meteor.wrapAsync(this.crowdClient.user.find, this);\n\t\tthis.crowdClient.pingSync = Meteor.wrapAsync(this.crowdClient.ping, this);\n\t}\n\n\tcheckConnection() {\n\t\tthis.crowdClient.pingSync();\n\t}\n\n\tauthenticate(username, password) {\n\t\tif (!username || !password) {\n\t\t\tlogger.error('No username or password');\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.info('Going to crowd:', username);\n\t\tconst auth = this.crowdClient.user.authenticateSync(username, password);\n\n\t\tif (!auth) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userResponse = this.crowdClient.user.findSync(username);\n\n\t\tconst user = {\n\t\t\tdisplayname: userResponse['display-name'],\n\t\t\tusername: userResponse.name,\n\t\t\temail: userResponse.email,\n\t\t\tpassword,\n\t\t\tactive: userResponse.active\n\t\t};\n\n\t\treturn user;\n\t}\n\n\tsyncDataToUser(crowdUser, id) {\n\t\tconst user = {\n\t\t\tusername: crowdUser.username,\n\t\t\temails: [{\n\t\t\t\taddress : crowdUser.email,\n\t\t\t\tverified: true\n\t\t\t}],\n\t\t\tpassword: crowdUser.password,\n\t\t\tactive: crowdUser.active\n\t\t};\n\n\t\tif (crowdUser.displayname) {\n\t\t\tRocketChat._setRealName(id, crowdUser.displayname);\n\t\t}\n\n\t\tMeteor.users.update(id, {\n\t\t\t$set: user\n\t\t});\n\t}\n\n\tsync() {\n\t\tif (RocketChat.settings.get('CROWD_Enable') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst self = this;\n\t\tlogger.info('Sync started');\n\n\t\tconst users = RocketChat.models.Users.findCrowdUsers();\n\t\tif (users) {\n\t\t\tusers.forEach(function(user) {\n\t\t\t\tlogger.info('Syncing user', user.username);\n\t\t\t\tconst userResponse = self.crowdClient.user.findSync(user.username);\n\t\t\t\tif (userResponse) {\n\t\t\t\t\tconst crowdUser = {\n\t\t\t\t\t\tdisplayname: userResponse['display-name'],\n\t\t\t\t\t\tusername: userResponse.name,\n\t\t\t\t\t\temail: userResponse.email,\n\t\t\t\t\t\tpassword: userResponse.password,\n\t\t\t\t\t\tactive: userResponse.active\n\t\t\t\t\t};\n\n\t\t\t\t\tself.syncDataToUser(crowdUser, user._id);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\taddNewUser(crowdUser) {\n\t\tconst userQuery = {\n\t\t\tcrowd: true,\n\t\t\tusername: crowdUser.username\n\t\t};\n\n\t\t// find our existinmg user if they exist\n\t\tconst user = Meteor.users.findOne(userQuery);\n\n\t\tif (user) {\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\n\t\t\tMeteor.users.update(user._id, {\n\t\t\t\t$push: {\n\t\t\t\t\t'services.resume.loginTokens': Accounts._hashStampedToken(stampedToken)\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.syncDataToUser(crowdUser, user._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: user._id,\n\t\t\t\ttoken: stampedToken.token\n\t\t\t};\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tcrowdUser._id = Accounts.createUser(crowdUser);\n\t\t\t} catch (error) {\n\t\t\t\tlogger.info('Error creating new user for crowd user', error);\n\t\t\t}\n\n\t\t\tconst updateUser = {\n\t\t\t\tname: crowdUser.displayname,\n\t\t\t\tcrowd: true,\n\t\t\t\tactive: crowdUser.active\n\t\t\t};\n\n\t\t\tMeteor.users.update(crowdUser._id, {\n\t\t\t\t$set: updateUser\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tuserId: crowdUser._id\n\t\t};\n\t}\n};\n\nAccounts.registerLoginHandler('crowd', function(loginRequest) {\n\tif (!loginRequest.crowd) {\n\t\treturn undefined;\n\t}\n\n\tlogger.info('Init CROWD login', loginRequest.username);\n\n\tif (RocketChat.settings.get('CROWD_Enable') !== true) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\tconst crowd = new CROWD();\n\tlet user;\n\ttry {\n\t\tuser = crowd.authenticate(loginRequest.username, loginRequest.crowdPassword);\n\t} catch (error) {\n\t\tlogger.error('Crowd user not authenticated due to an error, falling back');\n\t}\n\n\tif (!user) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\treturn crowd.addNewUser(user);\n});\n\nlet interval;\nlet timeout;\n\nRocketChat.settings.get('CROWD_Sync_User_Data', function(key, value) {\n\tMeteor.clearInterval(interval);\n\tMeteor.clearTimeout(timeout);\n\n\tif (value === true) {\n\t\tconst crowd = new CROWD();\n\t\tlogger.info('Enabling CROWD user sync');\n\t\tMeteor.setInterval(crowd.sync, 1000 * 60 * 60);\n\t\tMeteor.setTimeout(function() {\n\t\t\tcrowd.sync();\n\t\t}, 1000 * 30);\n\t} else {\n\t\tlogger.info('Disabling CROWD user sync');\n\t}\n});\n\nMeteor.methods({\n\tcrowd_test_connection() {\n\t\tconst user = Meteor.user();\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'crowd_test_connection' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasRole(user._id, 'admin')) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', { method: 'crowd_test_connection' });\n\t\t}\n\n\t\tif (RocketChat.settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\tconst crowd = new CROWD();\n\n\t\ttry {\n\t\t\tcrowd.checkConnection();\n\t\t} catch (error) {\n\t\t\tlogger.error('Invalid crowd connection details, check the url and application username/password and make sure this server is allowed to speak to crowd');\n\t\t\tthrow new Meteor.Error('Invalid connection details', '', { method: 'crowd_test_connection' });\n\t\t}\n\n\t\treturn {\n\t\t\tmessage: 'Connection success',\n\t\t\tparams: []\n\t\t};\n\t}\n});\n","Meteor.startup(function() {\n\tRocketChat.settings.addGroup('AtlassianCrowd', function() {\n\t\tconst enableQuery = {_id: 'CROWD_Enable', value: true};\n\t\tthis.add('CROWD_Enable', false, { type: 'boolean', public: true, i18nLabel: 'Enabled' });\n\t\tthis.add('CROWD_URL', '', { type: 'string', enableQuery, i18nLabel: 'URL' });\n\t\tthis.add('CROWD_Reject_Unauthorized', true, { type: 'boolean', enableQuery });\n\t\tthis.add('CROWD_APP_USERNAME', '', { type: 'string', enableQuery, i18nLabel: 'Username' });\n\t\tthis.add('CROWD_APP_PASSWORD', '', { type: 'password', enableQuery, i18nLabel: 'Password' });\n\t\tthis.add('CROWD_Sync_User_Data', false, { type: 'boolean', enableQuery, i18nLabel: 'Sync_Users' });\n\t\tthis.add('CROWD_Test_Connection', 'crowd_test_connection', { type: 'action', actionText: 'Test_Connection', i18nLabel: 'Test_Connection' });\n\t});\n});\n"]}