{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-hipchat/info.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat/server/importer.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat/server/adder.js"],"names":["module","export","HipChatImporterInfo","ImporterInfo","watch","require","v","constructor","HipChatImporter","Base","ProgressStep","Selection","SelectionChannel","SelectionUser","_","default","s","moment","info","userTags","roomPrefix","usersPrefix","prepare","dataURI","sentContentType","fileName","image","RocketChatFile","dataURIParse","zip","AdmZip","Buffer","zipEntries","getEntries","tempRooms","tempUsers","tempMessages","forEach","entry","entryName","indexOf","logger","debug","isDirectory","roomName","split","updateProgress","PREPARING_CHANNELS","JSON","parse","getData","toString","rooms","room","name","slugify","item","msgGroupData","error","warn","usersName","PREPARING_USERS","users","usersId","collection","insert","importRecord","_id","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","Object","keys","channel","messagesObj","messages","date","msgs","getBSONSize","getMaxBSONSize","getBSONSafeArraysFromAnArray","splitMsg","i","messagesId","ERROR","getProgress","selectionUsers","map","user","user_id","email","is_deleted","is_bot","selectionChannels","room_id","is_archived","selectionMessages","count","USER_SELECTION","startImport","importSelection","start","Date","now","u","do_import","update","$set","c","channel_id","startedByUserId","Meteor","userId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","rocketId","push","hipchat","mention_name","rocket","username","Accounts","createUser","password","toUpperCase","call","joinDefaultChannelsSilenced","photo_url","undefined","parseInt","tz","timezone","format","setName","addCountCompleted","IMPORTING_CHANNELS","replace","existantRoom","Rooms","findOneByName","owner_user_id","returned","rid","created","IMPORTING_MESSAGES","nousers","hipchatChannel","getHipChatChannelFromName","findOneById","fields","usernames","t","message","from","getRocketUser","msgObj","msg","convertHipChatMessageToRocketChat","ts","sendMessage","isArray","console","FINISHING","DONE","e","timeTook","log","channelName","find","hipchatId","userReplace","getSelection","Importers","add"],"mappings":"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","file":"/packages/rocketchat_importer-hipchat.js","sourcesContent":["import { ImporterInfo } from 'meteor/rocketchat:importer';\n\nexport class HipChatImporterInfo extends ImporterInfo {\n\tconstructor() {\n\t\tsuper('hipchat', 'HipChat', 'application/zip');\n\t}\n}\n","import {\n\tBase,\n\tProgressStep,\n\tSelection,\n\tSelectionChannel,\n\tSelectionUser\n} from 'meteor/rocketchat:importer';\n\nimport _ from 'underscore';\nimport s from 'underscore.string';\nimport moment from 'moment';\n\nimport 'moment-timezone';\n\nexport class HipChatImporter extends Base {\n\tconstructor(info) {\n\t\tsuper(info);\n\n\t\tthis.userTags = [];\n\t\tthis.roomPrefix = 'hipchat_export/rooms/';\n\t\tthis.usersPrefix = 'hipchat_export/users/';\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\t\tconst image = RocketChatFile.dataURIParse(dataURI).image;\n\t\t// const contentType = ref.contentType;\n\t\tconst zip = new this.AdmZip(new Buffer(image, 'base64'));\n\t\tconst zipEntries = zip.getEntries();\n\t\tconst tempRooms = [];\n\t\tlet tempUsers = [];\n\t\tconst tempMessages = {};\n\n\t\tzipEntries.forEach(entry => {\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\tthis.logger.debug(`Ignoring the file: ${ entry.entryName }`);\n\t\t\t}\n\t\t\tif (entry.isDirectory) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (entry.entryName.indexOf(this.roomPrefix) > -1) {\n\t\t\t\tlet roomName = entry.entryName.split(this.roomPrefix)[1];\n\t\t\t\tif (roomName === 'list.json') {\n\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\t\tconst tempRooms = JSON.parse(entry.getData().toString()).rooms;\n\t\t\t\t\ttempRooms.forEach(room => {\n\t\t\t\t\t\troom.name = s.slugify(room.name);\n\t\t\t\t\t});\n\t\t\t\t} else if (roomName.indexOf('/') > -1) {\n\t\t\t\t\tconst item = roomName.split('/');\n\t\t\t\t\troomName = s.slugify(item[0]);\n\t\t\t\t\tconst msgGroupData = item[1].split('.')[0];\n\t\t\t\t\tif (!tempMessages[roomName]) {\n\t\t\t\t\t\ttempMessages[roomName] = {};\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn tempMessages[roomName][msgGroupData] = JSON.parse(entry.getData().toString());\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn this.logger.warn(`${ entry.entryName } is not a valid JSON file! Unable to import it.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (entry.entryName.indexOf(this.usersPrefix) > -1) {\n\t\t\t\tconst usersName = entry.entryName.split(this.usersPrefix)[1];\n\t\t\t\tif (usersName === 'list.json') {\n\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\t\treturn tempUsers = JSON.parse(entry.getData().toString()).users;\n\t\t\t\t} else {\n\t\t\t\t\treturn this.logger.warn(`Unexpected file in the ${ this.name } import: ${ entry.entryName }`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst usersId = this.collection.insert({\n\t\t\t'import': this.importRecord._id,\n\t\t\t'importer': this.name,\n\t\t\t'type': 'users',\n\t\t\t'users': tempUsers\n\t\t});\n\t\tthis.users = this.collection.findOne(usersId);\n\t\tthis.updateRecord({\n\t\t\t'count.users': tempUsers.length\n\t\t});\n\t\tthis.addCountToTotal(tempUsers.length);\n\t\tconst channelsId = this.collection.insert({\n\t\t\t'import': this.importRecord._id,\n\t\t\t'importer': this.name,\n\t\t\t'type': 'channels',\n\t\t\t'channels': tempRooms\n\t\t});\n\t\tthis.channels = this.collection.findOne(channelsId);\n\t\tthis.updateRecord({\n\t\t\t'count.channels': tempRooms.length\n\t\t});\n\t\tthis.addCountToTotal(tempRooms.length);\n\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\tlet messagesCount = 0;\n\t\tObject.keys(tempMessages).forEach(channel => {\n\t\t\tconst messagesObj = tempMessages[channel];\n\t\t\tthis.messages[channel] = this.messages[channel] || {};\n\t\t\tObject.keys(messagesObj).forEach(date => {\n\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\tthis.updateRecord({\n\t\t\t\t\t'messagesstatus': `${ channel }/${ date }`\n\t\t\t\t});\n\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\tBase.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({\n\t\t\t\t\t\t\t'import': this.importRecord._id,\n\t\t\t\t\t\t\t'importer': this.name,\n\t\t\t\t\t\t\t'type': 'messages',\n\t\t\t\t\t\t\t'name': `${ channel }/${ date }.${ i }`,\n\t\t\t\t\t\t\t'messages': splitMsg\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.messages[channel][`${ date }.${ i }`] = this.collection.findOne(messagesId);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tconst messagesId = this.collection.insert({\n\t\t\t\t\t\t'import': this.importRecord._id,\n\t\t\t\t\t\t'importer': this.name,\n\t\t\t\t\t\t'type': 'messages',\n\t\t\t\t\t\t'name': `${ channel }/${ date }`,\n\t\t\t\t\t\t'messages': msgs\n\t\t\t\t\t});\n\t\t\t\t\tthis.messages[channel][date] = this.collection.findOne(messagesId);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.updateRecord({\n\t\t\t'count.messages': messagesCount,\n\t\t\t'messagesstatus': null\n\t\t});\n\t\tthis.addCountToTotal(messagesCount);\n\t\tif (tempUsers.length === 0 || tempRooms.length === 0 || messagesCount === 0) {\n\t\t\tthis.logger.warn(`The loaded users count ${ tempUsers.length }, the loaded channels ${ tempRooms.length }, and the loaded messages ${ messagesCount }`);\n\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\treturn this.getProgress();\n\t\t}\n\t\tconst selectionUsers = tempUsers.map(function(user) {\n\t\t\treturn new SelectionUser(user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot);\n\t\t});\n\t\tconst selectionChannels = tempRooms.map(function(room) {\n\t\t\treturn new SelectionChannel(room.room_id, room.name, room.is_archived, true, false);\n\t\t});\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\t\tsuper.updateProgress(ProgressStep.USER_SELECTION);\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst start = Date.now();\n\n\t\timportSelection.users.forEach(user => {\n\t\t\tthis.users.users.forEach(u => {\n\t\t\t\tif (u.user_id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis.collection.update({_id: this.users._id}, { $set: { 'users': this.users.users } });\n\n\t\timportSelection.channels.forEach(channel =>\n\t\t\tthis.channels.channels.forEach(c => c.room_id === channel.channel_id && (c.do_import = channel.do_import))\n\t\t);\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_USERS);\n\n\t\t\ttry {\n\t\t\t\tthis.users.users.forEach(user => {\n\t\t\t\t\tif (!user.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantUser = RocketChat.models.Users.findOneByEmailAddress(user.email);\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\tuser.rocketId = existantUser._id;\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\thipchat: `@${ user.mention_name }`,\n\t\t\t\t\t\t\t\trocket: `@${ existantUser.username }`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst userId = Accounts.createUser({\n\t\t\t\t\t\t\t\temail: user.email,\n\t\t\t\t\t\t\t\tpassword: Date.now() + user.name + user.email.toUpperCase()\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tuser.rocketId = userId;\n\t\t\t\t\t\t\tthis.userTags.push({\n\t\t\t\t\t\t\t\thipchat: `@${ user.mention_name }`,\n\t\t\t\t\t\t\t\trocket: `@${ user.mention_name }`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', user.mention_name, {\n\t\t\t\t\t\t\t\t\tjoinDefaultChannelsSilenced: true\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tMeteor.call('setAvatarFromService', user.photo_url, undefined, 'url');\n\t\t\t\t\t\t\t\treturn Meteor.call('userSetUtcOffset', parseInt(moment().tz(user.timezone).format('Z').toString().split(':')[0]));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (user.name != null) {\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, user.name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (user.is_deleted) {\n\t\t\t\t\t\t\t\tMeteor.call('setUserActiveStatus', userId, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { 'users': this.users.users }});\n\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tthis.channels.channels.forEach(channel => {\n\t\t\t\t\tif (!channel.do_import) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tchannel.name = channel.name.replace(/ /g, '');\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(channel.name);\n\t\t\t\t\t\tif (existantRoom) {\n\t\t\t\t\t\t\tchannel.rocketId = existantRoom._id;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet userId = '';\n\t\t\t\t\t\t\tthis.users.users.forEach(user => {\n\t\t\t\t\t\t\t\tif (user.user_id === channel.owner_user_id) {\n\t\t\t\t\t\t\t\t\tuserId = user.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (userId === '') {\n\t\t\t\t\t\t\t\tthis.logger.warn(`Failed to find the channel creator for ${ channel.name }, setting it to the current running user.`);\n\t\t\t\t\t\t\t\tuserId = startedByUserId;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tconst returned = Meteor.call('createChannel', channel.name, []);\n\t\t\t\t\t\t\t\treturn channel.rocketId = returned.rid;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({\n\t\t\t\t\t\t\t\t_id: channel.rocketId\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\t\t\t'ts': new Date(channel.created * 1000)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { 'channels': this.channels.channels }});\n\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tconst nousers = {};\n\n\t\t\t\tObject.keys(this.messages).forEach(channel => {\n\t\t\t\t\tconst messagesObj = this.messages[channel];\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst hipchatChannel = this.getHipChatChannelFromName(channel);\n\t\t\t\t\t\tif (hipchatChannel != null ? hipchatChannel.do_import : undefined) {\n\t\t\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(hipchatChannel.rocketId, {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tusernames: 1,\n\t\t\t\t\t\t\t\t\tt: 1,\n\t\t\t\t\t\t\t\t\tname: 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tObject.keys(messagesObj).forEach(date => {\n\t\t\t\t\t\t\t\tconst msgs = messagesObj[date];\n\t\t\t\t\t\t\t\tthis.updateRecord({\n\t\t\t\t\t\t\t\t\t'messagesstatus': `${ channel }/${ date }.${ msgs.messages.length }`\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tmsgs.messages.forEach(message => {\n\t\t\t\t\t\t\t\t\tif (message.from != null) {\n\t\t\t\t\t\t\t\t\t\tconst user = this.getRocketUser(message.from.user_id);\n\t\t\t\t\t\t\t\t\t\tif (user != null) {\n\t\t\t\t\t\t\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: this.convertHipChatMessageToRocketChat(message.message),\n\t\t\t\t\t\t\t\t\t\t\t\tts: new Date(message.date),\n\t\t\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: user.username\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(user, msgObj, room, true);\n\t\t\t\t\t\t\t\t\t\t} else if (!nousers[message.from.user_id]) {\n\t\t\t\t\t\t\t\t\t\t\tnousers[message.from.user_id] = message.from;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else if (!_.isArray(message)) {\n\t\t\t\t\t\t\t\t\t\tconsole.warn('Please report the following:', message);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis.addCountCompleted(1);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tthis.logger.warn('The following did not have users:', nousers);\n\t\t\t\tsuper.updateProgress(ProgressStep.FINISHING);\n\n\t\t\t\tthis.channels.channels.forEach(channel => {\n\t\t\t\t\tif (channel.do_import && channel.is_archived) {\n\t\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\t\treturn Meteor.call('archiveRoom', channel.rocketId);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tsuper.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - start;\n\t\t\treturn this.logger.log(`Import took ${ timeTook } milliseconds.`);\n\t\t});\n\n\t\treturn this.getProgress();\n\t}\n\n\tgetHipChatChannelFromName(channelName) {\n\t\treturn this.channels.channels.find(channel => channel.name === channelName);\n\t}\n\n\tgetRocketUser(hipchatId) {\n\t\tconst user = this.users.users.find(user => user.user_id === hipchatId);\n\t\treturn user ? RocketChat.models.Users.findOneById(user.rocketId, {\n\t\t\tfields: {\n\t\t\t\tusername: 1,\n\t\t\t\tname: 1\n\t\t\t}\n\t\t}) : undefined;\n\t}\n\n\tconvertHipChatMessageToRocketChat(message) {\n\t\tif (message != null) {\n\t\t\tthis.userTags.forEach(userReplace => {\n\t\t\t\tmessage = message.replace(userReplace.hipchat, userReplace.rocket);\n\t\t\t});\n\t\t} else {\n\t\t\tmessage = '';\n\t\t}\n\t\treturn message;\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map(function(user) {\n\t\t\treturn new SelectionUser(user.user_id, user.name, user.email, user.is_deleted, false, !user.is_bot);\n\t\t});\n\t\tconst selectionChannels = this.channels.channels.map(function(room) {\n\t\t\treturn new SelectionChannel(room.room_id, room.name, room.is_archived, true, false);\n\t\t});\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, this.importRecord.count.messages);\n\t}\n}\n","import { Importers } from 'meteor/rocketchat:importer';\nimport { HipChatImporterInfo } from '../info';\nimport { HipChatImporter } from './importer';\n\nImporters.add(new HipChatImporterInfo(), HipChatImporter);\n"]}